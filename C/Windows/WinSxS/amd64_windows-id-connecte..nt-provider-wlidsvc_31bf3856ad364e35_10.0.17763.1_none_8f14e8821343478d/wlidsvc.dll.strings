 !"#$%&'()*+,-./0123
 A^_^
 A_A^_
 A_A^_^]
 A_A^A\
 A_A^A]
 A_A^A]A\_
 Account Service
 CAuthInfo::GetCachedAuthInfo failed, hr=0x%x.
 Device request error 0x%x. Request Type %hs, Request Status 0x%x
 Device sign failure 0x%x. Request Status 0x%x
 error="
 H3E H3E
 Hcl$`H
 MajorVersion="1"
 Microsoft Corporation. All rights reserved.
 MinorVersion="1">
 no attribute - %s:%x
 Operating System
 Session key sign failure 0x%x
 SessionKeyManager::ImportSessionKey
 Windows
 xmlns:cfg="http://schemas.microsoft.com/Passport/PPCRL"
 xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
 xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wssc="http://schemas.xmlsoap.org/ws/2005/02/sc" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust" xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion" xmlns:S="http://www.w3.org/2003/05/soap-envelope" xmlns:tb="http://schemas.microsoft.com/trustbridge/schema#1" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:psf="http://schemas.microsoft.com/Passport/SoapServices/SOAPFault" xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:wlid="http://schemas.microsoft.com/windlowliveid/2007/01/sts"
 xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL"
 xmlns:psf="http://schemas.microsoft.com/Passport/SoapServices/SOAPFault"
 xmlns:s="http://www.w3.org/2003/05/soap-envelope"
 xmlns:S="http://www.w3.org/2003/05/soap-envelope"
 xmlns:S="http://www.w3.org/2003/05/soap-envelope" xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" xmlns:psf="http://schemas.microsoft.com/Passport/SoapServices/SOAPFault" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
 xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"
 xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/" xmlns:psf="http://schemas.microsoft.com/Passport/SoapServices/SOAPFault" xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" xmlns:S="http://www.w3.org/2003/05/soap-envelope"
 xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/" xmlns:psf="http://schemas.microsoft.com/Passport/SoapServices/SOAPFault" xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" xmlns:S="http://www.w3.org/2003/05/soap-envelope" xmlns:lic="urn:schemas-microsoft-com:windows:store:licensing:ls"
 xmlns:SOAP="http://www.w3.org/2003/05/soap-envelope" xmlns:psf="http://schemas.microsoft.com/Passport/SoapServices/SOAPFault"
 xmlns:tb="http://schemas.microsoft.com/trustbridge/schema#1"
 xmlns:wlid="http://schemas.microsoft.com/windlowliveid/2007/01/sts"
 xmlns:wsa="http://www.w3.org/2005/08/addressing"
 xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
 xmlns:wssc="http://schemas.xmlsoap.org/ws/2005/02/sc"
 xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
 xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust"
 xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
 xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
!\$0H
!](!]
!]H!]L@
!}H!}0!>L
!cConfig.m_strProxy.IsEmpty()
!D$0H+
!deviceInfo.IsEmpty()
!E@!ED3
!E@!EDH!
!E8!E<L
!m_bInitialized
!m_fGeneratedCred
!m_pRequest->m_pIdentity->IsRequestCancelled()
!message.IsEmpty()
!pIdentity->IsRequestCancelled()
!pIdentityWrapper->IsIdentityNULL(hIdentity) && pIdentityWrapper->HasAuthToken(hIdentity)
!T$DE3
!This program cannot be run in DOS mode.
!u8E3
" IssueInstant="
" Issuer="http://schemas.microsoft.com/ws/2005/05/identity/issuer/self"
" NotOnOrAfter="
" value="
","alg":"RSA-OAEP","use":"enc"}}
","cnf":{"jwk":{"kty":"RSA","n":"
","e":"
"/></wsse:RequestedTokenReference><wssc:Nonce>
"/></wsse:SecurityTokenReference>
"]/ds:DigestValue
"<>';()
"></DigestMethod><DigestValue>
"></SignatureMethod>
"></wsp:PolicyReference>
"></wsp:PolicyReference></wst:RequestSecurityToken>
"><wst:RequestType>http://schemas.xmlsoap.org/ws/2005/02/trust/Issue</wst:RequestType><wsp:AppliesTo><wsa:EndpointReference><wsa:Address>
"><wst:RequestType>http://schemas.xmlsoap.org/ws/2005/02/trust/Issue</wst:RequestType><wsp:AppliesTo><wsa:EndpointReference><wsa:ServiceName>
"Add"
"Remove"
## Adding password to the auth request
## Sending to request WLID
##TestHook: Logon_Request_Add_Password
##TestHook: Logon_Request_WLIDSTS
##TestHook: URL-%s
#DeviceDAToken
#DeviceInfo
#devicesoftware
#GKDR
#PPAuthInfo
#RST0
#RSTS
#Timestamp
$0< uA3
%1 %2
%A, %B %c  %H %d, %Y
%d.%d.%d.%d
%d.%d.%d.%d.%d
%D9Q u
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%d)\%hs!%p: 
%hs,%hs,
%hs/ErrorSubcode
%hs: %u
'%ls' is not a valid cred type.
%ls URL: '%ls'
%ls%-d
%ls%ls
%ls\%ls
%ls\%ls\%ls
%ls_%08x_%p
%ls_%ls
%ls_%s
%s %u.%u%s
%s is %s
'%s' is not a valid cred type.
%s returned is empty!
%s returned is not a valid value
%s%c%s%c%s%c%s%c%s%c%s
%s%-d
%s%s%s%s%s%s
%s; path=/; domain=%s; secure; httponly
%s;%d
%s\%s
%s\%s\%s
%s\Logs\%s
%s_%s
%SettingsDrive%
%Y-%m-%dT%H:%M:%S
%Y-%m-%dT%H:%M:%SZ
&#38;&#35;
&#39;
&#x%04X;
&#x%06X;
&amp;
&apos;
&appid=%s
&cid=%S
&da=%hs
&dd=1
&hash=
&linkct=%S
&linkh=%d
&linkl=%d
&login=%S
&loginoptions=%s
&pl=%s
&quot;
&ru=%s
(_^][
(A^_][
(A_A^_^][
(caller: %p) 
(cbSignatureLength != 0 && cbHashValue != 0)
(D$@f
(D$@H
(D$`f
(D$0f
(D$pf
(dwFlags & (DWORD)(~SSO_GROUP_OPTION_ALL_BIT)) == 0
(null)
(pbSignature != nullptr && pbHashValue != nullptr)
(pDest != nullptr) && (m_szMem != nullptr)
(wstrVersion.IsEmpty() == false || versionTimeStamp > 0)
)CStoredIdentityTransaction::Commit
)D$@H
***(%lu characters redacted)***
*****
*/*/*/ErrorSubcode
*/*/Error/@Code
*/Error/@Code
*/ErrorSubcode
*/puid
*/ServerInfo/@ServerTime
*ppCertContext != NULL
,"attb":"
,"attk":"
,"request_nonce":"
.//cfg:Configuration
.//cfg:ConfigVersion
.//cfg:ServiceURIs
.//cfg:Settings
./cfg:AssocPDIDToLDID
./cfg:CertificateAuthorityStoreName
./cfg:DATA
./cfg:DeviceMNLen
./cfg:DevicePWDLen
./cfg:DIDCertWithAuth
./cfg:DIDDARefresh
./cfg:DIDDisabled
./cfg:DIDSignCheck
./cfg:DIDWithAuth
./cfg:LOGICAL
./cfg:MinCertValidTime
./cfg:PREFIX
./cfg:Protocol
./cfg:SITEID
./cfg:SYSTEM
.?AVbad_alloc@std@@
.?AVCAtlException@ATL@@
.?AVCPassportException@@
.?AVexception@@
.?AVResultException@wil@@
.00cfg
.9\$h
.bss$00
.bss$dk00
.bss$pr00
.bss$zz
.CRT$XCA
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.data
.data$00
.data$dk00
.data$dk00$brc
.data$pr00
.data$pr00$brc
.data$r$brc
.data$zz
.data$zz$brc
.default\Software\Microsoft\IdentityCRL
.DEFAULT\Software\Microsoft\IdentityCRL
.default\Software\Microsoft\IdentityCRL\AppData
.DEFAULT\Software\Microsoft\IdentityCRL\Environment
.devicedns.live.com
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$00
.rdata$00$brc
.rdata$brc
.rdata$T$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zz
.rdata$zz$brc
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.text
.text$di
.text$lp00WLIDSvc.dll!20_pri7
.text$mn
.text$mn$00
.text$np
.text$x
.text$yd
.text$zs
.text$zy
.text$zz
.tls$
.tls$ZZZ
.xdata
.xdata$x
/%hs/DeviceTpmKeyState
/%hs/Error/@Code
/%hs/HWPUIDFlipped
/%hs/KeyHolderLicense/lic:License
/%hs/lic:License
/%hs/LicenseKeySequence
/%hs/LicenseSignatureKeyVersion
/%hs/ServerInfo/@ServerTime
/%hs[@Success='true']
//%s[@%s='%s']/%s
//%s[@%s='%s']/%s[@%s='%s']
//*[(@name="KeyMaterial" or self::Password or self::NewPassword or self::ps:Password or self::ps:NewPassword or self::wsse:Password or self::wsse:BinarySecurityToken or self::wst:BinarySecret or self::xenc:CipherValue)]
//*[text()[normalize-space()!=""] and not(* or self::ErrorSubcode or self::ServerInfo or self::S:Text or self::S:Value or self::ps:SessionID or self::ps:DisplaySessionID or self::ps:State or self::ps:RequestTime or self::ps:ExpirationTime or self::psf:authstate or self::psf:configVersion or self::psf:reqstatus or self::psf:serverInfo or self::psf:code or self::psf:errorstatus or self::psf:text or self::psf:value or self::wsa:Address or self::wst:TokenType or self::wsu:Created or self::wsu:Expires)]
//wst:RequestSecurityTokenResponse
/OTCRequestResponse
/OTCRequestResponse/Error
/OTCRequestResponse/State
/psf:pp
/S:Envelope/S:Body
/S:Envelope/S:Body//wst:RequestSecurityTokenResponse
/S:Envelope/S:Body/ps:ApproveSessionResponse
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/DeviceTpmKeyState
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/Error/@Code
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/ErrorSubcode
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/HWPUIDFlipped
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/KeyHolderLicense/lic:License
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/lic:License
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/LicenseKeySequence
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/LicenseSignatureKeyVersion
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse/ServerInfo/@ServerTime
/S:Envelope/S:Body/ps:DeviceUpdatePropertiesResponse[@Success='true']
/S:Envelope/S:Body/ps:GetAppDataResponse
/S:Envelope/S:Body/ps:GetAppDataResponse/ps:Apps/ps:App/ps:Property
/S:Envelope/S:Body/ps:GetAppDataResponse/ServerInfo/@ServerTime
/S:Envelope/S:Body/ps:GetKeyDataResponse
/S:Envelope/S:Body/ps:GetKeyDataResponse/ps:KeyPurposes
/S:Envelope/S:Body/ps:GetKeyDataResponse/ServerInfo/@ServerTime
/S:Envelope/S:Body/ps:ListSessionsResponse/ps:NotRegistered
/S:Envelope/S:Body/ps:ListSessionsResponse/ps:Sessions
/S:Envelope/S:Body/ps:ListSessionsResponse[@Success='false']
/S:Envelope/S:Body/ps:ListSessionsResponse[@Success='true']
/S:Envelope/S:Body/ps:ManageApproverResponse
/S:Envelope/S:Body/ps:ManageApproverResponse/ps:TOTPSharedKey
/S:Envelope/S:Body/ps:ManageLoginKeyResponse
/S:Envelope/S:Body/S:Fault
/S:Envelope/S:Body/S:Fault/S:Code/S:Detail/wlid:flowurl
/S:Envelope/S:Body/S:Fault/S:Code/S:Subcode/S:Value
/S:Envelope/S:Body/xenc:EncryptedData
/S:Envelope/S:Body/xenc:EncryptedData/ds:KeyInfo/wsse:SecurityTokenReference/wsse:Reference
/S:Envelope/S:Body/xenc:EncryptedData/xenc:CipherData/xenc:CipherValue
/S:Envelope/S:Fault/psf:redirectUrl
/S:Envelope/S:Header/psf:EncryptedPP/xenc:EncryptedData
/S:Envelope/S:Header/psf:EncryptedPP/xenc:EncryptedData/ds:KeyInfo/wsse:SecurityTokenReference/wsse:Reference
/S:Envelope/S:Header/psf:EncryptedPP/xenc:EncryptedData/xenc:CipherData/xenc:CipherValue
/S:Envelope/S:Header/psf:pp
/S:Envelope/S:Header/psf:pp/psf:signChallenge
/S:Envelope/S:Header/wsse:Security/ds:Signature/ds:KeyInfo/wsse:SecurityTokenReference/wsse:Reference
/S:Envelope/S:Header/wsse:Security/ds:Signature/ds:SignatureValue
/S:Envelope/S:Header/wsse:Security/ds:Signature/ds:SignedInfo
/S:Envelope/S:Header/wsse:Security/ds:Signature/ds:SignedInfo/ds:Reference[@URI = "#
/S:Envelope/S:Header/wsse:Security/wssc:DerivedKeyToken[@wsu:Id = "
/S:Envelope/S:Header/wsse:Security/wsu:Timestamp
/WlidToken/ChallengeToken/Flags
/WlidToken/ChallengeToken/Policy
/WlidToken/Type
::AddPersistedCertificatesToDOM failed with hr = %x
::CryptExportKey failed hr = %x
::CryptExportPublicKeyInfo failed hr = %x
::CryptGenKey failed hr = %x
::CryptImportKey failed hr = %x
::CryptProtectData failed hr = %x
::DeleteCertificatesFromPersistantStore failed with hr = %x
::FreeLibrary(m_hXmlLite) failed with hr = %x
::get_documentElement failed with hr = %x
::GetDocumentElement failed with hr = %x
::LoadLibrary(xmllite.dll) failed with hr = %x
::LoadPersistedDOM failed with hr = %x
::LoadPersistedXml failed with hr = %x
::QueryCertificates failed with hr = %x
::SaveDOM failed with hr = %x
::selectSingleNode failed with hr = %x
:=t=A
; App 
; Win64
; WOW64
;\$Pr
;ALt<H
;t$@s
;t$Pr
??0exception@@QEAA@AEBQEBDH@Z
??0exception@@QEAA@AEBV0@@Z
??0exception@@QEAA@XZ
??1exception@@UEAA@XZ
??1type_info@@UEAA@XZ
?456789:;<=
?terminate@@YAXXZ
?what@exception@@UEBAPEBDXZ
@.data
@.didat
@.reloc
@<SignedInfo>
@666[
@6666666
@8;tnH
@8|$@
@8|$P
@8}gt
@8=(Z 
@84:u
@8t$@u
@A^_^
@A^_^[]
@A^_^][
@A^A\_
@A^A]A\
@A__^
@A_A\_^]
@A_A^_
@A_A^_^[
@A_A^_^]
@A_A^A\
@A_A^A\_^[]
@A_A^A]_^[]
@A_A^A]A\_^]
@FriendlyName
@InterruptNotifications::GetCacheState
@onecoreuap\ds\ext\live\identity\ntservice\svc\wlidsvc.cpp
@SUVWATAVAWH
@SUVWATH
@SUVWAVH
@SUVWH
@SVWH
@USAVH
@USVH
@USVWATAUAVAWH
@USVWATAUAVH
@USVWATAUAWH
@USVWATAVAWH
@USVWATAVH
@USVWATAWH
@USVWATH
@USVWAUAVAWH
@USVWAVAWH
@USVWAVH
@USVWAWH
@USVWH
@USWATAUAVAWH
@USWAVAWH
@USWH
@UVWATAUAVAWH
@UVWATAVH
@UVWATAWH
@UVWAVAWH
@UVWH
@UWAVH
@UWAWH
@VAWH
@VWATAVAWH
@VWAVH
[%hs(%hs)]
[%hs]
[_9*Ohr = _pIdWrapper->GetOneTimeCredential(hIdentity, IDCRL_WEBAUTH_NONE, _appID, nullptr, url, token, &unsignedToken, &timeSkew)
\$ !\$$3
\$ A;
\$ E3
\$ fD9t$`
\$ Ic
\$ UH
\$ UVWATAUAVAWH
\$ UVWAVAWH
\$ VH
\$ VWAVH
\$ WH
\$(E3
\$(H9
\$@D9c
\$@E3
\$`Hc
\$0D9d$@t
\$0E3
\$0H+
\$0Hc
\$8!\$<3
\$8D9{
\$8E3
\$8Hc
\$H!\$L3
\$h9{
\$H9s
\$h9s
\$H9s
\$hE3
\$HE3
\$hHc{
\$PA9~4vKH
\$PD9|$x
\$pE3
\$PE3
\$pE3
\$PE3
\$pE3
\$PE3
\$PHc
\$PIi
\$X!\$\3
\$X@2
\$x9t$ 
\$XD8
\$XD9{
\$XE3
\$XHc{
\Environment\
\IdentityCRL\INT
\IdentityCRL\production
\Microsoft
\Microsoft\Crypto\PCPKSP\WindowsAIK
\OneBox
\wlidsvcconfig.xml
]@D9u
]GD9}
]gD9e
]oD9}
]oD9e
]oH!]wH
__C_specific_handler
__CxxFrameHandler3
__dllonexit
_amsg_exit
_callnewh
_CxxThrowException
_difftime64
_errno
_get_errno
_gmtime64_s
_i64tow_s
_initterm
_itoa_s
_localtime64_s
_lock
_mbscmp
_mbsicmp
_mbsinc
_mbslwr_s
_mbsrchr
_mbsstr
_mbsupr_s
_mkgmtime64
_mktime64
_onexit
_purecall
_resetstkoflw
_sendHwdInfoInRequest
_sendHwdInfoInRequest == true
_sendTpmInfoInRequest == true
_set_errno
_time64
_unlock
_vscprintf
_vscwprintf
_vsnprintf
_vsnprintf_s
_vsnwprintf
_wcsicmp
_wcslwr_s
_wcstoui64
_wcsupr_s
_wtoi
_wtol
_XcptFilter
`.rdata
`A\_^[]
`A^[]
`A^_]
`A^_^
`A^_^[]
`A^_^][
`A^A\_^]
`A__^[]
`A_A\_^]
`A_A^_^]
`A_A^A\_^[]
`A_A^A]A\_^]
{ AVH
{"aud":"
{"typ":"JWT","alg":"RS256","kid":"
{00000000-0000-0000-0000-000000000000}
{0CB4A94A-6E8C-477B-88C8-A3799FC97414}
{12E984BD-5803-4D78-9EFB-BED7B9212C26}
{21709F64-3CA2-5DBB-B7EF-A0DF9ACE9F31}
{283F80E3-1849-4143-A8A5-48062C18F018}
{28520974-CE92-4F36-A219-3F255AF7E61E}
{29F3C4CF-2A74-4162-8D2A-A817E622F888}
{2b379600-b42b-4fe9-a59c-a312fb934935}
{378F5C57-F4C5-4CF6-8794-1EE28D216ED9}
{3E28FFA3-C879-4A18-A9A4-35875C40229A}
{56B26D4E-03F5-11E1-B7CD-92914824019B}
{59760330-7637-4417-8d86-1273942d5cd7}
{76FDA24A-FCF8-4EEF-A7B3-7C99C1BD3E59}
{7D629E2E-CC4C-4CC4-95B7-25C48B11C53D}
{8CC11465-DF53-4789-AC99-F7C08E1D5200}
{8FB02294-1882-41ff-9CFD-AFBFA366DA33}
{922df99b-f4c3-4b57-b70a-aa696443101a}
{9F46D608-CC47-4686-8F51-2D39C2D57323}
{A6CCBA24-AF6C-49B5-8EB6-8836FB98A8D1}
{ABB475D0-3084-47D4-A86F-CF40255A8E3A}
{AEEBBB7D-51C6-4871-9258-D8E5904DD66B}
{AFDA72BF-3409-413a-B54E-2AB8D66A7826}
{B74AF551-07E0-4F25-9EB4-1B00144C8D3F}
{CA75DFE9-25B1-4E56-B4DD-C81364EBF8F8}
{CC553C39-4B1C-43DB-94A0-3B78F751ACEF}
{D6D5A677-0872-4AB0-9442-BB792FCE85C5}
{D80D1001-5B38-49E9-9D34-EC9B84779189}
{DC15FE03-EF48-4962-A00C-DD0EC17FB09A}
{de7a018e-e34d-46b0-8313-88f78f5e1bfe}
{DF60E2DF-88AD-4526-AE21-83D130EF0F68}
{E8B2105F-3392-40C5-89FD-B6834891DA21}
{FB0DB4BF-F4B9-4253-85E3-DBFBB513F2E3}
|$ AVH
|$ E3
|$ UATAUAVAWH
|$ UH
|$":u`f9l$$uYH
|$(!|$,3
|$(H9
|$@E3
|$@Hc
|$`E3
|$`I;
|$`M;
|$0Ic_
|$hD+
|$hE3
|$hfD
|$HHc
|$hMcg
|$lD!3H
|$pE3
|$PE3
|$pE3
|$pM;
|$XD9|$P
|$XD9|$Pt
|$xE3
|$XfD
}@D9d$0
}@L;vx
}0H+}(H
}gD9}
}gD9mg}
}H!}L3
}PLco
~:E8~8
~_H!u
~8u6H
+D8!u
+L$T+
+L$XD3
<%ls>%ls</%ls>
</%s>
</Authentication>
</AuthInfo>
</AuthState><CredProperties>
</AuthToken><SessionKey>
</BinaryVersion></ClientInfo>
</Cert>
</CertInfo>
</Component>
</CreatedTime>
</CredProperties><AuthToken>
</DAToken>
</Device></DeviceQueryPropertiesRequest>
</DeviceAddResponse>
</DeviceAssociateRequest>
</DeviceCloseResponse>
</DeviceDisassociateRequest>
</DeviceInfo>
</DeviceUpdatePropertiesRequest>
</DeviceUpdatePropertiesRequest></s:Body></s:Envelope>
</DeviceUpdateResponse>
</DigestValue></Reference>
</ds:Exponent></ds:RSAKeyValue></ps:KeyValue>
</ds:Modulus><ds:Exponent>
</EnumerateDevicesRequest>
</Envelope>
</ExpiredTime>
</extProperties>
</FriendlyName>
</GetKeyDataRequest>
</KeyGenFlags>
</KeyInfo></saml:SubjectConfirmation></saml:Subject>
</KeyInfo></Signature>
</KeyName>
</Keypair>
</KeyPurposes>
</KeyValue></TPMInfo>
</Membername>
</NetworkInfo>
</NewMembername>
</NewPassword>
</OldMembername>
</Password>
</ps:%s>
</ps:Action>
</ps:AppID></ps:AppIDs></ps:GetAppDataRequest>
</ps:ApproveSessionRequest>
</ps:AuthInfo>
</ps:BinaryVersion>
</ps:BinaryVersion></ps:AuthInfo>
</ps:ChannelID>
</ps:CheckRegistration>
</ps:CID>
</ps:ClientVersion>
</ps:Cookies>
</ps:DevicePUID>
</ps:DeviceType>
</ps:HostingApp>
</ps:InlineUX>
</ps:KeyAttestationBlob>
</ps:KeyAttestationKey>
</ps:ListSessionsRequest>
</ps:ManageApproverRequest>
</ps:ManageLoginKeyRequest>
</ps:OneTimeCredentials>
</ps:PackageSID>
</ps:RequestMultipleSecurityTokens>
</ps:RequestParams>
</ps:ServerKeyIdentifier>
</ps:SessionID>
</ps:SessionState>
</ps:SessionType>
</ps:Telemetry>
</ps:UserPUID>
</ps:Users>
</ps:WindowsClientString>
</Puid>
</Reader>
</RSAKeyValue><KeyType>%d</KeyType>
</s:Body></s:Envelope>
</s:Envelope>
</S:Envelope>
</s:Header><s:Body>
</s:Header><s:Body><DeviceUpdatePropertiesRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0">
</saml:Advice>
</saml:Assertion>
</saml:AttributeStatement>
</saml:AttributeValue></saml:Attribute>
</saml:Conditions>
</ServiceTokenInfo>
</SessionKey>
</SessionKey><SessionKeyType>
</SessionKeyType>
</SignatureValue></Signature>
</SignatureValue><KeyInfo>
</SignedInfo>
</SOAP:Envelope>
</soap:Envelope>
</SystemSku>
</Ticket>
</TouchCapable>
</Type>
</Update>
</Update></DeviceUpdatePropertiesRequest>
</User>
</User></ResolveUserRequest>
</UserName><UserPUID>
</UserPUID><AuthState>
</wsa:Address></wsa:EndpointReference></wsp:AppliesTo>
</wsa:ServiceName></wsa:EndpointReference></wsp:AppliesTo><wst:Supporting><wsse:BinarySecurityToken ValueType="http://schemas.microsoft.com/Passport/SoapServices/PPCRL#PKCS10" EncodingType="wsse:Base64Binary">
</wssc:Nonce></wssc:DerivedKeyToken>
</wsse:BinarySecurityToken>
</wsse:BinarySecurityToken></wsse:Embedded></wsse:SecurityTokenReference>
</wsse:BinarySecurityToken></wst:Supporting><wsp:PolicyReference URI="
</wsse:KeyIdentifier></wsse:SecurityTokenReference>
</wsse:Password>
</wsse:Password></wsse:UsernameToken>
</wsse:Security>
</wsse:Security></s:Header><s:Body>
</wsse:SingleUseCode>
</wsse:Username>
</wsse:Username></wsse:UsernameToken>
</wsse:Username><wsse:Password>
</wsse:Username><wsse:SingleUseCode>
</wsse:UsernameHint>
</wsse:UsernameToken>
</wst:RequestSecurityToken>
</wsu:Created><wsu:Expires>
</wsu:Expires></wsu:Timestamp>
</X509Certificate>
</X509Data>
</X509SKI></X509Data>
<?xml
<?xml version="1.0" encoding="UTF-8"?><s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:wssc="http://schemas.xmlsoap.org/ws/2005/02/sc" xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust"><s:Header>
<AHcA
<AssociationType>%d</AssociationType>
<Authentication>
<AuthInfo><UserName>
<CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></CanonicalizationMethod><SignatureMethod Algorithm="
<Cert>
<CertInfo>
<ClientInfo name="IDCRL" version="1.0"><BinaryVersion>
<Component name="
<cookie name="browsercookie" cookieurl="%ls" cookiename="%ls" cookievalue="%ls" />
<CreatedTime>
<Data></Data>
<DAToken>
<DeviceAddResponse 
<DeviceAssociateRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0">
<DeviceAssociation><Device>%ls</Device><AssociationType>%d</AssociationType></DeviceAssociation>
<DeviceCloseResponse 
<DeviceDisassociateRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="3.0">
<DeviceInfo
<DeviceInfo Id="DeviceInfo">
<DeviceInfo xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL"
<DeviceQueryPropertiesRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0"><Device>
<DeviceUpdatePropertiesRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0"><Update type=
<DeviceUpdatePropertiesRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0"><Update type="update">
<DeviceUpdatePropertiesRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0"><Update type="Update">
<DeviceUpdateResponse 
<EndorsementKey>%hs</EndorsementKey>
<EnumerateDevicesRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0"><User>
<Envelope 
<ExpiredTime>
<Exponent>%hs</Exponent>
<extProperties>
<extProperty name="
<FriendlyName>
<GetKeyDataRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="1.0">      <KeyPurposes>
<HardwareChangeState>%d</HardwareChangeState>
<KeyAttestationBlob>%hs</KeyAttestationBlob>
<KeyAttestationCertChain>%hs</KeyAttestationCertChain>
<KeyGenFlags>
<KeyName>
<Keypair>
<KeyPurpose>%s</KeyPurpose>
<LicenseKeySequence>%d</LicenseKeySequence>
<local>
<Membername>
<Modulus>%hs</Modulus>
<NetworkInfo>
<NewMembername>
<NewPassword>
<OldMembername>
<Password>
<ps:%s>
<ps:Action>
<ps:ApproveSessionRequest>
<ps:AssertionFormat xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL">EId</ps:AssertionFormat>
<ps:AuthInfo xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" Id="PPAuthInfo">
<ps:AuthInfo>
<ps:AuthInfo><ps:BinaryVersion>
<ps:BinaryVersion>
<ps:ChannelID>
<ps:CheckRegistration>
<ps:CID>
<ps:ClientCapabilities>1</ps:ClientCapabilities>
<ps:ClientVersion>
<ps:ConsentFlags>1</ps:ConsentFlags>
<ps:Cookies>
<ps:DevicePUID>
<ps:DeviceType>
<ps:GetAppDataRequest xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" Id="RSTS" version="1.0"><ps:AppIDs><ps:AppID>
<ps:GetKeyDataRequest xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" Id="GKDR" version="1.0"><ps:KeyPurposes><ps:KeyPurpose>StrongCredentialKey</ps:KeyPurpose></ps:KeyPurposes></ps:GetKeyDataRequest>
<ps:HostingApp>
<ps:InlineFT>%s</ps:InlineFT>
<ps:InlineUX>
<ps:InlineUX>%hs</ps:InlineUX>
<ps:IsAdmin>1</ps:IsAdmin>
<ps:IsConnected>1</ps:IsConnected>
<ps:IsFRFS>1</ps:IsFRFS>
<ps:IsWebFlow>1</ps:IsWebFlow>
<ps:KeyAttestationBlob>
<ps:KeyAttestationKey>
<ps:KeyValue><ds:RSAKeyValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:Modulus>
<ps:LicenseInstallError>%d</ps:LicenseInstallError>
<ps:LicenseSignatureKeyVersion>%d</ps:LicenseSignatureKeyVersion>
<ps:ListSessionsRequest>
<ps:ManageApproverRequest>
<ps:ManageLoginKeyRequest
<ps:ManageLoginKeyRequest Id="KRR" version="1.0"><ps:Action>
<ps:ManageLoginKeyRequest xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL"
<ps:OneTimeCredentials xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL">
<ps:PackageSID>
<ps:RequestMultipleSecurityTokens xmlns:ps="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" Id="RSTS">
<ps:RequestParams>
<ps:ServerKeyIdentifier>
<ps:SessionID>
<ps:SessionState>
<ps:SessionType>
<ps:ShowSkipFRFS>1</ps:ShowSkipFRFS>
<ps:Telemetry>
<ps:UIVersion>1</ps:UIVersion>
<ps:UserPUID>
<ps:Users>
<ps:WindowsClientString>
<psf:ErrorData xmlns:psf="http://schemas.microsoft.com/Passport/SoapServices/SOAPFault"><psf:AuthState>0x%x</psf:AuthState><psf:AuthRequired>0x%x</psf:AuthRequired><psf:RequestStatus>0x%x</psf:RequestStatus><psf:FlowUrl>%s</psf:FlowUrl></psf:ErrorData>
<Puid>
<Reader>
<Reference URI="
<Reference>
<ReprovisionReason>%d</ReprovisionReason>
<ResolveUserRequest xmlns="http://schemas.microsoft.com/Passport/SoapServices/PPCRL" version="2.0"><User>
<s:Envelope 
<saml:Advice>
<saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion" AssertionID="
<saml:Attribute AttributeName="EmailAddress" AttributeNamespace="http://schemas.microsoft.com/ws/2005/05/identity/claims">
<saml:AttributeStatement>
<saml:AttributeValue>
<saml:Conditions 
<saml:Subject><saml:SubjectConfirmation><saml:ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:bearer</saml:ConfirmationMethod><KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
<sD9{
<ServiceTokenInfo>
<SessionKey>
<SessionKeyType>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo>
<SignatureValue>
<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
<SOAP:Envelope 
<soap:Envelope 
<StorageKeyBlob>%hs</StorageKeyBlob>
<SystemSku>
<Ticket>
<TouchCapable>
<TPMInfo><KeyValue><RSAKeyValue>
<Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"></Transform><Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></Transform></Transforms><DigestMethod Algorithm="
<Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"></Transform><Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></Transform></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></DigestMethod><DigestValue>
<Transforms><Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></Transform></Transforms><DigestMethod Algorithm="
<Transforms><Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></Transform></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></DigestMethod><DigestValue>
<Type>
<WlidToken><Version>%ws</Version><Type>%ws</Type><AuthorizationToken><Flags>%d</Flags><Ticket Type="%ws">%ws</Ticket></AuthorizationToken></WlidToken>
<wsa:Action s:mustUnderstand="1">%s</wsa:Action><wsa:To s:mustUnderstand="1">%s://%S:%d%S</wsa:To><wsa:MessageID>%I64u</wsa:MessageID>
<wsp:PolicyReference URI="
<wssc:DerivedKeyToken wsu:Id="SignKey" Algorithm="%hs"><wssc:Nonce>
<wssc:DerivedKeyToken wsu:Id="SignKey" Algorithm="%s"><wssc:Nonce>
<wssc:DerivedKeyToken wsu:Id="SignKey" Algorithm="%s"><wsse:RequestedTokenReference><wsse:KeyIdentifier ValueType="http://docs.oasis-open.org/wss/2004/XX/oasis-2004XX-wss-saml-token-profile-1.0#SAMLAssertionID"/><wsse:Reference URI="
<wsse:BinarySecurityToken EncodingType="ps:JWT" ValueType="ps:LoginKeyToken" Id="LoginKeyToken">
<wsse:BinarySecurityToken EncodingType="ps:JWT" ValueType="ps:LoginProofToken" Id="LoginProofToken" PurposeType="PURPOSE_TRANSFER_TOKEN">
<wsse:BinarySecurityToken id="DeviceDAToken" ValueType="urn:liveid:sha1device">
<wsse:BinarySecurityToken id="LoginProofToken" ValueType="ps:LoginProofToken">
<wsse:BinarySecurityToken id="UserDAToken">
<wsse:BinarySecurityToken ValueType="ps:DeviceXToken" EncodingType="ps:JWT" Id="devicesoftware">
<wsse:BinarySecurityToken ValueType="urn:liveid:device" id="DeviceDAToken">
<wsse:BinarySecurityToken ValueType="urn:liveid:sha1device" id="DeviceDAToken">
<wsse:BinarySecurityToken ValueType="urn:liveid:user" id="UserDAToken">
<wsse:LoginOption>%d</wsse:LoginOption>
<wsse:Password>
<wsse:Password>*********
<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
<wsse:Security xmlns="http://schemas.xmlsoap.org/ws/2004/04/trust">
<wsse:Security>
<wsse:SecurityTokenReference xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"><wsse:KeyIdentifier ValueType="http://docs.oasis-open.org/wss/2005/xx/oasis-2005xx-wss-soap-message-security-1.1#ThumbprintSHA1">
<wsse:SecurityTokenReference> <wsse:Embedded wsu:Id="DeviceDAToken">%hs%ls%hs</wsse:Embedded></wsse:SecurityTokenReference>
<wsse:SecurityTokenReference><wsse:Embedded wsu:Id="DeviceDAToken"><wsse:BinarySecurityToken ValueType="urn:liveid:device" id="DeviceDAToken">
<wsse:SecurityTokenReference><wsse:KeyIdentifier ValueType="ps:LoginKeyToken" EncodingType="#Base64Binary">
<wsse:SecurityTokenReference><wsse:KeyIdentifier ValueType="ps:LoginKeyToken" EncodingType="#Base64Binary">NGCNonce</wsse:KeyIdentifier></wsse:SecurityTokenReference>
<wsse:SecurityTokenReference><wsse:Reference URI="
<wsse:SecurityTokenReference><wsse:Reference URI="#SignKey"/></wsse:SecurityTokenReference>
<wsse:Username>
<wsse:Username>*********
<wsse:UsernameToken Id="user"><wsse:Username>
<wsse:UsernameToken wsu:Id="devicesoftware"><wsse:Username>
<wsse:UsernameToken wsu:Id="user"><wsse:Username>
<wsse:UsernameToken wsu:Id="user"><wsse:UsernameHint>
<wst:RequestSecurityToken Id="
<wsu:Timestamp
<wsu:Timestamp wsu:Id="Timestamp"><wsu:Created>
<wsu:Timestamp xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
<X509Certificate>
<X509Data>
<X509Data><X509SKI>
=L9o<
0000000000000000
040904B0
0A\_^][
0A^_]
0A^_^
0A^_^[]
0A^_^][
0A^A\]
0A__]
0A_A^_
0A_A^_^[
0A_A^_^]
0A_A^A\
0A_A^A\_^
0A_A^A\_^][
0A_A^A]A\]
0A_A^A]A\_
0A_A^A]A\_^]
0onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\autoproxyinfo.h
0x%08X
0x%x.
1.2.840.113549.1.1.5
1.2.840.113549.1.9.5
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
2.5.4.3
3v6H+
4,D+y
6666666[
7vbkQ
7vbkQrc
7vbkQsc
7vbkQtc
7vbkQvc
7vbkQxc
7vbRich
7wbI5vbkQwc
8"u,H
8\$`u
8_^[]
8A^_^[
8A_A^A]A\_^][
9\$dvXH
9\$lt
9\$Pt
9\$pt
9\$xt
9_Dv^L
9_DvzL
9}@t~3
9}@t8L
97v&H
9C`u5H
9D$Dv
9k8v.H
9t$`t
9t$0|
9t$4v
9t$Tv
9u vQH
A I;@(t
A!C !D$ !D$$3
A;~4r
A;NHr
A;VHs
A\_^[]
A]A\_^]
A^_^[
A^_^[]
A^A\]
A^A\_^[]
A^A\_^]
A^A]]
A^A]_^]
A^A]A\_]
A^A]A\_^[]
A__^[]
A_A\]
A_A\_^[]
A_A\_^]
A_A]]
A_A]A\_]
A_A]A\_^[]
A_A^]
A_A^_
A_A^_[]
A_A^_^[]
A_A^_^]
A_A^A\
A_A^A\_]
A_A^A\_^
A_A^A\_^[]
A_A^A]
A_A^A]_]
A_A^A]_^
A_A^A]_^[]
A_A^A]A\]
A_A^A]A\^
A_A^A]A\_
A_A^A]A\_[
A_A^A]A\_[]
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
A<S:Envelope 
A8tPH
abcdefghijklmnopqrstuvqxyz
abcdefghijklmnopqrstuvqxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^*()-_=+;:,./?`~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
AccessCheck
accessList.AddAllowedAce(Sids::Admins(), KEY_ALL_ACCESS, OBJECT_INHERIT_ACE | CONTAINER_INHERIT_ACE)
accessList.AddAllowedAce(Sids::System(), KEY_ALL_ACCESS, OBJECT_INHERIT_ACE | CONTAINER_INHERIT_ACE)
accessList.AddAllowedAce(userSid, KEY_READ | DELETE, OBJECT_INHERIT_ACE | CONTAINER_INHERIT_ACE)
Account state changed: strongAssociationBitFlipped=%s InterruptCode=0x%x cachedState=0x%x IsRootLevelInterrupt=%d cachedRootLevelInterrupt=%d
AccountDomain is not BSTR type, type: %d
AccountDomainPolicy is not BSTR type, type: %d
Accounts
AccountsCount
AccountSettingsUrl
AccountType
AcquireProvisioningMutex( false, 0, mutexAcquired, attemptProvisioning)
AcquireSRWLockExclusive
AcquireSRWLockShared
AcquireTokens
Acquiring caller nt token failed 0x%x.
ActivityError
ActivityIntermediateStop
ActivityStoppedAutomatically
Actual Remaining TTL: '%d' seconds.
AddAccessAllowedAce
AddAccessAllowedAce failed with hr = 0x%x
AddAce
AddAndGetDeviceIdentity failed with hr=0x%x
AddCertificateAuthority
AddCertificateAuthority failed with hr=0x%x
AddCertificateToIDCRLStore failed with hr=0x%x
AddCustomHTTPHeaders failed 0x%x.
AddDeviceAssociationData
AddDeviceInfoToCredMan failed: hr = 0x%x
Adding a key material for purpose: '%hs', version='%hs'
Adding a new key for purpose: '%hs', version='%hs'
Addresses
advapi32.dll
AFamilyNotifications::GetUserSid
aHash.SetCount(ulHashSizeBytes)
Ahr = pIdentity->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pSystemDeviceId))
Algorithm
AllExtendedProperties
AllocateAndInitializeSid
AllocateAndInitializeSid failed with hr = 0x%x
Allow application %ls retry. Negative cache was skipped
AllowMicrosoftAccountSignInAssistant
Already done, skip.
Aonecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\deviceidstore.h
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l2-1-2.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-libraryloader-l1-2-1.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-localization-obsolete-l1-2-0.dll
API-MS-Win-Core-LocalRegistry-L1-1-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l2-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-shlwapi-obsolete-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-string-l2-1-0.dll
api-ms-win-core-string-obsolete-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-version-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-credentials-l1-1-0.dll
api-ms-win-security-lsalookup-l1-1-2.dll
api-ms-win-security-lsalookup-l2-1-0.dll
api-ms-win-security-provider-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-service-core-l1-1-0.dll
api-ms-win-service-management-l1-1-0.dll
api-ms-win-service-management-l2-1-0.dll
api-ms-win-shell-shellfolders-l1-1-0.dll
api-ms-win-stateseparation-helpers-l1-1-0.dll
ApiSetQueryApiSetPresence
App GUID: %s
App Id is required for disassociation.
App Id is required for ProvisionDeviceId.
App SID: %s
Appended market, URL is now: '%ls'
AppendInlineUrlContextDataInternal
AppGuid
AppId
AppIdList
Application
Application %ls blocked by negative cache. Elapsed interval = %I64u seconds, FailureCount = %d, ErrorCode=0x%x
Application %ls skipped negative cache; Elapsed interval %I64u seconds; FailureCount = %d
Approve
ApproveSession
ApproveSessionFailure
ApproveSessionRequest::BuildApproveSessionNonceRequest
ApproveSessionRequest::BuildApproveSessionRequest
ApproveSessionRequest::ParseApproveSessionNonceResponse
ApproveSessionRequest::ParseApproveSessionResponse
ApproveUSID
AppsReadAccess
Aquiring caller nt token failed 0x%x.
AssertFlags
AssignIdentityProperty
AssociatDeviceToApp failed hr=0x%x
AssociateCert failed hr = %x
AssociateCert: failed to base64decode %s
AssociateCert: failed to CertCreateCertificateContext %s
AssociateCert: failed to CertCreateCertificateContext 0x%X
Associated
AssociatedCount
AssociateDeviceToApp::Adding device %ls to sid %ls and app %ls. Valid Device Id is %ls
AssociateDeviceToUserHelper
AssociatedForStrongAuth
AssociateSystemDeviceToConnectedUser
AssociateSystemDeviceToConnectedUserInternal
ATAVAWH
Attempt to delete cached credentials for app %s resulted in nothing to do.
AttemptProvisioning
Attributes
AUAVAWH
Auth request failed with error = 0x%x
Auth token is empty.
Auth token is unavailable.
AuthInfo/AuthState
AuthInfo/AuthState node not found in auth info xml. 0x%x.
AuthInfo/AuthToken
AuthInfo/AuthToken node not found in auth info xml. 0x%x.
AuthInfo/CreatedTime
AuthInfo/CredProperties
AuthInfo/ExpiredTime
AuthInfo/SessionKey
AuthInfo/SessionKey node not found in auth info xml. 0x%x.
AuthInfo/SessionKeyType
AuthInfo/SessionKeyType node not found in auth info xml. 0x%x.
AuthInfo/UserName
AuthInfo/UserName node not found in auth info xml. 0x%x.
AuthInfo/UserPUID
AuthInfoBlob is too large
AuthInfoBlob is too large.
AuthMembername
AuthRequest
AuthUrl
autoRevert.Revert(TRUE)
B H;A(t
B(I;@(u
B842u
bad allocation
Bad cert map index format: %s.
Bad certificate, skip persist.
Bad cred info. Can not extract elements from xml.
Bad cred info. Process attributes error.
Bad targetname format: %ls
BadCachedPassword
Base 64 decode failed with hr=0x%x
Base64 decrypted Header:%hs
Base64 decrypted RSTR:%hs
Base64Decode failed (0x%x).
Base64Decode failed for the thumbprint. hr=0x%x.
Base64Decode failed, size: %d.
Base64Encode Failed hr = 0x%08X
Base64Encode failed with hr=0x%x
Base64Encode failed, size: %d.
Base64Encode failed, size: %d. hr = %x
Base64Encode for session key: failed hr = %x
Base64Encode for session key: failed hr = 0x%x
bb7vbkQuc
Bcp47Langs.dll
bcrypt.dll
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDecrypt
BCryptDestroyHash
BCryptDestroyKey
BCryptFinishHash
BCryptGenerateSymmetricKey
BCryptGenRandom
BCryptGetProperty
BCryptHashData
BCryptKeyDerivation
BCryptOpenAlgorithmProvider
BCryptSetProperty
BinarySecurityToken
BinarySecurityToken get_text failed (0x%x).
Blocked App ID: %s
Blocked on Empty App ID
BoundTime
BoundToHardware 
bpSessionKey.GetLength() > 4 * sizeof(DWORD)
bstrSessionSecret.Length() > 0
Build certificate from cache failed, hr = 0x%x
Build certificate from cache: StoreToken failed, hr = 0x%x
BuildCertRST failed (0x%x).
BuildCertToken
BuildCertToken failed with hr=0x%x
bver=
BypassCertRevocationCheck
C@D9x
C84<u
C8D9x
C9fD97u-
Cached
cacheKey
CAddCredentialRequest::BuildRequest
callContext
CallContext:[%hs] 
Caller doesn't have Admin permission, caller is (%#x:%#x)
Caller doesn't have Admin permission, can't get caller's id 0x%x
calloc
Can not associate keypair with persisted cert: hr = 0x%x.
Can not generate map index.
Can not import persisted keypair: hr = 0x%x.
Can not initialize crypt provider.
Can not persist certificate: hr = 0x%x.
CancelIPChangeNotify
CancelMibChangeNotify2
Cannot cleare user ext properties hr=0x%x
Cannot delete stored CAW cookie hr=0x%x
Cannot delete stored credentials hr=0x%x
Cannot find user with CID: %ls.
Cannot remove linked user creds hr=0x%x
Cannot remove user persisted service tokens hr=0x%x
Cannot remove user persisted TOTP Shared Key hr=0x%x
Cannot remove user presisted certificates hr=0x%x
CanStopService
Can't get device certificate
Can't get Xml element from Xml Node
CAppConfigSettings::SetOptions
CAppIdDeviceMap::UpdateAppDeviceAssociation
CAppIdDeviceMap::UpdateValidDeviceIDKey
Caught exception in FreeObject(), hr = 0x%x.
CAuthInfo.Pack: failed hr = 0x%x
CAuthInfo.WriteDeviceToCache: failed hr = 0x%x
CAuthInfo::DecryptSystemContextCredentials
CAuthInfo::DecryptSystemContextString
CAuthInfo::EncryptCredentialsInSystemContext
CAuthInfo::EncryptStringInSystemContext
CAuthInfo::GetAuthTokenBlob
CAuthInfo::GetCachedAuthInfo
CAuthInfo::GetCachedAuthInfo failed with hr = 0x%x, trying to continue
CAuthInfo::GetCachedAuthInfo failed, hr = 0x%x.
CAuthInfo::GetCachedAuthInfoEx
CAuthInfo::GetSessionKeyType
CAuthInfo::GetUserTargetName
CAuthInfo::GetVirtualAppTargetName
CAuthInfo::HasPersistedUserName
CAuthInfo::Pack
CAuthInfo::RemoveCachedAuthInfo
CAuthInfo::Unpack
CAuthInfo::Unpack failed, hr = 0x%x
CAuthInfo::WriteToCache
CAuthInfo::WriteToCache failed 0x=%x.
CAuthRequest::GetClientCert
CAuthRequest::GetEncryptedSessionKey
CAuthRequest::GetRequestAuthToken
CAuthRequest::GetRequestEIDAuthToken
CAuthRequest::ParseResponse
CAuthRequest::ShouldResendRequest
CAuthRequest::ValidateAndCopyRequests
CAuthRequest::VSig_Decrypt_GetRSTR
CAutoImpersonateClient::GetCallerProcessID
CAutoImpersonateClient::GetLogonId
CAutoImpersonateClient::GetSessionId
CAutoImpersonateClient::GetTokenSid
CAutoImpersonateClient::GetTokenUser
CAutoImpersonateClient::ImpersonateClient
CAutoImpersonateClient::IsImpersonatingSystem
CAutoRevertToSelf::Revert
cbLicenseBlobSize != 0
CCertificateInfo::Pack
CCertificateInfo::RemovePersistedCertificates
CCertificateInfo::RemovePersistedFileCertificates
CCertificateInfo::RetrievePersistedCertificates
CCertificateInfo::RetrievePersistedCertificatesHelper
CCertificateInfo::RetrievePersistedFileCertificates
CCertificateInfo::UnPack
CCertificateInfo::WriteToCache
CCertManager::BuildCertFromCache
CCertManager::CreatePKCS10Base64
CCertManager::DeLinkCertObject
CCertManager::GenerateMapIndex
CCertManager::GetCert
CCertManager::GetServiceName
CCertManager::PersistCert
CCertManager::PutCert
CCertObject::AssociateCert
CCertObject::BuildPKCS10Base64FromCache
CCertObject::CheckCertTTL
CCertObject::CreatePKCS10Base64
cchBuffer == ATL::EscapeXML(m_wstrToken, m_wstrToken.GetLength(), pszBuffer, cchBuffer )
cchBuffer > 0
CClientConfigDataCacheManager::AddCertificateToIDCRLStoreNoLock
CClientConfigDataCacheManager::CheckConnection
CClientConfigDataCacheManager::DeleteAllCertificatesFromCertStoreNoLock
CClientConfigDataCacheManager::GenerateUserAgentString
CClientConfigDataCacheManager::GetIssuerCertificate
CClientConfigDataCacheManager::GetServiceURI
CClientConfigDataCacheManager::Initialize
CClientConfigDataCacheManager::InitializeDownloadMgr
CClientConfigDataCacheManager::IsDeviceKeyBindingEnabled
CClientConfigDataCacheManager::IsNgcKeyAttestationEnabled
CClientConfigDataCacheManager::LoadClockSkew
CClientConfigDataCacheManager::ReadConfigData
CClientConfigDataCacheManager::ReadRegConfigURL
CClientConfigDataCacheManager::SaveClockSkew
CClientConfigDataCacheManager::TriggerNewFilesDownload
CClientConfigDataCacheManager::Uninitialize
CClientConfigDataCacheManager::UpdateRegistryWithLoginUrl
cConfig.m_dwAccessType == WINHTTP_ACCESS_TYPE_NAMED_PROXY
CCRLConfig::FillRegConfigData
CCRLConfig::GetConfigVersion
CCRLConfig::LoadServiceURIs
CCRLConfig::ParseDIDCOMMetaData
CCRLConfig::ParseDIDCOMMetaDataHelper
CCRLConfig::ParseDIDConfigBoolean
CCRLConfig::ParseDIDConfigLong
CCRLConfig::SavePasswordPolicyToRegistry
CCryptSHA1Hash AddData failed with 0x%x
CCryptSHA1Hash GetSize failed with 0x%x
CCryptSHA1Hash initialize failed with 0x%x
CDeviceAuthRequest::GetRequestAuthToken
CDeviceAuthRequest::GetSystemDeviceOneTimeCredential
CDeviceAuthRequest::ValidateAndCopyRequests
CDeviceAuthRequest::VSig_Decrypt_GetRSTR
CDeviceAuthRequest2::ExtractSessionKey
CDeviceAuthRequest2::GetRequestAuthToken
CDeviceAuthRequest2::GetSystemDeviceIdentifier
CDeviceAuthRequest2::ParseResponse
CDeviceAuthRequest2::SignRequest
CDeviceIdentityBase::Authenticate
CDeviceIdentityBase::BindDeviceToHardware
CDeviceIdentityBase::CreateNewDeviceIdentity
CDeviceIdentityBase::CreateNewDeviceIdentity Failed hr = %x
CDeviceIdentityBase::Delete
CDeviceIdentityBase::GetDeviceCert
CDeviceIdentityBase::GetDeviceIdentity
CDeviceIdentityBase::GetDeviceIdentity Failed hr = 0x%x
CDeviceIdentityBase::GetDeviceInfo
CDeviceIdentityBase::GetValidDeviceIdentity
CDeviceIdentityBase::GetValidDeviceIdentity Failed to get valid Device Identity hr=%x.
CDeviceIdentityBase::InitHandle
CDeviceIdentityBase::InitializeProtocol
CDeviceIdentityBase::PersistCredential
CDeviceIdentityBase::Provision
CDeviceIdentityBase::UpdateCredential
CDeviceIdentityBase::UpdateDeviceLicenseInfo
CDeviceIdentityMap::AssociatDeviceToApp
CDeviceIdentityMap::ClearAppIdDeviceMap
CDeviceIdentityMap::DisassociateDeviceToApp
CDeviceIdentityMap::GetAppIdDeviceMap
CDeviceIdentityMap::GetAssociatedDeviceName
CDeviceIdentityMap::GetValidDeviceIDKey
CDeviceIdentityMap::UpdateAppId
CDeviceIdentityMap::UpdateValidDeviceIDKey
CDeviceServiceRequest::CopyDAFromDefaultIdentity
CDeviceServiceRequest::ParseResponse
CDeviceServiceRequest::ValidateAndCopyRequests
CDeviceUserAssociation::BuildRequest
CDeviceUserAssociation::GetServiceEndpoint
CDeviceUserAssociation::InitializeDeviceRequest
CDeviceUserAssociation::ParseResponse
CEnumDevicesRequest::GetResponse
CEnumDevicesRequest::Initialize
Cert info: %ls
Cert Map Index: %s
Cert map returns null cert object.
CertAddCertificateContextToStore
CertAddCertificateContextToStore failed with hr=0x%x
CertCloseStore
CertCompareCertificate
CertCreateCertificateContext
CertCreateCertificateContext failed with hr=0x%x
CertDeleteCertificateFromStore
CertDeleteCertificateFromStore failed with hr=0x%x
CertDuplicateCertificateContext
CertDuplicateCertificateContext failed with hr=0x%x
CertEnumCertificatesInStore
CertFindCertificateInStore
CertFindCertificateInStore failed with hr=0x%x
CertFreeCertificateChain
CertFreeCertificateContext
CertGetCertificateChain
CertGetCertificateChain failed with hr=0x%x
CertGetCertificateContextProperty
CertGetCertificateContextProperty failed with hr=0x%x
CertGetCertificateContextProperty failed. 0x%x.
CertGetIssuerCertificateFromStore
CertGetIssuerCertificateFromStore failed to get issuer from hCertStore=0x%p certificate with hr=0x%x
CertGetIssuerCertificateFromStore. Certificate failed the CERT_STORE_SIGNATURE_FLAG check. Trying next cert...
CertGetNameStringA
CertGetNameStringW
CertGetSKI
CertGetSubjectName
CertHash
Certificate
Certificate is expired
certificate token is null.
CertInfo/Cert
CertInfo/ExpiredTime
CertInfo/KeyGenFlags
CertInfo/Keypair
CertOpenStore
CertOpenStore failed with hr=0x%x
CertSetCertificateContextProperty
CertSetCertificateContextProperty failed with hr=0x%x
CertThumb
CertThumbprint
CertVerifySubjectCertificateContext
CertVerifySubjectCertificateContext. Certificate failed the CERT_STORE_TIME_VALIDITY_FLAG check. 0x%x. Trying next cert..
CExternalMemoryManager: Allocated %Iu bytes at 0x%p.
CExternalMemoryManager: Freeing memory at 0x%p.
CExternalMemoryManager: Tried to free 0x%p, which is not valid PPCRL memory.
CExternalMemoryManager: Warning, memory block at 0x%p left to Uninitialize.
-cfg 
cfg:AccountDomain
cfg:AccountPolicy
cfg:AddressResolutionTTL
cfg:Certificate
cfg:CertificateAuthority
cfg:ClientTimeOutForRpcCallsNoNetwork
cfg:ClientTimeoutForRpcCallsWithNetwork
cfg:ClientTimeoutForUI
cfg:ConfigServerSslURI
cfg:ConnectAccountPolicy
cfg:ConnectTimeout
cfg:CookieP3PHeader
cfg:DeviceDNSSuffix
cfg:DeviceProvisioningFailureThreshold
cfg:DIDCOMMetaData
cfg:DisableSSO
cfg:EnableBadPasswordCache
cfg:EnableServerPasswordChange
cfg:InterruptResolutionDomain
cfg:LivesspMaxTokenSize
cfg:MinPasswordCharacterGroups
cfg:MinPasswordLength
cfg:NegativeCacheFlags
cfg:NegativeCacheIntervalMultiplierForPersistentFailures
cfg:NegativeCacheIntervalSeconds
cfg:NegativeCacheMaxRequests
cfg:PasswordReset
cfg:ReceiveTimeout
cfg:RemeberBadProxyTimeSpan
cfg:ResolveTimeout
cfg:RPCIdleStopTimeout
cfg:SendTimeout
cfg:StrongAuthPolicy
cfg:ThrottleFlags
cfg:ThrottleHWBindingMaxRequests
cfg:ThrottleHWUpdateMaxRequests
cfg:ThrottleHWUpdateOutOfToleranceMaxRequests
cfg:ThrottleMaxRequests
cfg:ThrottleTotalIntervalSeconds
cfg:ThrottleTpmBindingMaxRequests
cfg:UserTileRetryOnFailureInterval
cfg:UserTileUpdateInterval
CGetUserKeyDataRequest::AddPurpose
CGetUserKeyDataRequest::BuildRequest
CGetUserKeyDataRequest::ParseResponse
CH;\$(
CH;\$8
ChainingMode
ChainingModeCBC
Changed Host Name from %ls to: %ls.
ChangeServiceConfigW
ChangeType failed for AddressResolutionTTL
ChangeType failed for ClientTimeOutForRpcCallsNoNetwork
ChangeType failed for ClientTimeoutForRpcCallsWithNetwork
ChangeType failed for ClientTimeoutForUI
ChangeType failed for ConnectTimeout
ChangeType failed for DisableSSO
ChangeType failed for EnableBadPasswordCache
ChangeType failed for EnableServerPasswordChange
ChangeType failed for LivesspMaxTokenSize
ChangeType failed for MinPasswordCharacterGroups
ChangeType failed for MinPasswordLength
ChangeType failed for ReceiveTimeout
ChangeType failed for RemeberBadProxyTimeSpan
ChangeType failed for ResolveTimeout
ChangeType failed for SendTimeout
ChangeType failed for UserTileRetryOnFailureInterval
ChangeType failed for UserTileUpdateInterval
CHardwareDeviceRequest::GetCredentials
CHardwareDeviceRequest::GetHardwareInfo
CHardwareDeviceRequest::GetTpmInfo
CharLowerBuffW
CheckAdminPermission
CheckCertTTL failed with 0x%x.
CheckCertTTL returned 0x%x.
ChildFlags
ChunkAndWriteProofOfPossessionTokenCacheEntry
CID is not set for linked service token request. hr=0x%x
CID is not set for the current identity hr=0x%x
CID is not set for the current identity.
CIdcrlDownloadManager::Initialize
CIdcrlDownloadManager::SetNewVersionAndDownload
CIdentityCredentialBag::DeleteStoredCredential
CIdentityCredentialBag::GetPersistedCredential
CIdentityCredentialBag::HashPasswordFromBag
CIdentityCredentialBag::HasPersistedCredential
CIdentityCredentialBag::PersistCredential
CIdentityCredentialBag::RecordHashOfValidPassword
CIdentityCredentialBag::RefreshPersistedCredential
CIdentityCredentialBag::RemoveCredential
CIdentityCredentialBag::RetrieveCredential
CIdentityCredentialBag::SetPropertyDefaultCredSavedToPersisted
CIdentityCredentialBag::StoreCredential
CIdentityCredentialBag::ValidateHashOfValidPassword
CIdentityStore::AddAndGetDeviceIdentity
CIdentityStore::CloseIdentityHandle
CIdentityStore::CreateNewIdentity
CIdentityStore::GetDeviceIdentity
CIdentityStore::GetNewIdentityHandle
CIdentityStore::GetNewIdentityHandle can't find a unique handle value. hr=0x%x
CIdentityStore::GetOpenHandles
CIdentityStore::GetPersistedUserNameBySsoGroup
CIdentityStore::GetSignedInUsernames
CIdentityStore::GetSingleIdentity
CIdentityStore::GetTokenBagByName
CIdentityStore::ReleaseTokenBag
CIdentityStore::RemoveDeviceIdentity
CIdentityStore::SetPersistedSsoGroupUser
CIdentityTokenBag::AddStoredToken
CIdentityTokenBag::CacheAndEncryptPersistedPassword
CIdentityTokenBag::ClearUserExtProperties
CIdentityTokenBag::GetCachedPassword
CIdentityTokenBag::GetCredPropertyValue
CIdentityTokenBag::GetKeyLatest
CIdentityTokenBag::GetKeySpecific
CIdentityTokenBag::GetUserExtPropertyNames
CIdentityTokenBag::GetUserExtPropertyValue
CIdentityTokenBag::HasToken
CIdentityTokenBag::NotifyKeyUpdate
CIdentityTokenBag::PersistServiceTokens
CIdentityTokenBag::RemoveToken
CIdentityTokenBag::RetrieveSessionKey
CIdentityTokenBag::RetrieveToken
CIdentityTokenBag::SetCredPropertyValue
CIdentityTokenBag::SetDefaultUserForTarget
CIdentityTokenBag::SetTokenCachedFlag
CIdentityTokenBag::SetUserExtPropertyValue
CIdentityTokenBag::StoreToken
CIdentityTokenBag::UpdateKeyCache
CIdentityTokenBag::UpdateSystemStoreProperties
Cipher value is missing for ppheader:%x
Cipher value is missing:%x
CKeyCache::BroadcastUpdate
CKeyCache::DecryptKeyMaterial
CKeyCache::EncryptKeyMaterial
CKeyCache::GetKeyFromRegistry
CKeyCache::GetKeyLatest
CKeyCache::GetKeyLatestFromMemoryNoLock
CKeyCache::GetKeyLatestFromRegistryUpdateMemory
CKeyCache::GetKeyLatestFromRegistryUpdateMemoryHelper
CKeyCache::GetKeySpecificFromMemory
CKeyCache::GetKeySpecificFromRegistryUpdateMemory
CKeyCache::ProcessKeyXml
CKeyCache::SetCredentialBag
CKeyCache::UpdateKeyCache
CKeyCache::UpdateKeyInRegistry
CleanConnectedAccountState
CleanupCertificateAuthority
CleanupCertificateAuthority failed with hr=0x%x
CleanupSystemStoreEntryForSid
Clearing request params collection.
Client config directory is '%ls'.
Client config file is '%ls'.
ClientAppURI
CLIPC.dll
ClipClose
ClipGenerateDeviceLicenseRequest
ClipInstallLicense
ClipOpen
Clock Skew:%d(sec) 
ClockSkew
ClockSkew_AfterResponse
ClockSkew_BeforeRequest
ClockTimeSeconds
CLogicalDeviceIdentity Protocol metadata lookup failed
CLogicalDeviceIdentity::DeleteHelper
CloseHandle
CloseHandle(m_hPublisherThread) failed with hr=0x%x
CloseIdentityHandleProc
CloseServiceHandle
CloseThreadpoolTimer
CloudAP
CLSIDFromProgID
CManagementBaseRequest::BuildRequestInternal
CManagementBaseRequest::ExtractLicenseInfo
CManagementBaseRequest::GetCredentials
CManagementBaseRequest::GetHardwareInfo
CManagementBaseRequest::GetServerTimeFromResponse
CManagementBaseRequest::GetTpmAttestationInfo
CManagementBaseRequest::GetTpmInfo
CManagementBaseRequest::ParseResponse
CManagementBaseRequest::Send
CManagementBaseRequest::UpdateCredentialState
CNetworkAddresses::_DeregisterChangeNotification
CNetworkAddresses::_GetDeviceAddresses
CNetworkAddresses::_GetLastKnownGood
CNetworkAddresses::_PopulateDeviceAddresses
CNetworkAddresses::_PublisherLoop
CNetworkAddresses::_RegisterChangeNotification
CNetworkAddresses::_SetLastKnownGood
CNetworkAddresses::CacheAddress
CNetworkAddresses::ChangeNotificationCallBack
CNetworkAddresses::Initialize
CNetworkAddresses::LookupAddress
CNetworkAddresses::NewRequest
CNetworkAddresses::ParseAddresses
CNetworkAddresses::RunPublisher
CNetworkAddresses::Shutdown
CNetworkAddresses::StopPublisher
CoCreateInstance
CoCreateInstance(CLSID_NetworkListManager) failed = 0x%x assuming network connectivity
CoGetCallerTID
CoGetMalloc
CoInitializeEx
CommitTransaction
CompanyName
CompareStringOrdinal
compat
compatible
Compatible
Config update is needed.
Config update is NOT needed.
CONFIGDATA::ResetOptions
CONFIGDATA::SetOptions
ConfigDownloadData
ConfigImmutableCopy
ConfigServerSslURI is not BSTR type, type: %d
Configured %ls timeout is %d ms.
Configured DeviceType is invalid: '%hs'
Configured InlineUX is invalid: '%hs'
ConfigureServiceStart: failed with hr=0x%x
connect
Connect Param can't be null
ConnectAccountPolicy is not BSTR type, type: %d
Connected
connected identity doesn't have default cred is unexpected.
Console
Console session id = %d, state = %d.
ConstructDeviceInfo
ConstructTokenResponse
ContainerName
Content-Type: application/soap+xml
Context
Context=0x%p
ConvertA2W
convertedBytes == requiredBytes
ConvertSidToStringSid failed with hr=%x
ConvertSidToStringSid failed. (win32 = 0x%0x)
ConvertSidToStringSidW
ConvertSidToStringSidW failed. (win32 = 0x%0x)
ConvertStringSecurityDescriptorToSecurityDescriptor returned 0x%x
ConvertStringSecurityDescriptorToSecurityDescriptorW
ConvertStringSidToSid(pszSid, &spSid) != FALSE
ConvertStringSidToSidW
ConvertW2A
CookieP3PHeader is not BSTR type, type: %d
CopyFileW
Copying auth state from handle 0x%p to 0x%p.
CopySid
Corruped certificate token string.
Corruped certificate token.
Corruped keypair string.
Corruped keypair.
Corrupted credential info.
CoTaskMemAlloc
CoTaskMemFree
COTCRequest::BuildRequest
COTCRequest::ParseResponse
Could not allocate %d bytes for pbDecodeddMessageBlob.
Could not allocate memory for cert subject name. 0x%x
Could not allocate memory for pbSKI.
Could not allocate memory for strVal. 0x%x
Could not allocate memory for wstrSKI. 0x%x
Could not create URL. 0x%x.
Could not decrypt proxy password. HR=(0x%x).
Could not encrypt proxy password. HR=0x%x
Could not find a good issuer cert.
Could not find a suitable separator for %ls, giving up!
Could not find matching state for server result 0x%x, using generic state.
Could not find membername in linked Ids.
Could not get ApproveSession from config. 0x%x
Could not get Attributes attribute of psf:extProperty node '%ls'. hr=0x%x.
Could not get CID for this ID handle, even though it is marked linked. 0x%x
Could not get default STS URL from config data.
Could not get DeviceAddService from config. 0x%x
Could not get DeviceAssociateService from config. 0x%x
Could not get DeviceChangeService from config. 0x%x
Could not get DeviceDisassociateService from config. 0x%x
Could not get DeviceEnumerateService from config. 0x%x
Could not get DeviceQueryService from config. 0x%x
Could not get DeviceRemoveService from config. 0x%x
Could not get DeviceUpdateService from config. 0x%x
Could not get Domains attribute of psf:extProperty node '%ls'. hr=0x%x.
Could not get Expiry attribute of psf:extProperty node '%ls'. hr=0x%x.
Could not get file mutex, hr = 0x%x
Could not get GetAppDataService from config. 0x%x
Could not get GetUserKeyDataService from config. 0x%x
Could not get IgnoreRememberMe attribute of psf:extProperty node '%ls'. hr=0x%x.
Could not get ListSessions from config. 0x%x
Could not get LoadConfigData mutex. hr = 0x%x. This thread is abandoning the LoadConfigData.
Could not get ManageApprover from config. 0x%x
Could not get ManageLoginKeys from config. 0x%x
Could not get Name attribute of psf:credProperty node '%s'. hr=0x%x.
Could not get Name attribute of psf:extProperty node '%ls'. hr=0x%x.
Could not get next node in configuration xml. 0x%x.
Could not get next RSTR node (0x%x).
Could not get one box SSL port for host %ls
Could not get OTCRequestService from config. 0x%x
Could not get port number for host '%ls'. 0x%x
Could not get ResolveUserService from config. 0x%x
Could not get ServerTime attribute node of server response. HR=0x%x.
Could not get subject name from certificate. hr = 0x%x
Could not get token bag or token for service: %ls.
Could not get URL attribute of psf:browserCookie node '%s'. hr=0x%x.
Could not get WLID_AUTHURL from config. 0x%x
Could not initialize download manager object
Could not obtain flags from challange.
Could not obtain message type from challange.
Could not obtain message type value from challange.
Could not obtain policy from challange.
Could not obtain policy value from challange.
Could not obtain SystemSku, hr = 0x%x
Could not open OneBox registry key '%ls'. 0x%x
Could not open passport registry key. 0x%x
Could not parse '%s' as time
Could not parse linked account list
Could not persist pending credential, this is not a critical error, ignoring... (hr = 0x%x)
Could not query passport version. 0x%x
Could not read AuthToken node. HR=0x%x.
Could not read ext property %ls from prop bag, trying registry. 0x%x
Could not read next psf:browserCookie node from response. hr=0x%x.
Could not read next psf:credProperty node from response. hr=0x%x.
Could not read next psf:extProperty node from response. hr=0x%x.
Could not read node. HR=0x%x.
Could not read ServerTime attribute of psf:serverInfo node. HR=0x%x.
Could not read ServerTime attribute of server response. HR=0x%x.
Could not read ServerTime attribute of ServerInfo node. HR=0x%x.
Could not read SessionKeyType node. HR=0x%x.
Could not read sessionKeyType node. HR=0x%x.
Could not read value of node %s. 0x%x
Could not read value of node %s. 0x%x, trace and continue
Could not read value of node cfg:CertificateAuthorityStoreName, using default. 0x%x
Could not read value of psf:browserCookie node '%s'. hr=0x%x.
Could not read value of psf:credProperty node '%s'. HR=0x%x.
Could not read value of psf:extProperty node '%ls'. HR=0x%x.
Could not remove previously cached auth info for app: %s. 0x%x.
Could not reset IDCRL option (%d). hr=0x%x
Could not retrieve certificate PIN. hr=0x%x
Could not save clock skew. hr = 0x%x
Could not set cred property name: '%ls', value: '%ls'. hr=0x%x.
Could not set ext property name: '%ls', value: '%ls'. hr=0x%x.
Could not set IDCRL option (%d). hr=0x%x
Could not update LoginUrl, GetPassportSTSHost failed.
CoUninitialize
Count
CountOfProxiesTried
CP="CAO DSP COR ADMa DEV CONo TELo CUR PSA PSD TAI IVDo OUR SAMi BUS DEM NAV STA UNI COM INT PHY ONL FIN PUR LOCi CNT"
CPassportClientLibrary::GetServiceURIFromConfig
CPassportClientLibrary::Initialize
CPassportClientLibrary::Uninitialize
CPhysicalDeviceIdentity Protocol metadata lookup failed
CPhysicalDeviceIdentity::DeleteHelper
CPPCRLBaseRequest::Base64UrlEncodeWithNoPadding
CPPCRLBaseRequest::ComputeServerKeyId
CPPCRLBaseRequest::CreateDOM
CPPCRLBaseRequest::GetDeviceOneTimeToken
CPPCRLBaseRequest::GetOneTimeToken
CPPCRLBaseRequest::GetPassportRequestPort
CPPCRLBaseRequest::MapServiceError
CPPCRLBaseRequest::ParseNumericHResult
CPPCRLBaseRequest::SetClockSkew
CPPCRLRequest::AddDATokenRequest
CPPCRLRequest::AppendDeviceDaTokenToRequestXml
CPPCRLRequest::AppendLoginKeyTokenToRequestXml
CPPCRLRequest::AppendSignedDeviceDaTokenToRequestXml
CPPCRLRequest::BuildAndSendRequest
CPPCRLRequest::BuildCertRST
CPPCRLRequest::BuildRequestEx
CPPCRLRequest::BuildRequestInternalEx
CPPCRLRequest::BuildRST
CPPCRLRequest::BuildRSTsEx
CPPCRLRequest::CopyResponseString
CPPCRLRequest::DecryptBase64ToString
CPPCRLRequest::ExtractSessionKey
CPPCRLRequest::GetAddressingHeader
CPPCRLRequest::GetPassportHeader
CPPCRLRequest::GetRequestedSecurityToken
CPPCRLRequest::GetResponse
CPPCRLRequest::GetServiceEndpoint
CPPCRLRequest::GetServiceTicketRequestData
CPPCRLRequest::ParseBrowserCookies
CPPCRLRequest::ParseCredProperties
CPPCRLRequest::ParseExtProperties
CPPCRLRequest::ParseFaultInRSTR
CPPCRLRequest::ParseFaultUrl
CPPCRLRequest::ParsePassportHeaderIfPresent
CPPCRLRequest::ParseRequestSecurityTokenResponse
CPPCRLRequest::ParseResponse
CPPCRLRequest::ParseServerInternalError
CPPCRLRequest::SetApplicableCookies
CPPCRLRequest::SetStatusForEachResource
CPPCRLRequest::ShouldResendRequest
CPPCRLRequest::SignRequestCommon
CPPCRLRequest::SignRequestWithHardwareKey
CPPCRLRequest::SignRequestWithSessionKey
CPPCRLRequest::TriggerNewFilesDownload
CPPCRLRequest::ValidateAndCopyRequests
CPPCRLRequest::VSig_Decrypt_GetRSTR
CPPCRLToken::BuildAuthorizationToken
CProxyConfig::DiscoverProxyServers
CProxyConfig::GetExplicitlyNamedProxy
CProxyConfig::GetProxyForUrl
CProxyConfig::GetProxyHandler
CProxyConfig::GetProxyHandlerImplementation
CProxyConfig::GetProxyViaAutoDetection
CProxyConfig::GetProxyViaConfigUrl
CProxyHandler::Init
CProxyHandler::SendReceiveWithProxyFailOver
CProxyHandler::SetNextProxySettings
CProxyNegativeCache::AddToCache
CProxyNegativeCache::AgeStaleCacheEntries
CProxyNegativeCache::Lookup
CPublishDeviceRequest::BuildRequestBody
CPublishDeviceRequest::Initialize
CRandomDeviceCreds::GetMembername
CReadStreamOnMemory::QueryInterface
CReadStreamOnMemory::Read
Created '%ls' URL: %ls
Created Context 0x%p for '%ls'
Created new identity 0x%p.
Created new identity token bag 0x%p for '%ls'.
CreateDeviceIdentityHandle
CreateDOM
CreateEventExW
CreateEventW
CreateFileW
CreateInstance failed with hr = 0x%x
CreateMutexExW
CreateMutexW
CreateNewDeviceIdentity
createNgcKey is true but UI is disallowed.
CreatePKCS10Base64 cannot generate map index %p, %s does not have pending SLC request hr = %x
CreatePKCS10Base64 failed (0x%x).
CreateProcessUserTask
CreateProcessUserTask for session id %d for %s.
CreateProcessUserTask for session id %d for <local>.
CreateProcessUserTask. SessionId %d, LogonId 0x%x 0x%x. (0x%x)
CreateRegKey failed with hr=0x%x
CreateSemaphoreExW
CreateStreamOnHGlobal
CreateThread
CreateThreadpoolTimer
CreateTimerQueue
CreateTimerQueueTimer
CreateTransaction
CreateWellKnownSid
CreateWellKnownSid failed. (win32 = 0x%0x)
CreateXmlReader
Creating keybag for purpose: '%hs'.
CredDeleteW
CredDeleteW: failed with hr=0x%x
CredentialKey
CredEnumerateW
CredEnumerateW failed 0x=%x.
CredEnumerateW returned a null cred pointer index =%d.
CredEnumerateW succeeded with count %d & credential %p
CredFree
CredIsProtected failed. HR=0x%x.
CredIsProtectedW
CredmanUtility::CredDeleteW
CredmanUtility::CredEnumerateW
CredmanUtility::CredReadW
CredmanUtility::CredWriteW
CredReadW
CredSerializationHelper::DecryptBufferInPlaceForSameLogon
CredSerializationHelper::DeSerializeCredentials
CredSerializationHelper::EncryptBufferForSameLogon
CredSerializationHelper::FreeCredentialBagContent
CredSerializationHelper::UnprotectCredentialString
CredType
CredType='%ls', Cred='%ls'
CredType='%s'
CredUnprotect failed. HR=0x%x.
CredUnprotectW
CredWriteW
CRegKey::EnumKey failed with hr=0x%x
CRegKey::Open failed with hr=0x%x
CRegKey::SetValue failed with hr=0x%x
CResolveDeviceRequest::GetResponse
CResolveDeviceRequest::Initialize
CResolveUserRequest::GetResponse
CResolveUserRequest::Initialize
CRYPT32.dll
CryptAcquireCertificatePrivateKey
CryptAcquireCertificatePrivateKey failed with hr=0x%x
CryptAcquireContext failed with CRYPT_SILENT flag - trying without.
CryptAcquireContextA
CryptAcquireContextA failed with 0x%x
CryptAcquireContextA returned null handle
CryptAcquireContextW
CryptBinaryToStringA
CryptContextAddRef
CryptContextAddRef failed with hr=0x%x
CryptCreateHash
CryptDecrypt
CryptDestroyHash
CryptDestroyKey
CryptDuplicateKey
CryptEncodeObjectEx
CryptEncrypt
CryptExportKey
CryptExportPublicKeyInfo
CryptGenKey
CryptGenRandom
CryptGetHashParam
CryptGetKeyParam
CryptGetKeyParam failed with hr=0x%x
CryptGetUserKey
CryptGetUserKey failed with hr=0x%x
CryptHashData
CryptImportKey
CryptImportPublicKeyInfo
cryptngc.dll
CryptProtectData
CryptProtectData failed. error=0x%x.
CryptProtectMemory
CryptProtectMemory failed. HR=0x%x.
CryptReleaseContext
CryptSetHashParam
CryptSetProvParam
CryptSetProvParam failed with hr=0x%x
CryptSignAndEncodeCertificate
CryptSignAndEncodeCertificate Failed                  hr = 0x%08X
CryptSignHashW
CRYPTSP.dll
CryptUnprotectData
CryptUnprotectData failed. hr = 0x%x.
CryptUnprotectData failed. HR=0x%x.
CryptUnprotectData returns success together with a invalid data blob. 
CryptUnprotectMemory
CryptUnprotectMemory failed. HR=0x%x.
CryptVerifyMessageSignature
CryptVerifyMessageSignature failed or emtpy decoded message. 0x%x.
CryptVerifyMessageSignature failed. 0x%x.
CryptVerifySignatureW
CServiceRequest::GetCIDNode
CServiceRequest::GetEncryptedSessionKey
CServiceRequest::GetRequestAuthToken
CServiceRequest::ParseResponse
CServiceRequest::UpdateDATokenForLinkedIdentities
CServiceRequest::ValidateAndCopyRequests
CServiceTokenInfo::Pack
CServiceTokenInfo::RemovePersistedServiceTokens
CServiceTokenInfo::RetrievePersistedServiceTokens
CServiceTokenInfo::UnPack
CServiceTokenInfo::WriteToCache
CSessionAppSettingsMap::GetAppId
CSessionAppSettingsMap::GetAppSettings
CSessionAppSettingsMap::GetRPCClientAppKey
CSessionAppSettingsMap::SetAppId
CSessionAppSettingsMap::SetAppSettings
CSignatureComputingXmlSig2::ComputeSignature
CSingleIdentity - Deserialized %Iu identity cookies.
CSingleIdentity - Deserialized %Iu response params.
CSingleIdentity - Request for response param '%ls'.
CSingleIdentity - Serializing %Iu cookies from identity.
CSingleIdentity - Serializing %Iu request params from identity.
CSingleIdentity - Setting identity cookie '%ls' to '%ls'.
CSingleIdentity - Setting request param '%ls' to '%ls'.
CSingleIdentity - Value of response param is '%ls'.
CSingleIdentity::AuthDeviceIdentity
CSingleIdentity::AuthIdentity - Failed when sending auth request.
CSingleIdentity::BuildProvisionRequest_Internal
CSingleIdentity::BuildUpdateDeviceRequest_Internal
CSingleIdentity::CheckIdentityNameAndNGCKey
CSingleIdentity::CheckIdentityNameAndPassword
CSingleIdentity::CopyAuthStateFromLinkedHandle
CSingleIdentity::DeLinkCertObject
CSingleIdentity::GetAuthEndPoint
CSingleIdentity::GetExtProperty
CSingleIdentity::GetLinkInfo
CSingleIdentity::GetOneTimeCredentialEx
CSingleIdentity::GetServiceTicket
CSingleIdentity::GetServiceToken
CSingleIdentity::GetSessionKeyType
CSingleIdentity::GetURLHash
CSingleIdentity::HandleUserNgcKeyUpdate
CSingleIdentity::HasSuppliedCredential
CSingleIdentity::ImportAuthState
CSingleIdentity::IsLinked
CSingleIdentity::PersistCertificates
CSingleIdentity::PersistPendingCredential
CSingleIdentity::PersistServiceTokens
CSingleIdentity::ProvisionIdentity
CSingleIdentity::ProvisionIdentity - Failed when sending AddCredential request. hr =0x%x
CSingleIdentity::ProvisionIdentity - Failed when sending AddCredential request.hr =0x%x
CSingleIdentity::RemovePersistedCertificates
CSingleIdentity::RemovePersistedServiceTokens
CSingleIdentity::RenewDeviceCert
CSingleIdentity::RenewUserIdKeyAttestation
CSingleIdentity::RetrievePersistedCertificates
CSingleIdentity::RetrievePersistedServiceTokens
CSingleIdentity::SaveExtProperties
CSingleIdentity::SerializeExtProperties
CSingleIdentity::SetAuthenticationRequired
CSingleIdentity::SetAuthenticationState
CSingleIdentity::SetCallerSidOverwrite
CSingleIdentity::SetCancellableRequestTransport
CSingleIdentity::SetExtProperty
CSingleIdentity::SetReprovisionErrorCode
CSingleIdentity::SetRequestStatus
CSingleIdentity::SetServerInternalErrorCode
CSingleIdentity::UpdateDeviceCredentials
CSingleIdentity::UpdateUserIdKeyAttestation
CStoredIdentity::AddKeywords
CStoredIdentity::AddService
CStoredIdentity::Associate
CStoredIdentity::Disassociate
CStoredIdentity::HasAnyKeyword
CStoredIdentity::LoadIdentity
CStoredIdentity::LoadProperties
CStoredIdentity::ProcessDefaultCertInStore
CStoredIdentity::RemoveAllKeywords
CStoredIdentity::RemoveFromCertStore
CStoredIdentity::RemoveKeywords
CStoredIdentity::RemoveService
CStoredIdentity::SaveIdentity
CStoredIdentity::SaveProperties
CStoredIdentity::SetProperty
CStoredIdentity::WriteToCertStore
CStoredIdentityTransaction::Start
CStringLockManager<class CRefReadWriteLockEx>::ReleaseLock
CStringSrv::GetMappedErrorMsg
CStringSrv::GetStringForID
CStringSrv::Initialize
CSystemDeviceIdentity Delete certificate failed with hr 0x%x, continuing...
CSystemDeviceIdentity Remove Persisted Certificate failed with hr 0x%x, continuing...
CSystemDeviceIdentity::DeleteHelper
CSystemStore::GetIdentityProperty
CSystemStore::IsPublishing returned 0x%x, isPublishing=0x%x
CSystemStore::ProcessNewDevice
CSystemStore::ProcessNewDevice failed to reassociate users on reprovision, hr=0x%x
CSystemStore::RemoveAllPublishedServices
ct=%I64u&hashalg=%s&%s
ct=%I64u&hashalg=%s&%s&nonce=%s
CTargetStore::GetUserByTarget
CTargetStore::SetUserByTarget
ctHWBoundTime=%ls
CTokenInfo::AssembleTokenBlob
CTokenInfo::GetCredTargetName
CTokenInfo::GetServiceName
CTokenInfo::RemovePersistedTokens
CTokenInfo::WriteSharedToken
CTokenInfo::WriteTokenBlob
CTransport::AddCustomHTTPHeaders
CTransport::CloseAllInternet
CTransport::SendDeviceRequest
CTransport::SendImplementation
CTransport::SendInternal
CTransport::SendInternalHelper
CTransport::SendRequest
CUpdateDeviceLicenseRequest::BuildRequest
CUpdateDeviceLicenseRequest::BuildRequestInternal
CUpdateDeviceLicenseRequest::GetCredentials
CUpdateDeviceLicenseRequest::GetHardwareInfo
CUpdateDeviceLicenseRequest::GetTpmInfo
CUpdateDeviceLicenseRequest::SignRequest
CUpdateDeviceProperties::BuildRequestBody
CUpdateDeviceProperties::Initialize
CUpdateDeviceReaders::Initialize
CUpdateDeviceRequest::BuildRequest
Current connected username (%ls) does not match request (IdentityName: %ls, AuthMemberName: %ls), skipping interrupt notification update.
Current environment is %s
Current time is %s.
Current time: %ls 
Current user is not connected, skipping interrupt notification update.
Current user is not connected.
Current WebSSO UTC time on request is %hs.
currentContextId
currentContextMessage
currentContextName
Currently running in system context, will not attempt to include a System device DAToken.
CurrentTickCount
CurrentUserSid
CUserCIDCache::AddCID
CUserCIDCache::GetCID
CUserExtendedProperty::_SetExtProperty
CUserExtendedProperty::GetExtProperty failed. Ignoring the failure. hr=0x%x
CUserExtendedProperty::SetExtProperty
CUserExtendedProperty::SetExtPropertyAndCookie
cvTargetName is not valid string.
CWLIDCCHelper::ConvertToAnsi
CWLIDCCHelper::ConvertToWide
CWLIDCCHelper::GetSID
CWLIDCCHelper::SetClockReliabilityData
CWLIDCCHelper::SetClockReliabilityDataHelper
CWLIDNotificationsTable::CreateQueue
CWLIDSvcModule::HandlerEx
CWLIDTimerQueue::AddTimerData
CWLIDTimerQueue::Initialize
CWLIDTimerQueue::QueueWorkItem
CWLIDTimerQueue::Shutdown
CWLIDTimerQueue::TimerDriver
CWLIDTimerQueue:Shutdown-DeleteTimerQueueEx(m_hTimerQueue) failed with hr=0x%x
CWLIDTimerQueue:Shutdown-WaitForSingleObject dwWaitResult = %d, hr=0x%x
CXboxSignatureProvider::GetEcdsaSignatureFromHardware
CXD9x
CXHNGCUpsell
CXHReAuth
CXHSignIn
CXHSignInUpsell
CXHTransientSignIn
CXmlEcdsaSha256HardwareSigBase2::ComputeRawSignature
CXmlHMACSHASig2::CheckSignedInfo
CXmlHMACSHASig2::GetHMACDigest
CXmlHMACSHASig2::VerifySignature
CXmlSig2::BuildDigestedReferences
CXmlSig2::ComputeReferenceDigest
CXmlSig2::ComputeSHADigest
D!d$ A
D!d$ E
D!d$ E3
D!d$4
D$ ;h
D$ ;x
D$ A!
D$ D9z
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ fD
D$ Hch
D$ L+
D$$E3
D$(D!l$ L
D$(D9p
D$(D9x
D$(E3
D$(fD
D$(H!|$ D
D$(H;
D$(L;
D$(L+
D$@D9`
D$@D9h
D$@D9l$D
D$@E3
D$@fD
D$@H!D$@H
D$@H!D$8!D$0!D$4L
D$@HcX
D$@L9|$Hu
D$`;X
D$`D+
D$`D9p
d$`E3
D$`E3
D$`E9h
D$`H!D$`H
D$`H+
D$`H9
D$`tHA
D$0!D$@!D$D3
D$0[H
D$0=H
D$0=n
D$0D9p
D$0D9r
D$0D9x
D$0E3
D$0f9(t
D$0L;
D$4A;
D$4Did$P
D$8;X
D$89x
D$8D9`
D$8D9x
D$8E3
d$8E3
D$8E3
D$8H!D$@H!D$PH!D$H!
D$8H!T$0H!T$(H!T$ A
D$8H;
D$8H+
D$8Hc
D$8Hcx
D$D=*
D$DfD
D$H!D$@
D$h;{
D$h;X
D$H9X
D$hA;X
D$HD9`
D$hD9p
D$hE3
D$HE3
D$hH!|$p
D$hH!D$`H!D$P!D$H!D$LH!D$pH
D$hH;
D$HH+
D$HI;
D$p@8y
D$P=.
D$P9X
D$P9x
D$pD9`
D$PD9l$P
D$PE3
D$pE3
D$PE3
d$PE3
D$PE3
D$PE9`
D$PfA;
D$PH!D$0H
D$pH!D$PH
D$PH;
D$PHc
D$pHcH
D$PHcx
D$PM9t
D$PuuH
D$T9p
D$TD+
D$TE3
D$X;X
D$X@8
D$X@88
D$x9p
D$XD+
D$XD8
D$xD9h
D$XD9p
D$xE3
D$XE3
d$xE3
D$xE3
D$XE3
d$XE3
D$Xf90
D$xfD
D$XH9D$x
D$XHcX
D$xL+
D:(A;;GRGWGX;;;WD)(A;;GRGWGX;;;RC)(A;;GA;;;BA)(A;;GA;;;OW)(A;;GR;;;S-1-15-3-1024-1941919063-976504945-3191785059-2835515153-1936800635-1519032070-1452055454-2678282739)
D:P(A;;0x1F0003;;;SY)(A;;0x00100000;;;AU)
D:PAI(A;CIIOID;KA;;;CO)(A;CIID;KA;;;SY)(A;CIID;KA;;;BA)(A;CIID;KR;;;BU)S:AI(ML;CI;NWNR;;;ME)
D;eot
D;f4r
D;l$d
D;l$p
D;s8r
D+D$\D
D+D$X
D+FhE3
D+L$TE3
D+MPD
D+T$XD3
D3D$XA
D3L$\A
D8- "
D8$:u
D8$2u
D8,:u
D8|$ht
D8}w@
D8<:u
D8<2u
D8-<y
D84:u
D842u
D8-6D
D8l$au
D8l$H
D8u@u
D8w8u
D9{ t
D9|$@
D9|$`
D9|$0
D9|$0t
D9|$8u*
D9|$H
D9|$Ht
D9|$P
D9|$p
D9|$P
D9|$pt
D9|$Pt
D9|$pt43
D9|$pto3
D9|$Pv7@
D9|$t
D9|$Xt
D9}ptcH
D9}xt
D9d$@
D9d$@teD
D9d$\
D9d$`t
D9d$0
D9d$0t
D9d$8
D9d$8t
D9d$dt
D9d$Hu-A
D9d$pt
D9d$Pt
D9d$ptr3
D9d$pu
D9d$tu
D9Eou
D9l$@
D9l$@|
D9l$@uBH
D9l$@uGH
D9l$@ulH
D9l$@usL9m
D9l$0
D9l$0t
D9l$d
D9l$Du)H
D9l$h
D9l$l
D9l$P
D9l$pt
D9l$ptw3
D9l$Xt
D9mHA
D9s(u%H
D9t$$
D9t$@
D9t$@}
D9t$0
D9t$0t
D9t$8
D9t$8t
D9t$Du
D9t$Ht
D9u8|?H
D9uot
D9uwt
D9uwu
D9uxt
DAInvalidationTime
DAToken was not requested, adding to request list.
DebugBreak
DecryptAndDeserializeObject
DecryptAndDeserializeObject failed with 0x%x.
DecryptPassword
DecryptPasswordAndRewriteIfNeeded
DecryptRequest failed with 0x%x.
Default
DefaultCredSaved
DelayLoadFailureHook
DeleteBufferFromRegistry failed = 0x%x
DeleteCertificatesFromPersistantStore failed with hr=0x%x continuing gracefully
DeleteCriticalSection
DeleteFileW
DeleteIdentityStore
DeleteProofOfPossessionToken
DeleteTimerQueueEx
DeleteTimerQueueTimer
DeleteTimerQueueTimer failed for Queue %p and timer %p with hr=0x%x
DeleteUserAllExtendedProperties
DeleteUserTileData
DeleteValue returned ERROR_FILE_NOT_FOUND, treating as success.
DelimiterSeperatedToMultiSzString
DeLinkCertObject failed with hr = 0x%x
Deserialize IDCRL_OPTION_PROXY failed with error, hr=0x%x. 
DeserializeCookies failed (0x%x).
DeserializeObject failed. HR=0x%x.
DeserializeObject() completed with hr = 0x%x.
DeserializeResponseParams failed (0x%x).
DeserializeWininetProxyOptions
dest != nullptr
Device
Device DA validity check for %ls, %I64d, %I64d
Device ID (%s) is deleted from the persistent store hr = %x
Device ID flow is disabled on the server.
Device id is admin disabled
Device id is admin disabled hr = 0x%x
Device id is remote disabled
Device id is remote disabled hr = 0x%x
Device License installation failed (0x%x)
Device License request generation failed with error value:%x
Device name for device key %ls and appId %ls is %ls. Valid DeviceId is %ls
DeviceAddRequest
DeviceAddResponse
DeviceAddService
DeviceAssociateService
DeviceChangeService
DeviceDeprovision
DeviceDisassociateService
DeviceDNSSuffix
DeviceDNSSuffix is not BSTR type, type: %d
DeviceEnumerateService
DeviceID
DeviceId
DeviceID
DeviceId Map Registry Key %ls
DeviceIdForceKeyRoll
DeviceIdForceSignIn
DeviceIdHelpers::AuthDevice
DeviceIdHelpers::CheckAuthToken
DeviceIdHelpers::CreateNewDeviceIdentity
DeviceIdHelpers::CreateNewDeviceIdentity Failed hr = %x
DeviceIdHelpers::DeProvisionDeviceId
DeviceIdHelpers::DeProvisionDeviceId failed hr=0x%x
DeviceIdHelpers::GenerateRandomMembername
DeviceIdHelpers::GenerateRandomPassword
DeviceIdHelpers::GenerateRandomString
DeviceIdHelpers::GetCurrentUserSID
DeviceIdHelpers::GetDeviceAuthToken
DeviceIdHelpers::GetDeviceCertificate
DeviceIdHelpers::GetDeviceIDAsycProc
DeviceIdHelpers::GetDeviceIDAsync
DeviceIdHelpers::GetDeviceIDAsyncOnLogon
DeviceIdHelpers::GetDeviceIdentityObject
DeviceIdHelpers::GetDeviceIDHelper
DeviceIdHelpers::GetPUID
DeviceIdHelpers::GetRawPUIDFromCert
DeviceIdHelpers::GetSystemDeviceIDForWindows
DeviceIdHelpers::GetSystemHardwareID
DeviceIdHelpers::GetSystemHardwareID (0x%x).
DeviceIdHelpers::HandleRenewDeviceId
DeviceIdHelpers::HandleReprovisionDevice
DeviceIdHelpers::HandleTpmKeyStateChange
DeviceIdHelpers::InternalCheckAuthToken
DeviceIdHelpers::InternalRetrieveDeviceCert
DeviceIdHelpers::IsAdminDisabled
DeviceIdHelpers::IsCallerAccountType
DeviceIdHelpers::IsCallerAdminEnabled
DeviceIdHelpers::IsDeviceIdRemoteDisabled
DeviceIdHelpers::IsDeviceTPMEnabled
DeviceIdHelpers::IsDeviceTPMEnabled() == true
DeviceIdHelpers::IsHwdDeviceIDEnabled
DeviceIdHelpers::IsPhysicalDIDEnabled
DeviceIdHelpers::PersistGlobalIdForLicensing
DeviceIdHelpers::ProvisionDeviceId
DeviceIdHelpers::RenewDeviceCert
DeviceIdHelpers::RenewDeviceId
DeviceIdHelpers::ReprovisionDevice
DeviceIdHelpers::RetrieveDeviceID
DeviceIdHelpers::RetrieveDeviceID (0x%x).
DeviceIdHelpers::Shutdown
DeviceIdHelpers::UpdateDeviceLicenseInfo
DeviceIdHelpers::UpdateDeviceTpmInfo
DeviceIdHelpers::UpdateDeviceTpmInfo (0x%x).
DeviceIdHelpers::Validate
DeviceIdHelpers::VerifyInitialization
DeviceIdInvalidated
DeviceIdLoadFailure
DeviceIdRequestFailure
DeviceIdStore::AddAppIdToPersistantStore
DeviceIdStore::AddCertificatesToPersistantStore
DeviceIdStore::AddCertificateToCertStore: failed with hr = 0x%x
DeviceIdStore::AddDeviceInfoToPersistantStore
DeviceIdStore::AddHardwareInfoToPersistantStore
DeviceIdStore::AddMembernameToDOM
DeviceIdStore::DeleteAppIdFromPersistantStore
DeviceIdStore::DeleteCertificatesFromPersistantStore
DeviceIdStore::GetAttribute
DeviceIdStore::GetDeviceInfoFromPersistantStore
DeviceIdStore::GetDeviceInfoUsingXmlLite
DeviceIdStore::GetDeviceLicenseUpdateFailureCount
DeviceIdStore::GetDeviceRegistryKey
DeviceIdStore::GetDeviceSessionKey
DeviceIdStore::GetMembernameFromPersistantStore
DeviceIdStore::GetMembernameFromPersistantStore failed hr = %x
DeviceIdStore::GetRegistryKey
DeviceIdStore::GetRegistryKey(eUserType, wstrRegKey)
DeviceIdStore::GetRegistryPath
DeviceIdStore::GetStoredCertThumbprint
DeviceIdStore::GetValidDeviceID
DeviceIdStore::IsXmlLiteSupported
DeviceIdStore::LoadAppIdDeviceIdNameMap
DeviceIdStore::LoadFromRegistry
DeviceIdStore::LoadPersistedDOM
DeviceIdStore::LoadPersistedXml
DeviceIdStore::LogToRegistry
DeviceIdStore::PersistDeviceSessionKey
DeviceIdStore::QueryCertificates
DeviceIdStore::RetrieveCertificatesFromPersistantStore
DeviceIdStore::SaveDOM
DeviceIdStore::SaveToRegistry
DeviceIdStore::SetDeviceLicenseUpdateFailure
DeviceIdStore::SetDWORDDeviceProperty
DeviceIdStore::UpdateValidDeviceID
DeviceIdTpmAikCertFailure
DeviceIdTpmAttestationFailure
DeviceIdTpmImportFailure
DeviceIdTpmSignFailure
DeviceKeyBindingEnabled
DeviceKeyholderLicenseInstall
DeviceLicenseFunctions::FormatDeviceLicenseRequest
DeviceLicenseFunctions::GenerateXmlSignature
DeviceLicenseFunctions::GetDeviceLicenseRequest
DeviceLicenseFunctions::InstallDeviceLicense
DeviceLicenseFunctions::SignHashWithDeviceKey
DeviceLicenseInstall
DeviceLicenseUpdateFailureCount
DeviceName
deviceName=%ls
DeviceProvisioningEarlyExitLogic
DeviceQueryService
DeviceRemoveService
DeviceReprovision
DeviceSessionKey
DeviceSignFailure
DeviceTPMEnabled
deviceType=%d
deviceType=%d,deviceName=%ls
deviceType=%d,resetValue=%d
DeviceUpdatePropertiesRequest
DeviceUpdatePropertiesResponse
DeviceUpdateRequest
DeviceUpdateResponse
DeviceUpdateService
DIDDisable
DIDLogical
DIDSystem
DisableRedaction
DisableServiceByPolicy
DisableUserAuth
DisableWinHttpCache
DisassociateDevice
DisassociateDeviceInternal
DisassociateDeviceToApp::Removing device %ls from sid %ls and app %ls. Valid DeviceId is %ls
DisplayName
DoActionCenterNotification
DomainConnected
Domains
DoNotificationUpdate called with cleanupOnly, exiting.
Download called with newVersion=%ls
DownloadAndReloadConfig
Downloaded new config file version %ls. HR=%x.
DuplicateString
DuplicateToken
DuplicateToken failed with hr = 0x%x
DuplicateTokenEx
dwAssocType > 0
dwCount > 0 && dwCount < MAX_DEVICE_PROPERTIES && pNameValuePair
dwDeviceType=%d,wstrAppId=%ls,dwFlags=%d,dwInternalFlags=%d
dwFlags=%d
dwFlags=%d, dwSSOGroup=%d, pdwMemberNames=%p, prgwszMemberNames=%p
dwFlags=%d,ppIdentity=%p,ppCertContext=%p
dwFlags=0x%x, wcszAppId=%ls, wcszTarget=%ls, wcszPolicy=%ls, wcszAdditionalParams=%ls
dwRequestCount
dwRequestFlags
dwRequestFlags value: 0x%x
dwSSOGroup == SSO_GROUP_LIVE
dwTokenBlob %ls
E(=csm
E@D9x
E`H9GHu&
E8=csm
E8D9p
E8D9x
E9oXA
E9V0u
EH=csm
Eh=csm
EHH!]PH!]XE3
Empty Auth Token
Empty response received from server.
Empty user account has no stored credentials.
EncKey derived key token missing:%x
EncKey nounce is missing:%x
EncKey nounce missing:%x
Encrypted password is empty in store.
Encrypted password node is missing from store.
EndAuthUrl
EnterCriticalSection
Enumerate Device ID TlsSetValue failed with hr = 0x%x
EnumerateCertsFromAllDevices failed with hr=0x%x
EnumerateDeviceID TlsSetValue = 0x%x,  RetrieveDeviceID  = 0x%x, appdatafilepath = %ls
EnumIdentities failed with hr=0x%x
EnumIdentities returned %Iu results.
EnumIdentities returned no results.
EnumKey for %s failed with hr=%x
en-US
Environment: '%ls'. 
EqualSid
Error - 0x%lx GetTokenInformation.
Error - 0x%lx QueryUserToken.
Error - 0x%lx QueueWorkItem.
Error - 0x%lx WTSQueryUserToken.
Error 0x%x mapped to 0x%x
Error being collapsed to common error code. Original error: 0x%x.
Error creating location strings. 0x%x
Error creating xml reader, error is %08.8lx
Error generating signed tokens: userTokenHr=0x%x deviceTokenHr=0x%x
Error getting local name, error is %08.8lx
Error getting value, error is %08.8lx
error gettting GetCredTargetName  '%ls', hr = 0x%x.
Error in hardware collection and formatting 0x%x
Error in response header, check internal error in the body. 0x%x
Error moving to first attribute, error is %08.8lx
Error setting input for reader, error is %08.8lx
Error setting XmlReaderProperty_DtdProcessing, error is %08.8lx
error value is missing:%x
Error -x%lx SubscribeToNetworkNotification.
Error -x%lx WTSEnumerateSessions.
Error. Status code %d returned.
Error/@Code
Error: 0x%x, IsErrorUserActionable: %d
ERROR_SUCCESS == lRet || ERROR_MORE_DATA == lRet
ErrorCode
ErrorHandlingUtilities::CollapseError
ErrorHandlingUtilities::IsErrorUserActionable
ErrorHandlingUtilities::MapInternalErrorToExternal
ErrorSubcode
eUserType=%d,wszUsername=%s
EventActivityIdControl
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
ew|>&=4_
EwD9h
ewM9,$
EX=csm
Ex=csm
Existing Config Version: %ls
ExpandEnvironmentStringsW
Expire time node not found in certificate info xml. 0x%x.
Expire time node not found in service token info xml. 0x%x.
expired
Expiry
ExportAuthToken: failed PPCRL_E_NO_MEMBER_NAME_SET hr = 0x%x
ExportAuthToken: No PUID for this identity
ExtensionAPI::IsApplicationFullTrust
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-els-elscore-l1-1-0.dll
ext-ms-win-msa-device-l1-1-0
ext-ms-win-msa-device-l1-1-0.dll
ext-ms-win-msa-user-l1-1-0
ext-ms-win-msa-user-l1-1-0.dll
ext-ms-win-msa-user-l1-1-1
ext-ms-win-msa-user-l1-1-1.dll
ext-ms-win-ntos-tm-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usertoken-l1-1-0
ext-ms-win-session-usertoken-l1-1-0.dll
ext-ms-win-session-winsta-l1-1-0
ext-ms-win-session-winsta-l1-1-0.dll
ext-ms-win-session-winsta-l1-1-1
ext-ms-win-session-winsta-l1-1-1.dll
ext-ms-win-session-winsta-l1-1-2
ext-ms-win-session-winsta-l1-1-3
ext-ms-win-session-wtsapi32-l1-1-0
ext-ms-win-session-wtsapi32-l1-1-0.dll
ext-ms-win-shell-embeddedmode-l1-1-0
ext-ms-win-shell-embeddedmode-l1-1-0.dll
ext-ms-win-uxtheme-themes-l1-1-0.dll
ExtractSoapEnvelope failed with hr:%x
F H;F
f;D$@
F@D9x
F0D8#ukD8c
F8$2u
F8,"u
F8,:u
F8D9x
F8M9F0
f9,Au
f9,Bu
f9<Bu
f94_u
f94Au
f94Bu
f94Cu
f9l$ thf
f9t$@t
fA9(t
fA9<$
fA9<Fu
fA92u
Failed CertDuplicateCertificateContext hr = %x
Failed Disassociate request. hr=0x%x
Failed Enumeratingidentities. (0x%x)
Failed GetVersionEx, GetLastError = %d
Failed HandleUpdateDeviceReaders. (0x%x)
Failed in NgcDeleteUserIdKey, hr=0x%08x
Failed in NgcEnumUserIdKeys, hr=0x%08x
Failed query of environment: 0x%x
Failed to allocate memory for CWLIDNotification(WLID_IDENTITY_ASSOCIATED)
Failed to allocate memory for CWLIDNotification(WLID_IDENTITY_CONNECTED)
Failed to allocate memory for CWLIDNotification(WLID_IDENTITY_DISASSOCIATED)
Failed to allocate memory for CWLIDNotification(WLID_IDENTITY_DISCONNECTED)
Failed to allocate memory for the ppBuffer we are reading out of the registry. (0x%0x)
failed to allocate memory of byte: %d
Failed to allocate WINHTTP_PROXY_INFO
Failed to create Action Center API object, hr = 0x%x.
Failed to Create registry with hr = 0x%x for key %s
failed to CryptEncodeObjectEx - szOID_RSA_signingTime: %x
failed to CryptEncodeObjectEx - X509_NAME: %x
failed to CryptExportPublicKeyInfo: %x
failed to decode nonce for sig key:%x
failed to decrypt ppheader:%x
failed to decrypt token response:%x
Failed to Dissaccoiate Device Id from App %s, hr = %x.
Failed to enable revocation checking for winhttp, hr=0x%x.
Failed to get <PassportSHA1Auth> URL from the config file:  (0x%x)
Failed to get attributes: hr = 0x%x
Failed to get current user SID hr = %x
Failed to obtain proxy handler (0x%x).
Failed to obtain proxy handler, 0x%x
Failed to obtain proxy handler, hr=0x%x.
Failed to Open registry with hr = 0x%x for key %ls
Failed to Open registry with hr = 0x%x for key %s
Failed to parse attribute node: hr = 0x%x
Failed to parse attribute value: hr = 0x%x
Failed to parse created time: %s, %x
failed to parse decrypted pp header as xml:%x
Failed to parse expires time: %s, %x
failed to ppHeaderDoc.QueryInterface as xml:%x
Failed to query interface. 0x%x
Failed to read current user SID hr=0x%x
Failed to Read registry with hr = 0x%x for key %s
Failed to remove existing system device cert. hr = 0x%x
Failed to renew DA token, hr = %x
Failed to retrieve the current user's SID string. (hr = 0x%0x)
Failed to retrieve the SYSTEM user's SID string. (hr = 0x%0x)
Failed to revert to System context, possibly already not impersonating.
Failed to set Action Center state, hr = 0x%x.
Failed to Set the DWORD property in registry hr = 0x%x for key %s
Failed to subscribe to network change notification: 0x%X
Failed to update registry with valid device id name hr = 0x%x for key %s
Failed to WSACreateEvent: 0x%X
FailFast
Failure - CAuthInfo::DecryptSystemContextCredentials, HRESULT: 0x%08X
Failure - CommitTransaction, HRESULT: 0x%08X
Failure - CreateTransaction, HRESULT: 0x%08X
Failure - CryptProtectData, HRESULT: 0x%08X
Failure - CryptUnprotectData, HRESULT: 0x%08X
Failure - GetThreadPreferredUILanguages, HRESULT: 0x%08X
Failure - hr, HRESULT: 0x%08X
Failure - LogonUserExExW, HRESULT: 0x%08X
Failure - LsaLookupAuthenticationPackage, HRESULT: 0x%08X
Failure - LsaRegisterLogonProcess, HRESULT: 0x%08X
Failure - passwordLength, HRESULT: 0x%08X
Failure - pRegCredsKey->SetDWORDValue, HRESULT: 0x%08X
Failure - SetCount, HRESULT: 0x%08X
Failure - unrolling initialization. 0x%x
Failure calling RecurseDeleteKey for Immersive node with path '%s', hr = 0x%x.
Failure releasing mutex: %d
FailureCount
failureCount
FailureCount
failureCount
FailureCount
failureCount
FailureCount
failureId
failureReason
FailureThreshold
failureType
FailureType
failureType
Falied to send disassociate request. hr=0x%x
FallbackError
false
FamilyID
FamilyNotifications::CompareFamilyIDValues
FamilyNotifications::GetFamilyIDFromSystemStore
FamilyNotifications::GetFlagFromSystemStore
FamilyNotifications::NotifyIfAccountIsFamilyRelated
FamilyNotifications::NotifyIfFamilyDataHasChanged
FamilyNotifications::SendWNFNotification
FamilySafety setting in the STS response returned TRUE.
fB94Ou
fB94ru
fCancelRequest=%d
fD9$^u
fD9$~u
fD9$Fu
fD9$Gu
fD9$ru
fD9$wu
fD9$Zu
fD9,^u
fD9,Au
fD9,Bu
fD9,Cu
fD9,Ou
fD9,ru
fD9,su
fD9|E
fD9<{u
fD9<Au
fD9<Bu
fD9<Cu
fD9<Gu
fD9<ru
fD9<zu
fD90t,
fD93t
fD94Au
fD94Ft
fD9dE
fD9'tsfD9#tmD
fD9'tYfD9#
fE9,Du
fE9<$
fE9<Au-A
fE9<Du
fE9<Fu
fE9<Nu
fE9<xu
FedAuthEndPointUrl
FedAuthEndPointUrlHash
FException
fExpiredStore: %d
fF9<Fu
FH+L$0H
fHcK0D
FileDescription
fileName
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
Final Web Auth URL is: %ls.
FindResourceExW
FirstName
FirstParty
Flags
FlowUrl
ForceSigninRetry
ForceSigninRetryGetKey
FormatMessageW
found %d certs for user
found %d certs in global store
Found %d SSO user
Found Account %ls for SID %ls.
Found default user '%ls' for '%ls'.
Found existing token bag for '%ls'.
Found invalid version returning ERROR_FILE_NOT_FOUND to caller.
Found user %ls
Found user market of '%ls'.
fPublishing == TRUE
FreeLibrary
FreeObject() in SerializationDefinition.h completed with hr = 0x%x.
FreeSid
FriendlyName
FromBase64
FromBase64 failed with %x, continuing gracefully
fSetPIN is set to true but szPIN = NULL 
function
G(E9`
g_pPPCRL != NULL
g_pPPCRL != nullptr && SUCCEEDED(g_pPPCRL->VerifyInitialized())
g_pPPCRL->GetNegativeCacheManager()->ClearNegativeCacheData(pIdentity, daCreatedTime.GetTime())
g_pPPCRL->GetNegativeCacheManager()->UpdateNegativeCache( m_rgRequests[i].wszServiceTarget, m_rgRequests[i].wszServicePolicy, rgResponses[i].hrRequestStatus, m_pIdentity, (!m_pIdentity->GetAuthUrl().IsEmpty() || !m_pIdentity->GetEndAuthUrl().IsEmpty() || !authUrl.IsEmpty() || !wszFlowUrl.IsEmpty()))
g_pPPCRL->GetNegativeCacheManager()->UpdateNegativeCache( m_rgRequests[i].wszServiceTarget, m_rgRequests[i].wszServicePolicy, rgResponses[i].hrRequestStatus, m_pIdentity, (!m_pIdentity->GetAuthUrl().IsEmpty() || !m_pIdentity->GetEndAuthUrl().IsEmpty()))
g_pPPCRL->GetNegativeCacheManager()->UpdateNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceAuthScenario, pRequest->GetRequestStatus())
g_pPPCRL->GetNegativeCacheManager()->UpdateNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceProvisioningScenario, GetRequestStatus())
g_pPPCRL->GetNegativeCacheManager()->UpdateNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceUpdateLicenseScenario, GetRequestStatus())
g_pPPCRL->GetNegativeCacheManager()->UpdateNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceUpdateScenario, GetRequestStatus())
g_pPPCRL->VerifyInitialized: failed hr = 0x%x
G0u>H
g9l$Xt^
GenerateRandomMembername failed with hr = 0x%x
GenerateRandomPassword failed with hr = 0x%x
Get Auth End Point URL = '%ls', Fed Partner = '%ls'
Get Auth End Point URL failed hr=0x%x
Get Auth End Point URL Hash = '%ls', Fed Partner = '%ls'
Get Auth End Point URL Hash failed hr=0x%x
Get CID property failed 0x=%x.
Get Hip Challenge: %ls = '%ls'.
Get request status 0x%x.
Get UserTileURL property failed 0x=%x.
get_childNodes failed - pList is NULL. 0x%x.
get_IsConnectedToInternet failed = 0x%x; assuming network connectivity
get_IsConnectedToInternet returned S_OK; isConnected = %d
get_item failed with %x, continuing gracefully
get_text failed with %x, continuing gracefully
get_text failed with hr = %x
GetAclInformation
GetActiveTSSessionID
GetAdaptersAddresses
GetAppData
GetAppData Request failure details: error = 0x%x, suberror = 0x%x
GetAppData Request's isFirstParty bool value: %d
GetAppDataFromServer
GetAppDataRequest::BuildRequest
GetAppDataRequest::GetSessionKeyToSign
GetAppDataRequest::GetSignatureXml
GetAppDataRequest::ParseResponse
GetAppDataRequest_InvalidTimestamp
GetAppDataRequestFailure
GetAppDataService
getAttribute failed with %x, continuing gracefully
getAttribute failed with hr = %x
GetAttribute LicenseInstallError failed with 0x%x.
GetAttribute LicenseKeySequence failed with 0x%x.
GetAttribute licenseKeyVersionClient failed with 0x%x.
GetAuthTokenBlob (full state) failed 0x=%x.- optional, continue
GetAuthTokenBlob (partial state) failed 0x=%x.- optional, continue
GetAuthTokenBlob failed: hr = 0x%x
GetAuthTokenBlob=0x%p
GetCachedIdentities
GetCallingProcessSessionId - Failed to get calling process session ID. hr = 0x%x.
GetCert cannot generate map index %p, %s does not have pending SLC request hr = %x
GetCert failed with hr = 0x%x
GetCert: failed CertDuplicateCertificateContext hr = %x
GetCertContext
GetCertContext failed with hr=0x%x
GetCertThumbFromCredMan: failed with hr = 0x%x
GetCertThumbprint failed with hr = 0x%x
GetClientCert failed with 0x%x.
GetColorFromPreference
GetComputerNameW
GetConnectedAccountGroupPolicy failed with 0x%x
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetCurrentUserToken
GetDeviceCert Failed hr = %x
GetDeviceIDAsycProc: RetrieveDeviceID failed. hr = 0x%x
GetDeviceIdInternal
GetDeviceIdInternal returned null deviceID
GetDeviceIDString
GetDeviceInfo failed with hr = 0x%x
GetDeviceInfoUsingXmlLite failed with hr = %x
GetDisplayFileVersion
GetExtendedPropertyInternal
GetExternalMemoryManager failed wih . hr = 0x%x
GetFileSizeEx
GetFileVersion
GetFileVersion(%ls) failed with (0x%x)
GetFileVersionInfoExW
GetFileVersionInfoSizeExW
GetHash=%ls
GetIdentityFromExternalHandle mapped external identity 0x%p to 0x%p.
GetIdentityProperty failed. Ignoring the failure. hr=0x%x
GetIdentityPropertyHelper
GetIssuerCertificate: no certificates loaded
GetLastError
GetLatestKeyCacheHit
GetLatestKeyCacheMiss
GetLengthSid
GetLocalSignedUserToken
GetMessageForPinPrompt
GetModuleFileNameA
GetModuleFileNameW
GetModuleHandleA
GetModuleHandleExW
GetModuleHandleW
GetNewIdentityHandle failed, hr = %x
GetOneBoxSSLPort
GetOneTimeCredential failed hr=0x%x
GetPassportSTSHost() returned empty host name. Using default URL %ls.
GetPasswordFromPersistantStore failed with hr = 0x%x
GetPersistedCredential failed = ERROR_NOT_FOUND.
GetPersistedRegistryLocationW
GetPhoneNumberList hr:0x%x phoneList:%ls
GetProcAddress
GetProcessHeap
GetProcessIdOfThread
GetProfileType
GetRawPUIDFromCert failed with 0x%x. bailing out of BuildRequest
GetRegistryKeyPath returned null, treating like hwid enabled
GetRegistryKeyPath returned null, treating like not admin disabled
GetRegistryKeyPath returned null, treating like phycical did disabled
GetRegistryKeyPath returned null, treating like tpm enabled
GetRegistryKeyPath returned null, treating like user id key attestation enabled
GetRegistryPath failed hr = %x for %s
GetResponseParam failed hr = 0x%x
GetSecurityDescriptorControl
GetSecurityDescriptorDacl
GetSecurityDescriptorGroup
GetSecurityDescriptorOwner
GetSecurityDescriptorSacl
GetServiceToken for authtoken: failed hr = 0x%x
GetSidIdentifierAuthority
GetSidLengthRequired
GetSidSubAuthority
GetSidSubAuthorityCount
GetSpecificKeyCacheHit
GetSpecificKeyCacheMiss
GetStoredIdentityProperty failed. (hr = 0x%0x)
GetSystemDirectoryW
GetSystemInfo
GetSystemMetrics
GetSystemTimeAsFileTime
GetSystemWow64DirectoryA
GetThreadDesktop
GetThreadPreferredUILanguages
GetTickCount
GetTickCount64
Getting config version failed with error 0x%x
GetTokenInformation
GetTokenInformation failed with %d
GetTokenInformation failed with hr = 0x%x
GetTotpCodeFailure
GetUserAgentString failed (0x%x).
GetUserColorPreference
GetUserDefaultLocaleName
GetUserDefaultUILanguage
GetUserKeyData Request result: hr = 0x%x, requestCount = %u, resendRequest = %u
GetUserKeyDataService
GetUserLanguages
GetUserObjectInformationW
GetUserTokenFromAppContainerContext
GetValidDeviceIDKey Failed hrInternal = %x
GetVersionAndObjectBuffer
GetVersionAndObjectBuffer() completed with hr = 0x%x.
GetVersionExW
GetWindowsDeviceId
GetXMLNodeAttribute
GetXMLNodeText
Global\
Global\{44ea083b-899c-4440-8338-2469fd4681cf}
Global\{c245290c-487c-4f81-9aba-7eb0dac882a2}
GlobalAlloc
GlobalDeviceId
GlobalDeviceUpdateTime
GlobalFree
H AVH
H SUVWAVAWH
H SUVWH
H UATAUAVAWH
h UAVAWH
H UVWATAUAVAWH
H UWATAVAWH
H!\$ E
H!\$ H
H!\$`L
H!\$8!\$@H
H!\$PL
H!_8H
H!|$0H
H!}@H!}HH!}8H
H!t$XA
H)L$x
H;\$8
H;\$8H
H;C(t
H;GxH
H;P u
H;Q(s
H;Q(t
H;Q(t H
H;S v
H;S(s
H;u@r
H;V(s
h_^[]
H_^[]
H+|$@H
H+D$`H
H+EoH
H+t$8H
H9]@v&H;]@stL
H9]@w
H9^(t
H9|$`
H9|$h
H9|$p
H9|$x
H9L$p
H9L$xt
H9L$xu
H9sHs<
H9T$8
H9t$h
H9t$xtOH
H9wHu(
hA^_^[
hA_A^_^[]
HA_A^_^[]
HA_A^_^][
hA_A^A]A\_^[]
HA_A^A]A\_^[]
HA_A^A]A\_^][
handle=%p, wszUsername=%ls, dwFlags=%d, wszServiceTarget=%ls
HandleAcquireTokens
HandleAcquireTokensWithNGC
HandleAddUserToSsoGroup
HandleApproveSession
HandleAssociateDeviceToUserInternal
HandleCleanupIdentity
HandleCompleteConnect
HandleConnectIdentity
HandleConnectIdentityInternal
HandleCreateContext
HandleCreateContext failed, hr = %x
HandleCreateContextForLinkedIdentity
HandleCreateContextWithChallenge
HandleCreateContextWithLogonId
HandleCreateIdentity
HandleCreateNotificationContext
HandleDeleteContextEx
HandleDeleteIdentity
HandleDeleteNotificationContext
HandleDeProvisionDeviceId
HandleDisableTrace
HandleDisassociateDeviceFromUserInternal
HandleDisconnectIdentity
HandleEnableTrace
HandleEnumDevices
HandleEnumerateUserAssociatedDevices
HandleEnumIdentities
HandleGetAppData
HandleGetAuthError
HandleGetCachedTokens
HandleGetConfigDWORDValue
HandleGetConfigString
HandleGetDefaultUserForTarget
HandleGetDeviceDAToken
HandleGetDeviceId
HandleGetDeviceIdEx
HandleGetDeviceName
HandleGetDeviceNameInternal
HandleGetDeviceShortLivedToken
HandleGetExtendedError
HandleGetHIPChallenge
HandleGetIdentityProperty
HandleGetIdName
HandleGetInlineUrlContextData
HandleGetIssuerCertificate
HandleGetIssuerCertificate: failed to CertCreateCertificateContext 0x%X
HandleGetKeyLatestInternal
HandleGetKeyWithVersionInternal
HandleGetNextNotification
HandleGetOneTimeCredential
HandleGetOpenHandlesData
HandleGetProofOfPossessionTokens
HandleGetScenarioInlineUrlWithContextData
HandleGetServiceConfig
HandleGetSignedTokens
HandleGetSvcEnvironment
HandleGetTotpCode
HandleGetUserExtendedProperty
HandleGetUserPropertiesFromHandle
HandleGetUserPropertiesFromSystemStore
HandleGetUsersFromSsoGroup
HandleHasPersistedCredential
HandleImportIdentity
HandleInitializeEx
HandleIsKiosk
HandleListSessions
HandleManageApprover
HandlePersistCredentialForConnectedUser
HandlePersistCredentialInternal
HandleProvisionDeviceId
HandlePublishDevice
HandlePublishRequest
HandlePublishRequestInternal
HandleRegisterUserIdkey
HandleRemovePersistedCredential
HandleRemoveUserFromSsoGroup
HandleRenewCertificate
HandleRenewDeviceId
HandleResolveDevice
HandleResolveDeviceInternal
HandleResolveUser
HandleResolveUserInternal
HandleSendOneTimeCode
HandleSetAuthData
HandleSetDefaultUserForTarget
HandleSetHIPSolution
HandleSetOptions
HandleSetUserExtendedProperty
HandleUnpublishAllServices
HandleUnpublishDevice
HandleUpdateConnectedIdentity
HandleUpdateDeviceLicenseInfo
HandleUpdateDeviceReaders
HandleUpdateDeviceReaders is noop as system is not publishing currently.
HandleUpdateDeviceReaders reader being removed doesn't exist. will ignore.
HandleUpdateDeviceReadersInternal
HandleUpdateToken
HandleUpdateUserAssociatedDevicePropertiesInternal
HandleVerifyAssertion
HandleWatsonReport
Handling WNF notification %ls with timestamp %d
HARDWARE\DESCRIPTION\System\BIOS
HardwareCollectionFailure
HardwareDeviceHWCollectionTime
HardwareDeviceProvisioning
HardwareDeviceProvisioningTime
HardwareInfo
hardwareInfoElement is null.
Hash generated by CCryptSHA1Hash is too small
HashDigestLength
HasRemaining(ulNumToRead)
HcL$ HcD$$H
HcNh9H
HcT$(H
HcT$0H
HcUwI
hDeviceIdentity
hDeviceIdentity != nullptr
hDeviceIdentity passed in INVALID.
hDeviceIdentity passed in NULL.
hDeviceIdentity=%p
hDeviceIdentity=%p,pCertContext=%p,pwszDeviceId=%p
HeapAlloc
HeapDestroy
HeapFree
HeapReAlloc
HeapSize
hExistingDeviceId != nullptr
hIdentity
hIdentity != nullptr
HIPAudioSolution
HIPSolution
Hololens
Host name is NULL in URL : %ls. (0x%x)
hr = ((CSingleIdentity*)hDeviceIdentity)->QueryInterface(EDeviceIdentityType, (void**)&pDeviceIdentityObj)
hr = ((CSingleIdentity*)hIdentity)->QueryInterface(EDeviceIdentityType, (void**)&pDeviceIdentityObj)
hr = ::CreateDOM(CA2WEX<>(strKeyPurposesXml, CP_UTF8), cvNamespaces, pXMLDoc)
hr = ::DeleteAllCertificatesFromCertStore(hCertStore)
hr = _pIdWrapper->GetCredProperty(hIdentity, PPCRL_CREDPROPERTY_CID, webCookieData.Id)
hr = _pIdWrapper->GetOneTimeCredential(hIdentity, IDCRL_WEBAUTH_NONE, _appID, tokenPurpose, url, token, &unsignedToken, &timeSkew)
hr = _pServiceWrapper->GetConfigString(c_wsz_cfg_CookieP3PHeader, colorCookieData.P3PHeader)
hr = _pServiceWrapper->GetConfigString(c_wsz_cfg_CookieP3PHeader, webCookieData.P3PHeader)
hr = AcquireProvisioningMutex( true, failureThreshold, bMutexAcquired, bAttemptProvisioning)
hr = AddDATokenRequest(rgRequestsOut)
hr = AppendDeviceDaTokenToRequestXml(&serviceExecutionContext, strAuthToken, strTokenId, false )
hr = AppendInlineUrlContextDataInternal( pExecutionContext, false, false, inlineUrlDataLocal)
hr = AppendInlineUrlContextDataInternal(pExecutionContext, appendPlatform, appendUiFlavor, inlineUrlLocal)
hr = AppendLoginKeyTokenToRequestXml(&serviceExecutionContext, strAuthToken, NGC_DISPLAY_ALT_CRED_OPTION)
hr = AppendLoginKeyTokenToRequestXml(pExecutionContext, JWTXml, NGC_DONOT_DISPLAY_ALT_CRED_OPTION)
hr = AssignIdentityProperty(&apIdentityProperty[dwPropCount], L"CID", wstrPropertyValue)
hr = AssignIdentityProperty(&apIdentityProperty[dwPropCount], L"DisplayName", wstrPropertyValue)
hr = AssignIdentityProperty(&apIdentityProperty[dwPropCount], L"UserName", wstrPropertyValue)
hr = AssociateDeviceToUserHelper(pUserIdentity, pDeviceIdentity, strFriendlyName, 0)
hr = AssociateDeviceToUserHelper(pUserIdentity, pDeviceIdentity, strFriendlyName, dwAssocType)
hr = AssociateSystemDeviceToConnectedUser(hUser)
hr = Authenticate(nullptr )
hr = autoCredBag.DeSerializeCredentials(pBuffer, cbBuffer)
hr = AutoProxyInfo::Allocate(pLocalProxyInfo)
hr = AutoProxyInfo::Allocate(pProxyInfo)
hr = autoRevert.Revert(false)
hr = Base64EncodeA( pExponent, pKeyBlob->cbPublicExp, &spEncodedExponent)
hr = Base64EncodeA( pModulus, pKeyBlob->cbModulus, &spEncodedModulus)
hr = Base64EncodeA(randomBytes, sizeof(randomBytes), &spEncodedRandom)
hr = Base64EncodeA(spHashValue, hashSize, &spEncodedHash)
hr = Base64EncodeA(spSignatureValue, signatureSize, &spEncodedSignature)
hr = Base64UrlEncodeWithNoPadding( spEncryptedJwsPayload, encryptedJwsPayloadSizeBytes, jwsPayload)
hr = Base64UrlEncodeWithNoPadding(jwtHeader, encodedJwsHeader)
hr = Base64UrlEncodeWithNoPadding(jwtPayload, encodedJwsPayload)
hr = Base64UrlEncodeWithNoPadding(spExponent, exponentSizeBytes, transportKeyExponent)
hr = Base64UrlEncodeWithNoPadding(spHashBlob, hashBlobSizeBytes, keyId)
hr = Base64UrlEncodeWithNoPadding(spModulus, modulusSizeBytes, transportKeyModulus)
hr = BuildDigestedReferences()
hr = BuildProvisionRequest_Internal(userType)
hr = BuildRequestBody(strBody)
hr = BuildRequestEx(wszAuthData, dwRequestFlags, dwRequestCount, rgRequests)
hr = BuildRequestInternal(false, false)
hr = BuildThrottleKey(pCallerIdentity, throttleScenario, throttleKey)
hr = CacheResStrings(lcid)
hr = CAuthInfo::DecryptSystemContextString(pExecutionContext, pLoginProofToken, decryptedToken)
hr = CAuthInfo::EncryptCredentialsInSystemContext(&executionContext, reinterpret_cast<char*>(static_cast<BYTE*>(spTotpKeyData)), totpKeySizeInBytes, credsOut)
hr = CAuthInfo::EncryptCredentialsInSystemContext(pExecutionContext, plain.GetBuffer(), plain.GetLength() * sizeof(CHAR), blob)
hr = CAuthInfo::EncryptStringInSystemContext(&executionContext, token.GetToken(), tokenBlob)
hr = CAuthInfo::GetSessionKeyType(bstrValue, sessionKeyType)
hr = CAuthRequest::ParseResponse(pResponse, responseSizeCharacters, errorCategory)
hr = CClientConfigDataCacheManager::theConfigDataManager().GetConfigString(wszType, wstrCfgValue)
hr = CClientConfigDataCacheManager::theConfigDataManager().GetEnvironment(wstrEnvironment)
hr = CClientConfigDataCacheManager::theConfigDataManager().GetServiceURI( wszPropertyName, wstrValue)
hr = CClientConfigDataCacheManager::theConfigDataManager().GetServiceURI(c_wszConfigWLDomain, colorCookieDomain)
hr = cConfigLocal.ResetOptions(pOptions)
hr = cConfigLocal.SetOptions(pOptions)
hr = CertGetSubjectName(pCertContext, strCID)
hr = CheckAdminPermission()
hr = CheckDigestedReferences()
hr = CheckIdentityNameAndPassword(userType)
hr = CheckSignedInfo()
hr = ChunkAndWriteProofOfPossessionTokenCacheEntry(userName, tokenData, spEncryptedBuffer, encryptedBufferLength)
hr = CleanupSystemStoreEntryForSid(userSid)
hr = client.GetLogonId(logonId)
hr = client.GetLogonId(luid)
hr = client.GetSessionId(currentSessionId)
hr = client.GetSessionId(dwSessionId)
hr = client.GetSessionId(dwSessionID)
hr = client.GetSessionId(sessionId)
hr = client.GetTokenUser(pszNtUserSid)
hr = client.GetTokenUser(pszSid)
hr = client.GetTokenUser(sid)
hr = client.GetTokenUser(userSid)
hr = client.ImpersonateClient(&ContextToken)
hr = client.ImpersonateClient(&hContextToken)
hr = client.ImpersonateClient()
hr = client.IsImpersonatingSystem(isSystem)
hr = client_local.GetLogonId(logonId)
hr = client_local.ImpersonateClient()
hr = ClipGenerateDeviceLicenseRequest(spClipHandle, pcbBlobSize, ppbLicenseRequest)
hr = ClipInstallLicense( spClipHandle, cbLicenseBlobSize, pbLicenseBlob, *pLicenseType, &associatedId)
hr = ClipOpen(&spClipHandle)
hr = CManagementBaseRequest::GetCredentials(usePuid, isSystemDID, credentialXml)
hr = CManagementBaseRequest::GetHardwareInfo(pServiceExecutionContext, hardwareInfo)
hr = CManagementBaseRequest::GetTpmInfo(pServiceExecutionContext, tpmInfo)
hr = ComputeRawSignature(strSigValue)
hr = ComputeReferenceDigest(xmlRef, strEncodedDigest)
hr = ComputeServerKeyId( spUserIdKeyPublic, userIdKeyPublicSizeBytes, serverKeyId)
hr = ComputeSHADigest(xmlRef, strEncodedDigest)
hr = configManager.TriggerNewFilesDownload(wstrConfigVersion)
hr = ConstructDeviceInfo(pCertContext, pszKeypair, &rgDeviceInfo[dwCount].wszKeypair, &rgDeviceInfo[dwCount].pbDeviceCert, &rgDeviceInfo[dwCount].cbDeviceCert )
hr = ConstructDeviceInfo(pCertCtxt, pszKeypair, pwszKeypair, ppbDeviceCert, pcbDeviceCert )
hr = ConstructDeviceInfo(pCertCtxt, pszKeypair, pwszKeypair, ppbDeviceCert, pcbDeviceCert)
hr = ConstructTokenResponse(pIdentity, token, encryptToken, rgResponse[i])
hr = ConvertA2W(sessionKey, sessionKeyW)
hr = ConvertW2A(bstrEncryptedKey, strEncodedSessionKey)
hr = ConvertW2A(bstrSessionSecret, strEncodedSessionKey)
hr = ConvertW2A(pOriginalXml, originalUTF8)
hr = ConvertW2A(strOutput, redactedXml)
hr = ConvertW2A(wstrSessionKey, sessionKey)
hr = ConvertW2A(wszEncodedEncryptedData, strEncodedEncryptedData)
hr = ConvertW2A(wszPUID, strPUID)
hr = CopyDAFromDefaultIdentity(pDeviceIdentity)
hr = CopyResponseString(&rgResponses[i].wszAuthChallenge, wszFlowUrl)
hr = CopyResponseString(&rgResponses[i].wszInlineAuthUrl, authUrl)
hr = CopyResponseString(&rgResponses[i].wszInlineEndAuthUrl, endAuthUrl)
hr = CPPCRLBaseRequest::ComputeServerKeyId( pNgcPublicKey, ngcPublicKeySizeBytes, serverKeyId)
hr = CPPCRLRequest::ExtractSessionKey(pServiceExecutionContext, pXmlRSTResponse, sessionKeyObfuscated)
hr = CPPCRLRequest::ParseResponse(pResponse, responseSizeCharacters, errorCategory)
hr = CPPCRLRequest::ValidateAndCopyRequests( dwRequestCount, rgRequests, rgRequestsOut)
hr = CreateDeviceIdentityHandle( wstrNewMembername, m_dwType, hNewIdentityLocal)
hr = CreateDeviceIdentityHandle(wszName, m_dwType, hIdentity)
hr = CreateDOM(response, k_cvPPCRLSTSNamespaces, pXmlResponse)
hr = CreateNewIdentity(hIdentity)
hr = CredSerializationHelper::DecryptBufferInPlaceForSameLogon(execContextLite.GetWinApiFunctions(), pBuffer, &cbBuffer)
hr = CredSerializationHelper::EncryptBufferForSameLogon(pContext->GetWinApiFunctions(), spEncodedBuffer, encodedBufferLength, &spEncryptedBuffer, &encryptedBufferLength)
hr = CStringSrv::GetStringForID( node.dwErrorMsgId, wstrErrMsg)
hr = CStringSrv::Initialize()
hr = CStringSrv::InitializeGlobals()
hr = CSystemStore::AddGlobalPublishedService()
hr = CSystemStore::EnumIdentities(pszSid, logonId, dwEnumFlags, wszFilterPropertyName, wszFilterPropertyValue, arrMemberNames )
hr = CSystemStore::HasDefaultUser(pszSid, logonId, fAlreadyAssociated)
hr = CSystemStore::IsPublishing(&fPublishing)
hr = CSystemStore::RemoveGlobalPublishedService(1)
hr = CSystemStore::RemoveGlobalPublishedService(dwServicesCount)
hr = CTokenInfo::AssembleTokenBlob(pTheCred, PPCRL_CRED_AUTHSTATE_KEYWORD, wstrAuthInfoBlob)
hr = CUserExtendedProperty::GetExtProperty(wszUserName, wszPropertyName, wstrPropertyValue)
hr = CUserExtendedProperty::SetExtProperty(wszUserName, wszPropertyName, wszPropertyValue)
hr = CWLIDCCHelper::ConvertToAnsi(&memoryManager, wstrSessionKey, &spSessionKeyBlob)
hr = CWLIDCCHelper::ConvertToWide(&memoryManager, sessionKeyProtected, &spSessionKeyProtectedBlob)
hr = CWLIDCCHelper::GetSID(pExecutionContextLite->GetWinApiFunctions(), pUserName, &spSid)
hr = DecryptPassword(pEncodedEncryptedPassword, clearPassword)
hr = DecryptPasswordAndRewriteIfNeeded(wstrDeviceIDKey, wstrUsername, bstrEncryptedPassword, passwordVersion.bstrVal, ctLastUpdatedTime, ctDAInvalidationTime, wstrPwd)
hr = DecryptPasswordAndRewriteIfNeeded(wstrDeviceIDKey, wstrUsername, wstrPassword, passwordVersion, ctLastUpdatedTime, ctDAInvalidationTime, wstrPwd)
hr = DeleteHelper()
hr = DeleteIdentityStore(hUser, false, NULL, wstrCIDPropValue, isAssociated)
hr = DeleteIdentityStore(renameAccountData.hOldUser, true, hTransaction, cid, isAssociated)
hr = DeleteIdentityStore(renameAccountData.hOldUser, true, NULL, cid, isAssociated)
hr = DeleteTicketsForUser(pUserId)
hr = DeleteUserAllExtendedProperties(wszUserName)
hr = DelimiterSeperatedToMultiSzString(pPolicies, PPCRL_LINEBREAK_DELIMITER, policyMultiSzString)
hr = DelimiterSeperatedToMultiSzString(pTargets, PPCRL_LINEBREAK_DELIMITER, targetMultiSzString)
hr = DeviceIdHelpers::AuthDevice( hIdentity, m_cMetadata.m_cDeviceData, hrLocal)
hr = DeviceIdHelpers::CheckAuthToken(hIdentity, bAuthTokenAvailable)
hr = DeviceIdHelpers::DeProvisionDeviceId(wcszAppId, dwDeviceType, dwFlags, hDeviceIdentity, PPCRL_E_DEVICEID_DEPROVISION_CALL)
hr = DeviceIdHelpers::GenerateRandomPassword(wszPassword)
hr = DeviceIdHelpers::GetDeviceAuthToken(flags, token, deviceAuthToken, refreshTokenIfNeeded)
hr = DeviceIdHelpers::GetDeviceCertificate(hIdentity, ppCertContext, ppszKeypair)
hr = DeviceIdHelpers::GetDeviceIdentityObject(wstrAppId, dwDeviceType, dwFlags, pvAdditionalParams, dwInternalFlags, hIdentity, bReturnedNotAssociated)
hr = DeviceIdHelpers::GetDeviceIDHelper(wcszAppId, dwDeviceType, dwFlags, pvAdditionalParams, 0, &pCertCtxt, &pszKeypair, hDeviceIdentity, bReturnedNotAssociated )
hr = DeviceIdHelpers::GetPUID(hDeviceIdentity, pCertCtxt, &wszDeviceId)
hr = DeviceIdHelpers::GetPUID(hDeviceIdentity, ppCertContext?*ppCertContext:NULL, pwszDeviceId)
hr = DeviceIdHelpers::GetRawPUIDFromCert(pCertContext, strPUID)
hr = DeviceIdHelpers::HandleRenewDeviceId(&serviceExecutionContext, g_szStrongAuthAppId, hDeviceIdentity->GetUserType(), 0, hDeviceIdentity, hNewDeviceIdentity, nullptr, nullptr)
hr = DeviceIdHelpers::HandleRenewDeviceId(&serviceExecutionContext, g_szStrongAuthAppId, pDeviceIdentity->GetUserType(), 0, pDeviceIdentity, pNewDeviceIdentity, nullptr, nullptr)
hr = DeviceIdHelpers::HandleRenewDeviceId(&serviceExecutionContext, g_szStrongAuthAppId, pIdentity->GetUserType(), 0, pDeviceIdentity, pNewDeviceIdentity, nullptr, nullptr)
hr = DeviceIdHelpers::InternalRetrieveDeviceCert(this, true, m_cMetadata.m_cDeviceData.GetIsSystem(), ppCertContext, ppszKeypair )
hr = DeviceIdHelpers::ProvisionDeviceId(g_szWindows7AppId, IDCRL_DEVICE_ID_SYSTEM, 0, hDeviceIdentity)
hr = DeviceIdHelpers::ProvisionDeviceId(pwszAppId, dwDeviceType, dwFlags, hDeviceIdentity)
hr = DeviceIdHelpers::ProvisionDeviceId(wcszAppId, dwDeviceType, dwFlags, hDeviceIdentity)
hr = DeviceIdHelpers::RenewDeviceId( g_szWindows7AppId, IDCRL_DEVICE_ID_SYSTEM, 0, hDeviceIdentity, NULL, NULL)
hr = DeviceIdHelpers::RenewDeviceId(wcszAppId, dwDeviceType, dwFlags | IDCRL_DEVICE_ID_RENEW_CERT, hDeviceIdentity, NULL, NULL)
hr = DeviceIdHelpers::RetrieveDeviceID( g_szStrongAuthAppId, 0, nullptr, IDCRL_DEVICE_ID_GET_VALID_DA_TOKEN, nullptr, nullptr, nullptr, pDeviceIdentity)
hr = DeviceIdHelpers::RetrieveDeviceID(g_szPhysicalAssociationAppId, IDCRL_DEVICE_ID_PHYSICAL | IDCRL_DEVICE_ID_GET_VALID | dwFlags, NULL, WLID_DEVICEID_I_RENEW_DA_TOKEN, NULL, NULL, NULL, hPhysicalDeviceIdentity )
hr = DeviceIdHelpers::UpdateDeviceLicenseInfo(&serviceExecutionContext, HardwareChangeState::TolerantChange)
hr = DeviceIdHelpers::Validate(g_szWindows7AppId, IDCRL_DEVICE_ID_SYSTEM, 0)
hr = DeviceIdHelpers::Validate(pwszAppId, dwDeviceType, dwFlags)
hr = DeviceIdHelpers::Validate(wcszAppId, dwDeviceType, dwFlags)
hr = DeviceIdHelpers::VerifyInitialization()
hr = DeviceIdStore::AddAppIdToPersistantStore(m_wstrDeviceKey, wstrDeviceName, wstrAppId)
hr = DeviceIdStore::AddDeviceInfoToPersistantStore( m_wstrDeviceIDKey, this->GetIdentityName(), nullptr, wszPassword, m_ctLastUpdatedTime, m_ctDAInvalidationTime, m_bIsHardwareBound == false)
hr = DeviceIdStore::AddDeviceInfoToPersistantStore(deviceIdKey, pUsername, nullptr, clearPassword, lastUpdatedTime, daInvalidationTime, true)
hr = DeviceIdStore::AddHardwareInfoToPersistantStore( m_wstrDeviceIDKey, this->GetIdentityName(), m_ctHardwareBoundTime, m_tpmKeyStateClient, m_tpmKeyStateServer, m_licenseKeySequenceServer, m_licenseInstallError, m_licenseKeyVersionClient)
hr = DeviceIdStore::DeleteDeviceCredMan(m_cMetadata.m_strCredManAppName)
hr = DeviceIdStore::GetRegistryKey(eUserType, wstrRegKey)
hr = DeviceIdStore::GetRegistryKey(GetUserType(m_dwType), m_wstrDeviceIDKey)
hr = DeviceIdStore::LoadPersistedDOM(wstrDeviceIDKey, wstrDeviceIDName, true, pDOM)
hr = DeviceIdStore::SaveDOM(wstrDeviceIDKey, wstrDeviceIDName, pDOM)
hr = DeviceIdStore::Shutdown()
hr = deviceLicenseFunctions->FormatDeviceLicenseRequest(cbDeviceLicenseReqSize,spDeviceLicenseReq, hardwareInfo)
hr = deviceLicenseFunctions->GetDeviceLicenseRequest(&cbDeviceLicenseReqSize, &spDeviceLicenseReq)
hr = DownloadAndReloadConfig()
hr = DuplicateString(sessionItem.displaySessionId, response[index]->DisplaySessionId)
hr = DuplicateString(sessionItem.expirationTime, response[index]->ExpirationTime)
hr = DuplicateString(sessionItem.puid, response[index]->Puid)
hr = DuplicateString(sessionItem.requestTime, response[index]->RequestTime)
hr = DuplicateString(sessionItem.sessionId, response[index]->SessionId)
hr = DuplicateString(sessionItem.sessionType, response[index]->SessionType)
hr = DuplicateString(sessionItem.state, response[index]->State)
hr = DuplicateString(webCookies[i].CookieData, response[i]->Data)
hr = DuplicateString(webCookies[i].CookieName, response[i]->Name)
hr = DuplicateString(webCookies[i].P3PHeader, response[i]->P3PHeader)
hr = DWordAdd(cbOption, sizeof(WCHAR), &bufferSize)
hr = DWordMult(sizeof(WLIDResponseParams), dwRequestCount, &responseSize)
hr = E_INVALIDARG
hr = E_OUTOFMEMORY
hr = E_UNEXPECTED
hr = EncryptCredentialsInSystemContext(&executionContext, const_cast<PWSTR>(wszPassword), wcslen(wszPassword)*sizeof(wchar_t), credsOut)
hr = EncryptCredentialsInSystemContext(&executionContext, strTokenBlob.GetBuffer(), strTokenBlob.GetLength() * sizeof(char), credsOut)
hr = EncryptRequest(strRequest)
hr = ExtensionAPI::FormatUserDisplayName(firstName, lastName, &displayName, nullptr)
hr = ExtensionAPI::FormatUserDisplayName(firstName, lastName, &pDisplayName, nullptr)
hr = ExtractSessionKey(&serviceExecutionContext, pxmlnTokenResponse, sessionKey)
hr = FamilyNotifications::CompareFamilyIDValues(familyID, spExistingFamilyID, familyIDChanged)
hr = FamilyNotifications::GetFamilyIDFromSystemStore(&context, spSid, spExistingFamilyID)
hr = FamilyNotifications::GetFamilyIDFromSystemStore(pExecutionContextLite, spSid, spExistingFamilyID)
hr = FamilyNotifications::GetFlagFromSystemStore(&context, spSid, existingFamilySafetySetting)
hr = FamilyNotifications::GetFlagFromSystemStore(pExecutionContextLite, spSid, familySafetySetting)
hr = FamilyNotifications::GetFlagValue(&context, flags, familySafetySettingFromResponse)
hr = FamilyNotifications::GetFlagValue(pExecutionContextLite, spFlags, familySafetySetting)
hr = FamilyNotifications::GetUserSid(&context, wstrIdentityName, spSid)
hr = FamilyNotifications::GetUserSid(pExecutionContextLite, pUserName, spSid)
hr = g_algProvCache.GetAlgorithmProv( BCRYPT_SHA256_ALGORITHM, 0, hAlgProv)
hr = g_algProvCache.GetAlgorithmProv( m_wstrAlgId, BCRYPT_ALG_HANDLE_HMAC_FLAG, hAlgProv)
hr = g_algProvCache.GetAlgorithmProv( xmlRef.m_wstrAlgIdDigest, 0, hAlgProv)
hr = g_NotificationTable.CreateQueue(logonId, dwTypes, ppszEventName, phNotify)
hr = g_NotificationTable.DeleteQueue(pLuid, hNotify)
hr = g_NotificationTable.NextNotification(hNotify, logonId, pNotification)
hr = g_pPPCRL->GetCertManager()->GetCert(m_pIdentity, m_rgRequests[i].wszServiceTarget, dwTTL, &pCertCtxt, NULL, NULL, NULL, NULL )
hr = g_pPPCRL->GetIdentityStore()->AddAndGetDeviceIdentity(hDeviceIdentityLocal, hDeviceIdentity)
hr = g_pPPCRL->GetIdentityStore()->AddAndGetDeviceIdentity(hNewIdentityLocal, hNewIdentity)
hr = g_pPPCRL->GetIdentityStore()->AddAndGetDeviceIdentity(hRandomIdentity, hDeviceIdentity)
hr = g_pPPCRL->GetIdentityStore()->CloseIdentityHandle(dwFlags, logonId, h)
hr = g_pPPCRL->GetIdentityStore()->CloseIdentityHandle(pParam->m_dwFlags, pParam->m_LogonId, pParam->m_handle)
hr = g_pPPCRL->GetIdentityStore()->GetDeviceIdentityMap().AssociatDeviceToApp( ((CSingleIdentity*)pDeviceIdentityObj)->GetUserType(), pDeviceIdentityObj->GetIdentityName(), wstrAppId)
hr = g_pPPCRL->GetIdentityStore()->GetDeviceIdentityMap().AssociatDeviceToApp(hDeviceIdentity->GetUserType(), hDeviceIdentity->GetIdentityName(), wstrAppId)
hr = g_pPPCRL->GetIdentityStore()->GetDeviceIdentityMap().AssociatDeviceToApp(hNewIdentity->GetUserType(), hNewIdentity->GetIdentityName(), appId)
hr = g_pPPCRL->GetIdentityStore()->GetDeviceIdentityMap().GetAssociatedDeviceName(GetUserType(dwType), wstrAppId, true, wstrDeviceIdName, bDeviceIdValid)
hr = g_pPPCRL->GetIdentityStore()->GetDeviceIdentityMap().GetValidDeviceIDKey(GetUserType(dwType), wstrDeviceIdName)
hr = g_pPPCRL->GetIdentityStore()->GetDeviceIdentityMap().UpdateValidDeviceIDKey( ((CSingleIdentity*)pDeviceIdentityObj)->GetUserType(), ((CSingleIdentity*)pDeviceIdentityObj)->GetIdentityName())
hr = g_pPPCRL->GetIdentityStore()->GetNewIdentityHandle(logonId, CStringW(L""), hContextToken, dwPID, CStringW(wszMemberName), 0, &hLinkedIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetNewIdentityHandle(logonId, pszSid, hContextToken, dwPID, CStringW(wszMemberName), dwFlags, pHandle)
hr = g_pPPCRL->GetIdentityStore()->GetOpenHandles(aResponse)
hr = g_pPPCRL->GetIdentityStore()->GetPersistedUserNameBySsoGroup(logonId, dwSSOGroup, wstrExistingUserName)
hr = g_pPPCRL->GetIdentityStore()->GetPersistedUserNameBySsoGroup(logonId, dwSSOGroup, wstrMemberName)
hr = g_pPPCRL->GetIdentityStore()->GetSignedInUsernames(logonId, dwSessionId, wszFilterPropertyName, arrMemberNames)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, *pHandle, pIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, handle, hIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, handle, pIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, handle, pUserIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, hLinkedIdentity, pLinkedIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, hUser, hIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, hUser, pUserIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetSingleIdentity(logonId, renameAccountData.hNewUser, renameAccountData.pNewIdentity)
hr = g_pPPCRL->GetIdentityStore()->GetTokenBagByName(logonId, rgwszMemberNamesSignedIn[dwNames], hTokenBag)
hr = g_pPPCRL->GetIdentityStore()->GetTokenBagByName(logonId, wszUsername, hTokenBag)
hr = g_pPPCRL->GetIdentityStore()->GetTokenBagByName(logonId, wszUserName, hTokenBag)
hr = g_pPPCRL->GetIdentityStore()->RemoveDeviceIdentity(hDeviceIdentityLocal->GetIdentityName())
hr = g_pPPCRL->GetIdentityStore()->RemoveDeviceIdentity(pDeviceIdentityObj->GetIdentityName())
hr = g_pPPCRL->GetIdentityStore()->SetPersistedSsoGroupUser(logonId, dwSSOGroup, L"")
hr = g_pPPCRL->GetIdentityStore()->SetPersistedSsoGroupUser(logonId, dwSSOGroup, wszUsername)
hr = g_pPPCRL->GetNegativeCacheManager()->CheckNegativeCache( rgRequests[i].wszServiceTarget, rgRequests[i].wszServicePolicy, pIdentity, (pIdentity->GetUserType() == PPCRL_EMAIL))
hr = g_pPPCRL->GetNegativeCacheManager()->CheckNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceAuthScenario)
hr = g_pPPCRL->GetNegativeCacheManager()->CheckNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceProvisioningScenario)
hr = g_pPPCRL->GetNegativeCacheManager()->CheckNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceUpdateLicenseScenario)
hr = g_pPPCRL->GetNegativeCacheManager()->CheckNegativeCacheForScenario( NegativeCache::Scenarios::NegativeCacheForDeviceRequests, NegativeCache::SubScenarios::NegativeCacheForDeviceUpdateScenario)
hr = g_pPPCRL->GetThrottleManager()->CheckCurrentLimit(this, throttleScenario, false)
hr = g_pPPCRL->SetAppSettings(&options, false)
hr = g_pPPCRL->SetAppSettings(&options, true)
hr = g_pPPCRL->SetAppSettings(NULL, false)
hr = g_pPPCRL->VerifyInitialized()
hr = g_UserCIDCache.AddCID(strUserName, wszCID)
hr = g_WLIDTimerQueue.QueueWorkItem(CloseIdentityHandleProc, pParam, 0, WT_EXECUTEONLYONCE | WT_EXECUTELONGFUNCTION | WT_TRANSFER_IMPERSONATION )
hr = GenRandomNumber(reinterpret_cast<LPBYTE>(&handle), sizeof(handle))
hr = GenRandomNumber(reinterpret_cast<LPBYTE>(&handle), static_cast<DWORD>(sizeof(handle)))
hr = GetActiveTSSessionID(pServiceWinApi, &sessionId)
hr = GetAppIdDeviceMap(eUserType, spAppIdDeviceMap)
hr = GetAppSettings(appKey, cConfig)
hr = GetAttribute(pXmlReader, g_bstrDeviceDAInvalidationTime, wstrDAInvalidationTime)
hr = GetAttribute(pXmlReader, g_bstrDeviceHardwareBoundTime, wstrHwdBoundTime)
hr = GetAttribute(pXmlReader, g_bstrDeviceLastUpdatedTime, wstrLastUpdatedTime)
hr = GetAttribute(pXmlReader, g_bstrDevicePwdVersion, passwordVersion)
hr = GetAttribute(pXmlReader, g_bstrDeviceTpmKeyStateClient, wstrTpmKeyStateClient)
hr = GetAttribute(pXmlReader, g_bstrDeviceTpmKeyStateServer, wstrTpmKeyStateServer)
hr = GetAttribute(pXmlReader, g_bstrDeviceUsername, wstrTargetName)
hr = GetBasicProfileFolderPath( FOLDER_PROGRAM_DATA, NULL, aikLocation.GetBuffer(MAX_PATH + 1), MAX_PATH)
hr = GetCachedIdentities(wszCachedCredType, arrMemberNames)
hr = GetCredentials(fUsePUID, fIsSystemDID, credentialXml)
hr = GetCredProperty(PPCRL_CREDPROPERTY_LINKEDIDS, wstrLinkedIds)
hr = GetCredProperty(PPCRL_CREDPROPERTY_LINKID, wstrLinkId)
hr = GetCredProperty(PPCRL_CREDPROPERTY_LINKVER, wstrLinkVer)
hr = GetDeviceCreds().GetMembername(m_cMetadata.m_cDeviceData, wszName)
hr = GetDeviceIdInternal( g_szStrongAuthAppId, 0, NULL, 0, &wszDeviceId, NULL, NULL, &pDeviceIdentity )
hr = GetDeviceIdInternal(wcszAppId, dwFlags, pvAdditionalParams, IDCRL_DEVICE_ID_NO_DA_TOKEN, &wszDeviceId, &pCertCtxt, &pszKeypair, &pIdentity )
hr = GetDeviceOneTimeToken(nullptr, strDeviceAuthToken)
hr = GetDeviceRegistryKey(PPCRL_DEVICE_LOGICAL, deviceName, deviceRegKey)
hr = GetDeviceRegistryPath(pExecutionContextLite, deviceName, deviceRegKeyPath)
hr = GetDeviceRegistryPath(pExecutionContextLite, keyIdentifier, deviceRegKeyPath)
hr = GetDeviceSessionKeyFromStore(pExecutionContextLite, deviceName, sessionKeyProtected)
hr = GetECDSASignatureFromHardware( bpHash.GetBuffer(), cbHash, rgbSignature, sizeof(rgbSignature))
hr = GetEncryptedSessionKey(pxmlnTokenResponse, accountCid, bpSessionKey, sessionKeyType)
hr = GetExtendedPropertyInternal(c_wszExtendedPropertyCertThumb, wstrThumbprint)
hr = GetExtendedPropertyInternal(c_wszExtendedPropertyKeyContainerName, wstrKeyContainer)
hr = GetHardwareInfo(&serviceExecutionContext, hardwareInfoXml)
hr = GetHMACDigest(strComputedSigValue)
hr = GetIdentityProperties(pUserId, identityPropertyArray)
hr = GetIdentityPropertyHelper(hIdentity, PPCRL_CREDPROPERTY_FIRSTNAME, wstrPropertyValue)
hr = GetIdentityPropertyHelper(hIdentity, PPCRL_CREDPROPERTY_PUIDSTR, wstrPropertyValue)
hr = GetIdentityPropertyHelper(hIdentity, wszPropertyName, wstrPropertyValue)
hr = GetIssuerCertificate(spCertContext, fGetFromExpiredStore, spIssuerCertContext)
hr = GetKeyAttestationXml(pAttestationKeyCert, certSizeBytes, pAttestationClaim, claimSizeBytes, attestationXml)
hr = GetKeyLatestNoLock(pExecutionContext, strPurpose, FALSE, latestKey)
hr = GetKeyLatestNoLock(pExecutionContext, strPurpose, FALSE, oCurKey)
hr = GetLogonId(logonId)
hr = GetMessageForPinPrompt( pServiceExecutionContext, m_pIdentity, messageForPinPrompt)
hr = GetNotRegisteredPuids(&pNotRegisteredPuids, &dwPuidCount)
hr = GetOneTimeToken( m_pIdentity, strUserAuthToken)
hr = GetOneTimeToken(hDeviceIdentity, strAuthToken)
hr = GetOneTimeToken(hNewDeviceIdentity, strAuthToken)
hr = GetOneTimeToken(m_pIdentity, oneTimeToken, true)
hr = GetPersistedCredential(wstrCredentialType, wstrCredential, &bDaTokenPresent)
hr = GetProvider(kspProviderName, &spProviderHandle)
hr = GetProvider(MS_PLATFORM_KEY_STORAGE_PROVIDER, &spProviderHandle)
hr = GetPublicKeyXml(pPublicKey, publicKeySizeBytes, publicKeyXml)
hr = GetRegistryKey(deviceType,deviceKey)
hr = GetRegistryPath(deviceType, deviceName, deviceRegKeyPath)
hr = GetRequestStatus()
hr = GetRPCClientAppKey(appKey)
hr = GetSessionData(&pSessionData, &dwSessionCount)
hr = GetSessionKeyFunctions(sessionKey.GetSessionKeyType(), &pSessionKeyFunctions)
hr = GetSessionKeyFunctions(sessionKey.GetSessionKeyType(), pSessionKeyFunctions1)
hr = GetSessionKeyFunctions(sessionKey1Type, pSessionKeyFunctions1)
hr = GetSessionKeyFunctions(sessionKey2Type, pSessionKeyFunctions2)
hr = GetSessionKeyToSign(sessionKey, pDeviceIdentity, authToken)
hr = GetStateForServerResult(pParams->pServiceExecutionContext, pParams->InterruptCode, pParams->InterruptFlags, state)
hr = GetSystemDeviceIdentifier(&serviceExecutionContext, systemDeviceIdentifier)
hr = GetSystemHardwareID(pServiceExecutionContext, IDCRL_DEVICE_ID_FROMCACHE, hIdentity)
hr = GetTokenSid(sid)
hr = GetTpmInfo(&serviceExecutionContext, tpmInfoXml)
hr = GetUserLanguages(L'\0', langList.GetAddressOf())
hr = GetVersionAndObjectBuffer( apVersionAndObjectBuffer, encodedSize, &serializationVersion, &pObjectBuffer, &serializedBufferSize)
hr = GetWindowsAIK(&spAikKeyHandle)
hr = GetWindowsAIKLocation(aikLocation)
hr = GetWNFStateNameString(stateName, stateNameString)
hr = GetXMLNodeText(pXmlInternalErr, k_bstrSoapFaultInternalErrorText, bstrErrText)
hr = HandleAddUserToSsoGroup(wszMemberName, SSO_GROUP_OPTION_SESSION, (dwLocalFlags & SSO_ALL_GROUPS))
hr = HandleConnectIdentity(renameAccountData.hNewUser, &connectFlags, hTransaction)
hr = HandleConnectIdentity(renameAccountData.hNewUser, &connectFlags, NULL)
hr = HandleCreateContext(renameAccountData.newEmailId, 0, &renameAccountData.hNewUser)
hr = HandleCreateContext(wstrExistingUserName, 0, &handle)
hr = HandleCreateContext(wszMemberName, 0, pHandle)
hr = HandleEnumIdentities( WLID_ENUMIDENTITIES_SIGNEDIN, L"", L"", &cNames, &rgwszMemberNamesSignedIn)
hr = HandleGetDeviceDAToken(pExecutionContext, &pDeviceDA)
hr = HandleHasPersistedCredential(handle, PPCRL_CREDTYPE_PASSWORD, &bHasPersistentCred)
hr = HandlePersistCredential(renameAccountData.hNewUser, PPCRL_CREDTYPE_PASSWORD, 0)
hr = HandleRemovePersistedCredential(hUser, PPCRL_CREDTYPE_PASSWORD, WLID_REMOVECREDENTIAL_DEFAULT_CRED)
hr = HandleRenewDeviceId(g_szWindows7AppId, IDCRL_DEVICE_ID_SYSTEM, 0)
hr = HandleResolveUser(hUser, pwszUserName, dwFlags, &pszCID )
hr = HandleUpdateDeviceReaders(TRUE, hUser, TRUE, 1, (PWSTR*)&pwszUserName, FALSE)
hr = hDeviceIdentity->QueryInterface(EDeviceIdentityType, (void**)&pDeviceIdentityObj)
hr = hIdentity->GetCredBag()->StoreCredential( PPCRL_CREDTYPE_PASSWORD, wszPassword )
hr = hIdentity->GetCredBag()->StoreCredential(PPCRL_CREDTYPE_NGCKEYNAME, spKeyName)
hr = hIdentity->GetCredBag()->StoreCredential(PPCRL_CREDTYPE_PASSWORD, wszPwd)
hr = hIdentity->GetOneTimeCredential(dwFlags, wcszAppId, wcszTarget, wcszPolicy, wcszAdditionalParams, wstrWebAuthUrl, wstrOneTimeCredential)
hr = hIdentity->GetRequestStatus()
hr = hIdentity->GetTokenBag()->CacheAndEncryptPersistedPassword(wstrPassword)
hr = hIdentity->ImportAuthState(LogonId, NULL, wstrAuthInfoBlob)
hr = hIdentity->PersistCertificates()
hr = hIdentity->ProvisionIdentity(GetUserType(dwType), hrSendResult)
hr = hIdentity->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pDeviceIdentity))
hr = hIdentity->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pDeviceIdentityObj))
hr = hIdentity->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pSystemDeviceIdentity))
hr = hIdentity->SetIdentityName( LogonId, wstrUsername )
hr = hIdentity->SetIdentityName(LogonId, wstrUsername)
hr = hIdentity->SetPUID(wszDeviceId)
hr = HmacHashHelper(hProv, spSecretKey, CALG_SHA1, spAHashBlob, aHashBlobSize, spLabelAndSeed, labelAndSeedLength, &spResultHashBlob, &resultHashSize )
hr = HmacHashHelper(hProv, spSecretKey, CALG_SHA1, spAHashPrevious, aHashBlobSize, nullptr, 0, &spAHashBlob, &aHashBlobSize )
hr = HmacHashHelper(hProv, spSecretKey, CALG_SHA1, spLabelAndSeed, labelAndSeedLength, nullptr, 0, &spAHashBlob, &aHashBlobSize )
hr = hNewIdentity->GetCredBag()->StoreCredential(PPCRL_CREDTYPE_PASSWORD, wstrPwd)
hr = HRESULT_FROM_NT(LsaLookupUserAccountType(nullptr, &accountType))
hr = HRESULT_FROM_NT(NCryptCreateClaim( hSubjectKey, hAuthorityKey, NCRYPT_CLAIM_SUBJECT_ONLY, nullptr, nullptr, 0, &attestationClaimSizeBytes, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptCreateClaim( hSubjectKey, hAuthorityKey, NCRYPT_CLAIM_SUBJECT_ONLY, nullptr, spAttestationClaim, attestationClaimSizeBytes, &attestationClaimSizeBytes, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptExportKey( hKey, NULL, BCRYPT_OPAQUE_KEY_BLOB, nullptr, spKeyBlob, keyBlobSizeBytes, &keyBlobSizeBytes, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptExportKey( spKeyHandle, NULL, BCRYPT_PUBLIC_KEY_BLOB, nullptr, nullptr, 0, &transportKeyPublicSizeBytes, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptExportKey( spKeyHandle, NULL, BCRYPT_PUBLIC_KEY_BLOB, nullptr, spTransportKeyBlob, transportKeyPublicSizeBytes, &transportKeyPublicSizeBytes, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptGetProperty( spAikKeyHandle, NCRYPT_CERTIFICATE_PROPERTY, nullptr, 0, &aikCertSizeBytes, NCRYPT_FLAGS ))
hr = HRESULT_FROM_NT(NCryptGetProperty( spAikKeyHandle, NCRYPT_CERTIFICATE_PROPERTY, spAikCert, aikCertSizeBytes, &aikCertSizeBytes, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptGetProperty( spProviderHandle, NCRYPT_PCP_EKCERT_PROPERTY, reinterpret_cast<PBYTE>(&spCertStore), sizeof(spCertStore), &ekCertSizeBytes, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptOpenKey( spProviderHandle, &spKeyHandle, spTransportKeyName, 0, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptOpenKey( spProviderHandle, &spKeyHandle, WINDOWS_AIK, 0, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptSetProperty( spAikKeyHandle, NCRYPT_CERTIFICATE_PROPERTY, NULL, 0, NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(NCryptSetProperty( spProviderHandle, NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY, reinterpret_cast<PBYTE>(aikLocation.GetBuffer()), aikLocation.GetLength() * sizeof(WCHAR), NCRYPT_FLAGS))
hr = HRESULT_FROM_NT(RtlSubscribeWnfStateChangeNotification( &subscription, stateName, changeStamp, pfnEventHandler, nullptr, nullptr, 0, 0 ))
hr = HRESULT_FROM_WIN32( pExecutionContextLite->GetWinApiFunctions()->SetNamedSecurityInfoW( L"USERS\\" SYSTEM_USER_KEYPATH, SE_REGISTRY_KEY, DACL_SECURITY_INFORMATION | PROTECTED_DACL_SECURITY_INFORMATION | LABEL_SECURITY_INFORMATION, NULL, NULL, dacl, sacl))
hr = HRESULT_FROM_WIN32(::BCryptCreateHash( spAlgorithm, &spHash, nullptr, 0, static_cast<PUCHAR>(const_cast<BYTE*>(pKey)), static_cast<ULONG>(keySizeBytes), 0))
hr = HRESULT_FROM_WIN32(::BCryptDecrypt( spKey, static_cast<PUCHAR>(const_cast<BYTE*>(pEncryptedBlob)), encryptedBlobSizeBytes, nullptr, static_cast<PUCHAR>(const_cast<BYTE*>(pInitializationVector)), initializationVectorSizeBytes, nullptr, 0, &resultSizeBytes, BCRYPT_BLOCK_PADDING))
hr = HRESULT_FROM_WIN32(::BCryptDecrypt( spKey, static_cast<PUCHAR>(const_cast<BYTE*>(pEncryptedBlob)), encryptedBlobSizeBytes, nullptr, static_cast<PUCHAR>(const_cast<BYTE*>(pInitializationVector)), initializationVectorSizeBytes, spDecryptedBlob, resultSizeBytes, &resultSizeBytes, BCRYPT_BLOCK_PADDING))
hr = HRESULT_FROM_WIN32(::BCryptFinishHash( spHash, reinterpret_cast<PUCHAR>(static_cast<BYTE*>(spHashBlob)), hashBlobSizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptGenerateSymmetricKey( spAlgorithm, &spKey, nullptr, 0, static_cast<PUCHAR>(const_cast<BYTE*>(pEncryptionKey)), encryptionKeySizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptGenerateSymmetricKey( spDeriveAlg, &spDeriveKey, nullptr, 0, static_cast<PUCHAR>(const_cast<BYTE*>(pSecret)), secretSizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptGenRandom(nullptr, random, sizeof(random), BCRYPT_USE_SYSTEM_PREFERRED_RNG))
hr = HRESULT_FROM_WIN32(::BCryptGetProperty( spAlgorithm, BCRYPT_HASH_LENGTH, reinterpret_cast<PUCHAR>(&hashBlobSizeBytes), sizeof(hashBlobSizeBytes), &resultSizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptHashData( spHash, static_cast<PUCHAR>(const_cast<BYTE*>(pMessage)), messageSizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptKeyDerivation( spDeriveKey, &keyDerivationDescription, pDerivedKey, derivedKeySizeBytes, &keySizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptOpenAlgorithmProvider( &spAlgorithm, BCRYPT_AES_ALGORITHM, nullptr, 0))
hr = HRESULT_FROM_WIN32(::BCryptOpenAlgorithmProvider( &spAlgorithm, pAlgId, nullptr, providerFlags))
hr = HRESULT_FROM_WIN32(::BCryptOpenAlgorithmProvider( &spDeriveAlg, BCRYPT_SP800108_CTR_HMAC_ALGORITHM, nullptr, 0))
hr = HRESULT_FROM_WIN32(::BCryptSetProperty( spAlgorithm, BCRYPT_CHAINING_MODE, reinterpret_cast<PUCHAR>(BCRYPT_CHAIN_MODE_CBC), static_cast<ULONG>(sizeof(BCRYPT_CHAIN_MODE_CBC)), 0))
hr = HRESULT_FROM_WIN32(ERROR_ACCESS_DISABLED_BY_POLICY)
hr = HRESULT_FROM_WIN32(ERROR_DEVICE_REINITIALIZATION_NEEDED)
hr = HRESULT_FROM_WIN32(ERROR_INVALID_DATA)
hr = HRESULT_FROM_WIN32(ERROR_INVALID_WINDOW_HANDLE)
hr = HRESULT_FROM_WIN32(ERROR_NOT_FOUND)
hr = HRESULT_FROM_WIN32(ERROR_PRIVILEGE_NOT_HELD)
hr = HRESULT_FROM_WIN32(GetLastError())
hr = HRESULT_FROM_WIN32(lastError)
hr = HRESULT_FROM_WIN32(LOCAL_STATUS)
hr = HRESULT_FROM_WIN32(pCacheKey->Open(hkcu, PPCRL_REG_ACTIONCENTER_KEYPATH, READ_CONTROL | WRITE_OWNER | WRITE_DAC))
hr = HRESULT_FROM_WIN32(pNgcFunctions->BCryptGenRandom(nullptr, randomBytes, sizeof(randomBytes), BCRYPT_USE_SYSTEM_PREFERRED_RNG))
hr = HRESULT_FROM_WIN32(pRegKey->Create(hkcu, PPCRL_REG_ACTIONCENTER_KEYPATH, REG_NONE, REG_OPTION_NON_VOLATILE, KEY_READ | KEY_WRITE, NULL, &disposition))
hr = HRESULT_FROM_WIN32(pRegKey->DeleteSubKey(PPCRL_REG_ACTIONCENTER_KEYNAME))
hr = HRESULT_FROM_WIN32(pRegKey->Open(GetCurrentUserKey(), PPCRL_REG_IDCRL_PATH, KEY_READ | KEY_WRITE | DELETE))
hr = HRESULT_FROM_WIN32(pRegKey->SetDWORDValue(PPCRL_REG_ACTIONCENTER_CODE, static_cast<DWORD>(interruptCode)))
hr = HRESULT_FROM_WIN32(pRegKey->SetDWORDValue(PPCRL_REG_ACTIONCENTER_ROOT_LEVEL_INTERRUPT, (isRootLevelInterrupt ? 1 : 0)))
hr = HRESULT_FROM_WIN32(pRegKey->SetMultiStringValue(PPCRL_REG_ACTIONCENTER_POLICIES, policyMultiSzString))
hr = HRESULT_FROM_WIN32(pRegKey->SetMultiStringValue(PPCRL_REG_ACTIONCENTER_TARGETS, targetMultiSzString))
hr = HRESULT_FROM_WIN32(pRegKey->SetStringValue(PPCRL_REG_ACCOUNT_SETTINGS_URL, pAccountSettingUrl))
hr = HRESULT_FROM_WIN32(pRegKey->SetStringValue(PPCRL_REG_ACTIONCENTER_APPID, pAppId))
hr = HRESULT_FROM_WIN32(regOpsStatus)
hr = HRESULT_FROM_WIN32(returnValue)
hr = hSystemDeviceId->GetServiceToken(SERVICE_TARGET_PASSPORT, ppcrlAuthToken)
hr = hSystemDeviceId->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pSystemDeviceIdentity))
hr = hTokenBag->AddSSOGroup(dwSSOGroup)
hr = hTokenBag->ClearUserExtProperties()
hr = hTokenBag->RemoveSSOGroup(dwSSOGroup)
hr = hTokenBag->SetUserExtPropertyValue(wszPropertyName, wszPropertyValue)
hr = identityStorage.UpdateIdentityNameProperties(puid, renameAccountData.newEmailId, firstName, lastName)
hr = ImportRawKeyIntoCSP( hProv, pSecret, secretLength, keyImportAlgId, importFlags, &spSecretKey)
hr = InitializeDeviceRequest(pUserIdentity, pDeviceIdentity)
hr = InitializeDownloadMgr()
hr = InitializePathsAndMutableConfigs()
hr = InitializeProtocol()
hr = InitMetaData()
hr = InMemoryEncryptW( g_pPPCRL->GetSessionRandomKey().GetHandle(), clearTextPassword, encryptedPassword )
hr = InterruptNotifications::GetNotificationData( hrRequest, &serviceExecutionContext, pIdentity, static_cast<LPCWSTR>(sid), pRequestParams, requestCount, pRSTRequest, notificationFlags, triggerRequestTargets, triggerRequestPolicies, hrRequestStatus )
hr = InterruptNotifications::InitializeGlobals()
hr = IsAuthDisabledByPolicy(&serviceExecutionContext, pIdentity)
hr = IsAuthDisabledByPolicy(pExecutionContext)
hr = IsCallerAccountType(SECURITY_LOCAL_SYSTEM_RID, isSystemContext)
hr = IsCallerInTokenRequestAllowedList(pIdentity)
hr = IsDomainConnected(renameAccountData.oldEmailId, isDomainConnected)
hr = IsPasswordChangedInCloud(pServiceExecutionContext, pIdentity, hrRequest, isPasswordStale)
hr = IsPublishing(&fPublishing)
hr = IsSmartCardCert_Helper(pCertContext, fSmartCardCert)
hr = IsTokenAppContainer(hThreadToken, isTokenAppContainer)
hr = IsUserAADJoined(isAADJoinedUser)
hr = LiteCryptUtilities::Base64EncodeA(pBlob, blobSizeBytes, &base64EncodedBlob)
hr = LiteCryptUtilities::ComputeHash( spKeyId, keyIdSizeBytes, nullptr, 0, 0, &spHashBlob, &hashBlobSizeBytes)
hr = LiteCryptUtilities::ComputeHash(pbTimeStep.GetBuffer(), pbTimeStep.GetLength(), reinterpret_cast<BYTE*>(totpSharedKeyBlob.GetBuffer()), totpSharedKeyBlob.GetLength(), BCRYPT_ALG_HANDLE_HMAC_FLAG, &spHash, &hashLen, BCRYPT_SHA1_ALGORITHM)
hr = LiteCryptUtilities::ComputeHash(reinterpret_cast<const BYTE*>(message.GetString()), message.GetLength(), nullptr, 0, 0, &spMessageDigest, &digestLen)
hr = LiteCryptUtilities::DecryptContent( key.GetBuffer(), key.GetLength(), reinterpret_cast<const BYTE*>(initializationVector.GetString()), initializationVector.GetLength(), reinterpret_cast<const BYTE*>(cipherText.GetString()), cipherText.GetLength(), &spDecryptedBlob, &decryptedBlobSizeBytes)
hr = LiteCryptUtilities::DeriveKeyWithSP800108( sessionKey.GetBuffer(), sessionKey.GetLength(), context.GetBuffer(), context.GetLength(), label.GetString(), derivedKey.GetBufferSetLength(derivedKeySizeBytes), derivedKeySizeBytes)
hr = LiteCryptUtilities::GetPublicKeyComponents( pKeyPublic, keyPublicSizeBytes, &spExponent, &exponentSizeBytes, &spModulus, &modulusSizeBytes)
hr = LiteCryptUtilities::GetPublicKeyComponents( pPublicKey, publicKeySizeBytes, &spEncodedModulus, &spEncodedExponent)
hr = LiteCryptUtilities::GetPublicKeyComponents( spTransportKeyPublic, transportKeyPublicSizeBytes, &spExponent, &exponentSizeBytes, &spModulus, &modulusSizeBytes)
hr = LiteCryptUtilities::GetPublicKeyComponents(spTransportKeyPublic, transportKeyPublicSizeBytes, &spTransportKeyExponent, &transportKeyexponentSize, &spTransportKeyModulus, &transportKeyModulusSize)
hr = LoadXMLDocumentFromString(pOriginalXml, namespaces, xmlDocument)
hr = LoadXMLDocumentFromString(strText, cvNamespaces, pDOMXml)
hr = LoadXMLFromString(resourceXML, &rpXMLConfigData)
hr = localArrNotRegPuids.Allocate(static_cast<DWORD>(m_arrNotRegPuids.GetCount()))
hr = lpStream->Seek(liBeggining, STREAM_SEEK_SET, NULL)
hr = lpStream->Write((void const*)CStringA(wstrXMLData), (ULONG)ulSize, (ULONG*)&ulBytesWritten)
hr = m_cConfig.SetOptions(pOptions)
hr = m_hTokenBag->GetUserExtPropertyNames( arrNames )
hr = m_hTokenBag->GetUserExtPropertyValue(wstrPropertyName, wstrValue)
hr = m_hTokenBag->SetUserExtPropertyValue(wstrPropertyName, wstrPropertyValue.Trim())
hr = m_keyCache.BroadcastUpdate( &context, WLID_IDENTITY_KEYUPDATE, KEY_UPDATE_VERSION, KeyUpdateNotification)
hr = m_keyCache.GetKeyLatest(&context, g_wszKeyPurpose_LocalCredential, FALSE, userKey)
hr = m_keyCache.GetKeyLatest(&context, wszPurpose, requireMaterial, key)
hr = m_keyCache.GetKeySpecific(&context, wszPurpose, wszVersion, key)
hr = m_keyCache.ProcessKeyXml(&context, CStringA(CW2AEX<>(static_cast<LPCWSTR>(wstrProperty), CP_UTF8)) )
hr = m_keyCache.ProcessKeyXml(&context, pXMLNode )
hr = m_pAddCredentialRequest->BuildRequest()
hr = m_pAddCredentialRequest->Initialize(this)
hr = m_pIdentity->GetCredBag()->RetrieveCredential(PPCRL_CREDTYPE_NGCKEYNAME, userIdKeyName, TRUE)
hr = m_pIdentity->GetCredBag()->RetrieveCredential(PPCRL_CREDTYPE_PASSWORD, devicePassword)
hr = m_pIdentity->GetCredBag()->RetrieveCredential(PPCRL_CREDTYPE_PASSWORD, wstrSymmetricCred)
hr = m_pIdentity->GetCredProperty(PPCRL_CREDPROPERTY_CID, accountCid)
hr = m_pIdentity->GetCredProperty(PPCRL_CREDPROPERTY_CID, wstrCID)
hr = m_pIdentity->GetOneTimeCredential( 0, NULL, NULL, NULL, NULL, CStringW(), systemDeviceOneTimeCredential, NULL )
hr = m_pIdentity->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pDeviceIdentity))
hr = m_pIdentity->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pSystemDeviceIdObj))
hr = m_pIdentity->UpdateSystemStoreProperties(CredProp)
hr = ManageApproverRequest::Base32WCharToVal(pEncodedString[inputIndex], wcharValue)
hr = ManageApproverRequest::DeleteTotpKeyFromCache(static_cast<LPCWSTR>(keyIdentifier))
hr = messageHash.AddData(pbMessage, cbMessage)
hr = messageHash.GetSize(&cbDigest)
hr = messageHash.GetValue(digest, sizeof(digest))
hr = messageHash.Initialize(BCRYPT_SHA256_ALG_HANDLE, nullptr, 0)
hr = MsaDevice_GenerateEcsdaP256Signature(digest, sizeof(digest), spbSignature, cbSignature)
hr = MsaDevice_GetDeviceAuthXToken(&deviceAuthToken)
hr = MsaUserExtImpl::GetPlatformQualifier(&spPlatform)
hr = NgcGetPkcs7ChainBlobFromCertificateBlob( true, spAikCert, aikCertSizeBytes, &spAikCertChain, &aikCertChainSizeBytes)
hr = NgcTriggerTask(AikCertEnroll)
hr = NotifyKeyUpdate()
hr = ONL_E_ACTION_REQUIRED
hr = ParseAuthData(dwAuthData, pbAuthData, arrAuthData)
hr = ParseChallengeToken(wszChallenge, pszPolicy, dwLocalFlags)
hr = ParseDateTimeString(pCreateTime, createTime)
hr = ParseDateTimeString(pExpireTime, expireTime)
hr = ParseDateTimeString(wstrKeyVersion, keyVersionTimeStamp, TRUE)
hr = ParseDateTimeString(wstrProperty, keyVersionTimeStamp, TRUE)
hr = ParseFaultUrl(pxmlRSTRNode, k_bstrRSTRErrorAuthURLPath, authUrl)
hr = ParseFaultUrl(pxmlRSTRNode, k_bstrRSTRErrorEndAuthURLPath, endAuthUrl)
hr = ParseFaultUrl(pxmlRSTRNode, k_bstrRSTRErrorURLPath, wstrFlowUrl)
hr = ParseFaultUrl(pxmlRSTRNode, k_bstrRSTRErrorWebURLPath, webUrl)
hr = ParseNonRegisteredPuids(pNode)
hr = ParseNumericHResult( pErrorNode, k_bstrSoapFaultInternalErrorCode, hrSubError )
hr = ParseNumericHResult( pXmlInternalErr, k_bstrSoapFaultInternalErrorCode, hrServerInternal )
hr = ParseNumericHResult(pNode, CComBSTR(c_szApproveSessionErrorSubcodePath), hrSubError)
hr = ParseNumericHResult(pNode, CComBSTR(c_szListSessionsErrorSubcodePath), hrSubError)
hr = ParseNumericHResult(pNode, CComBSTR(c_szManageApproverErrorSubcodePath), hrSubError)
hr = ParseNumericHResult(pNode, CComBSTR(c_szUserIdKeyRegistrationErrorSubcodePath), _serverSubError)
hr = ParseNumericHResult(pxmlRSTRNode, k_bstrRSTRAuthRequiredPath, hrAuthRequired)
hr = ParseNumericHResult(pxmlRSTRNode, k_bstrRSTRRequestStatusPath, hrRequestStatus)
hr = ParseSessions(pNode)
hr = PartFromBase64<_T>(pcszSrc, reinterpret_cast<PBYTE>(tempbstr), &cbNeeded, fUsePPVersion)
hr = pAssociateRequest->BuildRequest()
hr = pAssociateRequest->GetResponse()
hr = pAssociateRequest->Initialize(pUserIdentity, pDeviceIdentity, pFriendlyName, associationType)
hr = PassportEncode::Base64Decode( sessionKeyProtected.GetString(), sessionKeyProtected.GetLength(), sessionKeyDecoded)
hr = PassportEncode::Base64Decode(encoded, decoded)
hr = PassportEncode::Base64Decode(encodedSignature, rawSignature)
hr = PassportEncode::Base64Decode(signature, rawSignature)
hr = PassportEncode::Base64Decode(static_cast<BSTR>(cipherText), cipherText.Length(), decodedCipherText)
hr = PassportEncode::Base64Decode(static_cast<BSTR>(nonce), nonce.Length(), decodedNonce)
hr = PassportEncode::Base64Decode(strEncodedSessionKey, strDecodedSessionKey)
hr = PassportEncode::Base64Encode( reinterpret_cast<void*>(pAttestationClaim), claimSizeBytes, encodedClaim)
hr = PassportEncode::Base64Encode( reinterpret_cast<void*>(pAttestationKeyCert), certSizeBytes, encodedCert)
hr = PassportEncode::Base64Encode( reinterpret_cast<void*>(randomByte), sizeof(randomByte), randomBase64)
hr = PassportEncode::Base64Encode( spAikCert, aikCertSizeBytes, encodedCert)
hr = PassportEncode::Base64Encode( spAttestation, attestationSizeBytes, encodedClaim)
hr = PassportEncode::Base64Encode(encrypted, encoded)
hr = PassportEncode::Base64Encode(pCertCtxt->pbCertEncoded, pCertCtxt->cbCertEncoded, strCert)
hr = PassportEncode::Base64Encode(reinterpret_cast<void*>(random), sizeof(random), encodedRandom)
hr = PassportEncode::Base64Encode(spAikCertChain, aikCertChainSizeBytes, encodedAikCertChain)
hr = PassportEncode::Base64Encode(spAttestationClaim, attestationClaimSizeBytes, encodedAttestationClaim)
hr = PassportEncode::Base64Encode(spColorSet, colorSetSizeInBytes, encodedColorSet)
hr = PassportEncode::Base64Encode(spEkCert, ekCertSizeBytes, encodedEkCert)
hr = PassportEncode::Base64Encode(spSignatureBlob, signatureBlobSizeBytes, encodedSignature)
hr = PassportEncode::Base64Encode(spSignatureBlob, signatureBlobSizeBytes, signature)
hr = PassportEncode::Base64Encode(spTransportKeyBlob, transportKeyBlobSize, transportKeyBlob)
hr = PassportEncode::Base64Encode(spTransportKeyExponent, transportKeyexponentSize, transportKeyExponent)
hr = PassportEncode::Base64Encode(spTransportKeyModulus, transportKeyModulusSize, transportKeyModulus)
hr = PassportEncode::Base64Encode(static_cast<void*>(signatureBytes), PPCRL_DEVICE_SIGNING_KEY_LENGTH, signature)
hr = PassportEncode::Base64Encode(strToEncode, strEncoded)
hr = pBase->InitHandle(bAllowCreate, wstrDeviceIdName)
hr = pBindHardwareRequest->BuildRequest()
hr = pBindHardwareRequest->Initialize(this)
hr = pBindHardwareRequest->Send()
hr = pClient->GetTokenUser(sid)
hr = pDeviceHelper->CreateNewDeviceIdentity(deviceType, appId, 0, 0, hExistingDeviceId->GetIdentityName(), hrReprovisionReason, hNewIdentity)
hr = pDeviceHelper->DeProvisionDeviceId(appId, deviceType, IDCRL_DEVICE_ID_FORCE_CLOSE, hExistingDeviceId, hrReprovisionReason)
hr = pDeviceHelper->GetSystemHardwareID(pServiceExecutionContext, 0, hDeviceIdentity)
hr = pDeviceHelper->HandleRenewDeviceId(pServiceExecutionContext, g_szStrongAuthAppId, 0, 0, hIdentityHandle, hNewIdentityHandle, nullptr, nullptr)
hr = pDeviceHelper->ReprovisionDevice(pServiceExecutionContext, appId, 0, reprovisionReason, hExistingDeviceId, hNewDeviceId)
hr = pDeviceHelper->ReprovisionDevice(pServiceExecutionContext, g_szStrongAuthAppId, 0, hr, hDeviceIdentity, hNewDeviceIdentity)
hr = pDeviceHelper->ReprovisionDevice(pServiceExecutionContext, g_szStrongAuthAppId, 0, PP_E_DEVICE_EXISTS_WITH_STRONG_CREDS, hIdentityHandle, hNewIdentityHandle)
hr = pDeviceHelper->ReprovisionDevice(pServiceExecutionContext, g_szStrongAuthAppId, 0, reprovisionReason, hExistingDeviceId, hNewDeviceId)
hr = pDeviceHelper->ReprovisionDevice(pServiceExecutionContext, g_szStrongAuthAppId, 0, reprovisionReason, hSystemDeviceIdentity, hNewSystemDeviceIdentity)
hr = pDeviceHelper->RetrieveDeviceID( g_szStrongAuthAppId, 0, nullptr, IDCRL_DEVICE_ID_GET_VALID_DA_TOKEN, nullptr, nullptr, nullptr, hIdentityHandle)
hr = pDeviceHelper->RetrieveDeviceID( g_szStrongAuthAppId, IDCRL_DEVICE_ID_FROMCACHE, nullptr, NULL, nullptr, nullptr, nullptr, hNewIdentityHandle)
hr = pDeviceHelperWrapper->GetSystemHardwareID(&serviceExecutionContext, IDCRL_DEVICE_ID_FROMCACHE, hSystemDeviceIdentity)
hr = pDeviceHelperWrapper->GetSystemHardwareID(pServiceExecutionContext, IDCRL_DEVICE_ID_FROMCACHE | IDCRL_DEVICE_ID_GET_VALID_DA_TOKEN, hSystemDeviceId)
hr = pDeviceHelperWrapper->HandleRenewDeviceId( pServiceExecutionContext, g_szStrongAuthAppId, 0, 0, hSystemDeviceId, hSystemDeviceIdNew, nullptr, nullptr)
hr = pDeviceHelperWrapper->HandleReprovisionDevice(pServiceExecutionContext, wstrAppId, (hrInternal == PP_E_DEVICE_EXISTS_WITH_STRONG_CREDS || hr == PPCRL_E_DEVICEID_INVALID) ? false : true, (hrInternal == S_OK ) ? hr : hrInternal, hIdentity, hNewIdentity)
hr = pDeviceHelperWrapper->RenewDeviceId(wstrAppId, dwDeviceType, dwFlags, hNewIdentity, ppCertContext, ppszKeypair)
hr = pDeviceHelperWrapper->ReprovisionDevice(&serviceExecutionContext, g_szStrongAuthAppId, 0, hrProvisionFailure == PPCRL_E_DEVICE_KEY_SIGN_FAILURE ? hrProvisionFailure : hrInternal, hSystemDeviceIdentity, hNewSystemDeviceIdentity)
hr = pDeviceIdentity->GetCredBag()->RetrieveCredential( PPCRL_CREDTYPE_PASSWORD, wszPassword )
hr = pDeviceIdentityObj->Provision(false, GetDeviceIdentityFlag(dwDeviceType), hRandomIdentity, hrSendResult)
hr = pDisassociateRequest->BuildRequest()
hr = pDisassociateRequest->GetResponse()
hr = pDisassociateRequest->Initialize(pUserIdentity, pDeviceIdentity, associationDataArray)
hr = pDisplaySessionIDAttr->get_text(&bstrDisplaySessionID)
hr = pDocument.CoCreateInstance(CLSID_DOMDocument60)
hr = pDocument->load(varStream, &bIsOk)
hr = pDocument->setProperty(CComBSTR(XML_PROP_SELECTION_NAMESPACES), cvNamespaces)
hr = pDocumentElement->setAttribute(g_bstrDeviceDAInvalidationTime, cvAttributeValue)
hr = pDocumentElement->setAttribute(g_bstrDeviceLastUpdatedTime, cvAttributeValue)
hr = pDOM->selectSingleNode(CComBSTR(wstrXPath), &pNodeMembername)
hr = pElement->put_text(replacementString)
hr = pEnumDevicesRequest->BuildRequest()
hr = pEnumDevicesRequest->GetResponse(&dwCount, &pNamesTemp, &pFNamesTemp, &dwNamesSize, &dwFriendlyNamesSize )
hr = pEnumDevicesRequest->Initialize(pUserIdentity, strOwnerName, dwAssocType)
hr = pErrorNode->get_text(&errorCode)
hr = PersistCredential()
hr = PersistNewMemberNameCredentials(requestType, response, originalSessionKey, originalSessionKeyType, renameAccountData)
hr = pExecutionContext->CreateRegKey(&pCacheKey.m_p)
hr = pExecutionContext->CreateRegKey(&pRegCredsKey.m_p)
hr = pExecutionContext->CreateRegKey(&pRegKey.m_p)
hr = pExecutionContext->GetCRegKeyWrapper()->Create(&key, HKEY_USERS, SYSTEM_USER_KEYPATH, nullptr, 0, KEY_ALL_ACCESS, nullptr, nullptr)
hr = pExecutionContext->GetServiceWrapper()->HandleAssociateDeviceToUser(g_szStrongAuthAppId, hUser, machineName, DeviceAssociationTypes::TrustedPC )
hr = pExecutionContext->GetServiceWrapper()->HandleCreateContext(L"", 0, &hUser)
hr = pExecutionContext->GetSystemStoreLiteFunctions()->IsConnected(&isConnected, nullptr)
hr = pExpirationTimeAttr->get_text(&bstrExpirationTime)
hr = pIdentity->DeLinkCertObject(DEFAULT_CRED_SLC, &pTempCert)
hr = pIdentity->GetCredBag()->PersistCredential(false, PPCRL_CREDTYPE_PASSWORD)
hr = pIdentity->GetCredBag()->RetrieveCredential( PPCRL_CREDTYPE_PASSWORD, password)
hr = pIdentity->GetCredBag()->StoreCredential(arrAuthData[i].m_wstrCredType, arrAuthData[i].m_wstrCredValue)
hr = pIdentity->GetCredProperty(CStringW(PPCRL_CREDPROPERTY_ASSOCIATEDFORSTRONGAUTH), associatedForStringAuth)
hr = pIdentity->GetCredProperty(PPCRL_CREDPROPERTY_AUTHMEMBERNAME, authMembername)
hr = pIdentity->GetCredProperty(PPCRL_CREDPROPERTY_AUTHMEMBERNAME, renameAccountData.newEmailId)
hr = pIdentity->GetCredProperty(PPCRL_CREDPROPERTY_CID, userCid)
hr = pIdentity->GetCredProperty(PPCRL_CREDPROPERTY_CID, wstrCID)
hr = pIdentity->GetResponseParam(PPCRL_HIPCHALLENGE_AUDIOSOLUTION, wstrAudioHIPSolution)
hr = pIdentity->GetServiceToken(rgRequest[i].wszServiceTarget, token)
hr = pIdentity->PersistCertificates()
hr = pIdentity->PersistServiceTokens()
hr = pIdentity->RemovePersistedCertificates()
hr = pIdentity->RemovePersistedServiceTokens()
hr = pIdentity->SetDefaultUserForTarget(wszServiceTarget)
hr = pIdentity->SetFlags(dwFlags)
hr = pIdentity->SetFlags(dwRequestFlags & ~ACQUIRE_TOKEN_FLAGS_FILTER)
hr = pIdentity->SetIdentityCookie(PPCRL_HIPSOLUTION_SOLUTION_NAME, wstrAudioHIPSolution)
hr = pIdentity->SetRequestParam(wszResponseType, wszHipSolution)
hr = pIdentity->ValidateCreds(pIdentity->GetUserType())
hr = pIdentityObj->QueryInterface(EDeviceIdentityType, (void**)&pDeviceIdentityObj)
hr = pIdentityWrapper->GetCredProperty(hIdentity, PPCRL_CREDPROPERTY_CID, accountCid)
hr = pIdentityWrapper->GetCredProperty(pIdentity, PPCRL_CREDPROPERTY_AUTHMEMBERNAME, accountEmail)
hr = pIdentityWrapper->GetCredProperty(pIdentity, PPCRL_CREDPROPERTY_CID, accountCid)
hr = pIdentityWrapper->GetCredProperty(pIdentity, PPCRL_CREDPROPERTY_PUIDSTR, accountPuid)
hr = pIdentityWrapper->GetOneTimeCredential( hSystemDeviceId, 0, NULL, NULL, NULL, NULL, CStringW(), systemDeviceOneTimeCredential, NULL )
hr = pIdentityWrapper->GetOneTimeCredential( pDeviceIdentity, 0, PPCRL_OTC_REQUESTING_APPID, nullptr, nullptr, nullptr, url, deviceToken, nullptr)
hr = pIdentityWrapper->GetOneTimeCredential( pIdentity, 0, PPCRL_OTC_REQUESTING_APPID, NULL, NULL, NULL, url, userToken, NULL)
hr = pIdentityWrapper->GetOneTimeCredential(pDeviceIdentity, 0, PPCRL_OTC_REQUESTING_APPID, nullptr, nullptr, nullptr, url, deviceToken, nullptr)
hr = pIdentityWrapper->GetOneTimeCredential(pUserIdentity, 0, PPCRL_OTC_REQUESTING_APPID, NULL, NULL, NULL, url, userToken, NULL)
hr = pIdentityWrapper->Lock(&lock)
hr = pKey->selectNodes(c_bstrKeyProperty, &pKeyPropList)
hr = pKeyList->nextNode(&pKey)
hr = pKeyProp->get_text(&bstrText)
hr = pKeyPropList->nextNode(&pKeyProp)
hr = pLinkedIdentity->CopyAuthStateFromLinkedHandle(pIdentity, dwFlags)
hr = pLinkedIdentity->SetCredProperty(PPCRL_CREDPROPERTY_CID, wstrCID)
hr = pMatchingNodeList->get_item(i, &pElement)
hr = pMatchingNodeList->get_length(&matchingNodeCount)
hr = pNgcFunctions->NgcDecryptWithSymmetricPopKey( key.GetBuffer(), key.GetLength(), reinterpret_cast<const BYTE*>(label.GetString()), static_cast<DWORD>(label.GetLength()), context.GetBuffer(), context.GetLength(), reinterpret_cast<const BYTE*>(initializationVector.GetString()), initializationVector.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(cipherText.GetString()), cipherText.GetLength() * sizeof(CHAR), &spDecryptedBlob, &decryptedBlobSizeBytes)
hr = pNgcFunctions->NgcDecryptWithSymmetricPopKey( m_spAuthSessionKey.GetBuffer(), m_spAuthSessionKey.GetLength(), reinterpret_cast<const BYTE*>(LiteCryptUtilities::SeedLabel::SecureConversationRst2), static_cast<DWORD>(strlen(LiteCryptUtilities::SeedLabel::SecureConversationRst2) * sizeof(CHAR)), reinterpret_cast<const BYTE*>(decodedNonce.GetString()), decodedNonce.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(initializationVector.GetString()), initializationVector.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(decodedCipherText.GetString()), decodedCipherText.GetLength() * sizeof(CHAR), &spDecryptedBlob, &decryptedBlobSizeBytes)
hr = pNgcFunctions->NgcEnumUserIdKeys( PPCRL_MSA_IDP_DOMAIN, nullptr, pUserCid, pUserSid, &spKeyInfo, &spEnumState)
hr = pNgcFunctions->NgcEnumUserIdKeys( PPCRL_MSA_IDP_DOMAIN, nullptr, static_cast<PCWSTR>(accountCid), static_cast<PCWSTR>(accountSid), &spKeyInfo, &spEnumState)
hr = pNgcFunctions->NgcEnumUserIdKeys( PPCRL_MSA_IDP_DOMAIN, nullptr, static_cast<PCWSTR>(accountCid), static_cast<PCWSTR>(spUserSid), &spKeyInfo, &spEnumState)
hr = pNgcFunctions->NgcGetSymmetricPopKeyTransportKey( &accountInfo, nullptr, nullptr, keyTypeRequsted, &spTransportKeyPublic, &transportKeyPublicSizeBytes, &spAttestation, &attestationSizeBytes, &spAikCert, &aikCertSizeBytes, &keyTypeActual)
hr = pNgcFunctions->NgcGetSymmetricPopKeyTransportKeyName( &accountInfo, nullptr, &keyType, keyFlags, &spTransportKeyName, pKeyStatus)
hr = pNgcFunctions->NgcGetUserIdKeyPublicKey( pUserIdKeyName, &spPublicKey, &publicKeySizeBytes)
hr = pNgcFunctions->NgcGetUserIdKeyPublicKey( spKeyInfo->pwszKeyName, &ngcPublicKey, &ngcPublicKeySizeBytes)
hr = pNgcFunctions->NgcGetUserIdKeyPublicKey( userIdKeyName, &spUserIdKeyPublic, &userIdKeyPublicSizeBytes)
hr = pNgcFunctions->NgcImportSymmetricPopKey( &accountInfo, nullptr, NGC_DEVICE_KEY_TRANSPORT_KEY, pToken->pSessionKey, pToken->sessionKeyLengthBytes, &decryptedSessionKey, &decryptedSessionKeySizeBytes)
hr = pNgcFunctions->NgcImportSymmetricPopKey( &accountInfo, nullptr, NGC_DEVICE_KEY_TRANSPORT_KEY, reinterpret_cast<const BYTE*>(sessionKey.GetString()), sessionKey.GetLength() * sizeof(CHAR), &decryptedSessionKey, &decryptedSessionKeySizeBytes)
hr = pNgcFunctions->NgcRenewKeyAttestation( PPCRL_MSA_IDP_DOMAIN, nullptr, spUserSid, 0)
hr = pNgcFunctions->NgcSignWithSymmetricPopKey( m_spAuthSessionKey.GetBuffer(), m_spAuthSessionKey.GetLength(), reinterpret_cast<const BYTE*>(LiteCryptUtilities::SeedLabel::SecureConversationRst2), static_cast<DWORD>(strlen(LiteCryptUtilities::SeedLabel::SecureConversationRst2) * sizeof(CHAR)), randomByte, sizeof(randomByte), reinterpret_cast<const BYTE*>(signedInfo.GetString()), signedInfo.GetLength() * sizeof(CHAR), &spSignatureBlob, &signatureBlobSizeBytes)
hr = pNgcFunctions->NgcSignWithSymmetricPopKey( pSessionKey, sessionKeyLength, reinterpret_cast<const BYTE*>(LiteCryptUtilities::SeedLabel::SecureConversation), static_cast<DWORD>(strlen(LiteCryptUtilities::SeedLabel::SecureConversation) * sizeof(CHAR)), randomBytes, sizeof(randomBytes), reinterpret_cast<PBYTE>(static_cast<CHAR*>(spUnsignedEncapsulatedPayload)), static_cast<DWORD>(unsignedEncapsulatedPayloadSize), &spHashValue, &hashSize)
hr = pNgcFunctions->NgcSignWithSymmetricPopKey( pSessionKey.GetBuffer(), pSessionKey.GetLength(), reinterpret_cast<const BYTE*>(LiteCryptUtilities::SeedLabel::SecureConversationRst2), static_cast<DWORD>(strlen(LiteCryptUtilities::SeedLabel::SecureConversationRst2) * sizeof(CHAR)), pRandom, randomSizeBytes, reinterpret_cast<const BYTE*>(signedInfo.GetString()), signedInfo.GetLength() * sizeof(CHAR), &spSignatureBlob, &signatureBlobSizeBytes)
hr = pNgcFunctions->NgcSignWithUserIdKeyEx( userIdKeyName, reinterpret_cast<const BYTE*>(jwtToken.GetString()), jwtToken.GetLength() * sizeof(CHAR), m_windowHandle, messageForPinPrompt.GetString(), ngcCredProviderFlags, &spEncryptedJwsPayload, &encryptedJwsPayloadSizeBytes)
hr = pNgcFunctions->NgcSignWithUserIdKeySilent( userIdKeyName, ngcTicketToken, reinterpret_cast<const BYTE*>(jwtToken.GetString()), jwtToken.GetLength() * sizeof(CHAR), &spEncryptedJwsPayload, &encryptedJwsPayloadSizeBytes)
hr = pNgcFunctions->NgcVerifyWithSymmetricPopKey( key.GetBuffer(), key.GetLength(), reinterpret_cast<const BYTE*>(label.GetString()), static_cast<DWORD>(label.GetLength()), context.GetBuffer(), context.GetLength(), reinterpret_cast<const BYTE*>(message.GetString()), message.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(rawSignature.GetString()), rawSignature.GetLength() * sizeof(CHAR))
hr = pNgcFunctions->NgcVerifyWithSymmetricPopKey( m_spAuthSessionKey.GetBuffer(), m_spAuthSessionKey.GetLength(), reinterpret_cast<const BYTE*>(LiteCryptUtilities::SeedLabel::SecureConversationRst2), static_cast<DWORD>(strlen(LiteCryptUtilities::SeedLabel::SecureConversationRst2) * sizeof(CHAR)), reinterpret_cast<const BYTE*>(strDecodedNonce.GetString()), strDecodedNonce.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(signedInfo.GetString()), signedInfo.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(rawSignature.GetString()), rawSignature.GetLength() * sizeof(CHAR))
hr = pNode->selectNodes(CComBSTR("ps:NotRegistered/ps:PUID"), &pNotRegisteredPuids)
hr = pNode->selectNodes(CComBSTR("ps:Sessions/ps:Session"), &pSessions)
hr = pNode->selectSingleNode(CComBSTR(c_szApproveSessionErrorcodePath), &pErrorNode)
hr = pNode->selectSingleNode(CComBSTR(c_szListSessionsErrorcodePath), &pErrorNode)
hr = pNode->selectSingleNode(CComBSTR(c_szManageApproverErrorcodePath), &pErrorNode)
hr = pNode->selectSingleNode(CComBSTR(c_szManageApproverTOTPSharedKeyPath), &pTotpSharedKey)
hr = pNode->selectSingleNode(CComBSTR(c_szSessionsPath), &pSessionsNode)
hr = pNode->selectSingleNode(CComBSTR(c_szUserIdKeyRegistrationErrorcodePath), &pErrorNode)
hr = pNodeMembername->selectSingleNode(CComBSTR(wstrXPath), &pNodeHwdInfo)
hr = pNonceNode->get_text(&nonce)
hr = pNotRegisteredPuid->get_text(&bstrNonRegisteredPuid)
hr = pNotRegisteredPuids->nextNode(&pNotRegisteredPuid)
hr = PP_E_SESSIONKEY_INVALIDDATA
hr = PPCRL_AUTHSTATE_E_EXPIRED
hr = PPCRL_E_CREDPROP_NOTFOUND
hr = PPCRL_E_DEVICE_ID_REPROVISIONED
hr = PPCRL_E_DEVICE_INVALID_HW_TFLV_BLOB
hr = PPCRL_E_DEVICE_NOT_ABLE_TO_ATTEST_TPM
hr = PPCRL_E_DEVICEID_DISABLED
hr = PPCRL_E_DEVICEID_INTERNAL_ERROR
hr = PPCRL_E_DEVICEID_SERVERCALLNEEDED
hr = PPCRL_E_IDENTITY_NOT_AUTHENTICATED
hr = PPCRL_E_INVALID_AUTH_SERVICE_RESPONSE
hr = PPCRL_E_NGC_REGISTRATION_REQUIRED
hr = PPCRL_NO_SESSION_KEY
hr = PPCRL_REQUEST_E_INVALID_MEMBER_NAME
hr = PPCRL_REQUEST_E_MISSING_PRIMARY_CREDENTIAL
hr = PPCRL_REQUEST_E_RSTR_FAULT
hr = PPCRL_RESPONSE_BADXML
hr = PPCRL_RESPONSE_LICENSE_MISSING
hr = PPCRL_RESPONSE_NOTIMESTAMPORRSTR
hr = pPublishDeviceRequest->BuildRequest()
hr = pPublishDeviceRequest->GetResponse(pdwServerBackOffTime)
hr = pPublishDeviceRequest->Initialize(dwFlags, pDeviceIdentity, pszAddresses, pszFriendlyName )
hr = pPuidAttr->get_text(&bstrPuid)
hr = pPurposeList->nextNode(&pPurposeNode)
hr = pPurposeNode->selectNodes(c_bstrKeyData, &pKeyList)
hr = PrependStringToMultiSzString(static_cast<LPCWSTR>(stringPiece), spMultiSzString)
hr = pRequest->BuildRequest( loginProofToken, "Update", nullptr, 0, serverKeyId, spAttestationStatement, attestationStatementSizeBytes, spAikCertChain, aikCertChainSizeBytes)
hr = pRequest->BuildRequest()
hr = pRequest->BuildRequestEx(L"", 0, dwRequests, rgRequests)
hr = pRequest->ComputeServerKeyId( ngcPublicKey, ngcPublicKeySizeBytes, serverKeyId)
hr = pRequest->GetRequestStatus()
hr = pRequest->GetResponse(&rgResponses)
hr = pRequest->GetServiceEndpoint(wstrHost, wstrUrlPath, nPort)
hr = pRequest->GetServiceTicketRequestData(requestTargets, requestPolicies)
hr = pRequest->Initialize(pIdentity, "")
hr = pRequest->Initialize(renameAccountData.pNewIdentity, "")
hr = pRequest->Initialize(this, "")
hr = pRequest->Initialize(this, fLogicalAuth)
hr = pRequest->ParseResponse(response.GetBuffer(), response.GetLength(), errorCategory)
hr = pRequest->QueryRequestStatus(hrRequestStatus, hasInterrupt )
hr = pRequest->ShouldResendRequest(++requestCounter, resendRequest)
hr = pRequestTimeAttr->get_text(&bstrRequestTime)
hr = pRequestWrapper->BuildApproveSessionNonceRequest( pRequest, pUserName, pAppVersion, pSessionID, pSessionState, pSessionType, static_cast<BYTE*>(ngcPublicKey), ngcPublicKeySizeBytes)
hr = pRequestWrapper->BuildApproveSessionRequest( pRequest, pExecutionContext, nullptr, static_cast<LPCWSTR>(escapedUserToken), pUserName, accountPuid, pAppVersion, pSessionID, pSessionState, pSessionType)
hr = pRequestWrapper->BuildApproveSessionRequest( pRequest, pExecutionContext, static_cast<LPCWSTR>(escapedDeviceToken), nullptr, pUserName, accountPuid, pAppVersion, pSessionID, pSessionState, pSessionType)
hr = pRequestWrapper->BuildListSessionsRequest( pRequest, static_cast<LPCWSTR>(escapedDeviceToken), checkRegistrationFlag, pAppVersion, ppPuids, puidCount)
hr = pRequestWrapper->BuildManageApproverRequest( pRequest, localActionType, pAppVersion, pApplicationSid, pChannelId, static_cast<LPCWSTR>(escapedDeviceToken), accountPuid)
hr = pRequestWrapper->BuildRegisterApproverRequest( pRequest, pAppVersion, pApplicationSid, pChannelId, decryptedToken, static_cast<LPCWSTR>(pDeviceId), static_cast<LPCWSTR>(pDeviceDA), ngcPublicKey, ngcPublicKeySizeBytes)
hr = pRequestWrapper->BuildUserIdKeyRegistrationRequest( pRequest, pLoginProofToken, (useStrongAuth == true) ? "Register" : "RegisterWeak", spPublicKey, publicKeySizeBytes, "", spAttestationStatement, attestationStatementSizeBytes, spAikCertChain, aikCertChainSizeBytes)
hr = pRequestWrapper->GetApproveSessionRequestServerError(pRequest)
hr = pRequestWrapper->GetListSessionsRequestServerError(pRequest)
hr = pRequestWrapper->GetListSessionsResponse(pRequest, &pSessionData, &sessionCount, &pNotRegisteredPuids, &notRegisteredPuidCount)
hr = pRequestWrapper->GetManageApproverRequestServerError(pRequest)
hr = pRequestWrapper->GetTimeStep( pTotpHelper, pbTimeStep, skewAdjustedCurrentTime)
hr = pRequestWrapper->GetUserIdKeyRegistrationRequestServerError(pRequest)
hr = pRequestWrapper->InitializeApproveSessionRequest(pIdentity, pRequest)
hr = pRequestWrapper->InitializeListSessionsRequest(pDeviceIdentityInternal, pRequest)
hr = pRequestWrapper->InitializeManageApproverRequest(pIdentity, pRequest)
hr = pRequestWrapper->InitializeUserIdKeyRegistrationRequest(pIdentity, pRequest, useStrongAuth)
hr = pRequestWrapper->ReadTotpSharedSecret( pTotpHelper, static_cast<LPCWSTR>(keyIdentifier), totpSharedKeyBlob)
hr = pRequestWrapper->SaveApproverTotpKeyToCache(pRequest, static_cast<LPCWSTR>(keyIdentifier), isTotpEnabled)
hr = pRequestWrapper->SendRequest(&transport, pRequest)
hr = pResolveDeviceRequest->BuildRequest()
hr = pResolveDeviceRequest->GetResponse(pszAddresses)
hr = pResolveDeviceRequest->Initialize(pUserIdentity, strDeviceName)
hr = pResolveUserRequest->BuildRequest()
hr = pResolveUserRequest->GetResponse(wszCID)
hr = pResolveUserRequest->Initialize(pUserIdentity, strUserName)
hr = ProcessKeyXml(pExecutionContext, pPurposesNode)
hr = pServiceWrapper->GetCookieData(webCookieManager, hInternal, webCookie)
hr = pServiceWrapper->GetDeviceIdInternal( g_szStrongAuthAppId, IDCRL_DEVICE_ID_FROMCACHE, NULL, IDCRL_DEVICE_ID_NO_ASSOCIATION_UPDATE, NULL, NULL, NULL, &hInternal)
hr = pServiceWrapper->GetDeviceIdInternal( g_szStrongAuthAppId, IDCRL_DEVICE_ID_FROMCACHE, nullptr, NULL, &deviceId, NULL, nullptr, &pDeviceIdentity)
hr = pServiceWrapper->GetDeviceIdInternal( g_szStrongAuthAppId, IDCRL_DEVICE_ID_FROMCACHE, nullptr, NULL, &pDeviceId, nullptr, nullptr, &pDeviceIdentity)
hr = pServiceWrapper->GetDeviceIdInternal( g_szStrongAuthAppId, IDCRL_DEVICE_ID_FROMCACHE, nullptr, NULL, nullptr, NULL, nullptr, &pDeviceIdentity)
hr = pServiceWrapper->GetIdentityHandle(*pLogonId, hUser, pUserIdentity)
hr = pServiceWrapper->GetIdentityHandle(logonId, hDeviceIdentity, pDeviceIdentityInternal)
hr = pServiceWrapper->GetIdentityHandle(logonId, hUserIdentity, hInternal)
hr = pServiceWrapper->GetIdentityHandle(logonId, hUserIdentity, pIdentity)
hr = pServiceWrapper->GetIdentityHandle(logonId, hUserIdentity, pUserIdentity)
hr = pServiceWrapper->GetLogicalDeviceDAToken(flags, token, refreshTokenIfNeeded)
hr = pServiceWrapper->GetLogonId(&client, logonId)
hr = pServiceWrapper->GetServiceURI(k_wstrAccountSettingsURL, inlineUrlLocal)
hr = pServiceWrapper->GetServiceURI(k_wstrCXHNGCUpsell, inlineUrlLocal)
hr = pServiceWrapper->GetServiceURI(k_wstrCXHReAuthURL, inlineUrlLocal)
hr = pServiceWrapper->GetServiceURI(k_wstrCXHSignInUpsellURL, inlineUrlLocal)
hr = pServiceWrapper->GetServiceURI(k_wstrCXHSignInURL, inlineUrlLocal)
hr = pServiceWrapper->GetServiceURI(k_wstrCXHTransientSignInURL, inlineUrlLocal)
hr = pServiceWrapper->GetTokenUser(&client, accountSid)
hr = pServiceWrapper->GetTokenUser(&client, pszSid)
hr = pServiceWrapper->HandleCreateContext(accountId, 0, &hUserIdentity)
hr = pServiceWrapper->HandleCreateContext(L"", 0, &hUser)
hr = pServiceWrapper->HandleCreateContext(pIdentityWrapper->GetIdentityName(pDeviceIdentity), 0, &hDeviceIdentity)
hr = pServiceWrapper->HandleCreateContext(pUserName, 0, &hUserIdentity)
hr = pServiceWrapper->HandleCreateContext(this->GetIdentityName(), 0 , &hUserIdentity)
hr = pServiceWrapper->Impersonate(&client)
hr = pServiceWrapper->IsCallerAccountType(SECURITY_LOCAL_SYSTEM_RID, bIsSystemContext)
hr = pServiceWrapper->IsCallerAccountType(SECURITY_LOCAL_SYSTEM_RID, isSystemContext)
hr = pServiceWrapper->RetrieveDeviceID( g_szStrongAuthAppId, 0, NULL, IDCRL_DEVICE_ID_GET_VALID_DA_TOKEN, NULL, NULL, NULL, hSystemDeviceId )
hr = pSession->selectSingleNode(CComBSTR("ps:DisplaySessionID"), &pDisplaySessionIDAttr)
hr = pSession->selectSingleNode(CComBSTR("ps:ExpirationTime"), &pExpirationTimeAttr)
hr = pSession->selectSingleNode(CComBSTR("ps:PUID"), &pPuidAttr)
hr = pSession->selectSingleNode(CComBSTR("ps:RequestTime"), &pRequestTimeAttr)
hr = pSession->selectSingleNode(CComBSTR("ps:SessionID"), &pSessionIDAttr)
hr = pSession->selectSingleNode(CComBSTR("ps:SessionType"), &pSessionTypeAttr)
hr = pSession->selectSingleNode(CComBSTR("ps:State"), &pStateAttr)
hr = pSessionIDAttr->get_text(&bstrSessionID)
hr = pSessionKeyFunction1->DecryptMessage( pSessionKeyExecutionContext, pEncryptionKey, context, label, derivedKeySizeBytes, initializationVector, cipherText, plainText)
hr = pSessionKeyFunction1->GetDerivedKey( pSessionKeyExecutionContext, logonUserToken, sessionKey1Blob, context, label, derivedKeySizeBytes, pSignatureKey)
hr = pSessionKeyFunction1->GetDerivedKey( pSessionKeyExecutionContext, nullptr, sessionKey1Blob, context, label, derivedKeySizeBytes, pEncryptionKey)
hr = pSessionKeyFunction1->GetDerivedKey( pSessionKeyExecutionContext, nullptr, sessionKey1Blob, context, label, derivedKeySizeBytes, pSignatureKey)
hr = pSessionKeyFunction1->SignMessage( pSessionKeyExecutionContext, pSignatureKey, context, label, derivedKeySizeBytes, message, signature)
hr = pSessionKeyFunction1->VerifySignature( pSessionKeyExecutionContext, pSignatureKey, context, label, derivedKeySizeBytes, message, signature)
hr = pSessionKeyFunction2->DecryptMessage( pSessionKeyExecutionContext, sessionKey2Blob, pEncryptionKey, label, derivedKeySizeBytes, initializationVector, cipherText, plainText)
hr = pSessionKeyFunction2->VerifySignature( pSessionKeyExecutionContext, sessionKey2Blob, pSignatureKey, label, derivedKeySizeBytes, message, signature)
hr = pSessionKeyFunctions->ImportSessionKey( pSessionKeyExecutionContext, identityName, identityCid, sessionKeyBlob, sessionKeyId)
hr = pSessions->nextNode(&pSession)
hr = pSessionSecretNode->get_text(&bstrSessionSecret)
hr = pSessionTypeAttr->get_text(&bstrSessionType)
hr = pStateAttr->get_text(&bstrState)
hr = pStoredId->AddKeywords(CStringW(g_wszKeyword_Connected), fChanged, false, eLocal)
hr = pStoredId->AddKeywords(wstrKeywords, fChanged)
hr = pStoredId->AddService(wstrServiceName, fNewService)
hr = pStoredId->Associate()
hr = pStoredId->Disassociate()
hr = pStoredId->GetFirstProperty(pszProp, pszPropValue)
hr = pStoredId->GetNextProperty(pszProp, pszPropValue)
hr = pStoredId->RemoveAllKeywords()
hr = pStoredId->RemoveAllServices()
hr = pStoredId->RemoveKeywords(CStringW(g_wszKeyword_Connected), fChanged, FALSE, eLocal)
hr = pStoredId->RemoveKeywords(wstrKeywords, fChanged)
hr = pStoredId->RemoveService(wstrServiceName, fExisted)
hr = pStoredId->SetCID(wstrCID)
hr = pStoredId->SetCID(wstrCIDPropValue)
hr = pStoredId->SetProperty(PPCRL_CREDPROPERTY_ACCOUNTTYPE, propertyValue)
hr = pStoredId->SetProperty(PPCRL_CREDPROPERTY_DEFAULTCREDSAVED, L"")
hr = pStoredId->SetProperty(PPCRL_CREDPROPERTY_DEFAULTCREDSAVED, PPCRL_CREDPROPERTY_VALUE_PERSISTED)
hr = pStoredId->SetProperty(PPCRL_CREDPROPERTY_FIRSTNAME, firstName)
hr = pStoredId->SetProperty(PPCRL_CREDPROPERTY_FLAGS, flags)
hr = pStoredId->SetProperty(PPCRL_CREDPROPERTY_LASTNAME, lastName)
hr = pStoredId->SetProperty(pProps[i].pszProperty, pProps[i].pszValue)
hr = pStoredId->SetProperty(propertyName, propertyValue)
hr = pStoredId->SetProperty(WLID_DISPLAY_NAME, displayName)
hr = pStringSrv->GetStringForID(L_CREDUI_CAPTION_VERIFYIDENTITY_T, formatText)
hr = pStringSrv->Initialize(defaultLcid)
hr = pSvcWrapper->GetIdentityHandle(logonId, handle, hIdentity)
hr = pSvcWrapper->GetLogonId(&client, logonId)
hr = pSvcWrapper->GetNewIdentityHandle(logonId, CStringW(pszSid), hContextToken, dwPID, CStringW(wszMemberName), dwFlags, pHandle)
hr = pSvcWrapper->GetServiceURI(urlConfigKey, outputUrl)
hr = pSvcWrapper->GetTokenSid(&client, userSid)
hr = pSvcWrapper->HasAdminPermission()
hr = pSvcWrapper->Impersonate(&client)
hr = pSystemDeviceId->BindDeviceToHardware()
hr = pSystemDeviceId->Delete()
hr = pSystemDeviceId->UpdateDeviceLicenseInfo(hardwareChangeState, sendTpmInfo)
hr = pSystemDeviceIdentity->PersistCredential()
hr = pSystemStore->GetCurrentUserSidString(&spUserSid)
hr = pSystemStoreLiteFunctions->GetCurrentUserSidString(&spCurrentUserSid)
hr = pSystemStoreLiteFunctions->GetCurrentUserSidString(&spSid)
hr = pTokenBagWrapper->GetKeyLatest( hTokenBag, wcszPurpose, requireMaterial, wstrKeyVersion, wstrKeyMaterial)
hr = pTokenBagWrapper->GetKeySpecific( hTokenBag, wcszPurpose, wstrVersion, wstrKeyMaterial)
hr = pTokenBagWrapper->StoreToken( hTokenBag, pToken->pTokenUri, pToken->pToken, L"", CTime(createTime), CTime(expireTime), spSessionKey, pToken->tokenType, sessionKeyType )
hr = pTotpHelper->GetTOTPCode( spHash, hashLen, codeLengthCharacters, &spTotpCode)
hr = pTotpSharedKey->get_text(&_totpSharedKey)
hr = PublishCookie(colorCookieData, true)
hr = pUpdateDeviceLicenseRequest->BuildRequest()
hr = pUpdateDeviceLicenseRequest->Initialize(this)
hr = pUpdateDeviceLicenseRequest->Send()
hr = pUpdateDeviceReaders->BuildRequest()
hr = pUpdateDeviceReaders->Initialize(pUserIdentity, pDeviceIdentity, fAdd, dwReaders, (PCWSTR *)ppszReaderNames )
hr = pUpdateDeviceRequest->BuildRequest()
hr = pUpdateDeviceRequest->GetResponse()
hr = pUpdateDeviceRequest->Initialize(pUserIdentity, pDeviceIdentity, dwAssocType, dwPropCount, pNameValuePair)
hr = pUserIdentity->GetCredProperty(g_wszCIDPropName, wstrCIDPropValue)
hr = pUserIdentity->GetCredProperty(PPCRL_CREDPROPERTY_FIRSTNAME, firstName)
hr = pUserIdentity->GetCredProperty(PPCRL_CREDPROPERTY_FLAGS, flags)
hr = pUserIdentity->GetCredProperty(PPCRL_CREDPROPERTY_LASTNAME, lastName)
hr = pUserIdentity->GetServiceTicket( pExecutionContext, PPCRL_LOGIN_PROOF_TOKEN_URI, PPCRL_LOGIN_PROOF_TOKEN_POLICY_KEYUPDATE, throttleScenario, loginProofToken)
hr = pXboxSignatureProvider->GetEcdsaSignatureFromHardware( reinterpret_cast<PBYTE>(static_cast<CHAR*>(spUnsignedEncapsulatedPayload)), static_cast<DWORD>(unsignedEncapsulatedPayloadSize), &spSignatureValue, &signatureSize)
hr = pXMLConfigData->selectSingleNode(CComBSTR(_T(".//cfg:Configuration")), &pNode)
hr = pXMLConfigData->selectSingleNode(CComBSTR(_T(".//cfg:Settings")), &pNode)
hr = pXMLDoc->selectSingleNode(c_bstrKeyPurposes, &pPurposesNode)
hr = pXmlnEncryptedKey->get_text(&bstrEncryptedKey)
hr = pXMLNode->selectNodes(c_bstrKeyPurpose, &pPurposeList)
hr = pXmlnTokenResponse->selectSingleNode(k_bstrRSTREncryptedKey, &pXmlnEncryptedKey)
hr = pXmlResponse->selectSingleNode(CComBSTR(c_szApproveSessionNonceResponsePath), &pNonceNode)
hr = pXmlResponse->selectSingleNode(CComBSTR(c_szApproveSessionResponsePath), &pNode)
hr = pXmlResponse->selectSingleNode(CComBSTR(c_szListSessionsFailureResponsePath), &pNode)
hr = pXmlResponse->selectSingleNode(CComBSTR(c_szListSessionsSuccessResponsePath), &pNode)
hr = pXmlResponse->selectSingleNode(CComBSTR(c_szManageApproverResponsePath), &pNode)
hr = pXmlResponse->selectSingleNode(CComBSTR(c_szUserIdKeyRegistrationResponsePath), &pNode)
hr = pXmlResponse->selectSingleNode(k_bstrSoapFault, &pErrorNode)
hr = pXmlResponse->selectSingleNode(k_bstrSoapFault, &pXmlInternalErr)
hr = pXmlRSTResponse->selectSingleNode(k_bstrRSTRBinarySecret, &pSessionSecretNode)
hr = pXmlRSTRNode->selectSingleNode(xmlFaultUrlPath, &pFaultUrlNode)
hr = RandomFunctionsInitialize()
hr = ReadCredentialInformation(GetEnvironmentSpecificRegistryKey(ModernDataPropertyRootKey), pUserId, propertybagSerializer, registryHelper, identityPropertyBag)
hr = RedactSensitiveXMLElements( originalUTF8, redactedXml, redactAdditionalPII)
hr = referenceHash.AddData( (const PBYTE)(xmlRef.m_pcszCanonicalizedText), xmlRef.m_cchLenCanonicalizedText)
hr = referenceHash.GetSize(&dwSize)
hr = referenceHash.GetValue( bpDigest.GetBufferSetLength(dwSize, FALSE), dwSize)
hr = referenceHash.Initialize( hAlgProv, NULL, 0)
hr = Reg_QueryString(HKEY_LOCAL_MACHINE, wstrReg, c_wszRemoteFileLink, rRegConfigData.m_strConfigServer )
hr = RegisterWnfEvent(WNF_LIC_DEVICE_LICENSE_MISSING, MsaWnfEventHandler)
hr = RegisterWnfEvent(WNF_LIC_HARDWAREID_IN_DEVICE_LICENSE_IN_TOLERANCE, MsaWnfEventHandler)
hr = RegisterWnfEvent(WNF_LIC_HARDWAREID_IN_DEVICE_LICENSE_OUT_OF_TOLERANCE, MsaWnfEventHandler)
hr = RegisterWnfEvent(WNF_TPM_MAINTENANCE_TASK_STATUS, MsaWnfEventHandler)
hr = registryHelper.GetRootKey(pRegistryFunctions, currentUserKey, hkeyCurrentUser)
hr = registryHelper.ReadBufferFromRegistry( HKEY_LOCAL_MACHINE, REG_BIOS_INFORMATION_KEY, REG_SYSTEM_SKU_VALUE, RRF_RT_REG_SZ, &pRegistryBuffer, &registryBufferSizeBytes)
hr = registryHelper.ReadBufferFromRegistry( NULL, registryKey, registryValueName, RRF_RT_REG_BINARY, &apVersionAndObjectBuffer, &encodedSize)
hr = registryHelper.WriteBufferToRegistry( HKEY_USERS, WLID_REG_SYSTEM_USER_IDCRL_PATH, WLID_REG_PROVIDER_DEFAULT_PASSWORD_CHARACTER_GROUPS, REG_DWORD, reinterpret_cast<BYTE*>(&m_ConfigData.m_dwMinPasswordCharacterGroups), sizeof(m_ConfigData.m_dwMinPasswordCharacterGroups))
hr = registryHelper.WriteBufferToRegistry( HKEY_USERS, WLID_REG_SYSTEM_USER_IDCRL_PATH, WLID_REG_PROVIDER_DEFAULT_PASSWORD_LENGTH, REG_DWORD, reinterpret_cast<BYTE*>(&m_ConfigData.m_dwMinPasswordLength), sizeof(m_ConfigData.m_dwMinPasswordLength))
hr = registryHelper.WriteBufferToRegistry(NULL, GetEnvironmentSpecificRegistryKey(ModernDataPropertyRootKey), pDefaultId, REG_BINARY, apIdentityPropertyBuffer, encodedSize)
hr = renameAccountData.pNewIdentity->GetCredProperty(PPCRL_CREDPROPERTY_FIRSTNAME, firstName)
hr = renameAccountData.pNewIdentity->GetCredProperty(PPCRL_CREDPROPERTY_LASTNAME, lastName)
hr = renameAccountData.pNewIdentity->GetCredProperty(PPCRL_CREDPROPERTY_PUIDSTR, puid)
hr = RenameConnectedAccount(&serviceExecutionContext, renameAccountData)
hr = RenameDomainConnectedAccount(renameAccountData, cid)
hr = RenameLocalConnectedAccount(pExecutionContext, renameAccountData, cid)
hr = RenewUserIdKeyAttestation(pExecutionContext, keyRevoked)
hr = ReprovisionDevice(pServiceExecutionContext, g_szStrongAuthAppId, 0, hr, hIdentity, hNewDeviceIdentity)
hr = SafeCopyMemory( clearText.GetBufferSetLength(decryptedBlobSizeBytes), decryptedBlobSizeBytes, spDecryptedBlob, decryptedBlobSizeBytes)
hr = SafeCopyMemory( plainText.GetBufferSetLength(decryptedBlobSizeBytes), decryptedBlobSizeBytes, spDecryptedBlob, decryptedBlobSizeBytes)
hr = SafeCopyMemory( spKeyId + exponentSizeBytes, modulusSizeBytes, spModulus, modulusSizeBytes)
hr = SafeCopyMemory( spKeyId, keyIdSizeBytes, spExponent, exponentSizeBytes)
hr = SafeCopyMemory(&dwAccessType, sizeof(DWORD), pBuffer, sizeof(DWORD))
hr = SafeCopyMemory(&dwCount, sizeof(dwCount), pRawData, sizeof(DWORD))
hr = SafeCopyMemory(&sessionKey1SizeBytes, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(&sessionKey1Type, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(&sessionKey2SizeBytes, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(&sessionKey2Type, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(*pbstr, cbNeeded, tempbstr, cbNeeded)
hr = SafeCopyMemory(*pData, *pcbData, pNotification->m_pData.GetBuffer(), *pcbData)
hr = SafeCopyMemory(*ppbCACert, pCACertContextLocal->cbCertEncoded, pCACertContextLocal->pbCertEncoded, pCACertContextLocal->cbCertEncoded)
hr = SafeCopyMemory(*ppbIssuerCert, spIssuerCertContext->cbCertEncoded, spIssuerCertContext->pbCertEncoded, spIssuerCertContext->cbCertEncoded)
hr = SafeCopyMemory(apCloudProtocolBuffer->abSerializedProperties, (protocolBufferLength - sizeof(CLOUD_AP_RENAME_ACCOUNT_INPUT) + ANYSIZE_ARRAY), apEncodedBuffer, encodedBufferLength)
hr = SafeCopyMemory(apLocalResultBuffer + sizeof(version), bufferSize - sizeof(version), pEncryptedOut.pbData, pEncryptedOut.cbData)
hr = SafeCopyMemory(apLocalResultBuffer, bufferSize, &version, sizeof(version))
hr = SafeCopyMemory(Buffer, dwSize, &dwCount, sizeof(dwCount))
hr = SafeCopyMemory(bvPasswordKey, sizeof(bvPasswordKey), strPassword.GetBuffer(), min(strPassword.GetLength()+1, sizeof(bvPasswordKey)))
hr = SafeCopyMemory(encrypted.GetBufferSetLength(blob.cbData), blob.cbData, blob.pbData, blob.cbData)
hr = SafeCopyMemory(pAddrInfo->pAddrData[i].pAddress, pAddrInfo->pAddrData[i].cbAddressLen, pSource, pStoredAddresses[i].AddressLen)
hr = SafeCopyMemory(pbDeviceCert, pCertCtxt->cbCertEncoded, pCertCtxt->pbCertEncoded, pCertCtxt->cbCertEncoded)
hr = SafeCopyMemory(pBuffer, bufferSize, pbOption, cbOption)
hr = SafeCopyMemory(pBuffer, bufferSize, pData, dataSize)
hr = SafeCopyMemory(pCur, dwSize - (pCur - Buffer), pCurAddress->Address.lpSockaddr, pCurAddress->Address.iSockaddrLength)
hr = SafeCopyMemory(pCurFName, dwFriendlyNamesSize - (pCurName - reinterpret_cast<PBYTE>(apszFriendlyNames)), (PCWSTR) pItem->pszFriendlyName, dwTempLen)
hr = SafeCopyMemory(pCurName, dwNamesSize - (pCurName - reinterpret_cast<PBYTE>(apszNames)), (PCWSTR)pItem->pszDeviceName, dwTempLen)
hr = SafeCopyMemory(pDest, dwNumRead, m_szMem, dwNumRead)
hr = SafeCopyMemory(pLocalProxyInfo->lpszProxy, bufferSizeBytes, pszProxy, bufferSizeBytes)
hr = SafeCopyMemory(pLocalProxyInfo->lpszProxyBypass, bufferSizeBytes, pszProxyBypass, bufferSizeBytes)
hr = SafeCopyMemory(pSessionKey, sessionKey1SizeBytes, bpSessionKey1.GetBuffer(), sessionKey1SizeBytes)
hr = SafeCopyMemory(pSessionKey, sessionKey2SizeBytes, bpSessionKey2.GetBuffer(), sessionKey2SizeBytes)
hr = SafeCopyMemory(pSessionKey, sizeof(DWORD), &sessionKey1SizeBytes, sizeof(DWORD))
hr = SafeCopyMemory(pSessionKey, sizeof(DWORD), &sessionKey1Type, sizeof(DWORD))
hr = SafeCopyMemory(pSessionKey, sizeof(DWORD), &sessionKey2SizeBytes, sizeof(DWORD))
hr = SafeCopyMemory(pSessionKey, sizeof(DWORD), &sessionKey2Type, sizeof(DWORD))
hr = SafeCopyMemory(pvBuf, ulNumToRead, m_pbBuf, ulNumToRead)
hr = SafeCopyMemory(response.pbSessionKey, bpSessionKey.GetLength(), bpSessionKey.GetBuffer(), bpSessionKey.GetLength())
hr = SafeCopyMemory(rgResponses[i].pbSessionKey, bpSessionKey.GetLength(), bpSessionKey.GetBuffer(), bpSessionKey.GetLength())
hr = SafeCopyMemory(spCredentialAttributes + credentialAttributesSizeInBytes, credentialAttributesMaxSizeInBytes - credentialAttributesSizeInBytes, pAttri->Value, pAttri->ValueSize)
hr = SafeCopyMemory(spDerivedKeyBlob+currentKeyFilledLength, adjustedDerviedKeyLength-currentKeyFilledLength, spResultHashBlob, bytesToCopy)
hr = SafeCopyMemory(spEncodedCert, spCertContext->cbCertEncoded, spCertContext->pbCertEncoded, spCertContext->cbCertEncoded)
hr = SafeCopyMemory(spExponentBlob, pKeyBlob->cbPublicExp, pExponent, pKeyBlob->cbPublicExp)
hr = SafeCopyMemory(spKeyBlob + sizeof(BLOBHEADER) + sizeof(DWORD), rawKeyLength, pRawKey, rawKeyLength)
hr = SafeCopyMemory(spKeyBlob, keyBlobSize, &bhKey, sizeof(BLOBHEADER))
hr = SafeCopyMemory(spLabelAndSeed, labelLength, pLabel, labelLength)
hr = SafeCopyMemory(spModulusBlob, pKeyBlob->cbModulus, pModulus, pKeyBlob->cbModulus)
hr = SafeCopyMemory(spNewMultiSzBuffer + stringLengthBytes, totalStringLengthBytes - stringLengthBytes, spMultiSzString, multiSzstringLengthBytes)
hr = SafeCopyMemory(spNewMultiSzBuffer, totalStringLengthBytes, pStringToAppend, stringLengthBytes)
hr = SafeCopyMemory(static_cast<BYTE*>(spLabelAndSeed) + labelLength, seedLength, pSeed, seedLength)
hr = SafeCopyMemory(szToken + offset, MAX_PATH - offset, "; ", sizeof("; "))
hr = SafeCopyMemory(szToken + offset, MAX_PATH - offset, szBuf, cbBuf)
hr = SaveToRegistry(wstrRegPath, wstrKeyName, CStringW(strProtCreds))
hr = SaveToRegistry(wstrRegPath, wstrKeyName, CStringW(wstrKeyName))
hr = SearchError( errHr, node )
hr = SendInternal( pRequest, wstrHost, nPort, reinterpret_cast<DWORD_PTR>(pRequest), wstrUrlPath)
hr = sendOTCRequest.BuildRequest()
hr = sendOTCRequest.Initialize(hIdentity, wszPurpose, wszChannel, wszChannelValue, dwLcid)
hr = SendRequest(pRequest)
hr = SerializeObject(serializationHelper, tokenParameter, &spEncodedBuffer, &encodedBufferLength)
hr = SerializeObject(serializer, propertyBag, &apEncodedBuffer, &encodedBufferLength)
hr = SerializeObjectWithVersion( propertybagSerializer, identityPropertyBag, CurrentSerializationVersion, &apIdentityPropertyBuffer, &encodedSize)
hr = serviceExecutionContext.GetServiceWrapper()->IsCallerAccountType(SECURITY_LOCAL_SYSTEM_RID, bIsSystemContext)
hr = sessionKeyManager.DecryptWithSessionKey( serviceExecutionContext.GetSessionKeyExecutionContext(), SessionKey(m_spAuthSessionKey, m_sessionKeyType), CBytePtr(reinterpret_cast<PBYTE>(decodedNonce.GetBuffer()), decodedNonce.GetLength(), false), CStringA(LiteCryptUtilities::SeedLabel::SecureConversationRst2), PPCRL_NGC_DERIVED_KEY_LENGTH_BYTES, initializationVector, decodedCipherText, derivedKeyAlgorithm, clearText)
hr = sessionKeyManager.ImportSessionKey( pSessionKeyExecutionContext, pIdentityWrapper->GetIdentityName(m_pIdentity), identityCid, strDecodedSessionKey, sessionKey)
hr = sessionKeyManager.PackSessionKeys(sessionKeyObfuscated, sessionKeyTpm, sessionKey)
hr = sessionKeyManager.SignWithSessionKey( &sessionKeyExecutionContext, hLogonUserToken, SessionKey(pSessionKey, sessionKeyLength, static_cast<SessionKeyTypes::Type>(sessionKeyType)), CBytePtr(randomBytes, ARRAYSIZE(randomBytes), false), CStringA(LiteCryptUtilities::SeedLabel::SecureConversation), PPCRL_NGC_DERIVED_KEY_LENGTH_BYTES, CStringA(spUnsignedEncapsulatedPayload), encodedHash, derivedKeyAlgorithm, needsDeviceDARefresh)
hr = sessionKeyManager.VerifySignatureWithSessionKey( serviceExecutionContext.GetSessionKeyExecutionContext(), SessionKey(m_spAuthSessionKey, m_sessionKeyType), CBytePtr(reinterpret_cast<PBYTE>(strDecodedNonce.GetBuffer()), strDecodedNonce.GetLength(), false), CStringA(LiteCryptUtilities::SeedLabel::SecureConversationRst2), PPCRL_NGC_DERIVED_KEY_LENGTH_BYTES, signedInfo, encodedSignature, derivedKeyAlgorithm)
hr = SetCachePermissions(pServiceExecutionContext)
hr = SetCacheState(pParams->pServiceExecutionContext, pParams->InterruptCode, pParams->IsRootLevelInterrupt, accountSettingsUrl, targets, policies, applicationId )
hr = SetClockSkew(wstrServerTime)
hr = SetCookieValue<DWORD>(regCookieKey, PPCRL_REG_COOKIES_FLAGS, cookie.Flags, (cookie.Flags == 0), &(ICRegKeyWrapper::SetDWORDValue))
hr = SetCookieValue<LPCTSTR>(regCookieKey, PPCRL_REG_COOKIES_DATA, cookie.CookieData, cookie.CookieData.IsEmpty(), &(ICRegKeyWrapper::SetStringValue))
hr = SetCookieValue<LPCTSTR>(regCookieKey, PPCRL_REG_COOKIES_ID, cookie.Id, cookie.Id.IsEmpty(), &(ICRegKeyWrapper::SetStringValue))
hr = SetCookieValue<LPCTSTR>(regCookieKey, PPCRL_REG_COOKIES_NAME, cookie.CookieName, cookie.CookieName.IsEmpty(), &(ICRegKeyWrapper::SetStringValue))
hr = SetCookieValue<LPCTSTR>(regCookieKey, PPCRL_REG_COOKIES_P3P, cookie.P3PHeader, cookie.P3PHeader.IsEmpty(), &(ICRegKeyWrapper::SetStringValue))
hr = SetCookieValue<LPCTSTR>(regCookieKey, PPCRL_REG_COOKIES_URL, cookie.Url, cookie.Url.IsEmpty(), &(ICRegKeyWrapper::SetStringValue))
hr = SetCredProperty(PPCRL_CREDPROPERTY_LINKEDIDS, wstrLinkedIds)
hr = SetCredProperty(PPCRL_CREDPROPERTY_LINKID, wstrLinkId)
hr = SetCredProperty(PPCRL_CREDPROPERTY_LINKVER, wstrLinkVer)
hr = SetExtendedPropertyInternal(SSO_GROUP_LIVE_STRING, wstrMemberName)
hr = SetExtendedPropertyInternal(wszPropertyName, wszPropertyValue)
hr = SetNextProxySettings(pServiceWinApi, hRequest)
hr = SetNgcKeyName(pExecutionContext, pIdentity, accountCid, accountSid)
hr = SetProperty(eLocal, pszProperty, pszPropValue)
hr = SetUserPropertiesToSystemStore( m_wstrIdentityName, identityStorePropertyBag, callerSidOverWrite )
hr = ShouldCreateNgcKey(&serviceExecutionContext, userSid, userCid, noUI, createNgcKey)
hr = signedInfoHash.AddData( const_cast<PUCHAR>(reinterpret_cast<const UCHAR*>(static_cast<LPCSTR>(m_strC14NSignedInfo))), m_strC14NSignedInfo.GetLength() *sizeof(CHAR))
hr = signedInfoHash.GetSize(&cbHash)
hr = signedInfoHash.GetSize(&dwSize)
hr = signedInfoHash.GetValue( bpHash.GetBufferSetLength(cbHash, FALSE), cbHash)
hr = signedInfoHash.GetValue( bpSigValue.GetBufferSetLength(dwSize, FALSE), dwSize)
hr = signedInfoHash.Initialize( hAlgProv, m_pbSecretKey.GetBuffer(), m_pbSecretKey.GetLength())
hr = signedInfoHash.Initialize( hAlgProv, NULL, 0)
hr = SignHashWithDeviceKey( spMessageDigest, digestLen, signatureBytes.GetBufferSetLength(PPCRL_DEVICE_SIGNING_KEY_LENGTH), PPCRL_DEVICE_SIGNING_KEY_LENGTH)
hr = SignRequest(&serviceExecutionContext, hardwareInfoXml, signature)
hr = spAikCert.Allocate(aikCertSizeBytes)
hr = spAppIdDeviceMap->GetAssociatedDeviceName(wstrAppId, bValidate, wstrDeviceName, bDeviceIdValid, bClearMap)
hr = spAppIdDeviceMap->UpdateAppDeviceAssociation(wstrAppId, wstrDeviceName)
hr = spAttestationClaim.Allocate(attestationClaimSizeBytes)
hr = spbSignature.Allocate(cbSignature)
hr = spBuffer.Allocate(rawPayloadSizeBytes)
hr = spBuffer.Allocate(spBufferSizeBytes)
hr = SPCallClepKdf( sessionKey.GetBuffer(), sessionKey.GetLength(), const_cast<PBYTE>(reinterpret_cast<const BYTE*>(label.GetString())), label.GetLength(), context.GetBuffer(), context.GetLength(), derivedKey.GetBufferSetLength(derivedKeySizeBytes), derivedKeySizeBytes)
hr = SPCallClepSign( pbHashValue, cbHashValue, pbSignature, cbSignatureLength)
hr = spCopy.Allocate(bytesNeeded)
hr = spEncodedCert.Allocate(spCertContext->cbCertEncoded)
hr = spKeyBlob.Allocate(keyBlobSizeBytes)
hr = spQualifiedUser.Allocate(qualifiedSize)
hr = spSessionKey.Allocate(sessionKeySizeBytes)
hr = spTransportKeyBlob.Allocate(transportKeyPublicSizeBytes)
hr = StringCbCopy(spCopy, bytesNeeded, identity)
hr = StringCbCopyA(spCopy, bytesNeeded, inlineUxParam)
hr = StringCbCopyA(spCopy, bytesNeeded, s_holoIdentity)
hr = StringCbLength((WCHAR*)pBuffer, cbRemain, &len)
hr = StringCchCatA(spBuffer, bufferSizeCharacters, "&"PPCRL_OTC_DOUBLE_DERIVATION)
hr = StringCchCatA(spBuffer, bufferSizeCharacters, "&"PPCRL_OTC_HASH"=")
hr = StringCchCatA(spBuffer, bufferSizeCharacters, spEscapedHash)
hr = StringCchCatA(spBuffer, bufferSizeCharacters, spEscapedSignature)
hr = StringCchCatA(spBuffer, bufferSizeCharacters, spUnsignedEncapsulatedPayload)
hr = StringCchCopy(pDestination, bufferSizeCharacters, static_cast<LPCWSTR>(source))
hr = StringCchCopy(pszEventName, strEventName.GetLength() + 1, CStringW::PCXSTR(strEventName))
hr = StringCchCopyA(*pszFileAndLine, strFileAndLine.GetLength() + 1, (LPCSTR)strFileAndLine)
hr = StringCchCopyA(*pszRequest, strRequest.GetLength() + 1, (LPCSTR)strRequest)
hr = StringCchCopyA(*pszResponse, strResponse.GetLength() + 1, (LPCSTR)strResponse)
hr = StringCchCopyA(spBuffer, rawPayloadSizeBytes, pPayLoadString)
hr = StringCchCopyW( *ppszDeviceToken, strToken.GetLength() + 1, (LPCWSTR)strToken)
hr = StringCchCopyW( *pwszHIPChallenge, wstrBuffer.GetLength() + 1, (LPCWSTR)wstrBuffer)
hr = StringCchCopyW( copyOfDeviceDA, (DWORD)deviceDABufferSizeChars, token.GetBuffer(deviceDABufferSizeChars))
hr = StringCchCopyW(*inlineUrl, inlineUrlLocal.GetLength() + 1, static_cast<LPCWSTR>(inlineUrlLocal))
hr = StringCchCopyW(*inlineUrlData, inlineUrlDataLocal.GetLength() + 1, static_cast<LPCWSTR>(inlineUrlDataLocal))
hr = StringCchCopyW(*ppResponseString, inputString.GetLength()+1, inputString)
hr = StringCchCopyW(*ppwszCID, wstrCID.GetLength() + 1, (LPCWSTR)wstrCID)
hr = StringCchCopyW(*pwszCID, wstrCID.GetLength() + 1, wstrCID.GetBuffer())
hr = StringCchCopyW(*pwszCID, wszCID.GetLength() + 1, (LPCWSTR)wszCID)
hr = StringCchCopyW(*pwszErrorXml, wszErrorXml.GetLength() + 1, (LPCWSTR)wszErrorXml)
hr = StringCchCopyW(*pwszHost, wstrHost.GetLength() + 1, (LPCWSTR)wstrHost)
hr = StringCchCopyW(*pwszIdName, wstrIdName.GetLength() + 1, (LPCWSTR)wstrIdName)
hr = StringCchCopyW(*pwszKeyMaterial, wstrKeyMaterial.GetLength() + 1, (LPCWSTR)wstrKeyMaterial)
hr = StringCchCopyW(*pwszKeyVersion, wstrKeyVersion.GetLength() + 1, (LPCWSTR)wstrKeyVersion)
hr = StringCchCopyW(*pwszMemberName, wstrMemberName.GetLength() + 1, (LPCWSTR)wstrMemberName)
hr = StringCchCopyW(*pwszOneTimeCredential, wstrOneTimeCredential.GetLength() + 1, (LPCWSTR)wstrOneTimeCredential)
hr = StringCchCopyW(*pwszPropertyValue, wstrValue.GetLength() + 1, (LPCWSTR)wstrValue)
hr = StringCchCopyW(*pwszSvcEnv, wstrEnvironment.GetLength() + 1, (LPCWSTR)wstrEnvironment)
hr = StringCchCopyW(*pwszValue, dwCfgLength, (LPCWSTR)wstrCfgValue)
hr = StringCchCopyW(*pwszWebAuthUrl, wstrWebAuthUrl.GetLength() + 1, (LPCWSTR)wstrWebAuthUrl)
hr = StringCchCopyW(apIdentityProperty[dwIndex].pszProperty, pszProp.GetLength() + 1, (LPCWSTR)pszProp)
hr = StringCchCopyW(apIdentityProperty[dwIndex].pszValue, pszPropValue.GetLength() + 1, (LPCWSTR)pszPropValue)
hr = StringCchCopyW(aResponse[index]->userName, nameLengthNumCharacters, (LPCWSTR)wstrName)
hr = StringCchCopyW(localArrNotRegPuids[i], m_arrNotRegPuids[i].GetLength() + 1, static_cast<LPCWSTR>(m_arrNotRegPuids[i]))
hr = StringCchCopyW(pAutoDeviceToken, deviceTokenBufferSizeChars, (LPCWSTR)deviceToken)
hr = StringCchCopyW(pAutoUserToken, userTokenBufferSizeChars, (LPCWSTR)userToken)
hr = StringCchCopyW(response.wstrKeyPair, token.GetKeyPair().GetLength() + 1, token.GetKeyPair())
hr = StringCchCopyW(response.wstrTokenURI, token.GetTokenURI().GetLength() + 1, token.GetTokenURI())
hr = StringCchCopyW(response.wszAuthChallenge, wszFlowUrl.GetLength() + 1, wszFlowUrl)
hr = StringCchCopyW(response.wszAuthorizationToken, pszAuthzToken.GetLength() + 1, pszAuthzToken)
hr = StringCchCopyW(response.wszCID, wstrCID.GetLength() + 1, wstrCID)
hr = StringCchCopyW(response.wszToken, tokenBlob.GetLength() + 1, tokenBlob)
hr = StringCchCopyW(rgDeviceInfo[dwCount].wszDeviceId, length + 1, wszDeviceId)
hr = StringCchCopyW(rgDevices[i].wszString1, dwStrLen + 1, pNamesTemp[i])
hr = StringCchCopyW(rgDevices[i].wszString2, dwStrLen + 1, pFNamesTemp[i])
hr = StringCchCopyW(rgResponses[i].wstrKeyPair, token.GetKeyPair().GetLength()+1, token.GetKeyPair())
hr = StringCchCopyW(rgResponses[i].wstrTokenURI, token.GetTokenURI().GetLength()+1, token.GetTokenURI())
hr = StringCchCopyW(rgResponses[i].wszAuthorizationToken, pszAuthzToken.GetLength()+1, pszAuthzToken)
hr = StringCchCopyW(rgResponses[i].wszCID, wstrCID.GetLength()+1, wstrCID)
hr = StringCchCopyW(rgResponses[i].wszToken, tokenBlob.GetLength() + 1, tokenBlob)
hr = StringCchCopyW(rgResponses[i].wszToken, wstrCert.GetLength()+1, wstrCert)
hr = StringCchCopyW(rgwszMemberNames[i], arrMemberNames[i].GetLength() + 1, (LPCWSTR)arrMemberNames[i])
hr = StringCchCopyW(spLocalTotpCode, localTotpCode.GetLength() + 1, static_cast<LPCWSTR>(localTotpCode))
hr = StringCchCopyW(wszKeypair, wstrKeypair.GetLength() + 1, wstrKeypair.GetBuffer())
hr = StringCchCopyW(wszPropertyValue, wstrPropertyValue.GetLength() + 1, (LPCWSTR)wstrPropertyValue)
hr = StringCchLengthA(pEncapsulationTempate, STRSAFE_MAX_CCH, &templateSizeCharacters)
hr = StringCchLengthA(pLabel, INTERNET_MAX_URL_LENGTH, &labelLength)
hr = StringCchLengthA(pPayLoadString, STRSAFE_MAX_CCH, &rawPayloadSizeCharacters)
hr = StringCchLengthA(spEscapedHash, STRSAFE_MAX_CCH, &hashSize)
hr = StringCchLengthA(spEscapedRandom, STRSAFE_MAX_CCH, &nonceSizeCharacters)
hr = StringCchLengthA(spEscapedSignature, STRSAFE_MAX_CCH, &hashSize)
hr = StringCchLengthA(strNamespace, STRSAFE_MAX_CCH, &namespaceLen)
hr = StringCchLengthW( reinterpret_cast<LPWSTR>(static_cast<BYTE*>(pRegistryBuffer)), registryBufferSizeBytes / sizeof(wchar_t), &skuStringLengthCharacters )
hr = StringCchLengthW(pUserName, STRSAFE_MAX_LENGTH, &userNameLen)
hr = StringCchPrintf( spQualifiedUser, MAX_PATH, L"%ls\\%ls", machineName, pUserName )
hr = StringCchPrintfExA( spUnsignedEncapsulatedPayload, bufferSizeCharacters, nullptr, &remainingSizeCharacters, STRSAFE_FILL_BEHIND_NULL, pEncapsulationTempate, currentTime, SHA256_ALGORITHM, pPayLoadString)
hr = StringCchPrintfExA( spUnsignedEncapsulatedPayload, bufferSizeCharacters, nullptr, &remainingSizeCharacters, STRSAFE_FILL_BEHIND_NULL, pEncapsulationTempate, currentTime, SHA256_ALGORITHM, pPayLoadString, static_cast<LPCSTR>(spEscapedRandom))
hr = SystemStoreLite::IsConnected(serviceExecutionContext.GetExternalExecutionContextLite(), &isConnected, &pConnectedLiveUserName)
hr = SystemStoreLite::IsConnected(serviceExecutionContext.GetExternalExecutionContextLite(), &isCurrentIdentityConnected, &pConnectedLiveUserName)
hr = SystemStoreLite::IsUserDomainConnected( serviceExecutionContext.GetExternalExecutionContextLite(), static_cast<LPCWSTR>(sid), isDomainConnected)
hr = SystemStoreLite::IsUserDomainConnected(pServiceExecutionContext->GetExternalExecutionContextLite(), pSid, isDomainConnected)
hr = this->GetCredBag()->RetrieveCredential(PPCRL_CREDTYPE_PASSWORD, wszPassword)
hr = this->GetCredBag()->StoreCredential(PPCRL_CREDTYPE_PASSWORD, wszPassword)
hr = this->GetCredProperty(PPCRL_CREDPROPERTY_CID, accountCid)
hr = this->QueryInterface(EDeviceIdentityType, reinterpret_cast<void**>(&pDeviceIdentity))
hr = token.GetAuthzToken(pszAuthzToken)
hr = tpmFunctions->GetEKCert(&spEkCert, &ekCertSizeBytes)
hr = tpmFunctions->GetTpmKeyBlob(spTransportKeyHandle,&spTransportKeyBlob,&transportKeyBlobSize)
hr = tpmFunctions->RevokeDeviceAttestationKey()
hr = Transaction.Commit( hKernelTransaction, true)
hr = Transaction.Commit( NULL, true)
hr = Transaction.Commit()
hr = Transaction.Start()
hr = transport.SendDeviceRequest(pAssociateRequest)
hr = transport.SendDeviceRequest(pDisassociateRequest)
hr = transport.SendDeviceRequest(pEnumDevicesRequest)
hr = transport.SendDeviceRequest(pPublishDeviceRequest)
hr = transport.SendDeviceRequest(pResolveDeviceRequest)
hr = transport.SendDeviceRequest(pResolveUserRequest)
hr = transport.SendDeviceRequest(pUpdateDeviceReaders)
hr = transport.SendDeviceRequest(pUpdateDeviceRequest)
hr = transport.SendRequest(&sendOTCRequest)
hr = transport.SendRequest(pRequest)
hr = ULongAdd(encodedBufferLength, sizeof(CLOUD_AP_RENAME_ACCOUNT_INPUT) - ANYSIZE_ARRAY, &protocolBufferLength)
hr = UMgrQueryUserContext(hThreadToken, &userContext)
hr = UMgrQueryUserToken(userContext, &hUserTokenLocal)
hr = UnPackSessionKeys( sessionKey, sessionKey1Blob, &pSessionKeyFunction1, sessionKey2Blob, &pSessionKeyFunction2)
hr = UpdateAppId(eUserType, wstrAppId)
hr = UpdateKeyCache(pExecutionContext, strPurpose, strVersion, strMaterial)
hr = UpdateModernIdentityStore(&serviceExecutionContext, renameAccountData)
hr = UpdateSamProperties(renameAccountData)
hr = UrlAppendQueryString(inlineUrlData, PPCRL_URL_QS_PHONE_LIST, phoneList)
hr = UrlAppendQueryString(inlineUrlData, PPCRL_URL_QS_PLATFORM, platform)
hr = UrlAppendQueryString(inlineUrlData, PPCRL_URL_QS_UIFLAVOR, uiflavor)
hr = UrlAppendQueryString(inlineUrlLocal, L"fsui", L"1")
hr = UrlAppendQueryString(inlineUrlLocal, PPCRL_URL_QS_SCID, scidOOBE)
hr = UrlAppendQueryString(inlineUrlLocal, PPCRL_URL_QS_SCID, serverScenarioId)
hr = UrlAppendQueryString(url, PPCRL_URL_QS_MARKET, market)
hr = UrlContextInfo::GetInlineUxScenarioId(pExecutionContext->GetExternalExecutionContextLite(), serverScenarioId)
hr = UrlContextInfo::GetPlatformIdentifiers(platform, uiflavor)
hr = UrlEscapeStringA(encodedHash, &spEscapedHash)
hr = UrlEscapeStringA(spEncodedHash, &spEscapedHash)
hr = UrlEscapeStringA(spEncodedRandom, &spEscapedRandom)
hr = UrlEscapeStringA(spEncodedSignature, &spEscapedSignature)
hr = UrlEscapeW(queryStringValue, pBuffer, &requiredCharacters, escapeFlags)
hr = UrlEscapeW(spInputWideCharBuffer, spEscapedWideCharBuffer, &escapedWideCharBufferLength, URL_ESCAPE_PERCENT|URL_ESCAPE_ASCII_URI_COMPONENT|URL_ESCAPE_AS_UTF8|URL_ESCAPE_SEGMENT_ONLY )
hr = UrlUtilities::AppendMarket(pWinApiLite, inlineUrlData)
hr = UrlUtilities::AppendMarket(pWinApiLite, outputUrl)
hr = UrlUtilities::GetColorSet(&immersiveFunctions, colorCookieData.CookieData)
hr = UrlUtilities::GetMarket(pWinApiFunctions, market)
hr = userTokenHr
hr = ValidateSessionKeyType(pToken->sessionKeyType, sessionKeyType)
hr = VerifySsoParams(dwFlags, dwSSOGroup)
hr = webCookieManager.WriteCookieData(hIdentity)
hr = WriteProperties(pUserId, identityPropertyArray)
hr = xmlDocument->get_xml(&strOutput)
hr = xmlDocument->selectNodes(xPath, &pMatchingNodeList)
hr = XMLGetNodeAttribute( (LPCWSTR)bstrAttributeName,pXMLNode,wstrNodeText)
hr = xmlSig.CheckDigestedReferences()
hr = xmlSig.GetHMACDigest(signature)
hr = xmlSig.VerifySignature()
hr =pSvcWrapper->Impersonate(&client)
hr =this->UpdateDeviceCredentials( GetUserType(m_dwType), m_cMetadata.m_cDeviceData.GetIsSystem(), wszPassword, nullptr)
hr=E_OUTOFMEMORY
hrAuthRequired = 0x%x
hrAuthState = 0x%x
hresult
HRESULT in response: %ls
HRESULT in response: %s is wrong
HRESULT_FROM_WIN32(GetLastError())
HRESULT_FROM_WIN32(hr = pWinApiLite->GetLastError())
HRESULT=0x%x
hrInternal
hrReprovisionReason = 0x%x
hrRequestStatus = 0x%x
hrServerInternal = 0x%x
Ht$pL
HTTP/1.0
http://%s
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
http://Passport.NET/purpose
http://Passport.NET/tb
http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue
http://www.w3.org/2000/09/xmldsig#rsa-sha1
http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256
http://www.w3.org/2001/04/xmldsig-more#hmac-sha256
http://www.w3.org/2001/04/xmldsig-more#rsa-sha256
http://www.w3.org/2001/04/xmlenc#sha256
HttpOpenRequest failed 0x%x
HttpQueryInfo failed (0x%x).
HttpQueryInfo returned status: %d.
HTTPRequest::CancelPendingRequest
HTTPRequest::Open
HTTPRequest::ReadFile
HTTPRequest::RequestUrl
HTTPRequest::RequestUrlHelper
https
https://
https://%ls
https://%s
https://go.microsoft.com/fwlink/?LinkId=859524
HttpStatusCode
hUser && pNameValuePair && dwPropCount > 0 && dwPropCount < MAX_DEVICE_PROPERTIES
HWID_HardwareBinding
HWID_HardwareUpdate
HWID_HardwareUpdate_OutOfTolerance
HWID_TpmBinding
HWIDEnabled
I!<$I!>H
I(D9Q
I;@(t
I_RpcBindingInqLocalClientPID
I_RpcExceptionFilter
I_RpcMapWin32Status
I93taH
I96u5A
IDCRL
IDCRL::GetUserExtendedProperty
IDCRL_OPTION_CONNECT_TIMEOUT: Size of option value (%Iu) is not equal to size ofDWORD struct (%Iu)
IDCRL_OPTION_LCID: Size of option value (%Iu) is not equal to size ofDWORD struct (%Iu)
IDCRL_OPTION_PROXY: Size of option value (%Iu bytes) exceeds max allowed %lu bytes.
IDCRL_OPTION_PROXY_PASSWORD: Size of option value (%Iu bytes) exceeds max allowed %Iu bytes.
IDCRL_OPTION_PROXY_USERNAME: Size of option value (%Iu bytes) exceeds max allowed %Iu bytes.
IDCRL_OPTION_RECEIVE_TIMEOUT: Size of option value (%Iu) is not equal to size ofDWORD struct (%Iu)
IDCRL_OPTION_SEND_TIMEOUT: Size of option value (%Iu) is not equal to size ofDWORD struct (%Iu)
Identity does not have Auth Token therefore returning PPCRL_REQUEST_E_FORCE_SIGNIN.
Identity IsConnected value: %ls ; accountType value: %d
IdentityCRL
IDENTITYCRL_CERT_CONTAINER
IdentityStorage::DeleteTicketsForUser
IdentityStorage::GetEnvironmentSpecificRegistryKey
IdentityStorage::GetIdentityProperties
IdentityStorage::ReadCredentialInformation
IdentityStorage::RemoveConnectedUser
IdentityStorage::UpdateIdentityNameProperties
IdentityStorage::WriteProperties
IdentityWrapper::BindDeviceToHardware
IdentityWrapper::Delete
IdentityWrapper::GetHardwareBoundTime
IdentityWrapper::IsHardwareBound
IdentityWrapper::MarkForDelete
IdentityWrapper::UpdateDeviceLicenseInfo
IdleCallback
IdleCallback isGroupIdle=0x%x
IgnoreRememberMe
Ignoring bad data found by EnumKey
Ignoring E_INVALIDARG error when resetting INTERNET_OPTION_CLIENT_CERT_CONTEXT - InternetSetOption failed (0x%x).
IMAGE_STATE_GENERALIZE_RESEAL_TO_AUDIT
IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE
ImageState
ImpersonateLoggedOnUser
ImpersonateSelf
ImportAuthState: failed hr = 0x%x
ImportedDA
incorrect challenge message type. expected: '%ls', got '%ls'
InitializeAcl
InitializeAcl failed with hr = 0x%x
InitializeCriticalSection
InitializeCriticalSectionEx
Initialized Crypt provider: %S, provider type: %d
InitializeGlobals
InitializeGlobals failed. hr=0x%x
InitializeNetworkEventListner
InitializePathsAndMutableConfigs
InitializeSecurityDescriptor
InitializeSecurityDescriptor failed with hr = 0x%x
InitializeSid
InitializeSRWLock
Initializing cryptographic provider...
Initializing random key.
Initializing TLS...
InitOnceBeginInitialize
InitOnceComplete
inlineUrlData: %ls
InlineUX Override is invalid: '%ls'
InstalledConfigVersion
internal error: 0x%X
Internal Error: 0x%x, Collapsed Internal Error: 0x%x, External Error: 0x%x, isUserActionable: %d
internal\sdk\inc\wil\resource.h
internal\sdk\inc\wil\Result.h
internal\sdk\inc\wil\staging.h
InternalCheckAuthToken failed with hr = 0x%x
InternalName
InternalRetrieveDeviceCert failed with 0x%x. bailing out of BuildRequest
InternalRetrieveDeviceCert. Certificate failed the CERT_STORE_TIME_VALIDITY_FLAG check. 0x%x.
InternalRetrieveDeviceCert: CertVerifySubjectCertificateContext failed with hr=0x%x
InternetCloseHandle failed on connection
InternetConnect failed 0x%x.
InternetCrackUrl failed for Config value: %ls, it may not be a URL. (0x%x)
InternetCrackUrl failed for URL: %ls. (0x%x)
InternetCrackUrlA failed (0x%x) for URL: %ls.
InternetOpen failed (hr = 0x%x). Proxy: %hs, bypass: %hs, accesstype: %d.
InternetReadFile failed (0x%x).
Interrupt code 0x%x is unknown and no URL was specified, cancelling action center update.
InterruptCode
InterruptNotifications::ClearCache
InterruptNotifications::ClearState
InterruptNotifications::DoNotificationUpdate
InterruptNotifications::GetNotificationData
InterruptNotifications::GetStateForServerResult
InterruptNotifications::GetUrlFromConfigCache
InterruptNotifications::IsPasswordChangedInCloud
InterruptNotifications::SetActionCenterState
InterruptNotifications::SetCachePermissions
InterruptNotifications::SetCacheState
InterruptNotifications::TriggerNotificationUpdate
InterruptResolutionDomain is not BSTR type, type: %d
InterruptState
invalid argument, ignore this key.
Invalid Base32 Char in TOTP Secret.
Invalid bufferSize %d. HR=0x%x.
Invalid Cert context: pCertInfo is NULL
Invalid credential hash found in registry - ignoring.
Invalid credential target name.
Invalid credential type.
Invalid DA Invalidation Time set = %ls, errno = %d
Invalid data passed to GetVersionAndObjectBuffer.
Invalid dataSize %d. HR=0x%x.
Invalid Hwd Bound Time set = %ls, errno = %d
Invalid identity handle.
Invalid input to Base32Decode function.
Invalid Last Bound Time set = %ls, errno = %d
Invalid Last Updated Time set = %ls, errno = %d
Invalid LicenseInstallError %ls
Invalid member name, %ls. Returning hr: %x
Invalid member name.
Invalid output token bag.
Invalid padding %d. HR=0x%x.
Invalid parameter passed to C runtime function.
Invalid service name.
Invalid SessionKeyType value specified, dwSessionKeyType = %d
Invalid SessionKeyType value, dSessionKeyType = %d
Invalid timestamp: %ls
Invalid token.
Invalid user name.
Invalidating DA token for %ls obtained prior DA InvalidationTime: %I64d, %I64d
Invalidating DA token for %ls obtained prior GlobalDevice LastUpdatedTime:  %I64d, %I64d
Invalidating DA token for %ls obtained prior LastUpdatedTime: %I64d, %I64d
Invalidating DA token for %ls to get obfuscated session key. Current session key type is %d
Invalidating DA token for %ls with session key in registry
InvalidDeviceDA
Invalided account type 0x%x
Invalided Association flags 0x%x
InvalidXMLChar
Iphlpapi.dll
IPHLPAPI.DLL
IsAuthDisabledByPolicy
IsCallerAccountType failed with hr=0x%x
IsCallerAccountType: failed hr = 0x%x
IsCallerAdminAccount
IsCallerAdminEnabled failed with hr = 0x%x
IsCallerInAdminGroup
IsCallerInTokenRequestAllowedList
IsCallInSystemContext
IsConnected
IsCred
IsDebuggerPresent
IsDefault
IsDeviceIdClosed
IsDeviceTPMEnabled() == true
IsDomainConnected
IsDomainUser
IsEmbeddedModeAllowed
IsEmbeddedModeAllowed(&isEmbeddedModeEnabled)
IsGroupIdle
IsHardware
IsLinkedId
IsLoggedInUserMatchSID
IsProvisioningExplicit(dwType, bIsProvisioningExplicit)
IsRequestForRoamingCredential
IsServiceShuttingDown
IsSmartCardCert
IsSmartCardCert() failed. (0x%x)
IsSmartCardCert_Helper
IsSmartCardCert_Helper failed with hr=0x%x
IssuerCert Context=0x%p, IssuerCert SKI=%ls.
isSystemContext == FALSE
IsTokenAppContainer
isTokenAppContainer = %d
IsTransactionAPIPresent
isUserRequest
IsValidSecurityDescriptor
IsValidSecurityDescriptor failed with hr = 0x%x
IsValidSid
iswspace
IsXmlLiteUsed
K SVWH
K UWAUAVAWI
K VWATAVAWH
K VWAVH
K VWAWH
K(HcC0D
kernel32.dll
kernelbase.dll
Key '%hs' for '%hs' is updated.
Key version = %I64d
Key version asked for is %ls, timeStamp=%I64d.
KeyCacheCorruption
KeyCacheDecryptFailure
KeyCacheUpdate for purpose='%hs', version='%hs', material is empty=%d
KeyGenFlags node not found in certificate info xml. 0x%x.
Keyholder License installation failed (0x%x)
KeyHolderLicense/lic:License node not found (0x%x)
KeyHolderLicense=%hs
keyinfo/securityTokenReference/Reference is not found %x
keyinfo/securityTokenReference/Reference URI not found %x
KeyMaterial
keyPublicSizeBytes > 0
KeyPurposes
keySize=%d;keyGenFlags=0x%x
KeyUpdateNotification
KeyVersion: %ls
keyword
Keywords
ktmw32.dll
L!t$XH
L$ !\$(E
l$ AVM
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ SUVH
L$ SUVWH
L$ SUWAVH
L$ SVWAVH
L$ SWH
L$ UH
L$ USVWATAVAWH
L$ UVWATAUAVAWH
l$(A^
l$(E3
L$(E3
l$(E3
L$(E3
L$(H3
L$@E3
l$@fD
L$@H;
L$@H+
L$@H+L$XH
L$@H3
L$@I+
L$\D3
L$`D3
L$`E3
L$`H;
L$`H3
L$`Hc
L$<D3
L$0H;
L$0H3
l$1D!|$XD!|$\3
L$4E3
L$8E3
L$8H;
L$8H3
l$8I+
L$DE3
L$H9D$`
L$hA;
L$hE3
l$hE3
L$HE3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$hHc
L$LD3
L$PA3
L$PD9
L$PD9l$P}
l$PD9m
L$pE3
L$PE3
L$pE3
L$PE3
L$pE3
L$PE9y
l$pfD
l$PfD
l$PH!T$XM
L$pH;
L$PH;
L$pH;
L$PH3
L$pH3
L$PH3
L$PHc
L$TA+
L$TA3
L$X@8
L$x9q
L$XA+
L$XD3
l$xE3
L$xE3
L$XE3
L$xE3
L$XE3
L$xE3
L$XE3
L$xE3
L$XE3
L$XH+
L$XH3
L$xH3
l$XHc
L;vxs-H
L+D$pD
L9\$8
L9\$HubA
L9\$HuN
L9{(u
L9{@u
L9{0t#H
L9|$@
L9|$0
L9|$8v4H
L9|$X
L9|$xtOH
L9}`u
L9d$8
L9d$h
L9d$H
L9d$Hu
L9d$P
L9d$X
L9k@t
L9l$8
L9l$Hu7
L9l$P
L9l$xtOH
L9qxu
'L9t$h
L9t$xtWH
Last authentication result shows cached password is bad. Fail the call.
LastAccountPersistentFailureTimestamp
LastCopiedConfigVersion
LastError
LastName
LastSuccessfulRequestTimestamp
LastUpdatedTime
LatestDPAPIKeyVersion
LcA<E3
LcD$0H
Lcu A
lD9mgt%H
LeaveCriticalSection
LegalCopyright
lengthWCharRequired != 0
LicenseInstallError
LicenseKeySequence
LicenseKeyVersion
licenseKeyVersionClientElement is null.
LicenseSignatureKeyVersion %d
lineNumber
LinkedIds
LinkId
LinkId=%ls, LinkVer=%ls, LinkedIds=%ls
LinkVer
ListSessions
ListSessionsFailure
ListSessionsRequest::BuildRequest
ListSessionsRequest::GetNotRegisteredPuids
ListSessionsRequest::GetResponse
ListSessionsRequest::GetSessionData
ListSessionsRequest::ParseNonRegisteredPuids
ListSessionsRequest::ParseResponse
ListSessionsRequest::ParseSessions
LiteCryptUtilities::Base64EncodeA
LiteCryptUtilities::ComputeHash
LiteCryptUtilities::DecryptContent
LiteCryptUtilities::DeriveKeyMaterialWithPSha1
LiteCryptUtilities::DeriveKeyWithSP800108
LiteCryptUtilities::GetCurrentTimeInSeconds
LiteCryptUtilities::GetPublicKeyComponents
LiteCryptUtilities::HmacEncapsulateString
LiteCryptUtilities::HmacHashHelper
LiteCryptUtilities::ImportRawKeyIntoCSP
LiteCryptUtilities::UrlEscapeStringA
LiteCryptUtilities::XboxEncapsulateString
LiveIdSvc RPC Interface
liveidsvcnotify
LiveIdSvcNotify RPC Interface
LoadConfiguration
LoadImageW
Loading config data failed with error 0x%x
LoadLibraryExW
LoadLibraryW
LoadResource
LoadXMLDocumentFromString
Local\Identity CRL v2 File Access
Local\Identity CRL v2 File Download
Local\SM0:%d:%d:%hs
LocalAlloc
LocalAlloc failed with %d
LocalAlloc failed. (win32 = 0x%0x)
LocalConnected
LocalFree
LockAcquisition
LockResource
LogHr
login.live.com
login=%hs&mobilenum=%ls&purpose=%ls&lcid=%d&xml=1&channel=%ls
loginProofToken.GetLength() != 0
LoginUrl
logonId.LowPart='%d, logonId.HighPart='%d, dwSessionId=%d
LogonId.LowPart='%d, LogonId.HighPart='%d, handle=%p
LogonId.LowPart='%d, LogonId.HighPart='%d, pszSid=%s, wstrIdentityName=%ls, dwFlags=0x%x
LogonUserExExW
LookupAccountNameW
lRet == ERROR_SUCCESS
LSA_IDPEXT_ENDPOINT
LsaCallAuthenticationPackage
LsaCallAuthenticationPackage protocolStatus = 0x%x.
LsaCallAuthenticationPackage status = 0x%x.
LsaConnectUntrusted
LsaDeregisterLogonProcess
LsaFreeReturnBuffer
LsaGetLogonSessionData
LsaGetLogonSessionData failed 0x%x.
LsaGetSSOAccountType returned ssoAccountType: %d and webAccountProviderGuid = {%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}
LsaLookupAuthenticationPackage
LsaLookupUserAccountType
LsaLookupUserAccountType failed with: 0x%x
LsaLookupUserAccountType returned accountType: %d which mapped to CONNECT_UX_SCENARIO: %d
LsaRegisterLogonProcess
lstrcmpA
lstrcmpiW
LUID=[%d,%d]
m D9m
m_bInitialized == true
m_hTimer=%p, m_hTimerQueue=%p, m_Param=%p, m_pfCallback=%p
m_pIClientConfig is nullptr
m_pIdentity != NULL
m_pIdentity != nullptr
m_pIdentity->HasAuthToken()
m_pOwningIdentity is not set.
m_pRequest->m_pIdentity->IsRequestCancelled() == false
m_rgPropNames.GetCount() == m_rgPropValues.GetCount()
m_strCredTypeToPersistUponSuccessfulAuth='%s',bRefreshPersistedCred=%d
M9F t
MachineInformation::GetSystemSku
MakeAbsoluteSD
malloc
ManageApprover
ManageApproverFailure
ManageApproverLID
ManageApproverRequest::Base32Decode
ManageApproverRequest::Base32Decode(_totpSharedKey, _totpSharedKey.Length(), &spTotpKeyData, &totpKeySizeInBytes)
ManageApproverRequest::Base32WCharToVal
ManageApproverRequest::BuildRegisterRequest
ManageApproverRequest::BuildRequest
ManageApproverRequest::DeleteTotpKeyFromCache
ManageApproverRequest::ParseResponse
ManageApproverRequest::SaveTotpKeyToCache
ManageLoginKeys
Mapping error. Original err, %s, original suberr 0x%x became 0x%x.
Mapping error. Original err, %s, original suberr 0x%x.
MappingFreePropertyBag
MappingFreeServices
MappingGetServices
MappingRecognizeText
MaxAcquireNgcLoop
MaxRequestRetryCountOnFailure
MBI_X509_CID_7D
MBI_X509_DID
MBI_X509_DID_SYSTEM
MemberName
MemberNameOnly
memcmp
memcpy
memcpy_s
memmove_s
memset
MesBufferHandleReset
MesDecodeBufferHandleCreate
MesEncodeFixedBufferHandleCreate
MesHandleFree
message
MhD+I
Microsoft
Microsoft Base Cryptographic Provider v1.0
Microsoft Corporation
Microsoft Enhanced Cryptographic Provider v1.0
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft Platform Crypto Provider
Microsoft Software Key Storage Provider
Microsoft\IdentityCRL
Microsoft_WindowsLive:authstate:
Microsoft_WindowsLive:certificate:
Microsoft_WindowsLive:SerializedMaterial:
Microsoft_WindowsLive:SerializedMaterial:000
Microsoft_WindowsLive:serviceticket:
MicrosoftAccount:(TOTPSharedKey):UserPuid=
MicrosoftAccount:target=SSO_POP_Device
MicrosoftAccount:target=SSO_POP_User:user=
MicrosoftAccount:user=
MigrateStoredPasswords
MigrationDone
minPasswordLength=%d,minPasswordCharacterGroups=%d
Missing bstrEncPPXML %x
Missing created time %x
Missing EndPointAddress %x
Missing expires time %x
missing RequestSecurityTokenResponse node:%x
Missing RSTR %x
Missing timestamp %x
Missing TokenType %x
MoD9h
ModernTestHook_AllowedApps
module
Mozilla/4.0
Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0
MSAClientTraceLoggingProvider
MsaDevice_FreeDeviceAuthXToken
MsaDevice_GenerateEcsdaP256Signature
MsaDevice_GetDeviceAuthXToken
MsaDevice_IsDeviceProvisionedDuringAuthentication
MsaDevice_IsRstrUnencryptedInServiceRequestReponseOverSSL
MsaDevice_OverrideTokenPersistence
MsaDevice_UseXTokenBasedRequestSigning
MsaDevice_UseXTokenBasedSessionKey
MsaUser_CallerIsLoggedOnUser
MsaUser_CheckIfAppTrusted
MsaUser_FormatUserDisplayName
MsaUser_GetDeviceTelemetryInformation
MsaUser_GetDeviceTypeParameterValue
MsaUser_GetInlineUxParameterValue
MsaUser_GetPlatformQualifier
MsaUser_GetUserRegistrySecurityDescriptor
MsaUserExtDefaultImpl::CallerIsLoggedOnUser
MsaUserExtDefaultImpl::CheckIfAppTrusted
MsaUserExtDefaultImpl::FormatUserDisplayName
MsaUserExtDefaultImpl::GetDeviceTypeParameterValue
MsaUserExtDefaultImpl::GetInlineUxParameterValue
MsaUserExtDefaultImpl::GetPlatformQualifier
MsaUserExtImpl::CallerIsLoggedOnUser
MsaUserExtImpl::CallerIsLoggedOnUser(0, pLogonId, &isLoggedOn)
MsaUserExtImpl::CheckIfAppTrusted
MsaUserExtImpl::CheckIfAppTrusted(scope, pAppId, &isTrusted)
MsaUserExtImpl::FormatUserDisplayName
MsaUserExtImpl::GetDeviceTypeParameterValue
MsaUserExtImpl::GetInlineUxParameterValue
MsaUserExtImpl::GetPlatformQualifier
MsaWnfNotifications::GetLastTimeStamp
MsaWnfNotifications::GetWNFStateNameString
MsaWnfNotifications::MsaWnfEventHandler
MsaWnfNotifications::PersistLastTimeStamp
MsaWnfNotifications::RegisterForWnfEvents
MsaWnfNotifications::RegisterWnfEvent
MsaWnfNotifications::UnregisterForWnfEvents
Msg:[%ws] 
MSIDCRL
MSIE 6.0
MSN-Messenger-DIDC
msvcrt.dll
MSXML2.DOMDocument.6.0
MultiByteToWideChar
Mutex not released
Mutex released
MutexAcquired
MutexReleaseFailure
ncalrpc
ncrypt.dll
NCryptCreateClaim
NCryptExportKey
NCryptFreeObject
NCryptGetProperty
NCryptOpenKey
NCryptOpenStorageProvider
NCryptSetProperty
NdrClientCall3
NdrMesTypeAlignSize3
NdrMesTypeDecode3
NdrMesTypeEncode3
NdrMesTypeFree3
NdrServerCall2
NdrServerCallAll
Negative cache for subScenario:%d is disabled.
NegativeCache data expired - application %ls skipped negative cache.
NegativeCacheBlockActionType
NegativeCacheFlags
NegativeCacheForDeviceTicketRequestsDisabled is set.
NegativeCacheForNonInterruptsDisabled is set.
NegativeCacheIntervalMultiplierForPersistentFailures
NegativeCacheIntervalSeconds
NegativeCacheManager::AddNegativeCacheData
NegativeCacheManager::ConstructNegativeCacheAppKey
NegativeCacheManager::IsNegativeCacheForSubScenarioEnabled
NegativeCacheManager::LoadNegativeCacheData
NegativeCacheManager::SetConfiguration flags=%x, maxRequests=%d, totalIntervalSeconds=%d, intervalMultiplierForPersistentFailures=%d
NegativeCacheMaxRequests
NegativeCacheState
NetApiBufferFree
NetUserModalsGet
NetUserModalsGet failed with error code : [%d]
netutils.dll
Network notification event signaled
NetworkCallDetails
NetworkCallElapsedTime
NetworkChangeNotificationWorker
New name not set.
NewConfigVersion
NewDeviceID
NewDeviceName
NGC_TpmBinding
NgcAttestationFailure
NgcAttestationKeyType
NgcCreateContainer
NgcCreateUserIdKey
NgcCreateUserIdKeyEx
NgcDecryptWithSymmetricPopKey
NgcDeleteContainer
NgcDeleteContainerEx
NgcDeleteUserIdKey
NgcEnumContainers
NgcEnumUserIdKeys
NgcEnumUserIdKeys returns NTE_NO_MORE_ITEMS
NgcFreeEnumState
NgcFunctions::NgcEnumUserIdKeys.(hr = 0x%x)
NgcFunctions::NgcGetKeyAttestationForUserIdKey.(hr = 0x%x). Key Type: %d
NgcGetKeyAttestationForUserIdKey
NgcGetLogonDecryptionKeyName
NgcGetPkcs7ChainBlobFromCertificateBlob
NgcGetSymmetricPopKeyTransportKey
NgcGetSymmetricPopKeyTransportKeyName
NgcGetUserIdKeyPublicKey
NgcImportSymmetricPopKey
NgcKeyAttestationEnabled
ngcKeyType != UnknownError
NgcPackAuthBuffer
ngcpopkeysrv.dll
NgcRenewKeyAttestation
NgcSignWithSymmetricPopKey
NgcSignWithUserIdKey
NgcSignWithUserIdKeyEx
NgcSignWithUserIdKeySilent
NgcTriggerTask
NgcUserIdAikRevokedTime
NgcUserIdKeyAttestedTime
NgcVerifyWithSymmetricPopKey
No active TS session was found.
no attribute - %s:%x
No CID found for SID %ls.
No credential found - checking for persistent cred.
No credential found in credbag, checking the tokenbag for persisted cred.
No CredProperty by this name was found, trying extended properties. 0x%x
No DA Token present for %ls
No data
No Device Id associated with App Id = %s found
No ErrorSubcode found. Using default errorcode 0x%x.
No extended error info is set.
No identities to process
No NGC containers found for SID %ls.
No NGC keys found for CID %ls.
No notification because: Usertype is = 0x%x.
No options were provided for initialization.
No options were provided to reset.
No rename required.
No service name provided, will return status from last response.
No session key present in Auth Token. 0x%x.
No Signed Info %x
No specialized identifier for current platform.
No stored password hash to compare against.
No subject name was found in the certificate.
No token bag for identity.
No TOTPSharedKey returned by MSA Server after successful ManageApproverRequest. Using default errorcode 0x%x.
No update needed, exiting.
No Valid Device Id exists for key %s
No Valid Device Id exists.
No window handle and no ngc ticket either. hr = 0x%x
NoConnectedUser
Node value returned from DATA is NULL or invalid
Node value returned from Prefix is 0 length
Non critical error SetExtendedProperty for Manage Approver returned hr = 0x%x
Non critical error SetExtendedProperty for MUID failed with hrLocal = 0x%x
non null passed for pvAdditionalParams hr=0x%x
Not sending SLC request for service target '%s' because REQUEST_NO_SLC is set.
Not Supported anymore
NotBefore="
notificationFlags =0x%x, requestTarget ='%ls', requestPolicy ='%ls', requestStatus=0x%x
NotificationPolicies
Notifications exist.
NotificationTargets
NotifyAddrChange
NotifyUnicastIpAddressChange
ntdll.dll
NtQuerySystemInformation
NtQueryWnfStateData
NtUpdateWnfStateData
NULL out parameters passed to GetDeviceId hr=0x%x
NULL value specified for option id %d
o\$PH
ObfuscatedSessionKeyFunctions::GetDerivedKey
ObfuscatedSessionKeyFunctions::GetDeviceRegistryPath
ObfuscatedSessionKeyFunctions::GetDeviceSessionKeyFromStore
ObfuscatedSessionKeyFunctions::PersistSessionKey
ObfuscatedSessionKeyFunctions::RetrieveSessionKey
ObtainResponse on 0x%p, m_pIdentity=0x%p 
OCPPCRLRequest::QueryRequestStatus
oD$ f
Offline authentication failed. Hashed password does not match the supplied password.
Offline authentication succeeded.
Offline password hash was not found. User must first do online login with option LOGONIDENTITY_CREATE_OFFLINE_HASH to create hash.
oL$0f
OldConfigVersion
OLEAUT32.dll
One or more parameter(s) is invaild.
Onebox
Onebox mode not detected. dwOneBox=%d. 0x%x
onecoreuap\ds\ext\Live\identity\Include\clientcauto.h
onecoreuap\ds\ext\live\identity\include\serializationdefinition.h
onecoreuap\ds\ext\live\identity\include\SerializationDefinition.h
onecoreuap\ds\ext\live\identity\include\servicehelper.h
onecoreuap\ds\ext\live\identity\include\stringlock.h
onecoreuap\ds\ext\Live\identity\Include\TimerQueue.h
onecoreuap\ds\ext\Live\identity\Include\tokenbag.h
onecoreuap\ds\ext\Live\identity\Include\transferimp.h
onecoreuap\ds\ext\live\identity\lib\familynotifications\familynotifications.cpp
onecoreuap\ds\ext\live\identity\lib\immersiveidentitystorage\identitystorage.cpp
onecoreuap\ds\ext\live\identity\lib\msauserextimpl\msauserextimpl.cpp
onecoreuap\ds\ext\live\identity\lib\phoneutils\phoneutils.cpp
onecoreuap\ds\ext\live\identity\lib\platformextension\urlcontextinfo.cpp
onecoreuap\ds\ext\live\identity\lib\serialization\credserializationhelper.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\obfuscatedsessionkeyfunctions.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\sessionkeymanager.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\symmetricsessionkeyfunctions.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\tpmsessionkeyfunctions.cpp
onecoreuap\ds\ext\live\identity\lib\stateseparationredirection\stateseparationredirection.cpp
onecoreuap\ds\ext\live\identity\lib\systemstorelite\systemstorelite.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\certtoken.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\credmanutility.h
onecoreuap\ds\ext\live\identity\lib\utilities\extensionapi.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\memorymanager.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\proofofpossessiontokenhelper.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\stringsrv.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\urlutilities.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\util.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\xmlredaction.cpp
onecoreuap\ds\ext\live\identity\lib\utilities\xmlutilities.cpp
onecoreuap\ds\ext\live\identity\lib\utilitieslite\errorhandlingutilities.h
onecoreuap\ds\ext\live\identity\lib\utilitieslite\litecryptutilities.cpp
onecoreuap\ds\ext\live\identity\lib\utilitieslite\machineinformation.cpp
onecoreuap\ds\ext\live\identity\lib\utilitieslite\registryhelper.cpp
onecoreuap\ds\ext\live\identity\lib\utilitieslite\wlidcchelper.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\appconfig.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\approvesessionrequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\cert.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\clientconfig.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\configuration.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\credentialbag.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\deviceidentity.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\deviceidhelpers.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\deviceidhelpers2.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\deviceidmap.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\deviceidstore.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\devicelicensefunctions.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\getappdatarequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\getuserkeydatarequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\hardwarecookiesig.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\identitystore.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\identitywrapper.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\AppConfig.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\Include\clientconfig.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\Include\credstore.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\provisionidentitywithtransfertokenrequest.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\rst.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\svcapi.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\systemstore.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\include\transport.h
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\interruptnotifications.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\keycache.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\kiosk.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\listsessionsrequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\liveconnector.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\manageapproverrequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\migratepasswords.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\msawnfnotifications.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\negativecachemanager.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\networkaddresses.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\otcrequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\passportclientlibrary.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\provisionidentitywithtransfertokenrequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\proxyconfig.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\randomdevicecreds.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\renamemembername.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\rst.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\rstdevice.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\setregistrypermission.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\singleidentity.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\strongcredentialkeydatarequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\svcapi.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\systemstore.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\targetstore.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\throttle.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\tokenbag.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\totphelper.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\tpmbaseservicesfunctions.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\transport.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\trustedpchandler.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\usercidcache.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\useridkeyregistrationrequest.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\webcookiemanager.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\windowsdeviceid.cpp
onecoreuap\ds\ext\live\identity\ntservice\lib\svccommon\wlidnotifications.cpp
onecoreuap\ds\ext\live\identity\ntservice\svc\wlidrpc.cpp
onecoreuap\ds\ext\live\identity\passport\include\binhex.h
onecoreuap\ds\ext\live\identity\passport\include\serialize.h
onecoreuap\ds\ext\live\identity\passport\lib\crypt\random.cpp
onecoreuap\ds\ext\live\identity\passport\lib\utilities\ppstr.cpp
onecoreuap\ds\ext\live\identity\passport\lib\xmlsig\xmlsig2.cpp
OneTimeCredential
OnInternetEvent REQUEST_COMPLETE detected, processing results.
OnlineProviderCert RPC Interface
OpaqueKeyBlob
Open for %ls failed with hr=%x
Open for %s failed with hr=%x
Opening Internet connection in WinInet.
OpenProccessToken failed. (win32 = 0x%0x)
OpenProcessToken
OpenProcessToken failed with hr = 0x%x
OpenProcessToken failed. (win32 = 0x%0x)
OpenSCManagerW
OpenSemaphoreW
OpenServiceW
OpenThread
OpenThreadToken
OpenThreadToken failed (0x%x).
OpenThreadToken failed with hr = 0x%x
OpenThreadToken failed. (win32 = 0x%0x)
Option IDCRL_OPTION_CONNECT_TIMEOUT with value %d. 
Option IDCRL_OPTION_LCID with value %d. 
Option IDCRL_OPTION_PROXY_PASSWORD. 
Option IDCRL_OPTION_PROXY_USERNAME with value '%ls'. 
Option IDCRL_OPTION_RECEIVE_TIMEOUT with value %d. 
Option IDCRL_OPTION_SEND_TIMEOUT with value %d. 
OriginalFilename
originatingContextId
originatingContextMessage
originatingContextName
oT$@f
OTCRequestService
out of memory
Out of memory
Out of memory allocating response buffer.
OutputDebugStringA
OutputDebugStringW
p AWH
p WATAUAVAWH
p WATAVH
p WAVAWH
pA^_]
PA^_]
PA^_^
pA^_^
PA^_^
PA^_^[]
pA^_^[]
PA^_^[]
pA^_^[]
PA^_^[]
PA^_^][
pA^A\_^]
pA__^[]
pA_A\_^]
pA_A]_^]
pA_A^_[]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
pA_A^A\_^[]
PA_A^A\_^[]
pA_A^A\_^[]
PA_A^A]A\_^[
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
Pack certificate error. hr = 0x%x
Pack service token error. hr = 0x%x
PackageSID
pAppIdDeviceMap != NULL
Parse expired time failed. HR=0x%x.
ParseAuthData
ParseChallengeToken
Parsed LicenseKeySequenceServer %d
Parsed LicenseSignatureKeyVersionServer %d
Parsed response: App isFirstParty property value %d
ParseDIDCOMMetaData failed with 0x%x
ParseDIDConfigBoolean for %s failed with %x
ParseDIDConfigLong for %s failed with %x
PassportFreeMemoryInternal
PassportSerialization::CReadBuffer<void const *>::Read
PassportSHA1Auth
PasswordReset is not BSTR type, type: %d
PathCchCombine
pBase != NULL
pbLicenseBlob != nullptr
pbThumbprint=0x%p
pcbBlobSize != nullptr
pCert context passed to VerifyCertificate is NULL, or pdwTTL is NULL or 0.
pCert: 0x%p
pCertContext: 0x%p
pCertContext: 0x%p, pbSignedMessageBlob: 0x%p, cbSignedMessageBlob: %d
pCertCtxt
pCertNodeMembername
PCP_ALTERNATE_KEY_STORAGE_LOCATION
PCP_EKCERT
PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY
pDeviceHelper->IsHwdDeviceIDEnabled()
pDeviceIdentity != nullptr
pDeviceIdentity->HasAuthToken()
pdwCount && ((paNames && paFriendlyNames) || prgDevices)
pElement is null.
Persisted
PersistedCredential
Persisting credentials of credtype: '%ls' is ignored.
PersistNewMemberNameCredentials
pExecutionContext->GetServiceWrapper()->Revert(&autoRevert)
pExecutionContext->GetServiceWrapper()->Revert(&autoRevert, FALSE)
phandle != nullptr
Phone
PhoneAPIInitialize
PhoneAPIUninitialize
PhoneGetLines
PhoneGetProviderLineInfo
PhoneGetProviderLineServiceInfo
PhoneOm.dll
Physical Device ID is disabled.
PhysicalDeviceID
PhysicalDIDEnabled
pIdentity != nullptr
pIdentityWrapper->IsIdentityNULL(hIdentity) == false
pKeyPublic != nullptr
Platform
pMemoryToFree=0x%p
PolicyManager_GetAccountsPolicy_AllowMicrosoftAccountConnection
PolicyManager_GetPolicyInt
POP verification failed with 0x%x.
pOptions
Post Platform
pParam != NULL
pPasswordElement is null.
ppbDeviceCert
ppbLicenseRequest != nullptr
ppCertContext != NULL
PPCRL_MAX_PROXY_PASSWORD: Size of option value (%Iu bytes) exceeds max allowed %Iu bytes.
PPGenerateRandomNoThrow: failed hr = 0x%x
PPICommunal
ppIdentity passed in nullptr.
ppv != nullptr
Pre Platform
pRegCredsKey->Open failed with hr=0x%x
PrependStringToMultiSzString
printf
Problem trying to close down WinInet (0x%x).
ProcessExistingLogons
Processing option id %d
Processing option IDCRL_OPTION_PROXY_PASSWORD failed with error, hr=0x%x. 
Processing psf:browserCookie node '%s'.
Processing psf:credProperty node '%s'.
Processing psf:extProperty node '%ls'.
ProcessUserLogoff
ProcessUserLogon
production
ProductName
ProductVersion
profapi.dll
Property PWID cannot be returned to caller.
propertyName=%ls
ProviderData
ProviderPasswordCharacterGroups
ProviderPasswordLength
Provision 
ProvisionIdentityWithTransferToken
Proxy bypass list is too long, max allowed = %Iu chars.
Proxy list is too long, max allowed = %Iu chars.
ProxyConfig
ProxyList=%ls
ps:active
ps:CID
ps:DeviceAssociateResponse/Error/@Code
ps:DeviceAssociateResponse[@Success='true']
ps:DeviceDisassociateResponse[@Success='true']
ps:DeviceQueryPropertiesResponse[@Success='true']
ps:Devices/ps:Device
ps:DeviceUpdatePropertiesResponse[@Success='false']
ps:DeviceUpdatePropertiesResponse[@Success='true']
ps:DisplaySessionID
ps:eid
ps:EnumerateDevicesResponse[@Success='true']
ps:Error/@Code
ps:ErrorSubcode
ps:ExpirationTime
ps:KeyData
ps:KeyPurpose
ps:KeyPurposes
ps:membernameonly
ps:Network
ps:NextUpdate
ps:ngcat
ps:ngckn
ps:NotRegistered/ps:PUID
ps:password
ps:pin
ps:Property
ps:PUID
ps:RequestTime
ps:ResolveUserResponse[@Success='true']
ps:SessionID
ps:Sessions/ps:Session
ps:SessionType
ps:SingleUseCode
ps:State
ps:virtualapp=
pSessionData->UserFlags = 0x%x.
psf:authreq
psf:authstate
psf:browserCookie
psf:browserCookies
psf:configVersion
psf:cookies
psf:credProperties
psf:credProperty
psf:DeviceTpmKeyState
psf:extProperties
psf:extProperty
psf:flowurl
psf:HWPUIDFlipped
psf:inlineauthurl
psf:inlineendauthurl
psf:pp/psf:authreq
psf:pp/psf:flowurl
psf:pp/psf:inlineauthurl
psf:pp/psf:inlineendauthurl
psf:pp/psf:reqstatus
psf:pp/psf:weburl
psf:PUID
psf:RefreshDeviceLicense
psf:reqstatus
psf:response
psf:returnToCaller
psf:serverInfo/@ServerTime
psf:serverVersion
psf:signChallenge
psf:uiVersion
psf:UserNGCFlags
psf:UserSessionKey
psf:weburl
pSvcWrapper->Revert(&revert)
pszChallenge=%ls
pszSid.IsEmpty() == false
pTimerParam
pTokenBagWrapper->IsNULL(hTokenBag) == false
PUBLICBLOB
PublishedServices
PublishedServicesCount
PublishSEBEdgeEvent
PubSebEdgeEvent failed with hr 0x%x
PUID is not set for the current identity.
PURPOSE_APPROVERREGISTER
PURPOSE_KEYUPDATE
purpose=sso
pUserIdentity != NULL && pUserIdentity->HasAuthToken()
pUserIdentity != nullptr
PutCert cannot generate map index %p, %s does not have pending SLC request hr = %x
PutCert failed (0x%x).
pwszAppId=%ls,dwFlags=%d,pvAdditionalParams=%p,dwInternalFlags=%d,pwszDeviceId=%p,ppCertContext=%p,hDeviceIdentity=%p
pwszAppId=%s,dwDeviceType=%d,dwFlags=%d
pwszKeypair
pXMLConfigData->QueryInterface(IID_PPV_ARGS(&pXmlDoc2))
pXmlDoc2->setProperty(CComBSTR(XML_PROP_SELECTION_NAMESPACES), cvNamespaces)
pXMLNode is NULL
pXmlRSTResponse != nullptr
pxmlRSTRNode != nullptr
QueryDWORDValue for %s failed with hr=%x
QueryDWORDValue(PPCRL_REG_CLOCKSKEW) lRet = %x.
QueryPerformanceCounter
queryStringName != nullptr && queryStringName[0] != L'\0'
QueryStringValue for %s with hr=%x
QueryUserToken
QueueWorkItem for CreateNetworkNotificationTask failed HR=0x%x
r 9t$`tGH
R$fE;B*sl
RaiseException
RaiseFailFastException
RandomFunctionsInitialize
RandomWait
Read AccountDomain value of '%s'.
Read AccountDomainPolicy value of '%s'.
Read AddressResolutionTTL value of %d.
Read ClientTimeOutForRpcCallsNoNetwork value of %d.
Read ClientTimeoutForRpcCallsWithNetwork value of %d.
Read ClientTimeoutForUI value of %d.
Read ConfigServerSslURI value of '%ls'.
Read ConnectAccountPolicy value of '%s'.
Read ConnectTimeout value of %d.
Read CookieP3PHeader value of '%s'.
Read DeviceDNSSuffix value of '%s'.
Read DisableSSO value of %d.
Read empty version from config file.
Read EnableBadPasswordCache value of %d.
Read EnableServerPasswordChange value of %d.
Read InterruptResolutionDomain value of '%s'.
Read LivesspMaxTokenSize value of %d.
Read m_dwDeviceProvisioningFailureThreshold=%d.
Read m_dwHardwareBindingMaxRequests=%d.
Read m_dwHardwareOutOfToleranceUpdateMaxRequests=%d.
Read m_dwHardwareUpdateMaxRequests=%d.
Read m_dwNegativeCacheFlags=%x.
Read m_dwNegativeCacheIntervalMultiplierForPersistentFailures=%x.
Read m_dwNegativeCacheIntervalSeconds=%x.
Read m_dwNegativeCacheMaxRequests=%x.
Read m_dwRPCIdleStopTimeout=%d.
Read m_dwThrottleFlags=%x.
Read m_dwThrottleMaxRequests=%d.
Read m_dwThrottleTotalIntervalSeconds=%d.
Read m_dwTpmBindingMaxRequests=%d.
Read MinPasswordCharacterGroups value of %d.
Read MinPasswordLength value of %d.
Read PasswordReset value of '%s'.
Read ReceiveTimeout value of %d.
Read RemeberBadProxyTimeSpan value of %d.
Read ResolveTimeout value of %d.
Read SendTimeout value of %d.
Read service URI for '%s' of '%s'.
Read StrongAuthPolicy value of '%ls'.
Read total %d characters.
Read UserTileRetryOnFailureInterval value of %d.
Read UserTileUpdateInterval value of %d.
ReadFile
ReadFile HTTP_STATUS (0x%x).
Reading current environment failed, using production as default
ReadRegConfigURL failed with hr=%x. IDCRL will use production URL as default.
ReadRegConfigURL loaded Configuration URL from registry
realloc
Reason
receive
RedactSensitiveXMLElements
ReduceXmlForTracing
Reference EncryptedPP is missing:%x
Reference RSTR is missing:%x
Reference timestamp is missing:%x
Reg_QueryString
Reg_QueryString(SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\State) failed hr = %x
RegCloseKey
RegCreate failed for path '%s', exiting, hr = 0x%x
RegCreateKeyExW
RegCreateKeyTransactedW
RegDeleteKeyExW
RegDeleteKeyTransactedW
RegDeleteKeyValue() failed. (0x%0x)
RegDeleteKeyW
RegDeleteTreeW
RegDeleteValueW
RegEnumKey failed. (win32 = 0x%0x)
RegEnumKeyEx for %ls failed with hr=%x
RegEnumKeyEx for %s failed with hr=%x
RegEnumKeyExW
RegEnumValueA
RegEnumValueW
RegFlushKey
RegGetValue failed. (win32 = 0x%0x)
RegGetValue() failed. (0x%0x)
RegGetValueW
regIdKey.Flush() failed with error=0x%x, continuing...
Register
RegisterServiceCtrlHandlerExW
RegisterWeak
registryBufferSizeBytes != 0
RegistryHelper::DeleteBufferFromRegistry
RegistryHelper::GetRootKey
RegistryHelper::ReadBufferFromRegistry
RegistryHelper::ReadValueFromRegistry
RegistryHelper::WriteBufferToRegistry
RegOpenCurrentUser
RegOpenCurrentUser failed, hr = 0x%x
RegOpenCurrentUser() failed, hr = 0x%0x
RegOpenCurrentUser() failed. (0x%0x)
RegOpenKeyEx failed with hr=%x
RegOpenKeyEx failed. (win32 = 0x%0x)
RegOpenKeyExW
RegOpenKeyTransactedW
RegQueryDWORD
RegQueryInfoKey failed with hr=%x
RegQueryInfoKeyW
RegQueryValueExA
RegQueryValueExW
RegSetKeySecurity
RegSetKeyValue() failed. (0x%0x)
RegSetValueExW
regStoredId.Flush failed with error=0x%x, continuing...
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
RemoteFileLink
Remove certificate failed = 0x%x.
Remove service token failed = 0x%x.
Remove: %ls, user = %ls, service = %ls 
RemoveMSAIDPKeyIfSecondaryOrAssociated
RemovePersistedFileCertificates failed = 0x%x.
Removing %hs token in Token Bag '%ls' %p
Removing token bag for user '%ls' 0x%p - no longer in use.
RenameAccount
RenameConnectedAccount
RenameDomainConnectedAccount
RenameLiveIdIfRequired
RenameLocalConnectedAccount
RenewCertificate
ReprovisionDevice
Request 
Request failed with a resendable error 0x%x after %u retries.
Request throttled for %ls; Elapsed interval %I64u seconds
RequestCount
RequestCounter
RequestCreationTime
Requested TTL: '%d' seconds.
Requested TTL: %s, Remaining TTL: %s
RequestKey
RequestRetryFailures
requests.SetCount(requestCount)
RequestSecurityTokenResponse
RequestStatus
requestStatus=0x%x,interruptFlags=0x%x,appid='%ls',Target='%ls',Policy='%ls',MemberName='%ls'
RequestTimestamp
RequestType
requiredBytes != 0
Reset LCID = %d.
ResetEvent
ResetExtendedError
ResolveDelayLoadedAPI
ResolveUserService
Response 
Response contained AuthRequired of 0x%x.
Response contained AuthState of 0x%x.
Response contained authURL '%ls'.
Response contained endauthURL '%ls'.
Response contained error URL '%ls'.
Response contained error URL '%s' .
Response contained RequestStatus of 0x%x.
Response contained requestStatus of 0x%x.
Response contained webURL '%ls'. Overriding endAuthURL.
Response included request cookie collection.
Response included response parameters.
Response size (%ld) is outside acceptable range - discarding.
RestrictMsaRootRegistryKeyAccess
Result
Result of HMAC(K,C) for SHA-1 having invalid data.
Retrieve cert %ls.
Retrieve token %ls.
RetrieveCertificateFromCertStore: failed with hr = 0x%x
RetrieveCertificateFromCertStoreInternal: failed with hr=0x%x
RetrieveCredential failed, hr = 0x%x.
RetrieveDeviceCert: failed hr = 0x%x
RetrieveDeviceID failed with hr = 0x%x
RetrievePersistedCertificates: failed hr = 0x%x, trying to continue
RetrievePersistedCertificatesHelper failed with hr=0x%x
RetrievePersistedCertificatesHelper failed with hr=0x%x continuing gracefully
RetrievePersistedFileCertificates called with PPCRLUserType = %d
RetrievePersistedFileCertificates failed with hr=0x%x
RetrievePersistedServiceTokens: failed hr = 0x%x, trying to continue
Retry Provisioning  failed with hr = 0x%x
Retrying send/receive w/ revocation check disabled.
ReturnHr
ReturnToCaller
ReturnValue
Reusing existing encrypted session key.
RevertToSelf
Rewriting device password for deviceIdKey="%ls", username="%ls", passwordVersion="%ls".
rgOptions.SetCount(dwOptions) == true
rgRequestsOut.SetCount(dwRequestCount)
rgRequestsOut.SetCount(requestCount)
rMfD97w
RootLevelInterrupt
RPC error=%d.
RpcBindingBind
RpcBindingCreateW
RpcBindingFree
RpcExceptionCode hr = 0x%x.
RpcIdleTimeoutSeconds
RpcImpersonateClient
RpcRevertToSelf
RPCRT4.dll
RpcServerInterfaceGroupActivate
RpcServerInterfaceGroupClose
RpcServerInterfaceGroupClose returned 0x%x
RpcServerInterfaceGroupCreateW
RpcServerInterfaceGroupDeactivate
RpcServerInterfaceGroupDeactivate returned 0x%x
RpcStringFreeA
RpcStringFreeW
RSDSv}
RST%Iu
RtlAcquireResourceExclusive
RtlAcquireResourceShared
RtlAcquireSRWLockExclusive
RtlCaptureContext
RtlDeleteResource
RtlDllShutdownInProgress
RtlGetDeviceFamilyInfoEnum
RtlInitializeResource
RtlLookupFunctionEntry
RtlNtStatusToDosError
RtlNtStatusToDosErrorNoTeb
RtlPublishWnfStateData
RtlReleaseResource
RtlReleaseSRWLockExclusive
RtlSleepConditionVariableSRW
RtlSubscribeWnfStateChangeNotification
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlVirtualUnwind
RtlWakeAllConditionVariable
s WAVAWH
S:Detail/psf:error/psf:internalerror/psf:code
S:Detail/psf:error/psf:internalerror/psf:text
S@D9z
s0u6H
S-1-15-2-278586202-1783374767-3755652818-1001658646-1865713925-2047498344-1799408599
S-1-5-18
samcli.dll
SaveDownloadedConfig
Scenario:%d InlineUrl: %ls
SelectionNamespaces
selectSingleNode failed - pNode is NULL. 0x%x.
selectSingleNode for %ls failed with hr = %x
Send to host:%s, port: %d, path:%s
SendConnectILR
SendDisconnectILR
SendError
SendImplementation failed 0x%x.
Sending DeviceIDs with authentication is disabled by configuration.
Sending identity cookies.
Sending request parameters.
Sending WNF notification because a Family ID value is present.
Sending WNF notification because the Family ID value has changed.
Sending WNF notification because the Family Safety bit flipped from 0 to 1.
Sending WNF notification because the Family Safety bit is 1.
SendReceiveSuccess
SendReceiveWithProxyFailOver('%ls') failed (0x%x).
SendResult
SerializeObject() completed with hr = 0x%x.
SerializeObjectWithVersion
SerializeObjectWithVersion() completed with hr = 0x%x.
Server response indicates time skew, but can't find server time in respose.
ServerErrors
ServerTime
Service initialization failed with: hr=0x%x
service name is empty.
Service started
Service stopped
Service token is expired
Service URI is empty.
ServiceEnvironment
ServiceMain
ServiceRunTimeInMSecs
ServicesActive
ServiceStartTimeInMSecs
ServiceStop
ServiceStopTimeInMSecs
ServiceTokenInfo/ExpiredTime
ServiceTokenInfo/SessionKey
ServiceTokenInfo/SessionKeyType
ServiceTokenInfo/Ticket
ServiceTokenInfo/Type
serviceuri=
ServiceURI='%ls'
Session is not logged on.
Session key node not found in service token info xml. 0x%x.
Session key sign failure 0x%x
Session key signing failed with error: %x. Continuing with single session key
Session key type in tokenbag (%d) is not EncryptedSymmetric. DA token will not be updated in tokenbag.
Session key type on handle (%d).
sessionId=%d
SessionId=%d
sessionKey.GetLength() > 0
sessionKey.IsEmpty() == false
sessionKey1SizeBytes < (bpSessionKey.GetLength() - (4 * sizeof(DWORD)))
sessionKey2SizeBytes == (bpSessionKey.GetLength() - (4 * sizeof(DWORD)) - sessionKey1SizeBytes)
SessionKeyManager::DecryptWithSessionKey
SessionKeyManager::PackSessionKeys
SessionKeyManager::SignWithSessionKey
SessionKeyManager::UnPackSessionKeys
SessionKeyManager::VerifySignatureWithSessionKey
SessionKeySignFailure
SessionKeySignFailureGetAppData
SessionKeyType value is malformed, errno = %d
Set clock skew to '%d' seconds.
Set connect timeout = %d msec.
Set FirstParty=%d %ls.
Set Hip solution: %ls = '%ls'.
Set Internet access type = INTERNET_OPEN_TYPE_PRECONFIG
Set permission done.
Set proxy password = ""
Set proxy username = ""
Set Receive timeout = %d msec.
Set Send timeout = %d msec.
Set target map '%ls' : '%ls'.
SetApplicableCookies failed (0x%x).
SetAttribute LicenseInstallError failed with 0x%x.
SetAttribute LicenseKeySequence failed with 0x%x.
SetAttribute LicenseKeyVersionClient failed with 0x%x.
SetClockSkew failed. HR = 0x%x.
SetClockSkewFailure
SetCookie failed, also failed cleaning up cookie key, ret = 0x%x
SetCredProperty(CID) failed. Ignoring the failure. hr=0x%x
SetCredProperty(PUID) failed. Ignoring the failure. hr=0x%x
SetDWORDValue for %s failed with hr=%x
SetEvent
SetExtendedError: dwErrorCategory=%d, dwErrorCode=%d, dwPort=%d
SetExtendedProperty: failed with hr = 0x%x
SetExtendedPropertyInternal
SetExtProperty Failed but trying to set cookie
SetIdentityName failed, hr = 0x%x
SetLastError
SetNamedSecurityInfoW
SetNewVersionAndDownloadAsync
SetNextProxySettings: dwAccessType=%d, lpszProxy=%ls, lpszProxyBypass = %ls
SetNgcKeyName
SetPrivateKey - failed to set private key=  hr:%x
SetPrivateKey -::CertSetCertificateContextProperty failed to set CERT_KEY_PROV_INFO_PROP_ID with hr:%x
SetPrivateKey -::CertSetCertificateContextProperty failed to set key context with hr:%x
SetPropertyDefaultCredSavedToPersisted failed 0x%x.- best-effort, continue
SetRegistryPermissionDone
SetSecurityDescriptorDacl
SetSecurityDescriptorDacl failed with hr = 0x%x
SetSecurityDescriptorGroup
SetSecurityDescriptorOwner
SetServiceStatus
SetThreadpoolTimer
SetThreadToken
SetThreadToken failed (0x%x).
Setting Action Center state to new value: %d.
SetTokenInformation
SetUnhandledExceptionFilter
SetUnsignedProofOfPossessionToken
SetUserPropertiesToSystemStore
SHA256
ShCore.dll
SHCreateDirectoryExW
ShD9r
SHGetKnownFolderPath
ShouldCreateNgcKey
SID %ls is not Associated.
SID %ls is not Connected.
SID %ls not found in system store.
SID missing from LiveID key. (win32 = 0x%0x)
sid=%s
sid='%s'
SigKey derived key token missing:%x
SigKey nounce is missing:%x
SigKey nounce missing:%x
signature value node is not found %x
Signature verification failed or /Envelope/Body//RequestSecurityTokenResponse was not found. (hr=0x%x).
SignedTokenTimeOffset
SignInAssociatedUser
SignInAssociatedUser. (0x%x)
SignInAssociatedUser_DARenewalFailure
Size of option value (%lu) is not equal to size ofINTERNET_PROXY_INFO struct (%Iu) or pointer is not correctly aligned.
SizeofResource
Skip GetSignedInUsernames since SSO is disabled
SkipFRFS
Skipping deletion of credentials for connected account.
Skipping download of new files, existing files are up-to-date.
Skipping unknown IDCRL option (%d). hr=0x%x
Skipping WNF notification %ls with timestamp %d
skuStringLengthCharacters > 0
Sleep
Sleeping on _handlerTaskCount=%d
SmartCardKeyCertificate
Software\Microsoft\AuthCookies\Live
Software\Microsoft\IdentityCRL
SOFTWARE\Microsoft\IdentityCRL
Software\Microsoft\IdentityCRL\ClockData
Software\Microsoft\IdentityCRL\DeviceIdentities
Software\Microsoft\IdentityCRL\Environment
Software\Microsoft\IdentityCRL\ExtendedProperties
Software\Microsoft\IdentityCRL\Immersive\%s
Software\Microsoft\IdentityCRL\Immersive\%s\Property
Software\Microsoft\IdentityCRL\Immersive\%s\Token\
Software\Microsoft\IdentityCRL\InterruptState
Software\Microsoft\IdentityCRL\KeyCache
Software\Microsoft\IdentityCRL\LKG
Software\Microsoft\IdentityCRL\NegativeCache
Software\Microsoft\IdentityCRL\OfflineCreds
Software\Microsoft\IdentityCRL\StoredIdentities
Software\Microsoft\IdentityCRL\ThrottleCache
Software\Microsoft\IdentityCRL\Trace
Software\Microsoft\IdentityCRL\UserExtendedProperties\
Software\Microsoft\IdentityCRL\UserTileData
Software\Microsoft\IdentityCRL\WnfLastTimeStamps
Software\Microsoft\Passport
Software\Microsoft\Windows\CurrentVersion\AccountPicture
SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings
SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\5.0\User Agent
SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\User Agent
Software\Microsoft\Windows\CurrentVersion\Policies\System
SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\State
Software\Policies\Microsoft\MicrosoftAccount
SP800_108_CTR_HMAC
spAppIdDeviceMap->UpdateValidDeviceIDKey(wstrValidDeviceId, hrReason)
SSO_GROUP_LIVE
SspiCli.dll
StartAsyncInit failed. hr=0x%x
StartedTime
StartRpcServer
stateNameString.IsEmpty() == false
StatusCallback: Request failed with WINHTTP_CALLBACK_STATUS_SECURE_FAILURE 0x%x
StopRpcServer
StoreCertThumbprint failed with hr = 0x%x
StoreToken failed, hr = 0x%x
strcmp
strErrorRequest=
strErrorResponse=
String2SHA1Hash
StringCbLengthW failed. (hr = 0x%0x)
StringCchCopyW failed. (hr = 0x%0x)
StringCchCopyW hr=0x%x
StringCchCopyW: failed with hr=0x%x
StringCchPrintf failed for full user SID path. (localHr = 0x%0x)
StringCchPrintf failed for user SID path. (hr = 0x%0x)
StringCchPrintf failed. (hr = 0x%0x)
StringFileInfo
StringFromGUID2
Strong Credential GetUserKeyData Request result: hr = 0x%x, requestCount = %u, resendRequest = %u
StrongAuthPolicy is not BSTR type, type: %d
StrongCredentialKey
StrongCredentialKeyDataRequest::BuildRequest
StrongCredentialKeyDataRequest::GetSessionKeyToSign
StrongCredentialKeyDataRequest::GetSignatureXml
StrongCredentialKeyDataRequest::ParseResponse
strrchr
strstr
StrStrIW
strText.GetLength() > 0
strUrl: %ls
strUserAgent: %hs, dwAccessType 0x%x
SubErrorCode
SubscribeToNetworkNotification
Succesfully acquired provisioning mutex with a wait.
Succesfully acquired provisioning mutex with no wait.
Successfully verified message: %hs.
SupportedSchemes %d, FirstScheme %d, Target %d.
SUVWATAUAVAWH
SUVWAVAWH
SUVWAVH
SvcApi
SvchostPushServiceGlobals
SVWATAUAVAWH
SVWAVAWH
SVWAVH
SWATAUAVAWH
swprintf_s
SymmetricSessionKeyFunctions::DecryptMessage
SymmetricSessionKeyFunctions::GetDerivedKey
SymmetricSessionKeyFunctions::ImportSessionKey
SymmetricSessionKeyFunctions::SignMessage
SymmetricSessionKeyFunctions::VerifySignature
System store not found.
System store's family ID = %ls
System store's flags = %ls
SYSTEM\Setup
SystemDeviceId SetLicenseInstallError 0x%x
SystemDeviceId SetLicenseKeySequenceServer 0x%x
SystemDeviceId SetLicenseKeyVersionClient 0x%x
systemDeviceIdentifier.IsEmpty() == false
SystemSetupInProgress
SystemSKU
SystemStore property not found.
SystemStoreLite::GetCurrentUserSidString
SystemStoreLite::GetRegistryStringValue
SystemStoreLite::GetStoredIdentityProperty
SystemStoreLite::GetSystemSidString
SystemStoreLite::IsConnected
SystemStoreLite::IsConnectedSID
SystemStoreLite::IsUserDomainConnected
SystemTimeToFileTime
szBuffer
szFileName=%ls
t"D8=v
t$ !t$$3
T$ ;S
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
T$ Hc
t$ UWAWH
t$ WATAUAVAWH
t$ WAVAWH
t$ WH
t$$fD
t$(!t$,3
T$@D9r
t$@E;~4
T$@E3
T$@M;
T$\I;
t$`E3
T$`I;
T$|rJA
t$08U
t$0D!t$4L
T$0E3
t$0E3
T$0H+
t$0Ic
t$0Lc~
T$0M;
t$8!t$<3
t$89t$@t
T$8E3
t$8E3
t$8fD
T$8HcC
t$8Lc~
t$8Mcf
t$D9P
t$DE3
t$H!t$L3
T$HA+
t$hE3
T$HE3
t$HH!\$0L
T$hHc
T$pA;
T$PA3
T$pE3
t$pE3
T$pE3
t$pfD
t$PHc
t$PIc
T$PL;
t$X!t$\3
t$x!t$|3
T$X;t$dr
t$xD9d$`
t$xE3
t$XE3
t$xE3
T$XH;U
t$XHc
t$xM;
t&@8=
t&E9V0t E
t,fD9
t.fD9;t(H
t]D87tXH
t`fD9?tZH
t{f93tvH
t+f98t&L
t=fD9;t7H
t9D8)t4L
t-A8t$xu
tAf9*t<H
Target
Target name was wrong type, continuing gracefully
targetname
targetname='%ls', isCredential=%d
targetname='%ls', type=%d, flags=0x%x, isCredential=%d
targetname='%ls', type=%d, isCredential=%d
tbs.dll
tDf9;t?H
tEL;I u
TerminateProcess
Test hook value: 0x%x
TestHookFlags
tgfD99ta
The call is from moset. Don't overwrite previous notification state, exiting.
The credential property flags are malformed. flags = %ls, errno = %d, hr = 0x%X
The proxy requires authentication. Status %d.
The server requires authentication. Status %d.
The service has stopped.
The service will auto stop if no requests received for some period of time.
tHH9q
this=0x%p, bCredentialsWereCollectedInUI=%d
this=0x%p, m_pIdentity=0x%p
this=0x%p, pRequest=0x%p
this=0x%p, pRequest=0x%p, lpszServerName=%s, nServerPort=%d, lpszUrlPath=%s
tHL;vxsLH
ThreadCount
threadId
ThrottleCount
ThrottleFlags
ThrottleManager::BuildThrottleKey
ThrottleManager::CheckCurrentLimit
ThrottleManager:SetConfiguration flags=%x, maxRequests=%d, totalIntervalSeconds=%d
ThrottleManager:SetConfiguration throttlekey=%ls, maxRequests=%d
ThrottleMaxRequests
ThrottleScenario
ThrottleStartedTime
ThrottleTotalIntervalSeconds
Thumbprint=%s
TickCount
Time elapsed to start the service: %I64u.%I64u sec.
Time elapsed to stop the service: %I64u.%I64u sec.
Time skew: Request failed with a resendable error 0x%x after %u retries.
TimeStamp
TlsAlloc
TlsFree
TlsGetValue
TlsSetValue
tMD;u uGM
tmpconfig.xml
tNfD9}
To retrieve system device id, caller must be the local system account on the machine
tO9{`uLH
ToBase64: failed hr = 0x%x
Token applies to missing:%x
Token blob is empty.
Token Expired time:%ls 
Token info: %ls 
Token node not found in certificate info xml. 0x%x.
Token node not found in service token info xml. 0x%x.
Token type node not found in service token info xml. 0x%x.
TOKEN_BROKER
TokenBroker
TotpHelper::GetTimeStep
TotpHelper::GetTOTPCode
TotpHelper::ReadTotpSharedSecretFromCache
toupper
towupper
tP@8o
tpf91tkH
tPfD9.tJH
tPfD9'tJH
TPM ID buffer allocation failed.
TPM ID buffer size query was unsuccessful, hr = 0x%x
TPM ID retrieval was unsuccessful, hr = 0x%x
TPM Info generation failed with error value:%x
TPM is vulnerable, do not upsell NGC %d.
TPM MSA client state change 0x%x -> 0x%x
TpmBaseServicesFunctions::GetAttestationStatement
TpmBaseServicesFunctions::GetDeviceTransportKey
TpmBaseServicesFunctions::GetEKCert
TpmBaseServicesFunctions::GetProvider
TpmBaseServicesFunctions::GetTpmKeyBlob
TpmBaseServicesFunctions::GetWindowsAIK
TpmBaseServicesFunctions::GetWindowsAIKCertChain
TpmBaseServicesFunctions::GetWindowsAIKLocation
TpmBaseServicesFunctions::RevokeDeviceAttestationKey
TpmKeyStateClient
TpmKeyStateServer
TpmKeyStatus
TpmKeyType
TpmKspReadStatus
TpmSessionKeyFunctions::DecryptMessage
TpmSessionKeyFunctions::ImportSessionKey
TpmSessionKeyFunctions::SignMessage
TpmSessionKeyFunctions::VerifySignature
TpmStatus
TraceLoggingRegister failed with 0x%x, continuing...
TranslateScenarioIDByPolicy
TranslateScenarioIDByPolicy is translating uxScenarioId from %d to CONNECT_UX_SCENARIO::UX_SCENARIO_NO_MSA_UPSELL based on policy
Translation
trD88tmH
Treating family ID non-existence as empty value.
Treating family safety flag non-existence as 0 value.
trfD9:tlH
trHc}
Triggered DeviceLicenseUpdate ServerInternalErrorCode 0x%x
TriggerNewFilesDownload failed (0x%x).
TriggerNotificationUpdate failed with hr = 0x%x
TrustedPCHandler::AddTrustedPC
Trying Crypt provider: %S, provider type: %d
Trying next proxy due to WinHttpReceiveResponse failure 0x%x.
Trying next proxy due to WinHttpSendRequest failure 0x%x.
Trying offline authentication against hashed credentials.
tSfD9+tMH
tTfD9+tNH
tUD9k
tVD9g
tYf93tTE3
u HcA<H
u"H!G@H
u"H9]
u#H91t
u%H;C
u%I;G
u(9Ehu
u`LcK
u+H;C
u4D9k
UA Tokens
uAfD9u
UATAUAVAWH
UATAVH
UATAWH
UAUAVH
UAUAWH
UAVAWH
ug9uw
uiflavor
UIFlow
ULongAdd hr = 0x%x.
UMgrQueryUserContext
UMgrQueryUserToken
Unable to acquire cryptographic provider (0x%x).
Unable to close mutex for device provisioning 0x%x.
Unable to create CLSID_DOMDocument60 instance. hr=0x%x
Unable to create mutex for device provisioning 0x%x.
Unable to create registry key '%ls', hr = %x.
Unable to delete credential. hr=0x%x
Unable to delete file '%ls'. HR=0x%x.
Unable to delete persisted certificates. hr=0x%x
Unable to download new config file version %ls. HR=%x.
Unable to find token bag.
Unable to find token bag. hr=0x%x
Unable to generate user agent string 0x%x.
Unable to get CAW because caller is not connected.
Unable to initialize cryptographic provider 0x%x.
Unable to open current user registry, hr = %x.
Unable to open key '%s', hr = %x.
Unable to open registry key '%ls', hr = %x.
Unable to open registry key '%s', hr = %x.
Unable to open registry key for query: '[%ls]', hr = %x.
Unable to open volatile key. (0x%0x)
Unable to parse response (0x%x).
Unable to Parse the certificate info xml.
Unable to Parse the service token info xml
Unable to Parse the xml.
Unable to Parse the xml: %ls
Unable to query binary value '%ls' under key '%ls', hr = %x.
Unable to Query DWORD value for '%ls', hr = %x.
Unable to query max value size '%s', hr = %x.
Unable to Query StringValue for size: '%ls', hr = %x.
Unable to record hash of correct password (0x%x).
Unable to retrieve credential. hr=0x%x
Unable to SerializeCookies (0x%x).
Unable to SerializeRequestParams (0x%x).
Unable to set %ls timeout - InternetSetOption failed (0x%x).
Unable to set binary value '%ls' under '%ls', hr = %x.
Unable to set INTERNET_OPTION_CLIENT_CERT_CONTEXT - InternetSetOption failed (0x%x).
Unable to set INTERNET_OPTION_PROXY_PASSWORD - InternetSetOption failed (0x%x).
Unable to set INTERNET_OPTION_PROXY_USERNAME - InternetSetOption failed (0x%x).
Unable to set selection namespaces on XML DOM.
Unable to set string value '%ls'='%ls' under '%ls', hr = 0x%x.
Unable to set WINHTTP_OPTION_PROXY_USERNAME - WinHttpSetOption failed (0x%x).
Unable to store status for '%ls'. hr=0x%x.
Unable to write App ID value, hr = 0x%x.
Unable to write cert to store. hr=0x%x
Unable to write credential. hr=0x%x
Unable to write Device ID value, hr = 0x%x.
Unable to write or create registry key '%ls', hr = %x.
Unable to write or create registry key '%s', hr = %x.
Unable to write or open registry key for read: '%ls', hr = %x.
Unable to write or QueryStringValue for size: '%ls', hr = %x.
Unable to write or QueryStringValue: '%ls', hr = %x.
Unable to write registry key '%ls', hr = %x.
Unexpected error in GetKeyFromRegistry. m_puid is not set
Unexpected error in UpdateKeyInRegistry: hr = 0x%x
Unexpected error: pxmlToken is NULL. 0x%x
Unexpected failure to get provisioning mutex (infinite wait) %d
Unexpected failure to get provisioning mutex (no wait) %d
Unexpected RenewDeviceCert returned S_OK and null pointer
Unexpected RetrieveDeviceCert returned S_OK and null pointer
unH;C
unH9A
UnhandledExceptionFilter
Uninitialized cert manager... 0x%x
Uninitialized configuration manager... 0x%x
Uninitialized cryptographic provider... 0x%x
Uninitialized external memory manager... 0x%x
Uninitialized identity store... 0x%x
Uninitialized random key... 0x%x
UninitializeNetworkEventListner
Uninitializing cryptographic provider...
Unknown credential type.
Unknown token type found: '%s'
UnloadUserProfile
UnprotectCredentialString failed. HR=0x%x.
Unregister
Update
UpdateCredential Failed hr = %x
UpdateDeviceLicenseInfo
UpdateDeviceTpmInfo determined client is bound to Software TPM so hardware attestation will not work
UpdateDeviceTpmInfoUnderProvisioningLock
UpdateDone
UpdateModernIdentityStore
UpdateNegativeCacheForScenario, scenarioId = %d, subScenarioId = %d
UpdateProofOfPossessionTokenInAuthPackage failed with hr = 0x%x, continuing
UpdateSamProperties
UpdateValidDeviceIDKey Failed hrInternal = %x
Updating DA token for linked handles
Updating offline hash of valid credential.
UpsellNgc
uRH9u
URI='%hs', Token='%ls'
URL query string platform is: %ls, uiflavor is: %ls
URL: %ls
URL_AccountSettings
UrlAppendQueryString
UrlContextInfo::GetInlineUxScenarioId
UrlContextInfo::GetPlatformIdentifiers
UrlContextInfo::IsUserAADJoined
UrlEscapeW
UrlUtilities::AppendMarket
UrlUtilities::GetColorSet
UrlUtilities::GetMarket
urn:liveid:clepkey
urn:liveid:SP800108_CTR_HMAC_SHA256_DOUBLEDERIVED
urn:liveid:SP800-108CTR-HMAC-SHA256
urn:oasis:names:tc:SAML:1.0
urn:passport:compact
urn:passport:legacy
urn:passport:loginprooftoken
User Agent
User Agent String: %hs
User is already connected.
User is in remote session, skip registering NGC for secondary MSA 
User name %ls is not persisted.
User name in registry key and xml do not match.
User: %ls
User: %ls; LastWritten: %ls.
USER32.dll
USERENV.dll
UserId
UserIdKeyRegistrationRequest::BuildRequest
UserIdKeyRegistrationRequest::GetKeyAttestationXml
UserIdKeyRegistrationRequest::GetPublicKeyXml
UserIdKeyRegistrationRequest::GetSessionKeyToSign
UserIdKeyRegistrationRequest::GetSignatureXml
UserIdKeyRegistrationRequest::ParseResponse
UserName
username
USERS\.default\Software\Microsoft\IdentityCRL
UserTicket
UserTileUrl
userType=%d
USVWATAUAVAWH
USVWATAUAVH
USVWATAUAWH
USVWATAVAWH
USVWATAVH
USVWATH
USVWAUAVAWH
USVWAVAWH
USVWAVH
USVWAWH
USVWH
USWAVAWH
UuidCreate
UuidToStringA
UuidToStringW
UVWATAUAVAWH
UVWATAUH
UVWATAVH
UVWATAWH
UVWAUAVH
UVWAUAWH
UVWAVAWH
uw!ugH
UWATAUAVH
UWATAUAWH
UWATAVAWH
UWATH
UWAUAVAWH
UWAUH
UWAVH
UWAWH
UWAWI
uwD9m
uy!EH
uZA;V
V@D9z
ValidateHashOfValidPassword failed with hr=0x%x.
ValidateHashOfValidPassword: Hashes did not match.
ValidateHashOfValidPassword: Hashes match.
ValidateSessionKeyType
ValidDeviceId
value returned for %s returned is not 1 length
value returned for %s returned is not 1 or 0 length
VarFileInfo
VATAUAVAWH
VerifyCertificate: CertVerifySubjectCertificateContext failed with hr=0x%x
VerifyCertificate: verifying already initialized failed with hr=0x%x
VerifyInitialization: failed hr = 0x%x
VerifyPOPMessage
VerifySsoParams
VerQueryValueW
Version
version
Version
Version %d.%d of the Windows Socket API could not be found.
Version %d.%d of the Windows Socket API has been initialized.
viV4u
void %p does not have pending SLC request hr = %x
VS_VERSION_INFO
vsprintf_s
vswprintf_s
VUUUUUUUI
VWATAVAWH
VWAUAVAWH
VWAVH
VWAWH
w$H;q
W0fD9
WabAuthFlowDisabled
WaitForMultipleObjectsEx
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
WATAUAVAWH
WATAVH
WAVAWH
wcschr
wcscmp
wcscpy_s
wcscspn
wcsftime
wcsncmp
wcsspn
wcsstr
wcstol
wcstoul
WebCookieManager::GetCookieData
WebCookieManager::PublishCookie
WebCookieManager::SetCookie
WebCookieManager::SetCookieValue
WebCookieManager::WriteColorSetCookieData
WebCookieManager::WriteCookieData failed (0x%x).
wFt>H
WideCharToMultiByte
wilActivity
WilError_02
wilResult
WilStaging_02
Win10
Win32
Win8Colors
Windows
Windows 95
Windows 98
Windows 98; Win 9x 4.90
Windows AIK
Windows Live ID Token Issuer
Windows NT
Windows TPM ID: %ls
Windows.%d
Windows_Default_Cred_SLC
Windows10
Windows9
WindowsDeleteString
WindowsGetStringRawBuffer
WindowsLive:(cert):name=
WindowsLive:(token):name=
WindowsLive:name=
WindowsLive:name=*
WindowsLive:target=virtualapp/
WindowsLive:user=
WindowsLive:user=*
WinHttp session not cached because of registry setting.
WINHTTP.dll
WinHttpAddRequestHeaders
WinHttpCloseHandle
WinHttpCloseHandle failed on request
WinHttpConnect
WinHttpConnect failed 0x%x.
WinHttpCrackUrl
WinHttpCrackUrl failed for STS URL: %ls. (0x%x)
WinHttpCreateUrl
WinHttpErrorCode
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpOpen
WinHttpOpen failed 0x%x.
WinHttpOpenRequest
WinHttpOpenRequest failed 0x%x
WinHttpQueryAuthSchemes
WinHttpQueryDataAvailable
WinHttpQueryDataAvailable failed 0x%x
WinHttpQueryHeaders
WinHttpQueryHeaders failed 0x%x
WinHttpQueryHeaders failed 0x%x.
WinHttpQueryHeaders returns %d.
WinHttpReadData
WinHttpReadData failed 0x%x
WinHttpReadData returned %d characters.
WinHttpReceiveResponse
WinHttpReceiveResponse failed 0x%x.
WinHttpSecureStatusErrorCode
WinHttpSendRequest
WinHttpSendRequest failed 0x%x.
WinHttpSetOption
WinHttpSetOption for WINHTTP_OPTION_SECURITY_FLAGS failed 0x%x
WinHttpSetStatusCallback
WinHttpSetStatusCallback failed 0x%x
WinStationGetCurrentSessionCapabilities
WinStationGetCurrentSessionCapabilities returns false with 0x%08x.
WinStationQueryInformationW
WinStationQueryInformationW failed = 0x%x.
WLDomain
WLIDAcquireTokens
WLIDAcquireTokensWithNGC
WLIDAddOrDeleteColorSetCookie
WLIDAddUserToSsoGroup
WLIDApproveSession
WLIDAssociateDeviceToUser
WLIDAuthEndPointUrl
WLIDAuthEndPointUrlHash
WLIDCEnumIdentities didn't return exactly one identity. (0x%x)
WLIDCleanupIdentity
WLIDCompleteConnect
WLIDConnectIdentity
WLIDCreateContext
WLIDCreateContextForLinkedIdentity
WLIDCreateContextWithChallenge
WLIDCreateContextWithLogonId
WLIDCreateIdentity
WLIDCRegisterUserIdkey
WLIDDeleteContext
WLIDDeleteIdentity
WLIDDeProvisionDeviceId
WLIDDisableTrace
WLIDDisassociateDeviceFromUser
WLIDDisconnectIdentity
WLIDEnableTrace
WLIDEnumDevices
WLIDEnumerateUserAssociatedDevices
WLIDEnumIdentities
WLIDGetAppData
WLIDGetAuthError
WLIDGetCachedTokens
WLIDGetConfigDWORDValue
WLIDGetConfigString
WLIDGetDefaultUserForTarget
WLIDGetDefaultUserForTargetEx
WLIDGetDeviceDAToken
WLIDGetDeviceId
WLIDGetDeviceIdEx
WLIDGetDeviceShortLivedToken
WLIDGetExtendedError
WLIDGetHIPChallenge
WLIDGetIdentityProperty
WLIDGetIdName
WLIDGetInlineUrlContextData
WLIDGetIssuerCertificate
WLIDGetKeyLatest
WLIDGetKeyWithVersion
WLIDGetLocalDeviceName
WLIDGetOneTimeCredential
WLIDGetOpenHandlesData
WLIDGetProofOfPossessionTokens
WLIDGetScenarioInlineUrlWithContextData
WLIDGetServiceConfig
WLIDGetSignedTokens
WLIDGetSvcEnvironment
WLIDGetTotpCode
WLIDGetUserExtendedProperty
WLIDGetUserPropertiesFromHandle
WLIDGetUserPropertiesFromSystemStore
WLIDGetUsersFromSsoGroup
WLIDHasPersistedCredential
WLIDImportIdentity
WLIDInitializationTimerQueue
WLIDInitializeEx
WLIDIsKioskMode
WLIDListSessions
WLIDManageApprover
WLIDNCreateContext
WLIDNDeleteContext
WLIDNGetNextNotification
WLIDPersistCredential
WLIDPersistCredentialForConnectedUser
WLIDProvisionDeviceId
WLIDProvisionIdentityWithTransferToken
WLIDPublishService
WLIDRegisterUserIdkey
WLIDRemovePersistedCredential
WLIDRemoveUserFromSsoGroup
WLIDRenewDeviceId
WLIDRes.DLL
WLIDResolveDevice
WLIDResolveUser
WLIDSendOneTimeCode
WLIDSetAuthData
WLIDSetDefaultUserForTarget
WLIDSetHIPSolution
WLIDSetOptions
WLIDSetUserExtendedProperty
WLIDSetUserPropertiesToSystemStore
WLIDSTS_WCF
wlidsvc
WLIDSVC
Wlidsvc.dll
WLIDSVC.dll
Wlidsvc.dll
WLIDSvc.pdb
WlidsvcConfigXml
WLIDSvcCredDelete
WLIDSvcCredEnumerate
WLIDSvcCredRead
WLIDSvcCredWrite
WLIDSvcFailedToStart
WLIDSvcNegativeCache
WLIDSvcNoCreds
WLIDSvcThrottled
WLIDTimerQueue
WLIDUnpublishService
WLIDUpdateConnectedIdentity
WLIDUpdateDeviceLicenseInfo
WLIDUpdateToken
WLIDUpdateUserAssociatedDeviceProperties
WLIDVerifyAssertion
WLIDWatsonReport
wLtPH
WNF event failed 0x%x.
WNF LastTimeStamp for %ls is %d
WNF_LIC_DEVICE_LICENSE_MISSING
WNF_LIC_HARDWAREID_IN_DEVICE_LICENSE_IN_TOLERANCE
WNF_LIC_HARDWAREID_IN_DEVICE_LICENSE_OUT_OF_TOLERANCE
WNF_TPM_MAINTENANCE_TASK_STATUS
Write certificate error. hr = 0x%x
Write service token error. hr = 0x%x
WriteBufferToRegistry failed to write current time. (0x%0x)
WriteBufferToRegistry failed to write tick count. (0x%0x)
WriteBufferToRegistry wrote current time = %I64d
WriteBufferToRegistry wrote tick count = %I64d
WriteCommonToken: failed with hr=0x%x
WriteFile
WS2_32.dll
WSACloseEvent
WSACreateEvent
WSAStartup() failed with error code: %d.
wsp:AppliesTo/wsa:EndpointReference/wsa:Address
wsp:AppliesTo/wsa:EndpointReference/wsa:ServiceName
wssc:Nonce
wsse:X509V3
WS-SecureConversation
WS-SecureConversationWS-SecureConversation
wst:Lifetime/wsu:Created
wst:Lifetime/wsu:Expires
wst:RequestedAttachedReference/wsse:SecurityTokenReference/wsse:KeyIdentifier
wst:RequestedAttachedReference/wsse:SecurityTokenReference/wsse:Reference
wst:RequestedProofToken/wst:BinarySecret
wst:RequestedProofToken/xenc:EncryptedKey/xenc:CipherData/xenc:CipherValue
wst:RequestedSecurityToken/*
wst:TokenType
wstrAppId=%ls,dwDeviceType=%d,dwFlags=%d
wstrAppId=%ls,dwDeviceType=%d,dwFlags=%d,dwInternalFlags=%d,bReturnedNotAssociated=%d
wstrAppId=%ls,dwFlags=%d,dwDeviceType=%d
wstrAttributeName=%s
wstrCertInfo %ls
wstrConfigVersion=%ls
wstrCredentialType=%s
wstrCredentialType='%s'
wstrCredTargetName = '%ls'.
wstrDeviceIDKey=%ls,wstrUsername=%ls
wstrDeviceIDKey=%ls,wszUserName=%ls
wstrDeviceIDKey=%ls,wszUserName=%ls,wszOldUserName=%ls
wstrDeviceIDKey=%s,wstrDeviceIDName=%s
wstrDeviceIDKey=%s,wstrDeviceIDName=%s,fAllowEmtyDomLoad=%d
wstrDeviceIDKey=%s,wstrDeviceIDName=%s,wstrPropertyname=%s,dwValue=%d
wstrDeviceIDKey=%s,wstrUsername=%s
wstrDeviceKey=%ls,wstrDeviceName=%ls
wstrDeviceKey=%s,wstrDeviceName=%s,wstrAppId=%s
wstrDIDKey=%s
wstrDIDKey=%s,wstrValidDeviceIdName=%s
wstrHost=%ls
wstrRegPath=%s, fAllowEmtyDomLoad=%d
wstrRegPath=%s,wstrKeyName=%s
wstrRegPath=%s,wstrKeyName=%s,wstrData=%s
wstrServerTime: %s
wstrTargetName is empty string.
wstrTargetName is too long (%d chars).
wstrTargetName=%ls
wstrUrl: %ls
wstrURL='%ls'
wstrUserName is empty.
wstrUserName is to long (%Iu chars).
wstrUserName: %ls
wstrUserName: %ls, strServiceName: %hs
wstrUserName: %ls, wstrServiceName: %ls
wstrUserName=%ls
wstrUserName='%ls'
wsu:Id
wszAuthInfo is NULL.
wszAuthToken is NULL.
wszAuthToken=%ls
wszCredType='%ls'
wszDeviceId != nullptr
wszFilterPropertyNAme='%ls'
wszHipSolution is invalid.
wszMemberName='%ls'
wszMemberName='%ls', dwFlags=%d
wszPropertyName='%ls'
wszPropertyName='%ls', pwszPropertyValue=0x%p
wszPropertyName='%ls', wszPropertyValue=%ls
wszUsername
wszUserName is too long (%Iu chars).
wszUserName=%ls
wszUsername=%ls, dwFlags=%d, dwSSOGroup=%d
wszUserName='%ls', wszPropertyName='%ls', wstrPropertyValue=0x%p
wszUserName='%ls', wszPropertyName='%ls', wszPropertyValue=%ls
wszUserName='%ls', wszPropertyName='%ls', wszPropertyValue=%ls wszDomains=%ls, wszExpiry=%ls, wszAttributes=%ls, wszIgnoreRememberMe=%ls
wszUserName=%ls, wszVirtualAppName=%ls
wszUserName=%ls, wszVirtualAppName=%ls, wszAuthTokenBlob=%ls
wszVirtualAppName is too long (%Iu chars).
WTSDisconnectSession
WTSDisconnectSession failed = 0x%x.
WTSDisconnectSession succeeded for session id = %d.
WTSEnumerateSessions failed = 0x%x.
WTSEnumerateSessions failed with hr 0x%x
WTSEnumerateSessionsW
WTSFreeMemory
WTSQueryUserToken
x ATAUAVH
x ATAVAWH
x AUAVAWH
x AVH
x$H;}
x[L9ehvUH
x_^[]
xA^A\_^[]
xA_A^_^[]
xA_A^A]A\_^[]
Xbox1Core
xbox-app://
XboxOneCore
XML load for response failed (0x%x).
XML load for text failed at %d: %ls.
XMLGetNodeAttribute
xmllite.dll
xnH9u
xUD8d$0
y(H9G
