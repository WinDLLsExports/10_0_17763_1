      
        
          
              
                
                  
                    <xsd:attribute name="Name" type="cps:NonEmptyString" use="required" />
                  </xsd:extension>
                  <xsd:extension base="xsd:string">
                  Get-MyObject -ExcludeObjectId 123,456
                  Get-MyObject -LiteralName p*,q* 
                  Get-MyObject -MaxWorkingSet 123
                  Get-MyObject -MinWorkingSet 123
                  Get-MyObject -Name p*,q* 
                  Get-MyObject -ObjectId 123,456
                  SELECT * FROM MyObject WHERE ((Name = &quot;p*&quot;) OR (Name = &quot;q*&quot;)) 
                  SELECT * FROM MyObject WHERE ((Name like &quot;p%&quot;) OR (Name like &quot;q%&quot;)) 
                  SELECT * FROM MyObject WHERE ((NOT Name = 123) AND (NOT Name = 456)) 
                  SELECT * FROM MyObject WHERE ((ObjectId = 123) OR (ObjectId = 456)) 
                  SELECT * FROM MyObject WHERE (WorkingSet &gt;= 123)
                  SELECT * FROM MyObject WHERE (WorkingSet =&lt; 123)
                &lt;CmdletParameterMetadata PSName=&quot;LiteralName&quot; /&gt;
                (i.e. "Networking.MyEnum" will become "Microsoft.PowerShell.Cmdletization.GeneratedTypes.Networking.MyEnum").
                (i.e. the name should be "Networking.MyEnum" rather than "MyEnum").
                </xsd:simpleContent>
                <xsd:attribute name="Name" type="cps:EnumValueName" use="required" />
                <xsd:attribute name="Value" type="xsd:integer" use="required" />
                <xsd:element name="Parameter" type="cps:InstanceMethodParameterMetadata" maxOccurs="unbounded" />
                <xsd:element name="Parameter" type="cps:StaticMethodParameterMetadata" maxOccurs="unbounded" />
                <xsd:field xpath="@Aliases" />
                <xsd:field xpath="@CmdletParameterSet" />
                <xsd:field xpath="@DefaultCmdletParameterSet" />
                <xsd:field xpath="@PSName" />
                <xsd:selector xpath=".//cps:CmdletMetadata" />
                <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
                <xsd:selector xpath=".//cps:Method" />
                <xsd:simpleContent>
                BitwiseFlags attribute specifies if the .NET enum will be decorated with a System.FlagsAttribute.                
                byte (System.Byte), 
                C# Language Specification allows (in section 4.1.9 "Enumeration types") only the following
                EnumName attribute specifies the name of a .NET enum.
                int (System.Int32), 
                long (System.Int64),
                sbyte (System.SByte), 
                short (System.Int16), 
                The following cmdlet invocation:
                The name should include a namespace to avoid naming conflicts 
                The system will prefix the name of the enum with the following namespace: "Microsoft.PowerShell.Cmdletization.GeneratedTypes"
                This is the name to use in a PSType attribute.
                uint (System.UInt32), 
                ulong (System.UInt64).
                Underlying type of the enum.
                underlying types: 
                ushort (System.UInt16), 
                When referring to the enum in types.ps1xml and format.ps1xml files, one has to use the full, prefixed name of the enum.
                will be translated into the following WQL query:
              - only objects with a property value *not* equal to the cmdlet parameter argument will be processed.
              - only objects with a property value equal to the cmdlet parameter argument will be processed.
              - only objects with a property value greater than or equal to the cmdlet parameter argument will be processed.
              - only objects with a property value less than or equal to the cmdlet parameter argument will be processed.
              &lt;!-- &quot;LiteralName&quot; is used as the cmdlet parameter name --&gt;
              &lt;!-- &quot;Name&quot; is used as the cmdlet parameter name --&gt;
              &lt;/RegularQuery&gt;
              &lt;RegularQuery AllowGlobbing=&quot;false&quot;&gt;
              &lt;RegularQuery AllowGlobbing=&quot;true&quot; /&gt;
              ...
              </xsd:complexType>
              </xsd:documentation>
              </xsd:keyref>
              </xsd:sequence>
              </xsd:unique>
              <xsd:attribute name="DefaultCmdletParameterSet" type="cps:ParameterSetName" use="optional" />
              <xsd:complexType>
              <xsd:documentation xml:lang="en-us">
              <xsd:field xpath="@ParameterName" />
              <xsd:field xpath="@Position" />
              <xsd:keyref name="DefaultCmdletParameterSetKeyRef" refer="cps:UniqueParameterSetNamesInStaticCmdlet">
              <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
              <xsd:selector xpath=".//cps:Parameter" />
              <xsd:sequence>
              <xsd:unique name="UniqueCmdletParameterAliasesUnderGetCmdletParametersElement_1">
              <xsd:unique name="UniqueCmdletParameterNamesUnderGetCmdletParametersElement_1">
              <xsd:unique name="UniqueParameterSetNamesInStaticCmdlet">
              AllowGlobbing attribute specifies if strings with globbing characters (wildcards) are supported.  
              CmdletParameterSet attribute specifies the name of a cmdlet parameter set associated with the static method.
              CmdletParameterSets attribute is a whitespace-separated list of names of parameter sets,
              Comparison of strings and characters is always case-insensitive.
              Example for &lt;ExcludeQuery&gt; element that is applied to an ObjectId property:
              Example for &lt;MaxValueQuery&gt; element that is applied to an WorkingSet property:
              Example for &lt;MinValueQuery&gt; element that is applied to an WorkingSet property:
              Example for &lt;RegularQuery AllowGlobbing=&quot;false&quot; &gt; element that is applied to a Name property:
              Example for &lt;RegularQuery AllowGlobbing=&quot;true&quot; &gt; element that is applied to a Name property:
              Example for &lt;RegularQuery&gt; element that is applied to an ObjectId property:
              Example of a wildcard: "foo*" (matches all strings beginning with "foo")
              ExcludeQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              If AllowGlobbing attribute is ommited then its value is based on the type of the filtered property.
              If CmdletParameterSet is ommited, then the name of the cmdlet parameter set is auto-generated based on the name of the method.
              If this parameter is ommited, then the cmdlet parameter belongs to all parameter sets.
              Language-Tag = Primary-tag *( "-" Subtag )
              MaxValueQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              MinValueQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              Primary-tag = 1*8ALPHA
              RegularQuery element defines a cmdlet parameter that limits which objects will be processed by the cmdlet
              Subtag = 1*8ALPHA
              that the cmdlet parameter should belong to.
            &lt;/Property&gt;
            &lt;Property PropertyName=&quot;Name&quot;&gt;
            </xsd:annotation>
            </xsd:complexType>
            </xsd:documentation>
            </xsd:element>
            </xsd:extension>
            </xsd:key>
            </xsd:unique>
            <xsd:annotation>
            <xsd:complexType>
            <xsd:documentation xml:lang="en-us">
            <xsd:element name="AllowedValue" type="xsd:string" maxOccurs="unbounded" />
            <xsd:element name="Association" type="cps:Association" maxOccurs="unbounded" />
            <xsd:element name="Cmdlet" type="cps:InstanceCmdletMetadata" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="Cmdlet" type="cps:StaticCmdletMetadata">
            <xsd:element name="CmdletOutputMetadata" type="cps:CmdletOutputMetadata" minOccurs="0" />
            <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForGetCmdletFilteringParameter" />
            <xsd:element name="Data" maxOccurs="unbounded">
            <xsd:element name="GetCmdlet" type="cps:GetCmdletMetadata" minOccurs="0" />
            <xsd:element name="GetCmdletParameters" type="cps:GetCmdletParameters">
            <xsd:element name="Option" type="cps:QueryOption" maxOccurs="unbounded" />
            <xsd:element name="Property" type="cps:PropertyMetadata" maxOccurs="unbounded" />
            <xsd:element name="Type" type="cps:TypeMetadata" />
            <xsd:element name="Value" maxOccurs="unbounded">
            <xsd:extension base="cps:CommonCmdletMetadata">
            <xsd:key name="UniqueParameterNamesWithinMethod">
            <xsd:key name="UniqueParameterNamesWithinStaticMethod">
            <xsd:unique name="UniquePositionWithinMethodParameters">
            <xsd:unique name="UniquePositionWithinStaticMethodParameters">
            DefaultNoun element specified the default noun for cmdlets defined in this document.
            Version element is semantically equivalent to the ModuleVersion entry in a module manifest (psd1) file.
           RFC-1766 defines the format of a culture identifier as:
          "cim:CreateInstance" is mapped to the WMI's static, intrinsic CreateInstance method.  Names of method parameters have to map to names of properties.
          "cim:DeleteInstance" is mapped to the WMI's instance, intrinsic DeleteInstance method.  All method parameters are ignored.
          "cim:ModifyInstance" is mapped to the WMI's instance, intrinsic ModifyInstance method.  Names of method parameters have to map to names of properties.
          </xsd:annotation>
          </xsd:attribute>
          </xsd:choice>
          </xsd:complexContent>
          </xsd:documentation>
          </xsd:element>
          </xsd:sequence>
          <xsd:annotation>
          <xsd:attribute name="BitwiseFlags" type="xsd:boolean" use="optional">
          <xsd:attribute name="EnumName" type="cps:EnumTypeName" use="required">
          <xsd:attribute name="Max" type="xsd:integer" use="required" />
          <xsd:attribute name="Max" type="xsd:nonNegativeInteger" use="required" />
          <xsd:attribute name="Min" type="xsd:integer" use="required" />
          <xsd:attribute name="Min" type="xsd:nonNegativeInteger" use="required" />
          <xsd:attribute name="UnderlyingType" type="cps:PowerShellTypeIdentifier" use="optional">
          <xsd:choice maxOccurs="unbounded">
          <xsd:complexContent>
          <xsd:documentation xml:lang="en-us">
          <xsd:documentation>
          <xsd:element name="CmdletOutputMetadata" type="cps:CmdletOutputMetadata" minOccurs="0" />
          <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForInstanceMethodParameter" minOccurs="0" />
          <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForStaticMethodParameter" minOccurs="0" />
          <xsd:element name="Parameters" minOccurs="0">
          <xsd:field xpath="@Aliases" />
          <xsd:field xpath="@Name" />
          <xsd:field xpath="@PropertyName" />
          <xsd:field xpath="@PSName" />
          <xsd:selector xpath=".//cps:CmdletParameterMetadata" />
          <xsd:selector xpath=".//cps:Data" />
          <xsd:selector xpath=".//cps:Property" />
          <xsd:selector xpath=".//cps:Value" />
          <xsd:sequence>
          Aliases attribute specifies a white-space separated list of aliases for the cmdlet parameter.
          Aliases attribute specifies a white-space separated list of aliases for the cmdlet.
          and provide descriptive error message if it cannot invoke the WMI provider - i.e. if the client attempts to use a non-existant method, property or parameter).
          Association attribute is equivalent to the associationClassName parameter of EnumerateAssociatedInstances method of Microsoft.Management.Infrastructure.CimSession class.
          Association attribute specifies the name of the association between the cmdlet argument and the instances the cmdlet acts against.
          before cmdlet parameters defined under Method element. 
          ClassName attribute specified the class that the cmdlets work against.
          ClassVersion attribute describes the version of the implementation of the class from the ClassName attribute.
          cmdlet invocations into queries and method invocations.  
          CmdletAdapter attribute specifies which .NET class is responsible for translating
          ConfirmImpact attribute determines the default -Confirm and -WhatIf behavior.
          ConfirmImpact attribute is equivalent to the ConfirmImpact property of System.Management.Automation.CmdletAttribute.
          ConfirmImpact attribute specifies the impact of the cmdlet.
          Contents of the ClassVersion attribute are passed without interpretation inside
          ETSType attribute is equivalent to System.Management.Automation.PSTypeNameAttribute.
          ETSType attribute specifies the PowerShell type name of the type of the cmdlet parameter.
          Example:
          Example: "http://go.microsoft.com/fwlink/?LinkID=113309"
          Example: "Microsoft.Management.Infrastructure.CimInstance#Win32_Process"
          Example: "root/cimv2/Win32_Process"
          Example: "System.String"
          HelpUri attribute is equivalent to the HelpUri property of System.Management.Automation.CmdletAttribute
          HelpUri attribute is used for the following help experience: Get-Help -Online &lt;cmdlet name&gt;
          HelpUri attribute specifies the URI with the help content.
          If Position attribute is ommited, then the cmdlet parameter cannot be used positionally - the user always has to explicitly specify the name of the parameter.
          If PSName attribute is ommited then it is based on the contents of PropertyName or ParameterName or OptionName attribute (whichever one is applicable).
          If the Noun attribute is ommited, then contents of the DefaultNoun element are used.
          If this attribute is ommited, then by default the cmdlets are translated into WMI queries and method invocations. 
          If WMI infrastructure can invoke the WMI provider, then the provider is responsible for further versioning decisions.
          MethodName attribute specified the name of the method that the cmdlet invocations are mapped to.
          Noun attribute is equivalent to the nounName parameter of System.Management.Automation.CmdletAttribute constructor.
          Noun attribute specifies the noun of the cmdlet.
          Please refer to Cmdlet Design Guidelines for a list of approved verbs.
          Position attribute specifies position of the cmdlet parameter.
          Presence of the ConfirmImpact attribute is equivalent to setting to true the SupportsShouldProcess property of System.Management.Automation.CmdletAttribute.
          PSName attribute specifies the name of a cmdlet parameter.
          PSType attribute specifies the name of the .NET type of the cmdlet parameter.
          ResultRole attribute is equivalent to the resultRole parameter of EnumerateAssociatedInstances method of Microsoft.Management.Infrastructure.CimSession class.
          ResultRole attribute specifies the role of the cmdlet argument (in the association between the cmdlet argument and the instances the cmdlet acts against).
          ResultRole should be the name of a property on the class specified in the Association attribute.
          Some method names are recognized and handled in a special way. 
          SourceRole attribute is equivalent to the sourceRole parameter of EnumerateAssociatedInstances method of Microsoft.Management.Infrastructure.CimSession class.
          SourceRole attribute specifies the role of the cmdlet argument (in the association between the cmdlet argument and the instances the cmdlet acts against).
          SourceRole should be the name of a property on the class specified in the Association attribute.
          System may change relative parameter positions to guarantee that cmdlet parameters defined by GetCmdletParameters element are always
          The class specified here has to be derived from Microsoft.PowerShell.Cmdletization.CmdletAdapter class.
          Verb attribute is equivalent to the verbName parameter of System.Management.Automation.CmdletAttribute constructor.
          Verb attribute specifies the verb of the cmdlet.
          WMI infrastructure will compare this value against the contents of the [ClassVersion] qualifier of the WMI class
          WMI's custom operation option named "MI_OPERATIONOPTIONS_PROVIDERVERSION".
        - To allow the Get cmdlet to have different GetCmdletParameters than other cmdlets (for example to make all parameters optional for Get cmdlet, but make some parameters mandatory for other cmdlets)
        - To change the verb of the cmdlet (for example to use &quot;Find&quot; where appropriate)
        - To define aliases for the cmdlet
        - To use obsolete attribute for the cmdlet
        </xsd:annotation>
        </xsd:attribute>
        </xsd:complexType>
        </xsd:documentation>
        </xsd:element>
        </xsd:key>
        </xsd:sequence>
        </xsd:unique>
        <xsd:annotation>
        <xsd:attribute name="AllowGlobbing" type="xsd:boolean" use="optional">
        <xsd:attribute name="CmdletParameterSet" type="cps:ParameterSetName" use="optional">
        <xsd:attribute name="CmdletParameterSets" type="cps:NonEmptyListOfParameterSetNames" use="optional">
        <xsd:attribute name="ErrorOnNoMatch" type="xsd:boolean" use="optional" />
        <xsd:attribute name="ValueFromPipeline" type="xsd:boolean" use="optional" />
        <xsd:attribute name="ValueFromPipelineByPropertyName" type="xsd:boolean" use="optional" />
        <xsd:complexType>
        <xsd:documentation xml:lang="en-us">
        <xsd:documentation>
        <xsd:element name="Class" type="cps:ClassMetadata" />
        <xsd:element name="Enums" type="cps:EnumMetadata" minOccurs="0" />
        <xsd:element name="ExcludeQuery" type="cps:WildcardablePropertyQuery">
        <xsd:element name="MaxValueQuery" type="cps:PropertyQuery">
        <xsd:element name="MinValueQuery" type="cps:PropertyQuery">
        <xsd:element name="RegularQuery" type="cps:WildcardablePropertyQuery">
        <xsd:key name="PropertyNameUnderQueryableProperties">
        <xsd:key name="UniqueNamesOfEnumValues">
        <xsd:key name="UniqueNamesOfPrivateDataElements">
        <xsd:list itemType="cps:Alias" />
        <xsd:list itemType="cps:ParameterSetName" />
        <xsd:sequence>
        <xsd:unique name="UniqueCmdletParameterAliasesUnderGetCmdletParametersElement_2">
        <xsd:unique name="UniqueCmdletParameterAliasesUnderGetCmdletParametersElement_3">
        <xsd:unique name="UniqueCmdletParameterNamesUnderGetCmdletParametersElement_2">
        <xsd:unique name="UniqueCmdletParameterNamesUnderGetCmdletParametersElement_3">
        <xsd:unique name="UniqueCmdletParameterNamesUnderMethodElement_1">
        <xsd:unique name="UniqueCmdletParameterNamesUnderMethodElement_2">
        1) cmdlet parameters defined through GetCmdletParameters elements
        2) cmdlet parameters mapped to input parameters of the method defined by Method element
        All defined components MUST be integers greater than or equal to 0.
        Cmdlet element under InstanceCmdlets element defines a cmdlet that wraps an instance method.
        Cmdlet element under StaticCmdlets element defines a cmdlet that wraps one or more static methods.
        Cmdlet parameters of a cmdlet defined this way are a sum of 
        Cmdlet parameters of a cmdlet defined this way are mapped to input parameters of methods defined by Method element
        Each wrapped method corresponds to a parameter set of the cmdlet.
        For example, if the major number is 6, the minor number is 2, the build number is 1, and the revision number is 3, then string representation of the version would be "6.2.1.3".
        GetCmdlet element defines cmdlet metadata for the cmdlet that queries for object instances.
        GetCmdlet element is typically used for one of the following items:
        GetCmdletParameters element defines cmdlet parameters used to select object instances.
        If GetCmdlet element is ommited, then the default verb (&quot;Get&quot;) and noun (based on &lt;DefaultNoun&gt; element) are going to be used.
        Represents a version number that consist of two to four components: major, minor, build, and revision.
        String representation of a version is "major.minor[.build[.revision]]" (optional components are shown in square brackets).
   - ' ' - unspecified in the docs, but apparently allowed (i.e. between NamespaceTypeName and AssemblyNameSpec in the TypeName production
      <!-- ValidatePattern omitted - CDXML does not allow DOS attacks against PS client --> 
      <!-- ValidateScript omitted - CDXML does not allow execution of arbitrary code in PS client --> 
      </xsd:annotation>
      </xsd:choice>
      </xsd:documentation>
      </xsd:element>
      </xsd:extension>
      </xsd:sequence>
      </xsd:simpleType>
      <xsd:annotation>
      <xsd:choice maxOccurs="unbounded">
      <xsd:documentation xml:lang="en-us">
      <xsd:documentation>
      <xsd:element name="AllowEmptyCollection" minOccurs="0" />
      <xsd:element name="AllowEmptyString" minOccurs="0" />
      <xsd:element name="AllowNull" minOccurs="0" />
      <xsd:element name="AssociatedInstance">
      <xsd:element name="CmdletAdapterPrivateData" minOccurs="0">
      <xsd:element name="CmdletMetadata" type="cps:CommonCmdletMetadata" />
      <xsd:element name="CmdletMetadata">
      <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForGetCmdletFilteringParameter" minOccurs="0" />
      <xsd:element name="CmdletParameterMetadata" type="cps:CmdletParameterMetadataForGetCmdletParameter" minOccurs="0" />
      <xsd:element name="DefaultNoun" type="cps:Noun">
      <xsd:element name="Enum" maxOccurs="unbounded">
      <xsd:element name="ErrorCode" minOccurs="0">
      <xsd:element name="GetCmdletParameters" type="cps:GetCmdletParameters" minOccurs="0">
      <xsd:element name="InstanceCmdlets" minOccurs="0">
      <xsd:element name="Method" type="cps:InstanceMethodMetadata">
      <xsd:element name="Method" type="cps:StaticMethodMetadata" maxOccurs="unbounded">
      <xsd:element name="Obsolete" type="cps:ObsoleteAttributeMetadata" minOccurs="0" />
      <xsd:element name="QueryableAssociations" minOccurs="0">
      <xsd:element name="QueryableProperties" minOccurs="0">
      <xsd:element name="QueryOptions" minOccurs="0">
      <xsd:element name="ReturnValue" minOccurs="0">
      <xsd:element name="StaticCmdlets" minOccurs="0">
      <xsd:element name="Type" type="cps:TypeMetadata" />
      <xsd:element name="ValidateCount" minOccurs="0">
      <xsd:element name="ValidateLength" minOccurs="0">
      <xsd:element name="ValidateNotNull" minOccurs="0" />
      <xsd:element name="ValidateNotNullOrEmpty" minOccurs="0" />
      <xsd:element name="ValidateRange" minOccurs="0">
      <xsd:element name="ValidateSet" minOccurs="0">
      <xsd:element name="Version" type="cps:VersionString">
      <xsd:enumeration value="High" />
      <xsd:enumeration value="Low" />
      <xsd:enumeration value="Medium" />
      <xsd:enumeration value="None" />
      <xsd:extension base="cps:CmdletParameterMetadata">
      <xsd:extension base="cps:CmdletParameterMetadataForGetCmdletParameter">
      <xsd:extension base="cps:CommonMethodMetadata">
      <xsd:extension base="cps:CommonMethodParameterMetadata">
      <xsd:extension base="cps:PropertyQuery">
      <xsd:field xpath="@Aliases" />
      <xsd:field xpath="@EnumName" />
      <xsd:maxLength value="100" />
      <xsd:maxLength value="1000" />
      <xsd:maxLength value="200" />
      <xsd:minLength value="1" />
      <xsd:pattern value="&clrTypeRegex;" />
      <xsd:pattern value="&csharpIdentifierRegex;" />
      <xsd:pattern value="&csharpNamespaceRegex;" />
      <xsd:pattern value="&powerShellAliasRegex;" />
      <xsd:pattern value="&powerShellCmdletParameterRegex;" /> 
      <xsd:pattern value="&powerShellNounRegex;" />
      <xsd:pattern value="&powerShellParameterSetRegex;" /> 
      <xsd:pattern value="&powerShellVerbRegex;" />
      <xsd:pattern value="[12]?[0-9]{1,9}\.[12]?[0-9]{1,9}(\.[12]?[0-9]{1,9}(\.[12]?[0-9]{1,9})?)?" />
      <xsd:selector xpath=".//cps:CmdletMetadata" />
      <xsd:selector xpath=".//cps:Enums/cps:Enum" />
      <xsd:sequence>
      <xsd:simpleType>
      A ".cdxml" file can be imported into a PowerShell session directly by Import-Module cmdlet,
      a module manifest (a ".psd1" file) and then importing the ".psd1" file by Import-Module cmdlet.
      A PowerShell CIM Module defines a set of cmdlets that interact with a CIM class.      
      A PowerShell CIM Module needs to be saved in a file with ".cdxml" extension.
      or by referring to the ".cdxml" file from NestedModules or RootModule entry of
   - '-' - required for Culture property of an Assembly.  
      This schema defines the format of PowerShell CIM Modules.
   - '&amp;' - part of ReferenceTypeSpec production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '&quot;' - unspecified in the docs, but used in the examples at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx (i.e. Culture="")
   - '*' - part of ReflectionDimension production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - ',' - part of ReflectionDimension and TypeName productions in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '.' - part of ReflectionDimension and NamespaceTypeName productions in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '[' and ']' - part of ArrayTypeSpec production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '\' - an escape character specified at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
   - '_' (ASCII 95) is the only character in \p{Pc} class out of the first 0..255 characters
   - '+' - part of NestedTypeName production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
    </xsd:annotation>
    </xsd:attribute>
    </xsd:complexContent>
    </xsd:complexType>
    </xsd:documentation>
    </xsd:key>
    </xsd:restriction>
    </xsd:sequence>
    </xsd:unique>
    <xsd:annotation>
    <xsd:attribute name="Aliases" type="cps:NonEmptyListOfAliases" use="optional">
    <xsd:attribute name="Association" type="cps:NonEmptyString" use="required">
    <xsd:attribute name="ClassName" type="cps:NonEmptyString" use="required">
    <xsd:attribute name="ClassVersion" type="cps:NonEmptyString" use="optional">
    <xsd:attribute name="CmdletAdapter" type="cps:PowerShellTypeIdentifier" use="optional">
    <xsd:attribute name="ConfirmImpact" type="cps:ConfirmImpact" use="optional">
    <xsd:attribute name="DefaultCmdletParameterSet" type="cps:ParameterSetName" use="optional" />
    <xsd:attribute name="DefaultValue" type="xsd:string" use="optional" />
    <xsd:attribute name="ETSType" type="cps:NonEmptyString" use="optional">
    <xsd:attribute name="HelpUri" type="xsd:anyURI" use="optional">
    <xsd:attribute name="IsMandatory" type="xsd:boolean" use="optional" />
    <xsd:attribute name="Message" type="cps:ObsoleteMessage" use="optional" />
    <xsd:attribute name="MethodName" type="cps:NonEmptyString" use="required">
    <xsd:attribute name="Noun" type="cps:Noun" use="optional">
    <xsd:attribute name="OptionName" type="cps:NonEmptyString" use="required" />
    <xsd:attribute name="ParameterName" type="cps:NonEmptyString" use="required" />
    <xsd:attribute name="Position" type="xsd:nonNegativeInteger" use="optional">
    <xsd:attribute name="PropertyName" type="cps:NonEmptyString" use="required" />
    <xsd:attribute name="PSName" type="cps:CmdletOutputName" use="optional" />
    <xsd:attribute name="PSName" type="cps:CmdletParameterName" use="optional">
    <xsd:attribute name="PSType" type="cps:PowerShellTypeIdentifier" use="required">
    <xsd:attribute name="ResultRole" type="cps:NonEmptyString" use="required">
    <xsd:attribute name="SourceRole" type="cps:NonEmptyString" use="required">
    <xsd:attribute name="Verb" type="cps:Verb" use="required">
    <xsd:complexContent>
    <xsd:complexType>
    <xsd:documentation xml:lang="en-us">
    <xsd:key name="UniqueNamesOfEnums">
    <xsd:restriction base="xsd:string">
    <xsd:restriction>
    <xsd:sequence>
    <xsd:unique name="UniqueCmdletAliases">
   - '=' - part of AssemblyProperty production in BNF at http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
    elementFormDefault="qualified"
   - No characters in the first 0..255 characters belong to \p{Cf}, \p{Mn}, \p{Mc}
    targetNamespace="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"
    xmlns:cps="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
   but those characters classes seem risky wrt code injection attacks, so they were
   removed above.  
  <!-- # CLASS #################################################### -->
  <!-- # CMDLETS ################################################## -->
  <!-- # COMMON PROPERTIES/PARAMETERS METADATA##################### -->
  <!-- # ENUM ##################################################### -->
  <!-- # METHODS ################################################## -->
  <!-- # PROPERTIES METADATA ###################################### -->
  <!-- # SIMPLE TYPES ############################################# -->
  <!-- ############################################################ -->
  <!ENTITY clrTypeRegex "[&csharpIdentifierOtherCharacterRegex;&clrTypeSpecialCharacterRegex;]{1,1000}">
  <!ENTITY clrTypeSpecialCharacterRegex "\,\=\ \+\&amp;\*\[\]\.\\\-\&quot;">
  <!ENTITY csharpIdentifierFirstCharacterRegex "&csharpIdentifierLetterCharacterRegex;_">
  <!ENTITY csharpIdentifierLetterCharacterRegex "\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}">
  <!ENTITY csharpIdentifierOtherCharacterRegex "&csharpIdentifierLetterCharacterRegex;\p{Nd}_">
  <!ENTITY csharpIdentifierRegex "[&csharpIdentifierFirstCharacterRegex;][&csharpIdentifierOtherCharacterRegex;]{0,100}">
  <!ENTITY csharpNamespaceRegex "(&csharpIdentifierRegex;)(\.&csharpIdentifierRegex;){0,10}">
  <!ENTITY powerShellAliasCharacterRegex "&powerShellNounCharacterRegex;_-">
  <!ENTITY powerShellAliasRegex "[&powerShellAliasCharacterRegex;]{1,100}">
  <!ENTITY powerShellCmdletParameterCharacterRegex "&powerShellNounCharacterRegex;_">
  <!ENTITY powerShellCmdletParameterRegex "[&powerShellCmdletParameterCharacterRegex;]{1,100}">
  <!ENTITY powerShellNounCharacterRegex "&powerShellVerbCharacterRegex;\p{Nd}">
  <!ENTITY powerShellNounRegex  "[&powerShellNounCharacterRegex;]{1,100}">
  <!ENTITY powerShellParameterSetRegex "[^,;]{1,100}">
  <!ENTITY powerShellVerbCharacterRegex "\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Lm}">
  <!ENTITY powerShellVerbRegex  "[&powerShellVerbCharacterRegex;]{1,100}">
  </xsd:annotation>
  </xsd:complexType>
  </xsd:element>
  </xsd:simpleType>
  <xsd:annotation>
  <xsd:complexType name="Association">
  <xsd:complexType name="ClassMetadata">
  <xsd:complexType name="CmdletOutputMetadata">
  <xsd:complexType name="CmdletParameterMetadata">
  <xsd:complexType name="CmdletParameterMetadataForGetCmdletFilteringParameter">
  <xsd:complexType name="CmdletParameterMetadataForGetCmdletParameter">
  <xsd:complexType name="CmdletParameterMetadataForInstanceMethodParameter">
  <xsd:complexType name="CmdletParameterMetadataForStaticMethodParameter">
  <xsd:complexType name="CommonCmdletMetadata">
  <xsd:complexType name="CommonMethodMetadata">
  <xsd:complexType name="CommonMethodParameterMetadata">
  <xsd:complexType name="EnumMetadata">
  <xsd:complexType name="GetCmdletMetadata">
  <xsd:complexType name="GetCmdletParameters">
  <xsd:complexType name="InstanceCmdletMetadata">
  <xsd:complexType name="InstanceMethodMetadata">
  <xsd:complexType name="InstanceMethodParameterMetadata">
  <xsd:complexType name="ObsoleteAttributeMetadata">
  <xsd:complexType name="PropertyMetadata">
  <xsd:complexType name="PropertyQuery">
  <xsd:complexType name="QueryOption">
  <xsd:complexType name="StaticCmdletMetadata">
  <xsd:complexType name="StaticMethodMetadata">
  <xsd:complexType name="StaticMethodParameterMetadata">
  <xsd:complexType name="TypeMetadata">
  <xsd:complexType name="WildcardablePropertyQuery">
  <xsd:element name="PowerShellMetadata">
  <xsd:simpleType name="Alias">
  <xsd:simpleType name="CmdletOutputName">
  <xsd:simpleType name="CmdletParameterName">
  <xsd:simpleType name="ConfirmImpact">
  <xsd:simpleType name="EnumTypeName">
  <xsd:simpleType name="EnumValueName">
  <xsd:simpleType name="NonEmptyListOfAliases">
  <xsd:simpleType name="NonEmptyListOfParameterSetNames">
  <xsd:simpleType name="NonEmptyString">
  <xsd:simpleType name="Noun">
  <xsd:simpleType name="ObsoleteMessage">
  <xsd:simpleType name="ParameterSetName">
  <xsd:simpleType name="PowerShellTypeIdentifier">
  <xsd:simpleType name="Verb">
  <xsd:simpleType name="VersionString">
 - the C# spec allows \p{Pc}\p{Cf}\p{Mn}\{Mc} in csharpIdentifierOtherCharacterRegex, 
 {0} line:{1} char:{2}
 A workflow cannot use recursion.
 clrTypeRegex and clrTypeSpecialCharacterRegex are based on http://msdn.microsoft.com/en-us/library/yfsftwz6.aspx
 clrTypeSpecialCharacterRegex includes the following characters;
 csharpIdentifierRegex based on C# Language Specification 3.0, section 2.4.2 Idenfifiers
 The input parameter is required.
 The variable '{0}' is read-only.
!This program cannot be run in DOS mode.
################################################################### -->
#Blob
#GUID
#Strings
&The throw statement requires a reason.
*Cannot process more than one script block.
.text
:A pipeline activity must have at least one child activity.
:The following argument cannot be null or empty: Expression
;Ambiguous properties are found for the property name '{0}'.
;The '{0}' activity is not supported in a workflow pipeline.
;The following argument can not be null or empty: Expression
?Loop labels are not supported in a Windows PowerShell Workflow.
@.reloc
[Only constant expressions are supported as switch clauses in a Windows PowerShell Workflow.
]The '{0}' command is handled by the built-in '{1}' keyword. Use the built-in keyword instead.
]The computer name {0} is not valid. If you are trying to supply a Uri, use the Uri parameter.
^In a Windows PowerShell Workflow, the switch statement supports only the 'CaseSensitive' flag.
_clr-namespace:System.Activities.Presentation.Converters;assembly=System.Activities.Presentation)System.Activities.Presentation.Converters
_CorDllMain
`.rsrc
{A variable scope prefix that is not valid was detected. The only valid scope prefix in the script workflow is "$WORKFLOW:".
{Cannot redirect error stream for the delay activity. Please remove the stream redirection from this activity and try again.
|In a Windows PowerShell Workflow, the syntax for Invoke-Expression is: "Invoke-Expression -Language XAML -Command <string>".
~{0} is not a valid parameter or variable name. Names must start with a letter, and contain only letters, digits, '-', and '_'.
<!-- ##################################################################
<!DOCTYPE schema [
</xsd:schema>
<?xml version="1.0" encoding="utf-8"?>
<Module>
<xsd:schema 
040904b0
0Microsoft.PowerShell.Activities.PipelineDesigner
1&clr-namespace:System;assembly=mscorlib
10.0.17763.1
2System.Activities.Presentation.WorkflowViewElement
3The function or workflow '{0}' cannot be redefined.
4Cannot supply both connection URI and computer name.
4Microsoft.PowerShell.Activities.InlineScriptDesigner
4The session state entry type '{0}' is not supported.
5Cannot generate activity. The name '{0}' is reserved.
5System.Activities.Presentation.WorkflowItemsPresenter
6The Checkpoint-Workflow command accepts no parameters.
7The variable '{0}' cannot be used in a script workflow.
8Could not find type {0}. Load the type(s) and try again.
8You can provide only one #requires statement per script.
9Cannot redirect error stream for the New-Object activity.
9http://schemas.microsoft.com/winfx/2006/xaml/presentation
9Pipeline activity works with at least one child activity.
9The syntax of a {0} script block is '{0} { <commands> }'.
A command name is required.
AcceptsReturn
ActivityDoesNotContainResultProperty
ActivityNameConflict
ActivityNameConflict1
ActivityNameNotFound
ActivityNameNotFound1
ActivityNotSupportedInPipeline
ActivityParameterGroup
ActivityResources.en.resources
Activity-Specific Parameters
AData sections are not supported in a Windows PowerShell Workflow.
AlternateInvocationNotSupported
AmbiguousCommand
AmbiguousParameter
AmbiguousPropertiesFound
Assigning values to the Result argument is not supported. To store the output of a command, assign it to a variable. For example: $output = Get-Process.
AssignmentNotSupported
aSystem.Activities.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
AttributedExpressionNotSupported
bConnot define pipeline. An iterative pipeline may not be nested within another iterative pipeline.
BeginProcessNotSupported
bIn a Windows PowerShell Workflow, the syntax for New-Object is: "New-Object -TypeName <TypeName>".
Binding
Bottom=
Break and Continue statements are not supported in a Windows PowerShell Workflow. Instead, use an 'if' statement to control loop execution.
BreakContinueNotSupported
BThe generic type '{0}' cannot be resolved for the parameter '{1}'.
CAdvanced parameter validation is not supported on nested workflows.
Cannot assign the output of the '{1}' activity. It does not contain the 'Result' property. If this is a workflow that calls another workflow, implement a Result property as a [ref] parameter.
Cannot bind parameter because parameter '{0}' is specified more than once. To provide multiple values to parameters that can accept multiple values, use the array syntax. For example, "-parameter value1,value2,value3".
Cannot call command. When used with the 'Sequence' parameter, the Foreach-Object cmdlet supports only the 'PipelineVariable', 'Begin', 'Sequence', and 'End' parameters.
Cannot call command. When used with the 'Sequence' parameter, the Where-Object cmdlet supports only the 'PipelineVariable' and 'Sequence' parameters.
Cannot call the '{0}' command. Other commands from this module have been packaged as workflow activities, but this command was specifically excluded. This is likely because the command requires an interactive Windows PowerShell session, or has behavior not suited for workflows. To run this command anyway, place it within an inline-script (InlineScript {{ {0} }}) where it will be invoked in isolation.
Cannot create pipeline. The Foreach-Object cmdlet with the -Sequence parameter cannot be used as the first element of a pipeline.
Cannot create pipeline. The Where-Object cmdlet with the -Sequence parameter cannot be used as the first element of a pipeline.
Cannot define pipeline. Once a pipeline uses the Sequence parameter of the Foreach-Object or Where-Object cmdlets, all remaining commands must also be either the Foreach-Object or Where-Object cmdlet with the Sequence parameter.
Cannot define variable. A variable with name '{0}' has already been defined. To reference a variable from the top-level scope of this workflow, use the syntax: '$WORKFLOW:{0}'.
Cannot define variable. Scope names are only valid in a parallel or sequence block. Within a parallel or sequence block, the only valid scope name is 'workflow'.
Cannot find the '{0}' command. If this command is defined as a workflow, ensure it is defined before the workflow that calls it. If it is a command intended to run directly within Windows PowerShell (or is not available on this system), place it in an InlineScript: 'InlineScript {{ {0} }}'
Cannot generate activity. The command name '{0}' could not be found in the default runspace. Use the GenerateFromCommandInfo method to generate activities for non-default commands.
Cannot have an empty BaseDirectory for importing localized data. Please specify a valid BaseDirectory and run the command again.
Cannot redirect the error stream to the output stream. The target activity '{0}' does not contain the property 'MergeErrorToOutput'.
Cannot start "{0}". Interactive console applications are not supported in a Windows PowerShell Workflow. To run the application, use the Start-Process cmdlet.
Cannot store the results of this type of expression into a variable. Only the results of commands, pipelines, constant expressions, foreach statements, parallel and sequence statements can be stored in variables.
CannotAssignStartSleepToVariable
CannotLaunchFormat
CannotMergeErrorToOutput
CannotNestIterativePipeline
CannotProcessMoreThanOneScriptBlock
CannotRedirectErrorStreamForNewObject
CannotRedirectErrorStreamForStartSleep
CannotSpecifyBothCommandAndCommandName
CannotSpecifyBothCommandAndCommandName1
CannotSpecifyResultArgument
CannotStoreResultsInUnsupportedElement
CannotStoreResultsInVariable
CannotSupplyUriAndComputername
CannotUseDataCollectingVariable
CannotUseWorkflowPrefixInInlineScript
Case-insensitive switch statements are not supported in a Windows PowerShell Workflow. Supply the -CaseSensitive flag, and ensure that case clauses are written appropriately. To write a case-insensitive case statement, first convert the input to either uppercase or lowercase, and update the case clauses to match.
Center=
CheckpointWorkflowSyntax
Collapsed 
Collapsible
Color$
'Command' is mutually exclusive with 'CommandName'. Either specify  'CommandName' (optionally with 'Parameters'),  or 'Command'.
CommandActivityExcluded
CommandHandledByKeyword
CommandNameRequired
CommandNameRequired1
CommandNotFound
CommonParameterNotSupported
CompanyName
ComputerNameNotValid
ComputerNameNotValid1
ConditionsCannotHaveSideEffects
ConditionsCannotInvokeActivities
Connectivity
ConnectivityGroup
conv_clr-namespace:System.Activities.Presentation.Converters;assembly=System.Activities.Presentation
Copyright (c) Microsoft Corporation.  All rights reserved.
Copyright (c) Microsoft Corporation. All rights reserved.
Could not find a parameter named '{0}' for the '{1}' command. Windows PowerShell common parameters such as WhatIf and OutVariable are not supported.
Could not find a parameter named '{0}'. Note that this activity has the same name as a Windows PowerShell cmdlet, but different parameters. Supported parameters are: {1}.
Could not find a parameter named '{0}'. Workflow-common parameters such as PSComputerName are not supported in nested workflows that already have nested workflows.
Could not find a parameter named 'ComputerName'. Remote connectivity in this command is handled by the 'PSComputerName' parameter.
CouldNotFindParameterName
CouldNotFindParameterNameNested
CouldNotFindParameterNameShadowedActivity
CouldNotLoadRequiredAssembly
CThe output of the New-Object cmdlet must be assigned to a variable.
d2http://schemas.microsoft.com/expression/blend/2008
DataSectionNotSupported
DependModuleImportFailed
DockPanel_1
dOnly simple variable references (i.e.: $x) and number constants are supported in a unary expression.
Dot-sourcing (. <command>) and the invocation operator (& <command>) are not supported in a Windows PowerShell Workflow. Wrap this command invocation into an inlinescript { } instead.
dParameter 'Wait' cannot be used for Restart-Computer activity when the localhost is being restarted.
DuplicateInputDefinedInPipeline
DuplicateInputDefinedInPipeline1
DuplicateParametersNotAllowed
DuplicateResultDefinedInPipeline
DuplicateResultDefinedInPipeline1
DynamicParametersNotSupported
EntirePipelineMustUseForeachSequence
EnumWriter_InvalidEnumName
EnumWriter_InvalidEnumName1
EnumWriter_InvalidValueName
EnumWriter_InvalidValueName1
EnvironmentVariableAssignmentNotSupported
Expanded
ExpandOrCollapsedStyle
fCannot store results in the variable '{0}'. Results are already being collected in the variable '{1}'.
FCould not find a parameter named '{0}'. Supported parameters are: {1}.
FDynamic parameters are not supported in a Windows PowerShell Workflow.
FileDescription
FileVersion
fParameter '{0}' is defined as an InOutArgument or OutArgument and can accept only variable references.
FrootWorkflowName '{0}' is invalid. Make sure it exists in the context.
FunctionRedefinitionNotAllowed
GenericParameterTypeNotFound
GenericPropertyTypeNotResolved
gHxQhO
HintText$
hTrap statements are not supported in a Windows PowerShell Workflow. Instead, use try, catch, or finally.
ICannot assign Start-Sleep to a variable. Start-Sleep generates no output.
ImportLocalizedDataWithEmptyEmptyorNullBaseDirectory
ImportLocalizedDataWithEmptyEmptyorNullBaseDirectory1
In a Windows PowerShell Workflow, loop conditions that invoke activities are not supported. Conditions can use only variable references, and Windows PowerShell language elements that interact with those variables.
In a Windows PowerShell Workflow, loop conditions that modify variables are not supported. To change a variable, place the modification statement in the loop body itself.
In a Windows PowerShell Workflow, parameter defaults may only be simple value types (such as integers) and strings. In addition, the type of the default value must match the type of the parameter.
In a Windows PowerShell Workflow, the CmdletBinding attribute only supports the following values: "DefaultParameterSetName, ConfirmImpact, HelpUri, PositionalBinding".
In a Windows PowerShell Workflow, the syntax for Start-Sleep is: "Start-Sleep -Seconds <int>" or "Start-Sleep -Milliseconds <int>".
In a Windows PowerShell Workflow, throw statements that invoke activities (other than New-Object) are not supported. Throw statements can use only strings, variable references, and Windows PowerShell language elements.
inlinescriptdesigner.baml
InlineScriptSyntax
InlineXamlNotSupported
Input and Output
InputAndOutputGroup
InputRequired
InputRequired1
Insert Activities Here
InternalName
InvalidCmdletBindingAttribute
InvalidForeachSequenceParameter
InvalidForeachSequencePipelinePosition
InvalidMemberName
InvalidRootWorkflowName
InvalidScopePrefixInWorkflow
InvalidWhereSequenceParameter
InvalidWhereSequencePipelinePosition
InvokeExpressionSyntax
Items
ItemsPanel
IThe result of Windows PowerShell expression evaluation is null or nothing
jIn a Windows PowerShell Workflow, switch statements support only expressions that return a single element.
JThe result of Windows PowerShell expression evaluation is null or nothing.
KCannot create workflow. Inline XAML is not supported in this language mode.
KCould not load assembly '{0}' specified in the list of required assemblies.
Kmscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
LegalCopyright
LightBlue
lIn a Windows PowerShell Workflow, the syntax for the InlineScript activity is "InlineScript { <commands> }".
LocalAndRemoteNodesCannotBeTogetherForRestartComputerActivity
LocalAndRemoteNodesCannotBeTogetherForRestartComputerActivity1
LoopLabelNotSupported
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
LThe activity has exceeded the specified maximum running time of {0} seconds.
LThe generic parameter type '{0}' for the parameter '{1}' cannot be resolved.
LUnary operators '++' and '--' work only on variables in the script workflow.
mc;http://schemas.openxmlformats.org/markup-compatibility/2006
Method invocation is not supported in a Windows PowerShell Workflow. To use .NET scripting, place your commands in an inline script: InlineScript { <commands> }.
MethodInvocationNotSupported
Microsoft (R) Windows (R) Operating System
Microsoft Corporation
Microsoft.PowerShell.Activities
Microsoft.PowerShell.Activities.g.en.resources
Microsoft.PowerShell.Activities.resources
Microsoft.PowerShell.Activities.resources.dll
MinLines
MInvoke-Expression must use "-Language XAML" in a Windows PowerShell Workflow.
MissingValueForParameter
Mode 
ModelItem.Activities
ModelItem.Command
mResult is defined in Pipeline variable and in the last child activity. Result should be defined at one place.
MSBAML
mscoree.dll
MustSupplyVariableReferenceForInOutArgument
MustUseXamlLanguage
NewObjectCouldNotFindType
NewObjectMustBeAssigned
NewObjectSyntax
NoChildPipeline
NoChildPipeline1
NSystem.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
NullArgumentExpression
NullArgumentExpression1
NullReturnedAfterExpressionEvaluation
NullReturnedAfterExpressionEvaluation1
NWindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
OnlyOneRequiresStatement
OnlySimpleParameterDefaultsSupported
OnlySimpleVariableReferencesSupportedInUnary
OnlySupportErrorStreamRedirection
Opacity$
OperatorRequiresVariable
Orientation$
OriginalFilename
oThe parameter cannot be processed because the parameter name '{0}' is ambiguous. Possible matches include: {1}.
p3jmW6
PADPADP
PADPADP*
ParallelSequenceScriptBlockSyntax
ParameterValidationNotSupportedOnNestedWorkflows
Path$
pipelinedesigner.baml
Points
Positional parameters are not supported in a Windows PowerShell Workflow. To invoke this command, use explicit parameter names with all values. For example: "Command -Parameter <value>".
PositionalParametersNotSupported
ProductName
ProductVersion
ProgressPositionMessage
Property
PropertyDoesNotSupportPowerShellLanguage
qInput is defined in Pipeline variable and in the first child activity. Input should be defined only at one place.
ReasonRequiredInThrowStatement
RecursiveWorkflowNotSupported
RemotingHandledByPSComputerName
Resources
Restart-Computer activity cannot be run because both localhost and managed nodes are provided in the ComputerName parameter.  For this scenario please run Restart-Computer activity for managed nodes followed by another Restart-Computer activity for localhost.
RestartComputerWithWaitNotAllowed
RestartComputerWithWaitNotAllowed1
RowDefinitions
RunningTimeExceeded
s&clr-namespace:System;assembly=mscorlib
sapTclr-namespace:System.Activities.Presentation;assembly=System.Activities.Presentation
sapvYclr-namespace:System.Activities.Presentation.View;assembly=System.Activities.Presentation
Script block invocation is not supported in a Windows PowerShell Workflow. To run a set of commands in a similar way as the script block invocation, place your commands in an inline script: InlineScript { <commands> }.
ScriptBlockInvocationNotSupported
SessionStateEntryNotSupported
ShowExpanded
SpacerTemplate
SPresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
StartSleepSyntax
StringFileInfo
Sub expression (i.e.: $($x)) should only be used as the parameter value in a Windows PowerShell Workflow. To use .NET scripting, place your commands in an inline script: InlineScript { <commands> }.
SubExpressionNotSupported
SuspendWorkflowSyntax
swdTclr-namespace:System.Activities.Presentation;assembly=System.Activities.Presentation
Switch clauses must all be of the same type in a Windows PowerShell Workflow, or the condition expression must be strongly typed.
SwitchCaseSensitive
SwitchClauseMustBeOfSameType
SwitchEnumerationNotSupported
SwitchFlagNotSupported
SwitchOnlySupportsConstantExpression
System
System.Activities.Presentation
TargetType
tAttributed expression (i.e.: [Parameter()]$x) should be used only when declaring parameters for the script workflow.
TextBox_1
TextWrapping
The '{0}' property does not support elements from the Windows PowerShell language such as parentheses and variables. To use this value, enclose it in a single-quoted string.
The command name '{0}' is ambiguous and cannot be processed. To use this command, specify a module qualified name such as: 'Microsoft.PowerShell.Management\Get-Process'.
The Restart-Computer activity cannot run because both localhost and remote computers are provided in the ComputerName parameter.  For this scenario, run the Restart-Computer activity for remote computers first, followed by another Restart-Computer activity for localhost.
The result is defined in the Pipeline variable, and in the last child activity. The result should be defined in only one place.
The scope prefix "$WORKFLOW:" cannot be used in an InlineScript activity. To reference a workflow variable in an InlineScript activity, use the prefix "$USING:" instead. Workflow variables cannot be modified from an InlineScript activity. To change a workflow variable, assign the output of the InlineScript activity to that variable.
The Suspend-Workflow command accepts only one optional parameter, the syntax for Suspend-Workflow is: "Suspend-Workflow [-Label <string>]".
The value for the parameter '{0}' is not specified. To invoke this command, use explicit parameter names with all values. For example: "Command -Parameter <value>".
The value of the EnumName attribute does not translate to a valid C# identifier: {0}. Verify the EnumName attribute in Cmdlet Definition XML, and then try again.
The value of the EnumName attribute doesn't translate to a valid C# identifier: {0}.    Verify the EnumName attribute in Cmdlet Definition XML and try again.
The value of the Name attribute is not a valid C# identifier: {0}.  Verify the Name attribute in Cmdlet Definition XML and try again.
The value of the Name attribute is not a valid C# identifier: {0}. Verify the Name attribute in Cmdlet Definition XML and try again.
The variable with name '{0}' is defined to store results from a parallel or sequence block. Therefore, it cannot be reused inside such blocks.
This is the collapsed view
This type of assignment is not supported. Only variable names (i.e.: $variable) may be used as the target of an assignment statement.
ThrowStatementCannotInvokeActivities
Translation
TrapNotSupported
Triggers
true.a
TwoWay=
TypeFromDynamicAssembly
uInput is defined in the Pipeline activity and in the first child activity. Input should be defined in only one place.
UOnly the merging redirection from the error stream to the output stream is supported.
v4.0.30319
Value
VarFileInfo
VariableAlreadyDefined
VariableNameReadOnly
VariableNameReserved
VariableNotSupportedInWorkflow
VBegin, Process, and End statements are not supported in a Windows PowerShell Workflow.
Vertical=
VS_VERSION_INFO
WCannot create workflow. It depends on the type, '{0}', which was generated dynamically.
WIn a Windows PowerShell Workflow, assignment to environment variables is not supported.
Windows PowerShell Workflow cannot continue running the activity because an error occurred while importing dependent module(s) '{0}' specified for activity '{1}'.  To fix this problem, make sure that the module exists on the computer. If it is not required, remove references to the module from the activity.
WorkflowScopeOnlyValidInParallelOrSequenceBlock
WrapWithOverflow=
wTclr-namespace:System.Activities.Presentation;assembly=System.Activities.Presentation
x,http://schemas.microsoft.com/winfx/2006/xaml
Xml_cmdletsOverObjectsXsd
XPresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
Yclr-namespace:System.Activities.Presentation.View;assembly=System.Activities.Presentation#System.Activities.Presentation.View
Z#n7[Px
ZThe value of the variable '{0}' can only be changed using the Set-PSWorkflowData activity.
