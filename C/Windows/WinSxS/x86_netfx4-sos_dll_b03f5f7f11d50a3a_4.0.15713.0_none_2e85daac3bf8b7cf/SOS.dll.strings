----------------
-----------------------
-----------------------------
------------------------------
----------------------------------
-----------------------------------
--------------------------------------
---------------------------------------
---------------------------------------------
---------------------------------------------------------
--------------------------------------------------------------------------
----------------------------------------------------------------------------
------------------------------------------------------------------------------
-------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
    ------------------------------------------------------------------------------
     
-----------------------------      -----------------------------
        
                          
                                 
                                                                
                                          PreEmptive   GC Alloc           Lock
                                      expand the base type of 'var1' to show you its
                                      fields.
                                   COMState
                                  detailed logs are generated.  The maximum 
                                  isn't specified)
                                  specified)
                                  specified.  The higher the number the more
                                  This is also the default value if the key 
                                  value is decimal 10)
                               at index 6 in the array, along with its fields
                               for frame 2.
                               'var1.abc' to show you the fields of the 'abc' field,
                       [<pseudo-register number for result>]
                      not print fields of the elements. Useful for arrays of
                      objects like String
                      of the element using !DumpObj and !DumpVC format.
                      Specify from which index the command shows the elements.
                      Specify how many elements to show.
                  %8s     %8s
                  String
                 [<Pseudo-register number>]
                 [-create | -create2] 
                 <Exception> 
                ...
                <member address="0x00b75088" />
                debugged on an AMD64 machine.
                in the version directory or on the symbol path
                mscordacwks_<arch>_<arch>_<version>.dll is on your symbol path.
                on an X86 or an ARM machine; an AMD64 dump file must be
                the dump file. For example, an ARM dump file must be debugged
                the handles reside.
            ...
            ...                                  ...
            [E%cP-%02XH] 
            [E%cP+%02XH] 
            </object>
            <object address="0x00b73030" typeid="1" size="300"/>
            <object address="0x00b75054" typeid="5" size="20">
            <root kind="handle" address="0x00a73ff0"/>
            <root kind="stack" address="0x0069f0e0"/>
            <type id="1" name="System.String">
            ->  %p %S%s
            2) the file mscordacwks.dll that matches your version of clr.dll is 
            3) or, if you are debugging a dump file, verify that the file 
            4) you are debugging on supported cross platform architecture as 
            iptrMask = %02X
            thisptr in 
            thisptr in %s
           !soe -derived System.IOException 4;
           .if(@$t3==1 || @$t4==1) { .echo 'stop' } .else {g}"
           AsyncPinned
           concurrent GC and server GC), Debugger helper threads, Finalizer 
           ID OSID ThreadOBJ    State     GC       Context       Domain   Count APT Exception
           output. Example of special threads include: GC threads (in 
           Pinned
           RefCounted
           SizedRef
           so they might not be shown in the first part of the command's 
           Strong
           threads created by CLR. Those threads might not be managed threads 
           threads, AppDomain Unload threads, and Threadpool timer threads.
           Variable
           WeakLong
           WeakShort
           what they point to.
          !Name2EE *!System.String
          (During plan phase, the heap is often not walkable because objects 
          [-dead]
          [-live]
          [-max <size>] 
          [-min <size>] 
          [-mt <MethodTable address>] 
          [-short]
          [start [end]]
          [-startAtLowerBound]
          [-strings] 
          [-thinlock] 
          [-type <partial type name>] 
          adding the size to the start address given as parameters.) 
          address range, !DumpHeap will start its walk from the beginning of 
          all objects in the finalizable and "ready for finalization" queues.
          are being moved. In this case, DumpHeap may report spurious errors, 
          are no longer rooted.  This option can be very expensive, as it 
          cleaned up, and on any RuntimeCallableWrappers (RCWs) that await 
          cleanup.  Both of these data structures are cached and cleaned up by 
          command for automation.
          conjunction with -allReady it enumerates all objects that have a 
          documentation for more info)
          finalizer that are no longer rooted.  If used independently it lists 
          Force heap walk to begin at lower bound of a supplied address range.
          good object as the lower bound for this to work. Display memory at 
          in particular bad objects. It may be possible to traverse more of 
          memcopy, You may also be able to find the next object's address by 
          MT    Count    TotalSize Class Name
          MT    Field   Offset                 Type       Attr    Value Name
          next full GC)
          not in the "Ready for finalization" list are finalizable objects that 
          range, it will stop before displaying the part of the heap in which 
          rooted or not.
          string provided. 
          table (use !dumpmt to verify). If the GC is currently in a call to 
          that are ready for finalization, whether they are already marked by 
          the address of the bad object to manually find the next method 
          the finalizer thread when it gets a chance to run.
          the GC as such, or whether the next GC will.  The objects that are 
          the heap after the reported bad object. Even if you specify an 
          the heap by default. If it finds a bad object before the specified 
          to easily pipe output from the command to another debugger 
          verifies whether all the objects in the finalizable queues are still 
          walk at the specified lower bound. You must supply the address of a 
          you are interested. This switch will force !DumpHeap to begin its 
         (((((                  H
         RCW  CONTEXT   THREAD Apartment
        %S
        ....
        /i <IL pointer>
        {                                    {
        }                                    }
        </objects>
        </roots>
        </types>
        <DynamicMethodDesc pointer> |
        <MethodDesc pointer> |
        <objects>
        <roots>
        <types>
        Background
        call %d [ 
        call [ 
        CLR Owns
        CoInitialized
        In Multi Threaded Apartment
        kill args %2d
        Legal to Join
        lock(r2)                             lock(r1)
        o = (Object *) o + o.Size();
        o.ValidateAllFields();
        on GC entry available commit space was 500 MB
        Pinned Handles:       5
        pop %2d 
        pop %d
        push
        push non-ptr (%d)
        push ptr %2d
        reg %s becoming %s
        Strong Handles:       14
       !bpmd myapp.exe MyApp.Main
       .load <the full path to sos.dll>
       .loadby sos clr
       0    1  250 0019b068      a020 Disabled 02349668:02349fe8 0015def0     0 MTA
       0 028970d4 
       2    2  944 001a6020      b220 Enabled  00000000:00000000 0015def0     0 MTA (Finalizer)
       push %d
       sxe -c "" clrn
       use * for module_name to search all loaded modules
       You can pass * for module_name to search all modules.
      1d4140   192178        0       MTA
      1d54e0   192008   181180       STA
      1dff50   192178        0       MTA
      Handle Type          Object     Size RefCount Type
      MT    Count TotalSize Class Name
      MT    Field   Offset                 Type       Attr    Value Name
      MT    Field   Offset                 Type  VT     Attr    Value Name
      MT    TypeDef Name
      MT    TypeRef Name
      path points to those PDBs.
      Vista onwards should have .Net Framework installed by default.
     "CLR notification: module 'mscorlib' loaded"
     (C:\bugs\225271\arraytest.exe)
     28435a0        ?   3f6a8c System.TypedReference
     28435b4        ?   214d6c System.ValueType
     28435c8        ?   216314 System.Enum
     28435dc        ?   2147cc System.Object
     284365c        ?   3cd57c System.IntPtr
     2843670        ?   3feaac System.Byte
     2843684        ?  23a544c System.IEquatable`1[[System.IntPtr, mscorlib]]
     2843784        ?   3c999c System.Int32
     2843798        ?   3caa04 System.IEquatable`1[[System.Int32, mscorlib]]
     322 028970d4 01e411b8, 
     322 028970e8 5b6c5cd8       yes Duplicate promote/relocs
     Address   Domain       MT Type Name              
     ID     TEB   APT    APTId CallerTID Context
     IL associated with the dynamic method.
     IL.
     just pass it as the first argument.
     see the breakpoint listed.
     Start the debugger and type: 
     the IL address.  This is useful for writers of profilers that instrument
     the pointer as the first argument. 
     You can wait for clr to load and then find it.
    ".loadby sos clr"
    "CLR notification: module 'mscorlib' loaded"
    "lmvm clr"
    "sxd clrn"    
    "sxe clrn"
    %p
    %p %p %s
    %p %p %S
    %p %S
    %p (%s handle)
    %s
    %s [%S @ %d]
    (... possibly more reverted versions ...)
    ...
    [DEFAULT] [hasThis] __Canon (Class System.Collections.Generic.IEnumerable`1<__Canon>)
    [DEFAULT] [hasThis] Void (Boolean,String,String)
    [FIELD] ValueClass System.RuntimeTypeHandle 
    __Canon
    {
    {                                    {
    { ... }
    }
    }                                    }
    </gcheap>
    <gcheap>
    <member address="0x%p"%s/>
    -> %p %S%s
    >> Domain:Value 
    >> Thread:Value
    0:000> !DumpRuntimeTypes
    0:000> !dumpsig 00000000`00bc2437 000007ff00043178 
    0:000> !dumpsig 0x000007fe`eb7fd8cd 0x000007fe`eabd1000
    0:000> !dumpsig 0x000007fe`ec20879d 0x000007fe`eabd1000
    0:000> !dumpsigelem 00000000`00bc2437+2 000007ff00043178 
    0:000> !dumpsigelem 00000000`00bc2437+4 000007ff00043178 
    0:000> !dumpsigelem 0x000007fe`eb7fd8cd+1 0x000007fe`eabd1000
    0:000> !dumpsigelem 0x000007fe`ec20879d+2 0x000007fe`eabd1000
    0:000> !dumpsigelem 0x000007fe`ec20879d+3 0x000007fe`eabd1000
    0:000> !dumpsigelem 0x000007fe`ec20879d+4 0x000007fe`eabd1000
    0:000> !dumpsigelem 0x000007fe`ec20879d+5 0x000007fe`eabd1000
    0:000> !GCHandles
    0:002> !rcwcleanuplist 001c04d0 
    0:003> !Threads
    0:003> !ThreadState b220
    001611c0 Strong      01d00b58       84          System.IndexOutOfRangeException
    001611c4 Strong      01d00b58       84          System.IndexOutOfRangeException
    001611c8 Strong      01d1b48c       40          System.Diagnostics.LogSwitch
    001611d0 Strong      01cfd2c0       36          System.Security.PermissionSet
    001611d4 Strong      01cf7484       56          System.Object[]
    001611d8 Strong      01cf1238       32          System.SharedStatics
    001611dc Strong      01cf11c8       84          System.Threading.ThreadAbortException
    001611e0 Strong      01cf1174       84          System.Threading.ThreadAbortException
    001611e4 Strong      01cf1120       84          System.ExecutionEngineException
    001611e8 Strong      01cf10cc       84          System.StackOverflowException
    001611ec Strong      01cf1078       84          System.OutOfMemoryException
    001611f0 Strong      01cf1024       84          System.Exception
    001611f8 Strong      01cf2068       48          System.Threading.Thread
    001611fc Strong      01cf1328      112          System.AppDomain
    001613ec Pinned      02cf3268     8176          System.Object[]
    001613f0 Pinned      02cf2258     4096          System.Object[]
    001613f4 Pinned      02cf2038      528          System.Object[]
    001613f8 Pinned      01cf121c       12          System.Object
    001613fc Pinned      02cf1010     4116          System.Object[]
    2285 028970d4 00223fc4, 01e411b8, 
    2285 028970d4 5b6c5cd8       yes 
    2286 028970d4 00223fc4, 01e411b8, 
    2286 028970d4 5b6c5cd8       yes 
    2287 028970d4 00223fc4, 01e411b8, 
    2287 028970d4 5b6c5cd8       yes 
    2288 028970d4 00223fc4, 01e411b8, 
    2288 028970d4 5b6c5cd8       yes 
    2289 028970d4 00223fc4, 01e411b8, 
    2289 028970d4 5b6c5cd8       yes 
    2290 028970d4 00223fc4, 01e411b8, 
    2290 028970d4 5b6c5cd8       yes 
    2291 028970d4 00223fc4, 01e411b8, 
    2291 028970d4 5b6c5cd8       yes 
    2292 028970d4 00223fc4, 01e411b8, 
    2292 028970d4 5b6c5cd8       yes 
    2293 028970d4 00223fc4, 01e411b8, 
    2293 028970d4 5b6c5cd8       yes 
    2294 028970d4 00223fc4, 01e411b8, 
    2294 028970d4 5b6c5cd8       yes 
    2295 028970d4 00223fc4, 01e411b8, 
    2295 028970d4 5b6c5cd8       yes 
    2295 028970d4 Promotion for root 01e411b8 (MT = 5b6c5cd8)
    2295 028970d4 Relocation NEWVALUE for root 00223fc4
    2295 028970d4 Relocation NEWVALUE for root 01e411b8
    2296 028970d4 00223fc4, 01e411b8, 
    2296 028970d4 5b6c5cd8       yes 
    2296 028970d4 Promotion for root 01e411b8 (MT = 5b6c5cd8)
    2296 028970d4 Relocation NEWVALUE for root 00223fc4
    2296 028970d4 Relocation NEWVALUE for root 01e411b8
    563208d0        5        16972 System.Object[]
    563266dc        1           12 System.Object
    563270c4        1           84 System.Exception
    563272ac        1           84 System.OutOfMemoryException
    56327304        1           84 System.StackOverflowException
    5632735c        1           84 System.ExecutionEngineException
    563273b4        2          168 System.Threading.ThreadAbortException
    5632759c        1           48 System.Threading.Thread
    56328914        1          112 System.AppDomain
    56329708        1           32 System.SharedStatics
    5632bc38        1           36 System.Security.PermissionSet
    56335f78        2          168 System.IndexOutOfRangeException
    5635f934        1           40 System.Diagnostics.LogSwitch
    5b9a628c  4000001        0         System.Int32   instance        2 x
    5b9a628c  4000001        0         System.Int32   instance        3 x
    5b9a628c  4000001        0         System.Int32   instance        4 x
    5b9a628c  4000002        4         System.Int32   instance        4 y
    5b9a628c  4000002        4         System.Int32   instance        6 y
    5b9a628c  4000002        4         System.Int32   instance        8 y
    5b9a628c  4000003        8         System.Int32   instance        6 z
    5b9a628c  4000003        8         System.Int32   instance        9 z
    5b9a628c  4000003        8         System.Int32   instance       12 z
    Abort Initiated
    Aborted
    Addr     Size Followed by
    APPDOMAIN    0x02000000
    argTabOffset = %x  
    argument   count   =   4
    arguments size     = %2u DWORDs
    ASSERT       0x00010000
    AsyncTimerCallbackCompletion TimerInfo@%p
    Background
    BackgroundThread: 1
    BCL          0x40000000
    Blocking GC for Stack Overflow
    Boolean
    bp clr!EEStartup "g @$ra"
    callee-saved regs  = 
    Class System.Collections.Generic.IEnumerable`1<__Canon>
    CLASSLOADER  0x00000400
    Clock frequency  = %5.3f GHz
    Clock frequency  = 3.392 GHz
    CLR Owns
    CODESHARING  0x04000000
    CoInitialized
    Completion Port Thread
    CORDB        0x00000200
    CORPROF      0x00000800
    CurrentTotalLogChunk = %d
    CurrentTotalLogChunk = 9
    DBGALLOC     0x00002000
    Dead
    DeadThread:       0
    Debug Suspend Pending
    Debug Will Sync
    Detached
    double align       = %s  
    double align       = no
    ebp frame          = %s  
    ebp frame          = yes
    edit & continue    = no
    edit & continue    = yes
    EEClass: 03ef1698
    EEMEM        0x00000080
    EH           0x00004000
    ENC          0x00008000
    epilog        at   %04X
    epilog        at   002E
    epilog      end    = %s  
    epilog      end    = yes
    epilog      size   =   8
    epilog      size   = %2u 
    epilog     count   =   1
    epilog     count   = %2u 
    epilog #%2u    at   %04X
    exception handlers = no
    exception handlers = yes
    facilitiesToLog  = 0x%x
    facilitiesToLog  = 0xffffffff
    Failed to examine a HillClimbing log entry
    Failed to examine a WorkRequest
    Failed to Start
    Fields:
    Finalized
    Fully initialized
    fully interruptible= %s  
    fully interruptible=yes
    GC           0x00000001
    GC On Transitions
    GC Root %p RELOCATED %p -> %p  MT = %pT
    GC Suspend Pending
    GCALLOC      0x00000100
    GCHeap::Promote: Promote GC Root *%p = %p MT = %pT
    GCINFO       0x00000002
    GCROOTS      0x00080000
    GuardStack cookie  = [%s%u]
    Handles:
    Hijacked by the GC
    Hosted Runtime:   no
    IJW          0x00400000
    In Multi Threaded Apartment
    In Single Threaded Apartment
    INTEROP      0x00100000
    Interrupted
    Interruptible
    JIT          0x00000008
    Last message time  %S
    Last message time  15:26:56
    Legal to Join
    levelToLog       = %d
    levelToLog       = 6
    LOADER       0x00000010
    local alloc        = no
    localloc           = yes
    LOCALS:
    lock(MyObject)
    lock(r1)                             lock(r2)
    LOCKS        0x20000000
    MARSHALER    0x00200000
    MaxLogSizePerThread = 0x%x (%d)
    MaxLogSizePerThread = 0x10000 (65536)
    MaxTotalLogSize = 0x%x (%d)
    MaxTotalLogSize = 0x1000000 (16777216)
    METADATA     0x00000020
    method      size   = %04X
    method      size   = 0036
    MethodTable 03e40f4c
    MTA Interfaces to be released: 2
    Name: Value
    No thread states for '%s'.
    none  
    o = firstobject;
    PARAMETERS:
    PendingThread:    0
    perdomain - Break down the statistics by the app domain in which
    profiler callbacks = yes
    prolog      size   =  19
    prolog      size   = %2u 
    public A Test(IEnumerable<B> n)
    ReJITID %p: 
    REMOTING     0x00001000
    Reported Dead
    Resource r1 = new Resource();
    Resource r2 = new Resource();
    RuntimeCallableWrappers (RCW) to be cleaned:
    saved reg.  mask   = 000B
    SECURITY     0x10000000
    security check     = no
    security check obj = yes
    Size: 20(0x14) bytes
    SP       IP       Function
    STA Interfaces to be released: 1
    Stack Crawl Needed
    stack frame size   =   1
    stack frame size   = %2u DWORDs
    Start time         %S
    Start time         15:26:31
    STARTUP      0x01000000
    stat - Only display the statistics and not the list of handles and
    Statistics:
    STORE        0x08000000
    String
    STUBS        0x00000004
    Suspend Unstarted
    SYNC         0x00000040
    Sync region = [%u,%u]
    Sync Suspended
    Task Reset
    Thread Abort Requested
    Thread Pool Worker Thread
    ThreadCount:      2
    THREADPOOL   0x00040000
    ThreadsWithLogs  = %d
    ThreadsWithLogs  = 3
    Time Transition     New #Threads      #Samples   Throughput
    Total 19 objects
    Total elapsed time %5.3f sec
    Total elapsed time 25.077 sec
    type - A type of handle to filter it by.  The handle types are:
    Unable to read FullDllName address at %p
    Unable to read InMemoryOrderModuleList address at %p
    Unable to read PEB_LDR_DATA address at %p
    Unknown Function: %p  Context: %p
    Unstarted
    UnstartedThread:  0
    untracked count    =   5
    untracked count    = %2u 
    User Suspend Pending
    ValueClass System.RuntimeTypeHandle
    var ptr tab count  =   0
    var ptr tab count  = %2u 
    varargs            = no
    varargs            = yes
    VERIFIER     0x00020000
    Void
    void I1.M1()
    void IT1<U>.M1(U u)
    void M1();
    void M1(T t);
    while(o != endobject)
    Yield Requested
    ZAP          0x00800000
   !bpmd Demo.cs:15
   !CLRStack -i -a           : This will show you all parameters and locals for all frames
   !CLRStack -i -a 3         : This will show you all parameters and locals, for frame 3
   !CLRStack -i var1 0       : This will show you the fields of 'var1' for frame 0
   !CLRStack -i var1.[6] 0   : If 'var1' is an array, this will show you the element
   !CLRStack -i var1.[basetype] 0   : This will show you the fields of 'var1', and
   !CLRStack -i var1.abc 2   : This will show you the fields of 'var1', and expand
   !StopOnException can be used purely as a predicate in a larger expression.
   !StopOnException -create System.OutOfMemoryException 1
   !StopOnException System.OutOfMemoryException 3
   (%d elements)
   (1 element)
   (empty)
   1. On the stack
   2. Within a GC Handle
   3. In an object ready for finalization
   4. As a member of an object found in 1, 2 or 3 above.
   a) You have some version of .Net Framework installed on your machine. Any OS from
   and set up the breakpoint as a first-chance exception. -create2 would set
   and throws it.
   associated with any physical thread - this may happen when the host reuses
   at 
   At the debugger prompt, anytime after loading SOS, type:
   b) You have PDBs for the managed modules that need breakpoints, and your symbol
   called.
   current thread is a System.OutOfMemoryException. Otherwise, $t3 will be set
   display the special string "<<<<" when this internal thread object is not 
   for example, failure to expand the finalize queue when GC.ReRegisterForFinalize is
   for example, some .NET framework code converts a native OOM exception to managed 
   If you type:
   in which case you will see JIT_New* on the call stack because managed code called new.
   isn't loaded yet. What can I do?
   it up as a 2nd-chance exception. 
   maintaining the breakpoint. The -create parameter allows SOS to go ahead
   manually create such predicates, for example:
   such calls together to stop on various exception types. You'll have to 
   sxe -c "!soe System.OutOfMemoryException 3; 
   The pseudo-register number (1) indicates that SOS can use register $t1 for
   the runtime internal thread object)
   then register $t3 will be set to 1 if the last thrown exception on the 
   to 0. Using the Windows Debugger scripting language, you could chain 
  %8d
  %8x
  %s %S
  (%d)
  (Unhandled CorElementType: 0x%x)
  [E%s%02XH] a 
  + %S %s
  + (Error 0x%x printing local variable %d)
  + (Error 0x%x printing parameter %d)
  + (Error 0x%x retrieving local variable '%S')
  + (Error 0x%x retrieving parameter '%S')
  = '%C'
  = %d
  = %f
  = %hd
  = %hu
  = %I64d
  = %I64u
  = %s
  = %u
  = <function pointer 0x%x>
  = <pointer>
  = object
  -> %p %S%s
  0:000> !dumpil b741dc
  06808094(AAA.Test+b)
  1) If you have a System.Reflection.Emit.DynamicMethod object, just pass
  1) If you know the full path to SOS, use this command and skip to step 6
  2) If you don't know the full path to sos, its usually next to clr.dll
  2) If you have a DynamicMethodDesc pointer you can use that to print the
  238 001e40ec            3         1 001e4e60   e04   3   00a7a194 Resource
  239 001e4124            3         1 001e5980   ab8   4   00a7a1a4 Resource
  3) g
  3) If you have an ordinary MethodDesc, you can see the IL for that as well,
  4) If you have a pointer directly to the IL, specify /i followed by the
  4) You'll get the following notification from the debugger:
  5) Now you can load SOS. Type
  6) Add the breakpoint with command such as:
  7) g
  8) You will stop at the start of MyApp.Main. If you type "bl" you will 
  a515f4   14a740 5baf8d28 System.TypedReference
  a51608   14a740 5bb05764 System.Globalization.BaseInfoTable
  a51958   14a740 5bb05b24 System.Globalization.CultureInfo
  a51a44   14a740 5bb06298 System.Globalization.GlobalizationAssembly
  a51de0   14a740 5bb069c8 System.Globalization.TextInfo
  a56b98   14a740 5bb12d28 System.Security.Permissions.HostProtectionResource
  a56bbc   14a740 5baf7248 System.Int32
  a56bd0   14a740 5baf3fdc System.String
  a56cfc   14a740 5baf36a4 System.ValueType
  CacheEntryHeap:  
  DispatchHeap:    
  error getting thread %p, aborting this field
  Error!  integer overflow on numThread 0x%08x
  ID  (sec from start)
  If a token is unresolved, run "!do <addr>" on the addr given
  IL_0000: ldstr 70000002 "Inside invoked method "
  IL_0005: call 6000003 System.Console.WriteLine(System.String)
  IL_000a: ldc.i4.1
  IL_000b: newarr 2000004 "System.Int32"
  IL_0010: stloc.0
  IL_0011: ldloc.0
  IL_0012: ret
  in parenthesis. You can also look at the token table yourself, by
  IndcellHeap:     
  LookupHeap:      
  Module Name
 - on GC entry available commit space was %d MB
  or    !Name2EE module_name!item_name
  ResolveHeap:     
  running "!DumpArray 00b77388".
  This is dynamic IL. Exception info is not reported at this time.
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 %c%s
 %c%s%c%x
---------------------------- %d total entries ------------------------------------
 %s %S
 %s:FailInit
 %s:NotInit 
 (%s)
 (%S)
 (%S, mdToken: %p)
 (<exec cmd="!DumpArray /d %p">Print Array</exec>)
 (BAD Method)
 (BAD MethodTable)
 (C:\pub\unittest.exe)
 (code for MD: %S)
 (CURRENT)
 (dependent handle)
 (Dynamic)
 (gcstress)
 (iargs=%02X)
 (interior)
 (iptr)
 (JitHelp: %s)
 (MD: %S)
 (MethodDesc: %p)
 (MT: %S)
 (nested exceptions)
 (NEUTERED)
 (Object: %S)
 (pinned)
 (READY to jit on next call)
 (reverted)
 (Shared Domain)
 (STRONG)
 (stub for %S)
 (System Domain)
 (Unknown function)
 (Unknown VTable)
 (WEAK)
 * Ctx[BSI]:  %08x  %08x  %08x    
 .NET Framework
 @ 0x%I64x
 [%s:%d]
 [ERROR: INVALID TOKEN 0x%8.8X] 
 [ERROR: Invalid token 0x%8.8X] 
 [ERROR: INVALID TOKEN TYPE 0x%8.8X] 
 [ERROR: Invalid TypeDef record 0x%8.8X] 
 [ERROR: Invalid TypeRef record 0x%8.8X] 
 [explicit]
 [hasThis]
 | %S
 |- %s
 |- %S %s
 |- %s = %S
 |- < unknown type > %S
 <no information>
 = "%S"
 = %S
 = null
 ====> Exception 
 0H0_0
 0x%p
---------------------------- 2407 total entries -----------------------------
- abort() has been called
 Address       MT     Size
 Address   Domain       MT Type Name
 argMask=%02X
 argOffs(%d) =
- Attempt to initialize the CRT more than once.
- Attempt to use MSIL code from this assembly during native code initialization
 Base Class Array'
 Base Class Descriptor at (
 Breakpoint index - Location, ModuleID, Method Token
 catch(%S) 
 Checked or debug build
 Class Hierarchy Descriptor'
 CLR 
 Complete Object Locator'
- CRT not initialized
 CurrentLimit: %d
 delete
 delete[]
 dependentHandle="1"
 -details:            optional. Ask the command to print out details
 even though you aborted.
 Example output:
 exr@%p
- floating point support not loaded
 Free
 free
 Free: %d
 GCCount    Value       MT Promoted?                Notes
 GCCount   Object                                    Roots
 GCCount   Object                                  Message
 Idle: %d
- inconsistent onexit begin-end variables
----- Interrupted by user -----
 is not a MethodTable
 Jupiter 
------------ Last message from thread %x -----------
 -length <length>:    optional, only supported for single dimension array. 
 Low Bit(s) Set
 MaxFree: %d
 MaxLimit: %d
 mdToken: %08x (%ws)
 Microsoft Corporation.  All rights reserved.
 Microsoft Operations Puerto Rico1
 MinLimit: %d
 new[]
----- No thread logs in the image: The stress log was probably not initialized correctly. -----
 -nofields:           optional, only takes effect when -details is used. Do
- not enough space for _onexit/atexit table
- not enough space for arguments
- not enough space for environment
- not enough space for locale information
- not enough space for lowio initialization
- not enough space for stdio initialization
- not enough space for thread data
 null
 orphaned 
 pinned
- pure virtual function call
 retail
 retail build
 Running: %d
 segment    begin allocated     size
 -start <startIndex>: optional, only supported for single dimension array. 
 ThinLock owner %x (%p) Recursive %x
 'this'
 total, 0x%I32x (%I32lu) bytes wasted
 Total: %d
 Type Descriptor'
- unable to initialize heap
- unable to open console device
- unexpected heap error
- unexpected multithread lock error
 XXX 
! 1 0x%p %d
!0'0<0F0o0u0
!AnalyzeOOM
!AnalyzeOOM displays the info of the last OOM occured on an allocation request to
!BPMD [-nofuturemodule] <module name> <method name> [<il offset>]
!BPMD <source file name>:<line number>
!bpmd asks the Windows Debugger to receive CLR Notifications, and waits to
!bpmd bpmd.exe ExplicitItfImpl`1.IT1<U>.M1
!bpmd bpmd.exe NS.Outer+ExplicitItfImpl`1.NS.Outer.IT1<U>.M1
!bpmd bpmd.exe Outer+ExplicitItfImpl`1.Outer.IT1<U>.M1
!BPMD -clear <pending breakpoint number>
!BPMD -clear or !BPMD -clearall to remove pending breakpoints from the list.
!BPMD -clear, and !BPMD -clearall commands. !BPMD -list generates a list of 
!BPMD -clearall
!BPMD does not accept offsets nor parameters in the method name. You can add
!bpmd is not supported on a dump file.
!BPMD -list
!BPMD -md <MethodDesc>
!bpmd myapp.exe ExplicitItfImpl.I1.M1
!bpmd myapp.exe G1`1.G
!bpmd myapp.exe G3`3.F
!bpmd pending breakpoint list
!bpmd 'price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' Price.M2
!BPMD provides managed breakpoint support. If it can resolve the method name
!BPMD works equally well with generic types. Adding a breakpoint on a generic 
!CLRStack [-a] [-l] [-p] [-i] [variable name] [frame]
!CLRStack [-a] [-l] [-p] [-n]
!CLRStack, it is a good aid to determining the values of locals and 
!COMState
!COMState lists the com apartment model for each thread, as well as a Context 
!DumpArray 
!DumpAssembly <Assembly address>
!DumpCCW <CCW address or COM IP>
!DumpClass <EEClass address>
!DumpDomain [<Domain address>]
!DumpHeap [-stat] 
!DumpHeap is a powerful command that traverses the garbage collected heap, 
'!DumpHeap -live' and '!DumpHeap -dead' for that functionality.
!DumpIL <Managed DynamicMethod object> | 
!DumpIL prints the IL code associated with a managed method. We added this
!DumpLog [-addr <addressOfStressLog>] [<Filename>]
!DumpMD <MethodDesc address>
!DumpModule [-mt] <Module address>
!DumpModule on the Class, MethodTable and Module fields above.
!DumpModule on the fields listed to learn more.
!DumpMT [-MD] <MethodTable address>
!DumpObj [-nofields] <object address>
!DumpObj to obtain the CCW address corresponding to a managed object or pass
!DumpObj to obtain the RCW address corresponding to a managed object.
!DumpRCW <RCW address>
!DumpRuntimeTypes 
!DumpRuntimeTypes finds all System.RuntimeType objects in the gc heap and 
!DumpSig <sigaddr> <moduleaddr>
!DumpSig will also work with generics.  Here is the output for the following
!DumpSigElem <sigaddr> <moduleaddr>
!DumpSigElem will also work with generics.  Let a function be defined as follows:
!DumpStack [-EE] [-n] [top stack [bottom stack]]
!DumpStackObjects [-verify] [top stack [bottom stack]]
!DumpVC <MethodTable address> <Address>
!DumpVC allows you to examine the fields of a value class. In C#, this is a 
!DumpVC is quite a specialized function. Some managed programs make heavy use 
!EEHeap [-gc] [-loader]
!EEHeap enumerates process memory consumed by internal CLR data structures. You
!EEStack [-short] [-EE]
!EEVersion
!EHInfo (<MethodDesc address> | <Code address>)
!EHInfo shows the exception handling blocks in a jitted method. For each 
!FinalizeQueue [-detail] | [-allReady] [-short]
!FindAppDomain <Object address>
!FindAppDomain will attempt to resolve the AppDomain of an object. For example,
!FindRoots <obj>
!FindRoots -gen <N>
!FindRoots -gen <N> | -gen any | <object address>
!FindRoots -gen 1
!FindRoots is a diagnostic command that is meant to answer the following 
!FindRoots is not supported on a dump file.
!FindRoots to be able to identify roots for objects from the current condemned 
!GCHandleLeaks
!GCHandles [-type handletype] [-stat] [-perdomain]
!GCHandles provides statistics about GCHandles in the process.
!GCInfo (<MethodDesc address> | <Code address>)
!GCInfo is especially useful for CLR Devs who are trying to determine if there 
!gcroot %p, and if you find a root on a
!GCRoot [-nostacks] <Object address>
!GCRoot doesn't attempt to determine if a stack root it encountered is valid 
!GCRoot looks for references (or roots) to an object. These can exist in four
!GCWhere <object address>
!GCWhere displays the location in the GC heap of the argument passed in.
!HeapStat [-inclUnrooted | -iu]
!HistClear
!HistInit
!HistObj <obj_address>
!HistObjFind <obj_address>
!HistRoot <root>
!Impossible!
!IP2MD <Code address>
!ListNearObj <object address>
!ListNearObj is a diagnostic tool that displays the object preceeding and 
!MinidumpMode <0 or 1>
!Name2EE <module name> <type or method name>
!Name2EE <module name>!<type or method name>
!object <valid object pointer>
!ObjSearch <valid object pointer>
!ObjSize [<Object address>]
!ObjSize includes the size of all child objects in addition to the parent.
!PrintException [-nested] [-lines] [-ccw] [<Exception object address>] [<CCW pointer>]
!PrintException can display source information if available, by specifying the 
!PrintException prints the exception object corresponding to a given CCW pointer, 
!PrintException will notify you if there are any nested exceptions on the 
!ProcInfo [-env] [-time] [-mem]
!ProcInfo is not supported on a dump file.
!ProcInfo lists the environment variables for the process, kernel CPU time, as 
!RCWCleanupList [address]
!Root <valid object pointer>
!SaveModule <Base address> <Filename>
!StopOnException [-derived] 
!StopOnException helps when you want the Windows Debugger to stop on a 
!StopOnException.
!SyncBlk [-all | <syncblk number>]
!This program cannot be run in DOS mode.
!ThreadPool
!Threads [-live] [-special] 
!Threads command will also tell you which threads have nested exceptions.
!Threads lists all the mananaged threads in the process. 
!ThreadState value
!Token2EE <module name> <token>
!Token2EE among others.
!TraverseHeap [-xml] [-verify] <filename>
!TraverseHeap writes out a file in a format understood by the CLR Profiler. 
!U [-gcinfo] [-ehinfo] [-n] <MethodDesc address> | <Code address>
!VerifyHeap
!VerifyHeap is a diagnostic tool that checks the garbage collected heap for 
!VerifyObj <object address>
!VerifyObj is a diagnostic tool that checks the object that is passed as an 
!VMMap
!VMMap requires a full memory dump (.dump /ma) or a live process.
!VMMap traverses the virtual address space and lists the type of protection 
!VMStat
!VMStat requires a full memory dump (.dump /ma) or a live process.
"!DumpHeap -type Customer".
"!PrintException -nested".
"catch" blocks respectively.
"Free" objects are simply regions of space the garbage collector can use later.
"generations," wherein the youngest objects live in generation 0, and 
"I see that GCs are happening, however my objects have still not been 
"Microsoft Time Source Master Clock0
"-nested" option to get full details on the nested exception objects. The
"Server" mode there is one dedicated garbage collector thread per CPU.
$%s$%X
$`2X`F
$0.0K0[0k0{0
$Microsoft Root Certificate Authority
$Microsoft Root Certificate Authority0
%*.*d
%-*.*d
%*.*p
%-*.*p
%*.*S
%*.*s
%-*.*s
%-*.*S
%*.*x
%-*.*x
%-*s %-*s %-*s  %-13s %-13s %-8s %-8s
%*s.catch
%*s.finally
%*s.try
%*s} // end .catch
%*s} // end .finally
%*s} // end .try
%*sIL_%04x: 
%02X 
%08lx
%08x 
%08x is a safepoint: 
%08x%s interruptible
%11d 
%20.20S 
%20.20s 
%-20s 
%20s: %d
%30s: %d
%-30s: %d
%3d %4x %p
%4x %13.9f : 
%-7s  %*s  %*s  %*s %*s  %*s
%-7s %*sK %*sK %*sK %*s %*sK
%8.2lf %-14s %12d  %12d  %11.2lf
%8d %12I64u "%S"
%8d %8d %8d
%8d %p 
%8d %p %p %9s 
%8p %8p %8p %8p
%8p %8p %8p %9s
%8s   %8s %s
%8s  %8s  %8s  %8s
%-8s %12s %12s %12s %12s
%8s %12s %s
%8s %8s
%8s %8s %12s %s
%8s %8s %16s
%8s %8s %40s
%8s %8s %8s
%8s %8s %8s %20s %2s %8s %8s %s
%8s %8s %8s %8s
%8s %8s %8s %9s %20s
%8s %8s %8s Apartment
%8s %8s %8s Type
%8s %8s %8s Type Name              
%8s %8s %s
%-8s %-8s %s
%8s %8s Type
%-8s %s 
%d - %ws!%ws+%d, 0x%p, 0x%08x
%d - %ws, %ws, %p
%d - %ws:%d, 0x%p, 0x%08x
%d.%d
%d.%d.%d
%I64d
%I64u
%ld percent of memory is in use.
%p   %d     %2d     %p   %p   %p    0x%x(%d)
%p  %p  %p  0x%I32x(%I32d)
%p %6.1fMB         %p %S
%p %p 
%p %p %p
%p %p %s %S
%p %S
%p %s 
%p %s %S
%p %s [NativeStackFrame]
%p is not a MethodDesc
%p is not a Module or base address
%p is not a valid MethodDesc
%p is not a valid object
%p is not a valid object.
%p-%p %p  %-13s %-13s %-8s %-8s
%p(%x:%x) 
%p:%p
%s    
%s %8d %12I64u 
%s %8x %8x 
%S %s %12d (0x%x)
%s %s %8d
%s %s %8d%s
%s (MethodDesc %s %S)
%s @ %d:
%s 0x%08x %S
%s is not IP
%s%s pointer
%s, please contact PSS
%s.[%d]
%s.dll
%s: "%s"
%S::%S
%S::%S 
%s_%s.dll
%s_%s_%s_%u.%u.%u.%02u%s.dll
%u sections in file
%u.%u.%u.%u
%x "%S"
%x %S
%x (%p)
&080q0w0
&080W0v0
&222C2U2_2o2
&amp;
&apos;
&quot;
( 8PX
(#Could not read address of string#)
(%p->%p)
(%S[])
(]W%#
(<CLR reg>) 
(0D0h0
(0x%p) 
(0x%p, 0x%p)
('8PW
(duplicate)
(DWORD) LogFacility = 0xffffffbf (this is a bit mask, almost all logging is on.
(DWORD) LogLevel = 6             (this is the default value if the key isn't
(DWORD) StressLog = 1
(DWORD) StressLogSize = 65536    (this is the default value if the key isn't
(fd0.ec4): CLR notification exception - code e0444143 (first chance)
(for one thing, custom dump commands can map in additional memory, but there 
(FreeThreaded)
(g9SOS does not support the current target architecture.
(GC) 
(GENERIC_PARAM_CONTEXT_METHODDESC)
(GENERIC_PARAM_CONTEXT_METHODHANDLE)
(GENERIC_PARAM_CONTEXT_THIS)
(if your program is myapp.exe) in the same directory. Put the following lines
(interior)
(MethodDesc %s 
(MethodTable: %p)
(MTA)
(note that the fully qualified type name for ExplicitItfImpl became
(null)
(obtained with ".dump /ma <filename>" in the Windows Debugger) is often the 
(pinned)
(STA)
(this is an oversimplification, see NOTE below). If another thread tries to 
(Threadpool Completion Port) 
(Threadpool Worker) 
(threads 3 and 4 have similar output)  
(TransitionMU)
(TransitionUM)
(Unhandled CorElementType: 0x%x)
(untracked)
)`'v4$
)0S0x0
)Microsoft Root Certificate Authority 20100
)Microsoft Root Certificate Authority 20110
*(...)
*?*kXIc
*0b0k0
, calling 
, continuing...
, Pegged by
,0(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
.................
.....................................
...<etc>...
.?AV_Generic_error_category@std@@
.?AV_Iostream_error_category@std@@
.?AV_System_error_category@std@@
.?AVbad_alloc@std@@
.?AVbad_exception@std@@
.?AVDataRead@sos@@
.?AVerror_category@std@@
.?AVException@sos@@
.?AVexception@std@@
.?AVHeapCorruption@sos@@
.?AVlength_error@std@@
.?AVlogic_error@std@@
.?AVout_of_range@std@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPX
.CRT$XPXA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$r
.edata
.gfids$x
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.lines or .symopt commands), and if symbols are available for the managed
.lines or .symopt commands), SOS will look up the symbols for every managed 
.loadby shortcut). Within the Microsoft corpnet, we keep tagged versions 
.module 
.rdata
.rdata$r
.rdata$sxdata
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.S<x$
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.tq[m
.xdata$x
/* UNKNOWN TYPE (0x%X)*/
// static method
// this method's name is 'I1.M1'
// this method's name is 'IT1<U>.M1'
/=aJcY
/f clr.dll
/f mscoree.dll
: :$:(:,:8:<:@:D:H:L:P:T:\:`:
: :(:0:4:<:P:l:p:
: :(:0:8:@:H:P:X:`:h:p:x:
: ;.;
: ;.;6;@;I;Z;
: ;:;[;
:!:&:+:2:8:=:C:I:O:T:Z:`:f:k:q:w:}:
:!:::q:
:!:1:F:w:
:!:d:o:v:{:
:!;*;0;A;M;R;x;
:!;1;\;n;
:":B:M:z:
:";];q;y;
:#:/:<:@:J:N:W:k:
:#:G:u:
:#;*;
:#<A<]<}<
:$:,:4:<:D:L:T:\:
:$:,:8:X:`:h:p:|:
:$:,:8:X:`:h:p:x:
:$:4:D:T:d:t:
:%;,;h;z;
:%;`;
:&:8:b:i:
:&;5;s;
:(:/:4:R:^:n:
:(:?:
:):4:W:^:v:
:):5:X:w:
:):F:P:
:);.;K;V;s;z;
:,:<:L:\:l:|:
:,:1:6:J:O:T:Y:q:~:
:,:6:_:e:y:
:/;Q;
:;;O;b;
:+:S:b:m:
:<:`:l:t:
:0D0Z0
:1:?:
:2:7:Z:l:}:
:2:N:h:~:
:2;>;L;\;
:3:L:]:
:3:S:u:
:4:<:H:h:p:|:
:4;:;O;Y;
:5:G:Y:c:w:
:5=@=s?
:6:B:_:n:y:
:6;s;
:7:>;E;
:7;?;H;Q;Z;
:8:@:H:P:X:d:
:8:K:R:_:
:8;B;];g;
:9:@:k:r:
:A;Q;c;y;
:b:n:|:
:C:Z:e:
:E;L;
:E;L;\;c;
:E;Y;c;j;
:F:X:
:F;\;d;k;p;w;|;
:H:b:
:H:P:e:z:
:i:n:
:I;R;Z;t;
:P;b;
:Q:X:
:R:X:
:T:b:
:U;r;
:W:j:
; ;$;(;,;0;4;8;
; ;(;<;D;L;T;X;`;t;|;
; ;(;0;8;@;H;P;X;`;h;p;x;
; ;(;4;\;
; ;-;`;e;};
; ;+;9;Q;\;c;h;
; <8<C<
;!;.;=;C;X;`;o;w;
;!;+;C;J;P;W;j;w;
;!<G<e<l<p<t<x<|<
;!<i<
;"</<><n<u<
;"<6<H<
;"<7<S<t<
;#;);/;5;:;@;F;L;Q;W;];c;h;n;t;z;
;#;f;x;
;$;,;4;<;H;h;p;x;
;$;0;P;X;`;h;p;x;
;$;4;D;T;d;t;
;&;-;3;8;E;K;^;c;p;v;
;,;<;
;,VWt-
;:;m;
;;;k;
;-;4;
;';C;R;^;l;|;
;@;F;
;@<G<\<
;_;};
;_tr.
;{4tM
;+;6;@;N;^;g;q;
;+;k;z;
;+<1<J<f<w<
;<;R;
;'<6<k<
;-<A<h<
;-<D<o<v<
;=;W;
;>;E;U;\;
;>;U;
;0;<;\;d;l;x;
;0;5;
;0;N;x;
;2;u;
;2<D<r<
;2<F<
;3;@;K;
;5;?;
;6<H<
;6<H<a<o<z<
;7;J;Q;];d;n;
;8;X;x;
;8<t<
;8<z<
;9<V=
;A,w1r
;A;j;
;A;O;z;
;b;i;
;e<l<
;F;[;
;F<a<
;F4um
;G r1
;G;e;
;G;M;W;
;GLu`
;H;c;u;
;H;O;n;
;h;x;
;I;R;n;u;
;j;r;
;J<a<g<
;j<t<
;L$hw
;n<u<
;OHuh
;P;m;z;
;P4r w
;Q(s*
;q;v;
;R;z;
;t$,v-
;U=p=
;V(r-
;xXu(
;Y;q;
;Z;a;o;v;
;Z;t;
? ?(?0?8?@?H?P?X?`?l?
? ?<?\?|?
? ?K?o?
?!?P?y?
?"?.?7?@?T?_?d?i?
?"?\?o?
?$?0?8?P?X?d?
?$?4?D?T?d?t?
?%???b?l?
?%?1?B?w?
?%?f?
?&?:?K?i?
?&?+?J?v?}?
?&?3?:?D?W?]?o?}?
?&?8?o?
?)?7?H?T?d?u?
?)?R?X?i?
?*?h?
?,?6?_?e?v?
?,?J?Q?t?
?.?E?m?
?/?v?
?:?L?h?
?-?4?V?h?
?@?d?p?x?
?=?D?v?
?0?K?
?0?L?h?
?1?A?V?d?l?
?1?Z?|?
?2?7?c?l?
?2?g?
?4?;?
?5?B?z?
?6?_?w?
?6?H?b?r?
?6?V?e?
?7?G?g?w?
?8???U?t?
?8?@?L?l?x?
?8?D?d?l?x?
?AqGO
?B?I?
?E?m?
?http://crl.microsoft.com/pki/crl/products/microsoftrootcert.crl0T
?S?`?s?
?V?e?{?
@.reloc
@.rsrc
[%s: %p]
[%S: p] 
[%s]%35s: %d
[.NET Framework Debugging Control]
[2] 00ad28f0
[3] 00ad28fc
[4] 00ad2908
[BAD: RANK == 0!]
[basetype]
[DEFAULT]
[-details]
[ERROR! NIL TOKEN]
[explicit] 
[FASTCALL]
[FIELD]
[hasThis] 
[IL Stub or LCG]
[info per heap]
[InvalidReference]
[-length <length>]
[LOCALSIG]
[-nofields]
[PROPERTY]
[RuntimeUnwindableFrame]
[-start <startIndex>]
[STDCALL]
[THISCALL]
[UNMANAGED]
[VARARG]
[x86 and x64 documentation]
\\ <these are two backslashes, immediately followed by a newline>
\2`2d2h2
\3`3d3h3l3p3t3x3|3
\8H;_H
\SWjX
] argMask=%02X
] cur = 00000000
] ptrArgs=[
]^v*X
_^[]Y
_^][3
_^Ph \
__based(
__Canon
__cdecl
__clrcall
__eabi
__fastcall
__pascal
__ptr64
__restrict
__stdcall
__thiscall
__unaligned
__vectorcall
_cabs
_EFN_GetManagedExcepStack
_EFN_GetManagedExcepStack(%P, wszStr, sizeof(wszStr)) returned:
_EFN_GetManagedExcepStack(NULL, wszStr, sizeof(wszStr)) returned:
_EFN_GetManagedExcepStackW
_EFN_GetManagedObjectFieldInfo
_EFN_GetManagedObjectName
_EFN_StackTrace
_HResult
_hypot
_innerException
_items
_logb
_message
_nextafter
_remoteStackTraceString
_RTL_USER_PROCESS_PARAMETERS
_stackTrace
_stackTraceString
_xcode
`.data
`_o=8u
`ALL`
`copy constructor closure'
`default constructor closure'
`dynamic atexit destructor for '
`dynamic initializer for '
`eh vector constructor iterator'
`eh vector copy constructor iterator'
`eh vector destructor iterator'
`eh vector vbase constructor iterator'
`eh vector vbase copy constructor iterator'
`Ge`@N
`h````
`h`hhh
`lfuFu
`local static guard'
`local static thread guard'
`local vftable'
`local vftable constructor closure'
`managed vector constructor iterator'
`managed vector copy constructor iterator'
`managed vector destructor iterator'
`omni callsig'
`placement delete closure'
`placement delete[] closure'
`RTTI
`scalar deleting destructor'
`SOS: warning, optimizations for this module could not be suppressed because this CLR version doesn't support the functionality
`string'
`typeof'
`udt returning'
`vbase destructor'
`vbtable'
`vcall'
`vector constructor iterator'
`vector copy constructor iterator'
`vector deleting destructor'
`vector destructor iterator'
`vector vbase constructor iterator'
`vector vbase copy constructor iterator'
`vftable'
`virtual displacement map'
`YjpS
{ ... }
{ =========== BEGINGC %d, (requested generation = %lu, collect_classes = %lu) ==========
{36PrM
{ByRef, ByRef}
{ByRef, Object}
{Object, ByRef}
{Object, Object}
{Scalar, ByRef}
{Scalar, Object}
|$ < u
|hK,_
|HSVW
} j@W
~';_t|%3
~~~~           ~~~~~~~        ~~~~~~~        ~~~~~~~  ~~~~~~~~~          ~~~~~
~~~~~
~~~~~~~
~~~~~~~~~
~pjCXf
+%#x 
+>WWh0/
+0V0j0
+D$(Ph4%
+L$`3
+t"HHt
< <(<0<8<@<H<P<X<`<h<p<x<
< <@<`<
< <'<,<0<4<U<
< t8<
<!=(=C=^=
<!=_=w=~=
<!=+=4=<=S=Y=p=v=
<!='=<=F=o=u=
<"<+<6<?<H<O<X<_<h<o<x<
<"<'<8<><Q<V<f<v<{<
<"<2<7<<<M<R<c<h<u<z<
<"<4<A<g<{<
<"=C=W=
<"=v=
<#<(<<<M<^<o<y<
<#<6<=<H<O<[<n<u<~<
<$<,<4<<<D<L<T<\<d<l<t<|<
<$<,<4<<<D<L<T<`<
<$<4<D<T<d<t<
<%<8<D<i<
<%<I<t<
<%<N<
<&<F<[<
<(<7<A<S<b<i<
<(<f<
<(<F<d<k<
<)<0<J<j<
<)<0<K<R<a<
<)<0<V<h<
<)<6<k<y<
<)<R<X<i<
<*<7<j<u<
<,<<<H<`<
<,<4<<<H<h<p<|<
<,<4<<<H<l<
<,<8<X<`<l<
<.<`<r<}<
<.<V<x<
<.=B=`=m=
</gcheap>
</object>
</objects>
</roots>
</types>
<?<F<W<^<v<
<?=u=
<@=G=P=W=%>>>]>l>
<\=h=
<]<c<
<]tTF
<`<h<m<t<
<+<a<
<<<< 
<<<Q<_<
<'<7<C<R<`<x<
<-<f<x<
<'=`=g=
<=<i<
<-=Y=x=
<>=|=
<0<P<
<4<:<b<h<
<6<H<|<
<6=H=q=
<7=K=E>a>
<7=U=b=
<8<?<R<Y<
<8<@<H<T<x<
<8<A<
<8=>=H=
<aborted>
<After the Statistics section>
<array object address>
<at-<rt"<wt
<B<z<
<b=n=|=
<c<z<
<CLR reg> 
<CLSID>
<descriptive text of the command>
<ELEMENT_TYPE_SENTINEL> 
<Error getting MethodDesc information>
<error getting slot 
<error>
<example output>
<exec cmd="!ClrStack -i %S %d">%S</exec>
<exec cmd="!DumpAssembly /d %s">%s</exec>
<exec cmd="!DumpCCW /d %s">%s</exec>
<exec cmd="!DumpClass /d %s">%s</exec>
<exec cmd="!DumpDomain /d %s">%s</exec>
<exec cmd="!DumpHeap /d -mt %s">%s</exec>
<exec cmd="!DumpMD /d %s">%s</exec>
<exec cmd="!DumpModule /d %s">%s</exec>
<exec cmd="!DumpMT /d %s">%s</exec>
<exec cmd="!DumpObj /d %s">%s</exec>
<exec cmd="!DumpRCW /d %s">%s</exec>
<exec cmd="!DumpVC /d %s %s">%s</exec>
<exec cmd="!gcroot /d %p">!gcroot %p</exec>, and if you find a root on a
<exec cmd="!ListNearObj /d %s">%s</exec>
<exec cmd="!PrintException /d %s">%s</exec>
<exec cmd="!ThreadState %s">%s</exec>
<exec cmd="!U /d %s">%s</exec>
<exec cmd="%s %x L%x">Content</exec>:     
<exec cmd="~~[%s]s">%s</exec>
<free>
<gcheap>
<heap traverse interrupted>
<heap walk interrupted>
<http://www.microsoft.com/pki/certs/MicrosoftTimeStampPCA.crt0
<Illegal>
<integer overflow>
<integer underflow>
<interrupted>
<invalid MethodTable of inner exception>
<invalid MethodTable>
<invalid module token>
<invalid object: '%s'>
<Invalid Object>
<Invalid Object> (
<Invalid record>
<itx<o
<J=U=p=w=|=
<L=F>M>S>\>
<module name> can also be the debugger's name for a module, such as
<no data>
<no information>
<none>
<Not Available>
<Note: this object has an invalid CLASS field>
<object address="0x%p" typeid="%d" size="%d">
<objects>
<optional comments>
<P<`<
<program name unknown>
<R=j=
<repeat the sequence above>
<root kind="%S" address="0x%p"/>
<roots>
<String is invalid or too large to print>
<type id="%d" name="%S"/>
<types>
<unable to retrieve data>
<unknown field def>
<unknown member ref>
<unknown method def>
<unknown method>
<unknown register>
<unknown token type %08x>
<unknown token type (token=%08x)>
<unknown type def>
<unknown type ref>
<unknown type spec>
<unknown type token>
<unknown type>
<unknown>
<Unloaded Type>
<user aborted>
<X<}<
= =(=0=8=@=H=P=X=`=h=p=x=
= =(=0=8=@=L=p=
= =)=2=;=D=H=L=P=T=X=\=`=d=v=
= =,=L=T=`=
= >F>l>
= 00D071F0 used 00D09254 committed 00D17000
=!=7===\=b=p=v=
=!=Q=
="=B=b=
=">J>r>
=#=,=P=}=
=#=:=Q=h=
=#>)>7>=>v>|>
=#>@>^>s>}>
=$=(=,=0=
=$=)=Q=|=
=$=,=4=@=`=h=p=x=
=$=,=4=<=D=L=T=\=d=l=t=|=
=$=/=9=I=W=
=$=4=D=T=d=t=
=$=D=L=T=\=d=l=t=|=
=$=q=
=$=x=}=
=%=U=
=&=-=:=?=L=R=b=g=}=
=&=0=:=?=S=d=u=
=&=6=n=u=
=&=8=T=[=
=&=A=Q=
=&>->
=(=/=E=\=l=q=w=~=
=(=H=T=t=
=(=T=
=)=0=r=
=)=d=l=
=*=4=
=*>X>o>
=,=h=
=,=l=r=
=.=|=
=/=;=@=S=
=/=;=D=K=P=n=z=
=/=L=V=
=:=Q=Y=_=z=
=:>e>l>|>
=<=@=D=H=L=P=T=v=
=======================================
=============================================================================
='=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=t=
=1>N>
=2=7===D=
=3=;=K=t=|=
=3===
=5=N=p={=
=5>\>
=6=H=y=
=6>C>
=6>H>
=6>R>c>
=7>f>
=8=p=
=9=_=
=F=X=
=F>[>
=G=e=
=H=V=
=j>*?
=K=t=
=k>t>
=N=T=i=s=
=P>i?u?
=Q=X=
=Q>X>n>
=V=l=x=
=W=^=
> ?2?N?`?k?}?
> >$>n>t>x>|>
> >&>4>:>P>V>u>{>
> >(>0>8>@>H>P>\>|>
> >/>4>9>F>R>z>
> >@>L>l>t>
>!?'?<?F?o?u?
>!>(>J>c>j>x>
>"?b?
>">)>@>W>n>~>
>">)>0>7>>>T>[>b>
>">)>U>\>b>
>#?*?6?a?
>#?<?E?]?h?
>#>,>6>R>t>
>#>:>
>#>[>
>$>4>D>T>d>t>
>$>c>j>
>%>1>p>
>%>c>
>&?8?
>&>6>M>d>~>
>&>G>v>
>(>/>V>
>(>0>8>@>H>P>X>`>t>
>(>H>P>X>`>h>p>x>
>(>U>f>
>)>;>M>_>~>
>)>?>
>)>5>:>
>*>j>
>*>z>
>,>H>m>w>
>/>;>`>
>-?T?o?v?
>@Ph`%
>+?2?
>+>S>y>
><?^?{?
><>[>
><>F>
>=?b?
>> Does SOS support DML?
>> I got the following error message. Now what?
>> I have a chicken and egg problem. I want to use SOS commands, but the CLR
>> I have a partial memory minidump, and !DumpObj doesn't work. Why?
>> What other tools can I use to find my bug?
>> Where can I get the right version of SOS for my build?
>>> %s:%d
>>> 001b00c1 90              nop
>'>8>
>0?5?p?u?
>0>{>
>0><>d>
>0t<NAj0X
>0t-N
>1>D>W>v>
>4>C>k>
>6?H?d?k?
>6?M?]?h?m?
>7>6?b?
>7>B>c>t>
>8>?>]>d>
>8>j>
>9>@>Y>
>9>X>x>
>A>V>
>D?K?
>d>u>
>F?P?
>f?v?
>F>Q>c>{>
>G>P><?C?I?O?g?n?w?
>H?O?
>http://www.microsoft.com/pki/certs/MicCodSigPCA_08-31-2010.crt0
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
>I>W>g>
>k?v?
>K>b>o>{>
>K>R>
>L>R>l>
>n?u?
>o?v?
>QhD&
>QPh$&
>T>v>
>V?q?|?
>V<4q
>V>e>
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0
0 040@0H0h0p0
0 0M0`0
0 0W0o0
0 1&1L1p1
0 1V1e1
0 if the field contains a pointer to another object. For valuetypes, you can 
0!0/0;0
0!060H0
0!1.131N1b1q1x1
0!1=1
0!151T1|1
0"1/1f1s1
0"1>1J1e1t1
0#060B0U0f0v0}0
0$0,040<0D0L0T0\0d0l0t0|0
0$0,080`0h0l0t0
0$0,080X0`0h0p0|0
0$0+0
0$040D0T0d0t0
0$040H0h0p0x0
0$1:1s1
0%1Q1{1
0&040v0
0&0f0
0&0O0U0i0
0&131
0(0,00040@0D0H0
0(0F0M0j0|0
0(0H0P0X0d0
0(0O0
0)0s0{0
0*03080E0V0]0b0m0~0
0*0E0u0|0
0,1>1T1s1
0.0K0V0
0.1w1
0/0<0M0
0/050F0`0j0
0:0?0G0i0
0:000>
0:000> !do a79d40
0:000> !dumparray -start 2 -length 3 -details 00ad28d0 
0:000> !dumpassembly 1ca248
0:000> !dumpheap
0:000> !dumpheap 1a71000 1a75000
0:000> !dumpheap -stat
0:000> !DumpLog
0:000> !dumpmd 902f40
0:000> !DumpModule 1caa50
0:000> !dumpmodule -mt 1aa580
0:000> !DumpObj a79d40
0:000> !DumpObj a79d98
0:000> !DumpStackObjects
0:000> !DumpVC 0090320c 00a79d9c
0:000> !eeheap -gc
0:000> !EEHeap -loader
0:000> !ehinfo 33bbd3a
0:000> !finalizequeue
0:000> !findappdomain 00a79d98
0:000> !gcinfo 5b68dbb8   (5b68dbb8 is the start of a JITTED method)
0:000> !IP2MD 03ef01a6
0:000> !name2ee unittest!MainClass
0:000> !name2ee unittest.exe MainClass.Main
0:000> !ObjSize a79d40
0:000> !SaveModule 5d1d0000 c:\pub\out.tmp
0:000> !token2ee image00400000 02000004
0:000> !token2ee unittest.exe 02000003
0:000> !VerifyHeap
0:000> !VMMap
0:000> !VMStat
0:000> .loadby sos clr
0:000> dd 15bc90 15bca0-4
0:000> dd 3ec0010
0:000> ed a79d40+4 01  (change the name field to the bogus pointer value 1)
0:000> K
0:000> lm
0:001> !HistInit
0:002> !findroots 06808094 
0:002> !GCWhere 02800038  
0:002> !GCWhere 0280003c
0:002> !heapstat
0:002> !heapstat -inclUnrooted
0:002> !ListNearObj 028000ec
0:002> !ListNearObj 028000f0
0:002> !lno 028000ec
0:002> !verifyobj 028000ec
0:002> !verifyobj 0680017c 
0:003> !HistClear
0:003> !HistObj 028970d4 
0:003> !HistObjFind 028970d4 
0:003> !HistRoot 01e411b8 
0:003> !syncblk
0:003> k
0:011> !ao
0:044> !name2ee price Price
0:0H0
0:1E1Q1V1\1b1m1s1~1
0?0j0
0@0w0
0@1V1
0+0d0j0
0+0G0c0
0+1I1
0<0A0Y0
0<0B0H0N0T0[0
0=1_1
00000000-0000ffff 00010000                NA            Free
00010000-00011fff 00002000  RdWr          RdWr          Commit   Private
00012000-0001ffff 0000e000                NA            Free
00020000-00020fff 00001000  RdWr          RdWr          Commit   Private
00021000-0002ffff 0000f000                NA            Free
00030000-00030fff 00001000  RdWr                        Reserve  Private
0012ea04 5d512f59 clr!CallDescrWorkerInternal+0x30
0012ee34 5d7946aa clr!CallDescrWorker+0x109
0015bc90  00a743f4 00a79f00 00a7b3d8 00a7b47c
0015cde8        6     10260      Free
0019fe48        2      6128      Free
001b00b0 8b0d3020ab03    mov     ecx,dword ptr ds:[3AB2030h] ("Break in debugger. When done type <Enter> to continue: ")
001b00b6 e8d5355951      call    mscorlib_ni+0x8b3690 (51743690) (System.Console.Write(System.String), mdToken: 0600091b)
001b00bb 90              nop
001b00bc e863cdc651      call    mscorlib_ni+0xf8ce24 (51e1ce24) (System.Console.ReadLine(), mdToken: 060008f6)
001caa50 C:\pub\unittest.exe
00400000 00408000   image00400000     (deferred)
0090320c  4000001        0                CLASS   instance 00a743d8 signature
0090320c  4000002        8         System.Int32   instance     2345 m1
0090320c  4000003       10       System.Boolean   instance        1 b1
0090320c  4000004        c         System.Int32   instance     1234 m2
0090320c  4000005        4                CLASS   instance 00a79d98 backpointer
0090320c  4000010        4            VALUETYPE   instance 00a79d9c m_valuetype
009032d8  400000f        4                CLASS     static 00a79d54 m_sExcep
009038ec  4000008        4                CLASS   instance 00a79ce4 name
009038ec  4000008        4             Customer   0 instance 00a79ce4 name
009038ec  4000009        8                 Bank   0 instance 00a79d2c bank
009038ec  4000009        8                CLASS   instance 00a79d2c bank
009038ec  400000a        c       System.Boolean   instance        1 valid
00a70000 00a71000  00a7e01c 0000d01c(53276)
00a70000 00a71000  010443a8 005d33a8(6108072)
00a71000 0015cde8       12 Free
00a7100c 0015cde8       12 Free
00a71018 0015cde8       12 Free
00a71024 5ba58328       68
00a71068 5ba58380       68
00a710ac 5ba58430       68
00a710f0 5ba5dba4       68
00a780c0    1.5MB    00bec800 System.Byte[]
00a79c78 03ef01a6 image00400000!Mainy.Level(Int32)+0xb
00a79c78 03ef02ab image00400000!Mainy.Top()+0xb
00a79c78 5d3725a1 image00400000!Mainy.Main()+0xee
00a7a1a4. Combine that information with the call stacks of the deadlock:
00da4e38    1.2MB    00ed2c00 System.Byte[]
00f16df0    1.2MB    01044338 System.Byte[]
0'151:1?1D1I1N1S1X1]1k1
01a70000 01a71000  01a75000 0x00004000(16384)
01a70000 01a71000  01a76000 0x00005000(20480)
01a71000 5ba88bd8     2064
01a71810 0019fe48     2032 Free
01a72000 5ba88bd8     4096
01a73000 0019fe48     4096 Free
01a74000 5ba88bd8     4096
021Z1
02800038 2    0   02800000 02800038 0282b740  12
0280003c 2    0   02800000 02800038 0282b740  0
0'3.3
030b5cb0 0x01000002 System.Object
030b6420 0x01000001 System.ValueType
030d115c 0x02000002 Funny
030d1228 0x02000003 Mainy
030fceb4 0x01000003 System.Exception
030N0
030p0
030W0
03167a50 0x0100000e System.Runtime.InteropServices.GCHandle
0334e374 0x0100000c System.Console
0336a048 0x0100000f System.GC
03ec0010  00000000 00000000 0090320c 0090375c
03ec0020  009038ec ...
03ef015d b901000000       mov     ecx,0x1
03ef0162 ff156477a25b     call   dword ptr [mscorlib_dll+0x3c7764 (5ba27764)] (System.Console.InitializeStdOutError(Boolean), mdToken: 06000713)
03ef0168 a17c20a701       mov     eax,[01a7207c] (Object: SyncTextWriter)
03ef016d 89442414         mov     [esp+0x14],eax
0404ea04 77f5c524 SharedUserData!SystemCallStub+0x4
0404ea08 77e75ee0 ntdll!NtWaitForMultipleObjects+0xc
0404eaa4 5d9de9d6 KERNEL32!WaitForMultipleObjectsEx+0x12c
0404eb38 5d9def80 clr!Thread::DoAppropriateAptStateWait+0x156
0404ecc4 5d9dd8bb clr!Thread::DoAppropriateWaitWorker+0x360
0404ed20 5da628dd clr!Thread::DoAppropriateWait+0xbb
0404ede4 5da4e2e2 clr!CLREvent::Wait+0x29d
0404ee70 5da4dd41 clr!AwareLock::EnterEpilog+0x132
0404ef34 5da4efa3 clr!AwareLock::Enter+0x2c1
0404f09c 5d767880 clr!AwareLock::Contention+0x483
0404f1c4 03f00229 clr!JITutil_MonContention+0x2c0
0404f1f4 5b6ef077 image00400000!Worker.Work()+0x79
040904B0
050]0
050U0^0d0u0}0
060F0
070403125309Z
08             |             [EBP+08H] an untracked  local
090[0w0
0A0i0
0a1h1
0B0`0
0B0G0L0c0m0
0B1N1\1l1x1
0C             |             [EBP+0CH] an untracked  local
0c0m0w0
0C1J1`1
0CRich
0D0\0
0E             | 002D        reg ECX becoming dead
0E0Q0_0o0
0F0X0
0F1w1|1
0f1x1
0G0N0c0m0
0G0R0X0c0l0y0
0G1\1
0H0q0
0H0z0
'0I0q0|0
0J0}0
0L0l0q0
0O)/;GY
'0S0[0n0{0
0SVW3
0SVWj0X
0T1i1
0u1{1
0Unable to load '%S'.  HRESULT = 0x%x.
0VWSt
0x%*.*x
0x%-*.*x
0x%p 
0X0]0b0g0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1(1,1014181<1D1T1d1t1
1 1(10181@1H1P1\1|1
1 1:1v1
1 1'1|1
1 1-121Q1d1
1 2(5
1 even if the thrown exception type doesn't exactly match the exception type
1!1+1c1
1!1'181?1J1T1^1v1
1!1L1]1
1!2d2
1"1-1:1A1F1Q1_1
1"1l1
1"2(2=2E2S2Y2}2
1"2B2b2
1"2R2q2
1#1(1-121q1
1#1@1_1
1#171Z1i1{1
1#IND
1#INF
1#QNAN
1#SNAN
1$1,1:1G1Q1a1p1u1
1$1,141<1D1L1T1\1d1l1t1|1
1$141D1T1d1t1
1$171E1r1
1$1D1P1p1|1
1$2+2A2c2
1&1D1
1(0&0
1(1=1D1
1(1b1n1|1
1(1P1t1
1) allocation request to GC heap 
1) The debugger shorthand ID (When the runtime is hosted this column might 
1) The thread has taken a lock.
1) When you just want to stop on one particular CLR exception
1)1.1
1)1/1H1L1P1T1X1\1`1
1,0*0
1,141<1D1P1p1x1
1,161_1e1v1
1. Find out the generation of the object of interest using the !GCWhere 
1.151Z1a1u1
1.dll
1/1>1O1Y1
1/161H1q1
1/2;2m2r2W3^3l3
1?2J2|2
1@1N1p1w1
10             |             [EBP+10H] an untracked  local
10             | 002D        reg EDX becoming dead
100701213655Z
100831221932Z
101<1D1\1d1l1|1
101a1
10200000 102ac000   MSVCR80D     (deferred)
102O2V2v2
110708205909Z
1-121>1D1W1\1k1s1
1-141k1
1'1A1V1v1
1-1C1U1\1j1r1
12191g1
121h1
1-262E2b2l2
13191c1i1
132\2u2
14             |             [EBP+14H] an untracked  local
141V1
141Y1
153X3
160907175658Z
160907175844Z
162=2]2n2
162F2
171o1
180712200848Z
180712201119Z
180807090707Z0#
180907175658Z0
180907175844Z0
190726200848Z0t1
190726201119Z0t1
1a1i1
1A3j3q3
1C1I1
1E1[1
1E1s1
1F1X1
1f2x2
1H1O1a1
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
1Jv1=+r
1L1S1o1v1
1N_^[
1r1~1
1R2{2
2 2$2(2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2%2:3K3e3
2 2(20282@2H2T2|2
2 2(20282@2H2T2x2
2 3C3O3]3i3q3
2!2,2
2!2+282E2O2
2!2'282`2
2!24292K2u2
2!272D2`2g2
2!2A2L2
2!313H3n3
2!3'3<3F3o3u3
2#2-2?2G2Q2c2k2u2
2$2,242<2D2L2T2\2d2l2t2|2
2$2/2R2
2$242D2T2d2t2
2$2D2L2T2\2d2l2t2
2$2H2T2\2t2|2
2$3*3?3I3r3x3
2%202N2T2
2%202U2
2%282
2%2B2M2^2e2l2
2%2F2b2
2%2P2~2
2&2<2O2h2
2&373n3~3
2&3u3
2(2:2G2p2
2(2=2v2
2(2D2K2
2(2H2P2X2`2l2
2(3Z3j3
2) other runtime allocation failure
2) The CLR Thread ID
2) The thread has been "hijacked" in order to allow a garbage collection.
2) When you need more complex logic for stopping on a CLR exception
2*2G2e2l2
2*2v2
2*3d3
2,2=2E2U2f2|2
2,222C2x2
2,2V2
2. Instruct the runtime to stop the next time it collects that generation using 
2/292b2h2y2
2/2Q2q2
2:2N2[2d2n2
2+2<2H2V2]2
2+2O2
2<2t2
2<3X3y3"4(474
2>2c2
200831222932Z0y1
20180807090713.283Z0
20180807125635Z
20180808125635Z0t0:
2090O0w0
210403130309Z0w1
21373L3V3
2-242;2B2Z2i2s2
2-242J2l2
229803+4379500
230012+4379650
232R2
23383
250701214655Z0|1
252;2N2T2
260708210909Z0~1
263H3
272I2S2i2
272J2P2
2a2g2|2
2a3u3
2a3z3
2D2J2_2i2
2F2W2
2G2w2
2H2h2
2H3c3j3
2h3p3|3
2J2}2
2K3R3e3
2O3Z3`3r3
2P3x3
2T2Z2o2y2
2X2\2`2d2h2l2p2t2x2|2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3
3 3$3(3,30394?4R4X4k4q4
3 3$3(3,3H3L3T3
3 393[3f3
3 4;4V4q4
3"3,383N3U3i3o3
3"3/3F3W3^3k3z3
3"3:3p3
3"4~4
3#3/3=3M3Y3g3
3#3>3
3$3,343<3D3L3T3\3d3l3t3|3
3$3,343<3D3L3X3|3
3$3,383X3`3h3t3
3$3<3Q3
3$343D3T3d3t3
3$414W4
3$424J4W4n4
3$5`7d7h7l7p7t7x7|7
3%3,333:3X3y3
3%3/343I3Q3W3^3q3~3
3%3G3N3d3
3%484B4Z4a4
3&3-34393C3J3Q3X3_3f3k3
3&3F3X3s3
3(30383@3H3P3X3`3h3p3x3
3(353B3O3V3h3
3(3I3i3y3
3) some other code you use throws a managed OOM exception 
3) The OS thread ID.  
3) The thread is currently in managed code.
3)3R3X3i3
3*4R4}4
3*6F6f6u6
3,363_3e3y3
3,3f3x3
3,4K4
3. When the next GC starts, and has proceeded past the mark phase a CLR 
3.373X3d3r3y3
3.3I3\3u3
3/454J4T4g4o4
3;4D4N4\4e4l4s4|4
3@3D3H3L3P3
3`3g3
3+3~8
3+4[4
3+494T4Z4e4
3<3^3
3<3C3t3
3<3D3L3T3\3d3l3t3|3
313K3
323=3[3b3
323c3n3
323O3v3
3'3.3?3P3W3^3o3
3'323v3
333I3_3l3
354j4
3560   9.980618994 : `GC`GCROOTS`         GcScanHandles (Promotion Phase = 0)
3560   9.981124963 : `GC`                 GC Heap 00000000
3560   9.981125103 : `GC`                     Generation 2 [00C61000, 00000000
3560   9.981125529 : `GC`                     Generation 1 [00CED070, 00000000
3560   9.981125726 : `GC`                     Generation 0 [00CED07C, 00000000
3560   9.981125826 : `GC`                         Segment mem 00C61000 alloc 
3560   9.981135033 : `GC`GCALLOC`GCROOTS` ========== ENDGC 4194 (gen = 2, 
3560   9.981137099 : `SYNC`               RareEnablePremptiveGC: entering. 
36 D4 8C C7 AA |
364F4`4
38             | 0036        reg EDI becoming dead
383@3H3T3x3
384$5$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7
393@3Z3s3
393h3m3
393L3X3
393U3
3D3J3T3y3
3f3x3
3F4M4
3F4X4
3F4X4i4t4
3http://www.microsoft.com/pkiops/docs/primarycps.htm0@
3I3T3b3r3
3J3Z3x3
3L4b4k4t4
3N3z3
3O4j4
3Ph4e
3Php[
3V4h4
3V4r4
3W4*5
4 4,4L4X4x4
4 4^4z4
4 5\5
4 sections in file
4!474P4f4
4"4-424@4E4S4X4f4k4
4"5(595y5
4$4,444<4D4L4T4\4d4l4t4|4
4$4.484B4L4V4`4j4t4
4$4/4U4
4$444D4T4d4t4
4$4H4T4\4t4
4$5*5?5I5r5x5
4$5<5T5l5
4%4e4
4%4X4z4
4%5I5X5
4&4+4]4j4
4&4+414;4E4U4e4u4~4
4&5.5@5S5i5
4(4H4c4p4
4(4L4l4t4|4
4)4^4
4)4J4T4t4
4)5/5q5w5
4*4/4O4n4
4*4J4j4
4*5b5
4,4L4T4\4d4l4x4
4. Now we can use the !FindRoots <object address> to find out the cross 
4.4e4
4.7.3190.0
4.7.3190.0 built by: NET472REL1LAST_C
4/494M4
4:4t4
4:4V4
4:4y4
4:5K5
4;4h4
4;5A5V5`5
4`ChildEBP RetAddr  Caller, Callee
4`ESP
4+42484
4<4W4|4
4<5G5N5f5t5
4=4e4
404N4[4n4
404x4
41494D4O4r4
414r4y4
41575L5V5
41Ph\
434U4s4
44             |             [EBP-04H] an untracked  local
4'4,4H4U4i4
444<4D4L4T4\4d4l4t4|4
444E4v4
4-494Q4
4-4O4e4
454x4
465H5o5u5
484?4H4O4
484@4D4P4
485i5
494D4a4
4A             | 0027        reg ECX becoming live
4C4e4
4c4u4
4F4S4v4
4I5j5
4K4t4
4K5]5
4M8_8
4O4r4
4P4x4
4P7T7
4S4r4
4S5o5
4V4h4
4-Wzk
4x4~4
4Y5l5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,50545l8p8t8x8|8
5 5%5*5/595D5Z5j5
5 5(50585@5H5P5X5`5l5
5 5.5<5J5X5c5l5u5
5 6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
5!51555D5U5b5|5
5!6(6M6T6
5"545=5B5S5Z5c5
5"5-5\5
5"6)6m6
5#5(5.585B5U5Z5
5#5_5
5$5,545<5@5H5\5d5x5
5$5,545<5D5L5T5\5d5l5t5|5
5$5,545<5H5l5
5$5`5g5
5$545D5T5d5t5
5$5V5h5
5%565B5T5X5e5i5
5%5P5
5%6+6o6u6
5&5;5}5
5&5?5
5&595x5
5&686U6w6
5(5.5<5B5L5W5a5g5q5|5
5(5/5]5d5r5y5
5(545T5`5
5(5r5
5(5w5~5
5)5;5
5)5R5X5i5
5)6/6<6R6\6
5)636Z6
5*5t5
5,535U5
5,6G6N6g6
5.6c6s6
5/5W5f5m5w5
5??E?O?
5[6a6y6P7Z7d7
5^5d5m5
5+5f5{5
5<5H5^5m5{5
5<5m5
5>5E5
50666`6u6
506j6
525=5X5m5{5
525l5
526i6
535>5C5b5
536:6
53gNi
545;5l5p5t5x5|5
54585<5@5D5H5L5t5x5|5
546:6
5'5.5;5E5O5Y5c5
555U5
5-575
5-5G5N5Z5v5
56             | 0025        reg EDX becoming live
565W5b5
566D6l6s6
566H6
575B5L5d5|5
585?5]5
595R5
5a000000 5a0b1000   mscoree      (deferred)
5a140000 5a29e000   clrjit     (deferred)
5A6H6q6x6
5B5b5
5b5n5z5
5b660000 5c440000   mscorlib_dll     (deferred)
5B6Q6\6
5ba57bf8      318     18136 System.String
5ba5db04        1        68 System.Threading.Thread
5ba61f18        1        12 System.Collections.CaseInsensitiveComparer
5ba6cf78        1        24 Microsoft.Win32.SafeHandles.SafeFileHandle
5ba73e28        2       112 System.IO.StreamWriter
5ba75d54        1        12 System.Security.Permissions.SecurityPermissionFlag
5ba7607c        1        12 System.Security.Permissions.HostProtectionResource
5ba88bd8        3     10256 System.Object[]
5c5i5
5c6w6
5d1d0000 5e13c000   clr     (deferred)
5E5K5
5E6p6
5F5U5
5Genu
5h5n5{5
5J5q5
5ntel
5P5V5
5V5f5
5V5n5
5Y6u6
6 6@6H6P6\6|6
6!6/6?6`6
6!606G6R6k6t6
6!646@6G6t6
6"6&62666B6F6T6\6h6
6"6-6D6^6y6
6#6)6=6C6W6]6q6w6
6#6;6D6W6j6
6#6-6
6#6L6R6c6}6
6$6,646<6D6L6T6\6d6h6p6x6
6$6,646<6D6L6T6\6d6l6t6|6
6$6/6Q6X6
6$646D6T6d6t6
6$7c7y7
6%757T7l7~7
6&6,6R6z6
6&6?6X6
6&676=6I6Y6_6n6u6
6&7<7F7P7e7o7
6&7U7s7
6(6\6b6w6
6(6=6R6^6l6|6
6(60686@6L6l6t6
6(616>6m6u6
6(6D6H6h6
6(6R6d6o6
6*737v7
6*7B7Z7
6,616P6\6a6w6
6,666_6e6v6
6,686X6d6
6,6c6I7
6,6D6\6t6
6,7:7A7Z7g7l7s7y7
6.6F6S6
6/6:6
6/6?6b6
6:6A667H7
6:7r7
6;pXu
6;w4u
6?6V6g6q6
6]7i7u7;8
6+0@YHF
6<6b6~6
6<6B6S6m6w6
6<6D6L6T6\6d6l6x6
6=6H6M6
6>6\6
60787
627U7
636=6
636l6
636O6V6u6
637i7|7
646]6d6k6z6
-64OS
6'6.6Q6^6f6w6
6'6<6Z6z6
666[6x6~6
6-666w6
666E6~6
666U6
666z6
6'757d7w7
687H7[7`7~7
697@7b7i7
6a8p8
6D6c6
6D6i6
6D7y7
6E6V6j6w6
6F6a6
6g7m7
6g7t7
6i6p6
6J7y7
6O6r6
6V6h6
6V7h7
7 7$7(7,7074787<7@7D7H7L7P7
7 7(70787@7H7P7X7`7h7p7x7
7 7*7i7
7!7?7G7b7{7
7!767@7i7o7
7!8G8`8
7"7.777@7G7R7^7o7v7
7"7-7h7
7#707:7R7^7d7q7{7
7#7L7R7c7
7$<(<,<0<
7$7,747<7D7L7T7\7d7l7t7|7
7$7,747<7D7P7p7x7
7$7,7D7L7T7`7
7$7+7W7
7$747D7T7d7t7
7$7-777@7F7O7d7
7%7*757]7t7
7%828^8
7&747\7c7
7&747K7\7g7n7
7(7,70787P7`7d7t7x7|7
7(7=7g7x7
7(737y7
7(797?7T7{7
7(7H7P7X7`7l7
7(7H7X7|7
7(7V7
7)868@8g8
7*7S7
7/757F7
7/8M8n8
7:7}7
7:7A7V7
7;8@8I8U8Z8
7?7W7
7+8:8f889m9
7<7C7V7d7
7<7D7L7T7\7d7l7t7|7
7<7H7h7p7x7
7<8B8^8
7=7j7
7=8E8l8
7>7L7v7
700PP
700WP
707M7d7
707O7
717@7G7`7k7
72             | 0013        reg ESI becoming live
727y7
737=7D7N7\7
748;8p8w8
757V7
758x82:
767;7B7I7P7W7^7e7l7s7z7
768H8
768J8`8e8z8
777A7f7x7
778B8G8O8s8
7'7o7
7'8.8
798?8Q8[8v8a9
7D7K7
7D7n7
7E7K7_7
7G7f7
7g8m8
7H7P7r7
7H7S7_7e7
7N8j8
7P7a7
7P8[8
7Q7V7[7r7
7U7[7z7
7Z7v7
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8a8~8
8 8(80888@8H8P8X8`8h8p8x8
8 8(80888@8L8l8t8
8 8/898C8
8 818=8B8p8
8 8i8
8!868@8h8n8
8!8J8W8g8
8#9<9C9^9|9
8$8*8=8M8i8u8
8$8,848<8D8L8T8\8d8l8t8
8$8,848<8D8L8T8\8d8l8t8|8
8$8<8L8P8`8d8l8
8$808X8|8
8$848D8T8d8t8
8$8v8
8$9?9t9z9
8%8@8
8%808J8T8n8~8
8&949
8(8<8d8l8x8
8(8D8U8h8
8(8H8P8\8|8
8(8H8S8
8)8>8I8Z8}8
8)8I8c8
8)9=9R9u9
8,828F8
8.8<8I8V8e8
8.989a9h9~9
8/8L8V8
8:8b8
8':C:
8?8E8
8?8F8
8?9[9
8@8g8
8[9`9m9
8<8@8D8H8L8P8T8X8\8`8v8
8<8H8h8t8
8<8O8g8x8
8>8P8_8
80<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
808P8p8
809w9
818:8I8U8c8r8
81979L9V9|9
82898V8g8
828E8M8a9q9
829>9L9\9
83             | 0016        push ptr  0
858f8q8v8
858T8
858Y8h8
868Q8
869?9Z9m9~9
878e8
878V8
879>9T9s9
8'848R8W8\8a8
8'878v8
888a8
888D8V8f8k8
889=9U9
889u9
8'8N8
8'9.9
898@8
898X8
8B             | 0019        push ptr  1
8C8Q8h8s8
8E8g8q8
8E8m8
8F9S9N:
8http://www.microsoft.com/pki/certs/MicrosoftRootCert.crt0
8I9^9}9
8J9Q9
8j9r9
8K8f8u8
8L8^8
8Q8W8l8v8
8R9^9l9|9
8U:s:
8V9e9l9{9
8W9^9
9 :<:c:
9 9(909<9`9
9 9(90989@9H9P9X9`9h9p9x9
9 9(90989P9X9`9l9
9 90949D9H9L9P9X9p9
9!0f6
9!9:9L9
9":\:j:
9#9@9`9
9$9)9/959;9@9F9L9R9W9]9c9i9n9t9z9
9$9,949<9D9L9T9\9d9l9t9|9
9$9^9c9}9
9$949D9T9d9t9
9$999?9T9Z9h9n9
9%9,939:9A9H9O9V9]9d9k9r9y9
9%949Y9
9&:7:V:]:m:t:
9&:D:g:
9&:N:
9&=-=
9&909
9&9-9f9x9
9(9L9X9`9x9
9(9n9
9):7:h:o:
9):e:~:
9)u2_
9*9d9
9*9U9
9,:T:
9,9094989<9@9D9H9L9P9T9X9`9d9
9,989@9`9
9,9f9k9}9
9,9H9
9,9I9r9
9,9k9p9u9z9
9/:6:g:
9/949A9G9m9t9~9
9/959F9\9
9/959O9
9/9F9R9j9
9':.:
9-:H:V:
9;:\:
9;:Z;d;v;
9?:F:
9?9E9Y9v9
9] t"
9`:q:
9=9]:d:
9>9g9
90:7:
90:D:t:
909:9h9{9
90989<9X9`9d9|9
91BMT
92:k:
929>9L9\9i9
92989A9l9w9~9
93             | 001C        push ptr  2
93 F3 40 05    |
939M9
94:9:O:V:d:i:
949R9]9
949X9d9l9
95:;:
969A9q9
969H9
97;D;
979Q9f9w9
99:k:
99:L:
9'969H9
9-9A9d9m9w9
9A u[
9B             | 001F        push ptr  3
9B7A-94635BEEBDDA&displaylang=en
9B9N9\9l9y9
9C9J9
9D9J9_9i9
9D9P9^9j9
9e:l:
9G uu
9H9O9
9H9O9Z9
9hhSMu
9I9_9l9
9I9f9w9
9K9\9q9
9k9z9
9L:Y:g:w:
9n:w:
9P(u+9X,u&
9Q9|9
9R:X:
9s<t!hx
9U9a9
9V9,;I;c;h;|;
9V9k9
a code address in a managed function into a MethodDesc:
a COM interface pointer to which the object has been marshaled.
a garbage collection occurs, the collector needs to know where roots are so it 
A handy supplement to this function is to also run "lm v m clr". That 
A leak may still exist because in a general scan of process memory SOS can't  
a managed thread is making a PInvoke call to a Win32 function, that thread 
A minidump without full memory may not have this information.
A RuntimeCallableWrapper is an internal CLR structure used to host COM objects
a simple program:
A special note about -type: Often, you'd like to find not only Strings, but
A SyncBlock is a holder for extra information that doesn't need to be created 
a value class is not a first-class object with it's own MethodTable as the
A_^[]
a_o=8u
A14p,C
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
able to rule out or include them as a source of a memory leak.
Abort Initiated
Aborted
about that method. You could run !U, !DumpMT, !DumpClass, !DumpMD, or 
Abstract, 
ACTIVE
add.ovf
add.ovf.un
Adding pending breakpoints...
Additional examples:
-addr
Address
Address            Gen   Heap   segment            begin              allocated           size
Address          Gen Heap segment          begin            allocated         size
Address  Gen Heap segment  begin    allocated size
Address %#p is not in the managed heap.
Address %#p not found in the managed heap.
Address %p does not lie in the managed heap
address family not supported
address in use
address not available
address_family_not_supported
address_in_use
address_not_available
addresses in the call stack to get more information on each managed method.
ADUnloadHelper 
After:  
After:  0x2800134           72 (0x48      ) System.Threading.ThreadAbortException
After:  couldn't find any object between %#p and %#p
af-ZA
af-za
All handles found
all loaded modules in all domains. And remember that you can browse all the
all of the pending breakpoints. If the pending breakpoint has a non-zero 
All pending breakpoints cleared.
allocated
AllocProtect
AllowOptimize=0
-allReady
-allReady Specifying this argument will allow for the display of all objects 
already connected
already_connected
also lists heaps associated with the JIT compiler, and heaps associated with 
amd64
amount of managed memory that is still alive.  This is due to the fact that a 
an Address string. You can use !ObjSize to identify any particularly large 
An assembly can consist of multiple modules, and those will be listed. You can
An error occurred while traversing the cleanup list.
an IL offset as an optional parameter seperate from the name. If there are overloaded
an object through the GCs.
an untracked %s%s local
analyzeoom
AnalyzeOOM
and for a class:
And for explicitly implemented methods on generic interfaces:
and maps it to a MethodDesc, which can be passed to !DumpMD.
and reports what it found. If a handle is found, you'll see the address of the
and the handle was discarded without freeing it.
and the types referenced by the module. For example:
Any Assembly pointer in the output can be passed to !DumpAssembly. Any Module 
AppDomain transition
AppDomain: %s
AppDomain: 0014f000
AppDomains.  For example:
applied to each region. Sample output:
appropriate structures. For example, the TypeDefToMethodTableMap above can be 
April
ar-ae
ar-AE
ar-BH
ar-bh
ar-DZ
ar-dz
are able to run other SOS commands, but they may fail with unexpected errors 
are printed as the final portion of the output.
are two special domains: the Shared Domain and the System Domain.
AreFileApisANSI
ar-EG
ar-eg
arglist
args (%d)
argument for signs of corruption.
argument list too long
argument out of domain
ar-iq
ar-IQ
ar-jo
ar-JO
ar-kw
ar-KW
ar-lb
ar-LB
ar-ly
ar-LY
arm64
ar-ma
ar-MA
ar-OM
ar-om
ar-QA
ar-qa
ARRAY
Array:       Rank %d, Number of elements %I32d, Type %s
Array: Rank 1, Number of elements 10, Type VALUETYPE
ar-sa
ar-SA
ar-SY
ar-sy
ar-TN
ar-tn
ar-YE
ar-ye
as it dumps it.   Use this option if heap corruption is suspected.
Assembly
Assembly:           %s
Assembly:    %S
Assembly:   %s
Assembly: 001ca248
AssemblyReferencesMap:   %p
AssemblyReferencesMap: 03ec012c
associated with it. For example, this output from K:
Assuming a uncorrupted GC heap.  If this is a crash dump consider -verify option
async pinned
Async Pinned Handles:
AsyncPinned
At this time !GCRoot should be used instead.
At this time you can use SOS commands. To turn off spurious notifications,
atan2
Attempt to move past the end of the iterator.
Attempted to run: %s
Attempting to dump GC log to file '%s'
Attempting to dump Stress log to file '%s'
Attempting to dump Stress log to file 'StressLog.txt'
Attempting to read Stress log
Attributes: 
Attributes: PEFile
August
Avail
AVERAGE
az-AZ-Cyrl
az-az-cyrl
az-az-latn
az-AZ-Latn
B$;B u
B;W$r
b_o=8u
b1: %S
b2: %S
b3: %S
b4: %S
b5: %S
b6: %S
b7: %S
b8: %S
b9: %S
ba w4 /1 %p "bp poi(%p); g"
Background
BackgroundThread:
bad address
bad allocation
bad exception
bad file descriptor
bad import
bad message
bad object: %#p - bad MT %#p
BAD TIME
bad_address
bad_file_descriptor
BaseSize:
be created for MyObject, and the thread ownership information stored there 
be passed to !DumpDomain to limit output only to that AppDomain. Other 
be respected because it truly reflects what happened during GC.
be returned. More generally, "-type <Substring of interesting type>[]".
be-by
be-BY
Because people often want to restrict the search to gc handles and freachable
because required areas of memory are not mapped in or only partially mapped 
Before running any of the Hist - family commands you need to initialize the SOS 
Before: 
Before: 0x28000a4           72 (0x48      ) System.StackOverflowException
Before: 0x28000ec           72 (0x48      ) System.ExecutionEngineException
Before: couldn't find any object between %#p and %#p
begin
Begin %p, size %x
Begin %p, size %x. Cold region begin %p, size %x
beginning of a managed object (based on a valid method table) and the object 
behavior.
beq.s
best way to debug a managed program at this level.
between managed and unmanaged code. You could run !IP2MD on the return 
bg-BG
bg-bg
bge.s
bge.un
bge.un.s
bgt.s
bgt.un
bgt.un.s
Bhttp://www.microsoft.com/pki/certs/MicRooCerAut2011_2011_03_22.crt0
binaries for that version of the Runtime, the Windows Debugger will load the
binary array. If _stackTraceString field is not filled in, that can be helpful 
binary to a file, so you can disassemble the code and browse types with ILDASM.
binary. Be sure to list any new commands here.
ble.s
ble.un
ble.un.s
BLK COUNT
block and the handler block. For a TYPED handler, this would be the "try" and
Blocking GC for Stack Overflow
blt.s
blt.un
blt.un.s
bne.un
bne.un.s
bn-in
bn-IN
Boolean
bp %p
bp /1 %p
break
break occurs, in other words, if you need to break on the next collection you 
breakpoint for any instantiation that will be JIT-ted in the future.
Breakpoint set
brfalse
brfalse.s
-brick
broken pipe
brtrue
brtrue.s
bs-BA-Latn
bs-ba-latn
Buffer overflow while enumerating handles.
but !ObjSize lists 152 bytes:
But it could be handy sometimes.
By default, MinidumpMode is 0, so there is no restriction on commands that will
By looking at the code corresponding to Worker.Work()+0x79 (run "!u 03f00229"),
by memory pressure for better performance. You can also see the notion of 
by the orphaned handle. If the number doesn't grow over time, note that there 
By using !EEHeap to keep track of the growth of these private heaps, we are 
ByRef
byref
ByRef
BYREF
byref 
c:\Code\prj.mini\exc.cs @ 38:
c:\Code\prj.mini\exc.cs @ 39:
c:\pub\out.tmp already exists, it will be overwritten.
C\t2;KXr-
c_o=8u
ca-ES
ca-es
call 
Call Site
call those when an AppDomain shuts down.
called a ThinLock will be used if there is not already a SyncBlock for the 
caller.sp
caller.sp%c%x
caller.sp%c%x 
calli
callvirt
can also pass * as the <module name> to search all loaded managed modules.
can get false positives because even though the value was found, it might be 
can limit the output by passing "-gc" or "-loader". All information will be 
can move around in the garbage collected heap.
can occur while that thread is running. For example, if you break in while
can run !DumpMT to verify that. The MethodDefToDescMap takes a MethodDef token 
can update them with new object pointer values.
candidate is validated. This helps to eliminate false positives. It is not
Cannot specify both -live and -dead.
Cannot specify both -mt and -type
Can't get either WKS or SVR GC's config log buffer
Can't get Watson Buckets
-card
card bundles
castclass
catch(%S) 
cbx0:
CCW             %d
CCW:               %p
CCW:         %s
cgt.un
ChangePoint
Child SP
ChildEBP RetAddr
ChildFP  RetAddr  Caller, Callee
Chttp://crl.microsoft.com/pki/crl/products/MicrosoftTimeStampPCA.crl0X
Chttp://www.microsoft.com/pkiops/crl/MicCodSigPCA2011_2011-07-08.crl0a
ckfinite
Class
class
CLASS
class 
Class Attributes:    %x  
class G3<T1, T2, T3> 
Class initialization
Class Name
Class Name:      %S
Class:        %s
Class:        03ee1424
Class: 03571358
Class: 03ee1424
ClassLoader:        %p
ClassLoader: 001ca060
Clause:  [%p, %p] [%x, %x]
Clause: [033bbd2b, 033bbd3c] [8b, 9c]
Clause: [033bbd7a, 033bbdc5] [da, 125]
Clause: [033bbd83, 033bbda3] [e3, 103]
cleanup the previous resources.
cleanup through the !FinalizeQueue command.
-clear
-clearall
CLEARED
Cleared
ClimbingMove
CLOSED
CloseHandle
CloseThreadpoolTimer
CloseThreadpoolWait
CLR not loaded
CLR notification: GC - end of mark phase.
CLR notification: GC - Performing a gen %d collection. Determined surviving objects...
CLR Owns
CLR Version: %u.%u.%u.%u
clr!StressLog::theLog
clr!SVR::gc_config_log_buffer
clr!SVR::gc_config_log_buffer_offset
clr!WKS::gc_config_log_buffer
clr!WKS::gc_config_log_buffer_offset
CLR.DLL by running 
CLRCreateInstance
CLRDEBUGINFO
CLRDEBUGINFOWINDOWSX86
CLRProfiler
CLR-specific data, just enough to run a subset of SOS commands correctly. You 
CLRStack
ClrStack
clrstack
CLRStack attempts to provide a true stack trace for managed code only. It is
CLstatic
clt.un
CMOD_OPT
CMOD_REQD
CoCreateInstance
Code %x 
Code size: %x
CodeAddr = %s
CodeAddr:     %s
CodeAddr:     03ef00b8
CodeAddr: 033bbca0
CodeAddr: 03ef00b8
codelabel
CoInitialize
CoInitialized
Cold region:
collect_classes = 0) ==========={
COLLECTED
collected. Why? Who is holding onto them?"
collection of the specified generation.  The effect is reset as soon as the 
collection statistics about objects. With it's various options, it can look for
COM Context:                %p
COM interface pointers:
combined with a high rate of allocation. Here is example output where !DumpHeap
ComClassFactory
ComClassFactory %d
ComImport, 
Command cancelled at the user's request.
command to use becomes:
command will not display any managed OOM because we will throw OOM right away 
command, say it is gen 1:
COMMAND: %s.
COMMAND: <cmd name, all lower case>
COMMAND: analyzeoom.
COMMAND: bpmd.
COMMAND: clrstack.
COMMAND: comstate.
COMMAND: contents.
COMMAND: dumparray.
COMMAND: dumpassembly.
COMMAND: dumpccw.
COMMAND: dumpclass.
COMMAND: dumpdomain.
COMMAND: dumpheap.
COMMAND: dumpil.
COMMAND: dumplog.
COMMAND: dumpmd.
COMMAND: dumpmodule.
COMMAND: dumpmt.
COMMAND: dumpobj.
COMMAND: dumprcw.
COMMAND: dumpruntimetypes.
COMMAND: dumpsig.
COMMAND: dumpsigelem.
COMMAND: dumpstack.
COMMAND: dumpstackobjects.
COMMAND: dumpvc.
COMMAND: eeheap.
COMMAND: eestack.
COMMAND: eeversion.
COMMAND: ehinfo.
COMMAND: faq.
COMMAND: finalizequeue.
COMMAND: findappdomain.
COMMAND: findroots.
COMMAND: gchandleleaks.
COMMAND: gchandles.
COMMAND: gcinfo.
COMMAND: gcroot.
COMMAND: gcwhere.
COMMAND: heapstat.
COMMAND: histclear.
COMMAND: histinit.
COMMAND: histobj.
COMMAND: histobjfind.
COMMAND: histroot.
COMMAND: ip2md.
COMMAND: listnearobj.
COMMAND: minidumpmode.
COMMAND: name2ee.
COMMAND: objsize.
COMMAND: printexception.
COMMAND: procinfo.
COMMAND: rcwcleanuplist.
COMMAND: savemodule.
COMMAND: stoponexception.
COMMAND: syncblk.
COMMAND: threadpool.
COMMAND: threads.
COMMAND: threadstate.
COMMAND: token2ee.
COMMAND: traverseheap.
COMMAND: u.
COMMAND: verifyheap.
COMMAND: verifyobj.
COMMAND: vmmap.
COMMAND: vmstat.
Comments
Commit
compacting GCs
Compacting reasons
CompanyName
CompareStringEx
Completed successfully.
completely agree with what this command tells you, in which case the command should
Completion Port Thread
Completion Port Thread:
complex, like 'price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.
ComponentSize:
compressed stream of data indicating when registers or stack locations contain 
COMState
comstate
Conceptually the output is:
concurrent GCs
Condemned generation: 1.
connection aborted
connection already in progress
connection refused
connection reset
connection_aborted
connection_already_in_progress
connection_refused
connection_reset
CONOUT$
consistency errors.
constrained.
Content:     
contents
CONTEXT
Context
Context information:
ContextStaticOffset: %x
ContextStaticsSize:  %x
conv.i
conv.i1
conv.i2
conv.i4
conv.i8
conv.ovf.i
conv.ovf.i.un
conv.ovf.i1
conv.ovf.i1.un
conv.ovf.i2
conv.ovf.i2.un
conv.ovf.i4
conv.ovf.i4.un
conv.ovf.i8
conv.ovf.i8.un
conv.ovf.u
conv.ovf.u.un
conv.ovf.u1
conv.ovf.u1.un
conv.ovf.u2
conv.ovf.u2.un
conv.ovf.u4
conv.ovf.u4.un
conv.ovf.u8
conv.ovf.u8.un
conv.r.un
conv.r4
conv.r8
conv.u
conv.u1
conv.u2
conv.u4
conv.u8
converted pins
ConvertThreadToFiber
Cooperative
CopyCtor
CorExitProcess
correct mscordacwks.dll file.
correspond to SOS command names. This file is embedded as a resource in the SOS 
corresponding to objects that are owned by a thread. For example, a
corruption bug caused by invalid GCEncoding for a particular method.
could increase this to get more logging, but more memory will be required for 
Could not allocate memory to read the gc info.
Could not do a full GC
Could not read address %p.
Could not read address of format string
Could not read memory %p
Could not request method table data for object %p (MethodTable: %p).
Could not request segment data at %p.
couldn't allocate gaps
Couldn't get size for object %#p: possible heap corruption.
Count
counters or debugger commands. For example for the former scenario the "!address 
cpblk
cpobj
CPU utilization: %d%%
-create
-create2
CreateEventExW
CreateFiber
CreateFile2
CreateFileA
CreateFileMappingA
CreateFileW
CreateSemaphoreExW
CreateSymbolicLinkW
CreateThreadpoolTimer
CreateThreadpoolWait
CREATING
creating a breakpoint against a module that has not yet been loaded.
Creating thread:            %p
Critical
cross device link
cs-cz
cs-CZ
curr_object : 00a73d24
curr_object:      %s
curr_object: %p > end_youngest: %p
curr_object: %p > heap_segment_allocated (seg: %p)
Current frame: 
current managed thread. (A nested exception occurs when you throw another
Current mode: %s - unsafe minidump commands are %s.
Current:
cxr@%p
cy-gb
cy-GB
D$,PQ
D$4Pj
D$LPU
D$Xh '
D$Xh$'
d_o=8u
D=xz#
da-dk
da-DK
dbgeng.dll
dbghelp.dll
DbgHelper 
dclog
DDBLD438
dddd, MMMM dd, yyyy
de00 
de01 
de02 
-dead
-dead     Only print dead objects (objects which will be collected in the
DeadThread:
de-AT
de-at
Debug Suspend Pending
Debug Will Sync
DebugBreak
DebugCreate
DebugExtensionInitialize
DebugExtensionNotify
DebugExtensionUninitialize
debugger "U" function, the entire method from start to finish is printed,
debugger is configured to load line number information.
December
de-CH
de-ch
DecodePointer
decoder failed
de-DE
de-de
default one.
defined on the object. 
DeleteCriticalSection
DeleteFiber
de-LI
de-li
de-lu
de-LU
demotion
dependent
Dependent
Dependent Handles:
-derived
destination address required
destination_address_required
Detached
-detail
-detail   Will display extra information on any SyncBlocks that need to be 
Detail: %s: %s (%d bytes)
Detail: LOH: Failed to reserve memory (16777216 bytes)
Detail: SOH: Didn't have enough memory to grow the internal GC datastructures (800000 bytes) - 
-details
details can be obtained by passing the pointer value to !PrintException. If
determine if it is still in use.
device or resource busy
diasymreader.dll
Did not find a path from %p to %p.
Didn't find %d handles:
Didn't have enough memory to allocate an LOH segment
Didn't have enough memory to commit
Didn't have enough memory to commit beginning of the segment
Didn't have enough memory to commit the internal GC datastructures
Didn't have enough memory to commit the new ephemeral segment
Didn't have enough memory to grow the internal GC datastructures
differentiate between garbage and valid structures, so you may have false     
differing reloc values for this object!
difficult because it requires some internal info from GC. The only exception is
directly. Be careful about using this to set memory breakpoints, since objects
directory not empty
disabled
disassemble the frame that the local or argument value belongs to in order to 
disassembly of the JITTED code. You can also call !DumpClass, !DumpMT, 
disassembly. The -n (No line numbers) flag can be specified to disable this
Display of context static variables is not implemented yet
displayed otherwise.
displaying, finding or traversing objects as well as gc heap segments may not 
disturb a fragile repro environment. The !DumpLog function allows you to write 
div.un
div-MV
div-mv
DllBase
DllGetClassObject
DOCUMENTATION
Documentation for %s not found.
documentation). Finally, it will provide a warning if it detects excessive 
doesn't match the version of CLR.DLL. You can find the version of 
Domain
Domain %d
Domain %d:%s          %s
Domain 1: 14f000
DOMAIN error
don't have an instance of the class, so !dumpobj won't help you), note that
don't have the original DLLs or EXEs. This is most often used to save a managed
double
Double
dump creation time to bring those structures into the minidump, and allow a 
DumpArray
dumparray
DumpArray (da)                     ThreadState
dumpassembly
DumpAssembly
DumpAssembly                       ProcInfo 
DumpCCW
dumpccw
DumpCCW
Dumpccw
DumpClass
dumpclass
DumpClass                          ListNearObj (lno)
DumpDomain
dumpdomain
DumpDomain                         VerifyHeap
dumpgcconfiglog
DumpGCConfigLog
DumpGCData
dumpgcdata
DumpHeap
dumpheap
DumpHeap                           U
DumpIL
dumpil
DumpIL                             MinidumpMode 
Dumping GC log at %08x
Dumping managed stack and managed variables using ICorDebug.
dumplog
Dumplog
DumpLog
DumpMD
dumpmd
DumpMD                             GCHandles
dumpmodule
DumpModule
DumpModule                         FindAppDomain
DumpMT
dumpmt
DumpMT                             GCWhere
DumpObj
dumpobj
DumpObj (do)                       Threads
dumprcw
Dumprcw
DumpRCW
DumpRCW                            AnalyzeOOM (ao)
DumpRuntimeTypes
dumpruntimetypes
Dumpruntimetypes
DumpRuntimeTypes                   DumpLog
dumpsig
DumpSig
DumpSig                            VMMap
DumpSigElem
dumpsigelem
DumpSigElem                        StopOnException (soe)
DumpStack
dumpstack
dumpstackobjects
DumpStackObjects
DumpStackObjects (dso)             IP2MD
dumpvc
DumpVC
DumpVC                             DumpStack
Duplicate promote/relocs
dword ptr [
dword ptr ds:[
Dynamic 
Dynamic Module
dynamic statics NYI
dynamic thread statics NYI
E VPW
E$h<f
e_.,>
e+000
E0             | 002D        pop  4 ptrs
E0^0i0
E0C1)0'
Each thread has many attributes, many of which can be ignored. The important 
EBP%c
EBX%c
EDI%c
-EE will only show managed functions.
EEClass has an invalid MethodTable address
EEClass:
EEClass:     %s
EEClass:     <error getting EEClass>
EEClass:     <not loaded yet>
EEClass: 03e40fc0
EEClass: 03ee1424
EEClass: 03ee14b8
EEClass: 03ee1ae0
EEClass: 03ee1b84
EEClass: 11a538c8
eeheap
EEHeap
EEHeap                             VerifyObj
eestack
EEStack
EEVersion
eeversion
EEVersion
EEVersion                          FinalizeQueue (fq)
EHHandler %d: %s 
EHHandler %d: %s CLAUSE BEGIN
EHHandler %d: %s CLAUSE END
EHHandler %d: %s FILTER BEGIN
EHHandler %d: %s HANDLER BEGIN
EHHandler %d: %s HANDLER END
EHHandler 0: TYPED catch(System.IO.FileNotFoundException) 
EHHandler 1: FINALLY
EHHandler 2: TYPED catch(System.Exception)
ehinfo
EHInfo
Ehinfo
-ehinfo
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_08-31-2010.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicCodSigPCA2011_2011-07-08.crt0
ei_/E6D
Element Methodtable: %s
Element Type: Value
elevation logic
el-gr
el-GR
enabled
en-au
en-AU
en-bz
en-BZ
en-ca
en-CA
en-cb
en-CB
EncodePointer
end       Stop listing at this address
endfilter
endfinally
endmac
en-GB
en-gb
en-ie
en-IE
en-jm
en-JM
en-NZ
en-nz
en-PH
en-ph
EnterCriticalSection
Entry
entry point %p
entry point 5b68dbb8
en-tt
en-TT
EnumSystemLocalesEx
en-US
en-us
Environment
en-za
en-ZA
en-ZW
en-zw
ephemeral segment allocation context: 
Error %x while walking the handle table.
error decoding IL
Error during heap traverse
Error gathering dynamic info from object at %s.
Error getting AppDomain %p.
Error getting AppDomain friendly name
Error getting AppDomain information
Error getting card table lowest address
Error getting EEJitManager code heaps
Error getting MethodDescs for module %p
Error getting next card table
Error getting per-appdomain handle information
Error getting string data
Error getting System.RuntimeType.m_handle offset
error in import
ERROR IN SIGNATURE:  Not all of signature blob was consumed.  %d byte(s) remain
ERROR IN SIGNATURE:  Signature should be larger.
Error initialized register $t%d to zero
Error initializing heap traversal
Error loading documentation resource
Error processing exception notification
Error reading card bits
Error requesting CCW data
Error requesting COM interface pointers
Error requesting details
Error requesting gc heap analyze data
Error requesting gc heap analyze data for heap %p
Error requesting GC Heap data
Error requesting gc heap details
Error requesting heap data for heap %d.
Error requesting heap data.
Error requesting heap segment %p
Error requesting heap segment %p.
Error requesting interesting GC info
Error requesting OOM data
Error requesting RCW data
Error requesting SyncBlk data
Error retrieving nested exception info %p
Error setting breakpoint: %s
Error walking dependent handles.  GCRoot may miss paths.
Error when reading RuntimeType field
Error!
ERROR!! Bad signature blob value!
Error, unexpected opcode type
Error: %lx
Error: There is a promote record for root %p, but no relocation record
es-ar
es-AR
es-bo
es-BO
es-cl
es-CL
es-co
es-CO
es-CR
es-cr
es-do
es-DO
es-ec
es-EC
es-ES
es-es
es-GT
es-gt
es-HN
es-hn
ESI%c
es-mx
es-MX
es-ni
es-NI
ESP/REG  Object   Name
es-PA
es-pa
es-PE
es-pe
es-PR
es-pr
es-PY
es-py
es-SV
es-sv
es-UY
es-uy
es-VE
es-ve
et-ee
et-EE
eu-es
eu-ES
every exception in the System.Exception heirarchy.
every object has enough clues about it's origin to determine the AppDomain. 
ex:    StopOnException -create System.OutOfMemoryException 1
Examine a MethodTable. Each managed object has a MethodTable pointer at the 
examined:
Examining CLR data structures      Diagnostic Utilities
Examining the GC history           Other
Example for generics:
Example output:
example, if you only want to list objects in the large heap segment:
example. If a handle is not found in memory, you'll get notification of that 
Example:
Examples: !Name2EE  mscorlib.dll System.String.ToString
Exception
exception during reading PEB
Exception object: %s
Exception occurred while trying to %s the GC stats.
exception on the current thread (if any). You can use !soe as a shortcut for 
exception on the current thread and print it. This will be the same exception
Exception type:   %S
Exception type:   <Unknown>
Exception will list the last thrown exception (if any) for the thread. More
exception within a catch handler already being called for another exception).
exceptions by switching to the thread in question, and running 
executable format error
execute the same code, they won't be able to enter the block until the first 
EXITED
EXITING
ExitProcess
expand in next full GC
expand promoting eph
expand with a new seg
Expansion mechanisms
Expected newline in documentation resource.
Expecting first chance CLRN exception
explore more fields.
expressed as `facility1`facility2`facility3`.  This facilitates the creation of 
ExRdWr
extension !teb to get the top and bottom stack values.
Extension commands need clr.dll in order to have something to do.
ExWrCp
F\;Fxr
F\;Fxs
F0 31          | 0036        reg ESI becoming dead
F1 79          | 0011        reg EDI becoming live
f7f0a001
f7f0a002
f7f0a003
Fail to create file %s
Fail to fill AppDomain
Fail to fill Assembly
Fail to fill Module %p
Fail to read memory
Fail to read PE section info
failed to create file: %d
Failed to enumerate GC handles.  HRESULT=%x.
Failed to enumerate GC reference errors.
Failed to enumerate GC references.
Failed to enumerate threads in the process.
Failed to execute the following command: %s
Failed to find runtime DLL (clr.dll), 0x%08x
Failed to find runtime DLL (clr.dll), 0x80004005
Failed to find the segment of the managed heap where the object %p resides
Failed to gather EHInfo data
Failed to gather needed data, possibly due to memory contraints in the debuggee.
Failed to get appdomain %p, error %lx
Failed to get appdomain list
Failed to get CLR Tls data for thread 
Failed to get GC heap details at %p.
Failed to get GCHeaps
Failed to get GCHeaps.
Failed to get GCHeaps:  integer overflow
Failed to get GCHeaps:  integer overflow error
Failed to get GCHeaps: integer overflow
Failed to get GCHeaps: Integer overflow.
Failed to get header for object %p.
Failed to get method desc for %p.
Failed to get object header for object %p while inspecting syncblock at index %d.
Failed to get size of object.
Failed to get Teb for Thread 
Failed to get the dac module handle. hr=0x%x.
Failed to get the modules for the given assembly.
Failed to get thread ID for thread 
Failed to get thread type info not found for thread 
Failed to get Tls expansion slots for thread 
Failed to instantiate {%ls} from DAC location.
Failed to instantiate {%ls} from debugger's image path.
Failed to instantiate {%ls} from installed .NET framework locations.
Failed to load data access DLL, 0x%08x
Failed to parse command line arguments.
Failed to perform EHInfo traverse
Failed to read bounds info from the array
Failed to read card table entry.
Failed to read element at 
Failed to read GCDesc for MethodTable %p.
Failed to read lower bounds info from the array
Failed to read memory
failed to read memory from %08x
Failed to read module information for '%S'.  HRESULT = 0x%x.
Failed to read whole or part of stress log, some references may come from stress log
Failed to request assembly.
Failed to request GC details data.
Failed to request GC heap data.
Failed to request GCDesc.
Failed to request MethodData, not in JIT code range
Failed to request module address.
Failed to request Module data from assembly.
Failed to request module list.
Failed to request more handles.
Failed to request number of entries.
Failed to request object data for %s.
Failed to request segment data at %p.
Failed to request SyncBlk at index %d.
Failed to request Thread at 
Failed to request Thread at %p
Failed to request ThreadpoolMgr information
Failed to request threads from the thread store.
Failed to request ThreadStore
Failed to require current Thread ID
Failed to require total thread number
Failed to reserve memory
Failed to retrieve information about segment %p
Failed to retrieve segments for gc heap
Failed to retrieve Tls Data index
Failed to set code notification
Failed to Start
Failed to start stack walk: %lx
Failed to switch to original thread
Failed to switch to thread 
Failed to walk dependent handles.  GCRoot may miss paths.
Failed to walk the handle table.
Failed to walk the HandleTable!
Failed to walk thread %x
FAILURE: Stress log not dumped
FAILURE: Stress log unreadable
fa-ir
fa-IR
false
FAULT
FCALL
February
FF             |
Fiber
Field
Field (mdToken token) of
Field name:  %S
field only applies to RefCount Handles, and this field will contain the
FieldDefToDescMap:       %p
FieldDefToDescMap: 03ec00a4
Fields:
fi-FI
fi-fi
file %s saved
file exists
File not specified
file too large
file. This is especially useful if you are debugging a full memory dump, and 
File:
File:            %S
File:        %S
FileDescription
filename too long
filename_too_long
FileReferencesMap:       %p
FileReferencesMap: 03ec0128
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
FILTER
Filter: [%p] [%x]
filters for displaying only specific message categories.  To make sense of this 
Finalizable but not rooted:  
FINALIZED
Finalized
finalizequeue
FinalizeQueue
FinalizeQueue                      GCInfo
Finalizer 
Finalizer Queue:
FINALIZING
FINALLY
Finally, if GC heap corruption is present, you may see an error like this:
FindAppDomain
Findappdomain
findappdomain
FindIL failed
FindResourceA
findroots
FindRoots
first field. For example:
First, all stacks will be searched for roots, then handle tables, and finally
Flags:                      %s%s%s%s%s%s%s%s
Flags:             %s%s
Flavor=Retail
float
float32
float64
floor
FlsAlloc
FlsFree
FlsGetValue
FlsSetValue
FlushFileBuffers
FlushProcessWriteBuffers
FNPTR
fo-fo
fo-FO
Followed by
followed by a report listing all the types found, their size and number:
following code is executed by Threads A & B:
following the argument address.
For a minidump created with this minimal set of functionality in mind, you
for debugging. You can of course use !DumpObj on the same exception object to 
for every object. It can hold COM Interop data, HashCodes, and locking 
For example, !DumpObj lists a size of 20 bytes for this Customer object:
For example, a GCHandle valuetype is stored on the stack with the low bit set 
For example, to display thread 3's stack use ~3kb.
For example:
for finalization. The notation "(0015bc90->0015bca0)" means that if you look at
for -l and -p combined. 
For multi-dimension array, length and start index are supported
for that variable name you specified. Here are some examples: 
for the method. (Beginning and end of try/finally/catch handlers, etc.).
For this case, just be sure to surround the module name with single quotes,
For this kind of module, simply use price as the module name:
Found %d handles:
Found %d methods in module %p...
Found %d objects.
Found %d roots.
Found %d unique roots (run '!GCRoot -all' to see all roots).
Found %p at location %p
Found %p in stress log at location %p, reference not counted
Found '%S', but it does not match the CLR being debugged.
FP;FL
fragmentation in the GC heap. 
Fragmented blocks larger than 0.5 MB:
Fragmented blocks larger than 1MB:
fragmented gen0 (ephemeral GC)
Frame
frame and if successful will display the corresponding source file name and 
Frame pointer: %s
fr-be
fr-BE
fr-CA
fr-ca
fr-CH
fr-ch
Free            %d
Free MethodTable
Free Object
Free space:                                                 Percentage
Free:
FreeEnvironmentStringsW
FreeLibrary
FreeLibraryWhenCallbackReturns
Free-Threaded Interfaces to be released: %d
frexp
fr-FR
fr-fr
Friday
fr-lu
fr-LU
fr-mc
fr-MC
from the resultant list. Here is a simple object:
ft%9q
FullDllName
Fully initialized
Function evaluation
function not supported
function specifically to debug DynamicMethod code which was constructed on
function:
functions provide an AppDomain pointer as well, such as !Threads where it lists
functions. Here is sample output:
Furthermore, if the Outer class resides in a namespace, NS, the bpmd 
FVWPP
G$;G(u
G$;G(u&;O
G;~Tr
G1.G():
Garbage Collector attempts to collect and reclaim memory only when required to
garbage collector. The most apparent difference in the debugger is that in 
garbage in that no code knows about the address. You can also get false 
Gate 
Gathering types...
GC Alloc Context
GC can not commit memory it needs. You can look at these scenarios by using performance
GC Handle Statistics for AppDomain 
GC Heap not initialized yet.
GC Heap not initialized, so GC mode is not determined yet.
GC Heap Size   0x1201c(73756)
GC Heap Size  0x5d73a8(6124456)
GC Heap Size:    
GC heap that are not rooted anymore.
GC info %p
GC info 5b9f2f09
GC Mode
GC On Transitions
GC Refs:
GC Suspend Pending
GC_HEAP RELOCATING Objects in heap within range [%p %p) by -0x%x bytes
GCConfigLog.txt
GCCount
GCHandleLeaks
GCHandleleaks
Gchandleleaks
gchandleleaks
GCHandleLeaks will report any GCHandles that couldn't be found in memory.      
GCHandles
gchandles
GcHeapStat
GCHeapStat
gcheapstat
gcinfo
GCInfo
-gcinfo
gcroot
GCRoot
GCRoot                             EEStack
GCs that did demotion
gcwhere
GcWhere
GCWhere
gen(%#p) = %d > %d = condemned generation.
GENArray
Generally there's no need to call this explicitly, as each HistInit will first 
GenerateTrackingInfo=1
generation %d has %d finalizable objects 
generation %d starts at 0x%p
generation 0 has 4 finalizable objects (0015bc90->0015bca0)
generation 0 starts at 0x00a71018
generation 0 starts at 0x00c32754
generation 1 has 0 finalizable objects (0015bc90->0015bc90)
generation 1 starts at 0x00a7100c
generation 1 starts at 0x00c32748
generation 2 has 0 finalizable objects (0015bc90->0015bc90)
generation 2 starts at 0x00a71000
generational references to the object of interest.  In other words, even if the 
generations too, and report those roots.
generations.
generic
GENERICArray
GenericInst slot: 
Generics inst context: 
GenN    obj_address   root1, root2, root3,
GenN-1  prev_obj_addr root1, root2,
GenN-2  prev_prev_oa  root1, root4, 
get an Assembly address from the output of !DumpDomain.
GetACP
GetActiveWindow
GetCommandLineA
GetConsoleCP
GetConsoleMode
GetCPInfo
GetCurrentPackageId
GetCurrentProcess
GetCurrentProcessId
GetCurrentProcessorNumber
GetCurrentThreadId
GetDateFormatEx
GetEnvironmentStringsW
GetFileInformationByHandleExW
GetFileSize
GetFileType
GetFileVersionInfoSizeW
GetFileVersionInfoW
GetFrameContext failed: %lx
GetLastActivePopup
GetLastError
GetLocaleInfoEx
GetLogicalProcessorInformation
GetModuleFileName(dacModuleHandle) failed. Last error = 0x%x
GetModuleFileNameA
GetModuleFileNameW
GetModuleHandleExW
GetModuleHandleW
GetModuleInformation
GetOEMCP
GetProcAddress
GetProcessHeap
GetProcessTimes
GetProcessWindowStation
GetStartupInfoW
GetStdHandle
GetStringTypeW
GetSystemTimeAsFileTime
GetTickCount64
GetTimeFormatEx
GetTimeFormatW
GetUserDefaultLocaleName
GetUserObjectInformationW
gfffC
Given an address in managed JITTED code, IP2MD attempts to find the MethodDesc
Given the following two classes:
given, but merely derives from it. So, "-derived System.Exception" would catch
gl-es
gl-ES
GlobalMemoryStatus
GS cookie valid range: [%x;%x)
GS cookie: 
gs")n}
gu-IN
gu-in
H$;H s
H(;H$v
H0F0D
H2M>~
H4;H0s
H8;H4v
handle
Handle
Handle (%s): %p -> %p: %d (0x%x) bytes (%S)
handle addresses that couldn't be found.
HandleCLRN
handler, it shows the type, including code addresses and offsets for the clause
Handler: [%p, %p] [%x, %x]
Handler: [033bbd3c, 033bbd50] [9c, b0]
Handler: [033bbda3, 033bbdc5] [103, 125]
Handler: [033bbdc5, 033bbdd6] [125, 136]
Handles:
HandleTable:
HANDLETABLE_NOACCESS
handy for clean, simple traces when debugging straightforward managed 
has a memory demand of 10 Megabytes. The stress log is circular so new entries 
have an object pointer, and can attempt to run "!DumpObj" on it.
Heap     Gen0         Gen1         Gen2         LOH
---------Heap %#-2d---------
Heap %d
Heap %d (%p)
Heap %d: Error requesting interesting GC info
Heap %d: Error requesting OOM data
---------Heap 2 ---------
---------Heap 4 ---------
heap fragmentation. This is usually caused by pinning objects for a long time 
Heap local consistency confirmed.
Heap local consistency not confirmed.
Heap Size:       
Heap%-4d %12I32u %12I32u %12I32u %12I32u
Heap0    152212       0            306196       0           SOH: 94% LOH:  0%
Heap0    177904       12           306956       8784        
Heap0    28           12           12           64          SOH:  0% LOH:  0%
Heap1    104          12           12           16          SOH:  0% LOH:100%
Heap1    155704       0            0            0           SOH: 97% LOH:  0%
Heap1    159652       12           12           16          
HeapAlloc
HeapFree
HeapReAlloc
HeapSize
HeapStat
heapstat
heavy optimization of parameters and locals one can request the JIT compiler
he-il
he-IL
help.
Here is output for a simple program:
Here is sample output from a very simple program.  Note that the "RefCount"
Here is sample output where you can see the change in register state. Normally 
Here is some sample output:
HH:mm:ss
HHtVHHt
HHtXHHt
high fragmetation
high memory load (ephemeral GC)
high memory load and frag
higher-level summary of the objects registered for finalization. Note that 
HighFrequencyHeap: 
HighFrequencyHeap:  %p
HighFrequencyHeap:008f2000(00008000:00001000) Size: 0x00001000 bytes.
HighFrequencyHeap:00902000(00008000:00003000) Size: 0x00003000 bytes.
HighFrequencyHeap:00922000(00008000:00001000) Size: 0x00001000 bytes.
hi-IN
hi-in
Hijacked by the GC
HistClear
histclear
HistInit
histinit
HistInit                           FAQ
HistInit command.
histobj
HistObj
histobjfind
HistObjFind
HistRoot
histroot
HistRoot provides information related to both promotions and relocations of the 
HistStats
histstats
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework:
host unreachable
host_unreachable
HostCodeHeap:      
Hosted Runtime:
Hot region:
hr-ba
hr-BA
HResult: %lx
hr-hr
hr-HR
Ht+Ht$Ht
htFjlX;
htHjlZ;
http://blogs.msdn.com/adam_nathan/
http://microsoft.com0
http://www.microsoft.com/downloads/details.aspx?FamilyId=86CE6052-D7F4-4AEB-
hu-hu
hu-HU
hy-AM
hy-am
hyperlinks to inspect the different managed stack frames and managed variables.                             
I0G0E
ID:        %d
ID:        (shared domain)
ID:        (system domain)
ID: 1
IDebugSystemObjects::GetCurrentProcessHandle HRESULT=0x%x.
identifier removed
identify a possible trend.                                                    
id-ID
id-id
IDispatch/IUnknown
If 30% or more of the heap contains "Free" objects, the process may suffer from
If a token is unresolved, run "!do <addr>" on the addr given
If an error is found, !VerifyHeap will report it. I'll take a perfectly good 
If called with no parameters, PrintException will look for the last outstanding 
If given an address, this function will display the RCWCleanupList at that address.
If I wanted to save a copy of clr.dll, I could run:
If IsJitted is "yes," you can run !U on the CodeAddr pointer to see a 
if it points to a Pinned handle. So !GCHandleLeaks ignores the low bit in it's
If IT1 and ExplicitItfImpl are types declared inside another class, 
If no address is specified, it displays the default cleanup list, printing the
If not then either the module that contains the method hasn't been loaded yet
If PreEmptiveGC is enabled for a thread, then a garbage collection 
If that succeeds, the SOS command should work on retry.
If the debugger has the option SYMOPT_LOAD_LINES specified (either by the
If the pointer falls within a segment range given by "!EEHeap -gc", then you do
If there are nested exceptions, you can re-run !PrintException with the 
If this gc heap corruption exists, there is a serious bug in your own code or 
If we look at a valid signature object for a method we see the following:
If you are debugging a minidump, you need to make sure that your executable
If you are looking for a way to display a static field of a class (and you
if you are running low on commit space. One important thing to keep in mind is
If you are running version 1.1 or 2.0 of the CLR, SOS.DLL is installed in the 
If you are using a dump file created on another machine, it is a little bit
If you need this functionality, get a full memory dump with ".dump /ma mydump.dmp"
If you pass the "-xml" flag, the file is instead written out in an easy to 
If you pass the -ehinfo flag, you'll get inline display of exception info
If you pass the -gcinfo flag, you'll get inline display of the GCInfo for
If you pass the -verify option it will do more sanity checking of the heap
If you use the -verify option, each non-static CLASS field of an object
Ihttp://crl.microsoft.com/pki/crl/products/MicRooCerAut2011_2011_03_22.crl0^
IJupiterObject:    %p
Il$++
IL_%04x
ilAddr = %p
illegal
illegal byte sequence
Image
image). The TOTAL column is (AVERAGE * BLK COUNT). Sample output below:
importance. Shortcut names for popular functions are listed in parenthesis.
important properties of the object such as the EEClass, the MethodTable, and 
In a minidump without full memory, most gc heap structures will not be valid.
In addition to your application domain, and any domains it might create, there
In Multi Threaded Apartment
in myapp.ini and re-run:
In order for the option -lines to enable display of source information
In order to run SOS commands, many CLR data structures need to be traversed. 
in parenthesis. You can also look at the token table yourself, by
In plan phase of garbage collection
In Single Threaded Apartment
In the case of hosted environments such as SQL, the module name may be 
in the CLR. In user code, an error in constructing PInvoke calls can cause 
in the current directory is created.
In the debugger at startup you can type:
in the debugger, and let it run. After the function EEStartup is finished, 
in the debugger.  Note that if you are running CoreCLR (e.g. Silverlight)
in. At this time, SOS cannot reliably detect if a dump file is of this type 
in. You can pass this value to !DumpDomain to find out more. 
inappropriate io control operation
include the source file name and line number corresponding to the 
-inclUnrooted
Incorrect argument: %s
Incorrect options.  Usage:
Index         SyncBlock MonitorHeld Recursion Owning Thread Info          SyncBlock Owner
Index SyncBlock MonitorHeld Recursion Owning Thread Info   SyncBlock Owner
induced compacting GC
--------info for heap %d--------
information about that:
information for thread-safe operations.
information on diagnosing the cause.
initblk
InitializeCriticalSectionAndSpinCount
InitializeCriticalSectionEx
Initializing
initobj
in-memory log capability. The idea was to avoid using locks or I/O which could 
InMemoryOrderLinks
InMemoryOrderModuleList
InnerException:   
instance
instead of even trying to allocate it on the GC heap.
int16
Int16
Int32
int32
Int64
int64
Integer overflow error.
Integer overflow on array rank
interested in objects with invalid fields.
Interesting data points
Interface, 
interfaces to display the managed stack and variables. With this option you can also 
InterlockedDecrement
InterlockedIncrement
INTERNAL
Internal call
internal_root_array = %#p
internal_root_array_index = %#p
InternalName
Interrupted
interrupted
interrupted by user
Interrupted, data may be incomplete.
Interruptible
IntPtr
Invalid arg
invalid argument
Invalid argument %s
Invalid Assembly %s
Invalid CCW %s
Invalid CCW pointer %s
Invalid EEClass address
Invalid exception object %s
invalid GC info
Invalid object
Invalid option %s
Invalid option: option specified multiple times: %s
Invalid parameter %s
Invalid parameters %s %s
Invalid parent EEClass
Invalid parent MethodTable
Invalid pending breakpoint index.
Invalid RCW %s
invalid seek
Invalid signature
Invalid stress log chunk: %p
invalid string position
INVALID TYPE %d
invalid_argument
investigating lifetime issues of interop-heavy applications.
io error
IOCompletion
IOCompletion 
iostream
iostream stream error
ip2md
IP2MD
is a bug in the JIT Compiler. It parses the GCEncoding for a method, which is a
is a directory
is a simple example of the output for a dynamic method:
is an instance method or a static method respectively.  The third portion of the 
is if the system is running out physical memory (+ page file if you have one) so
is no facility to read meta-information about this memory). You can turn this 
is Outer.IT1<U>.M1, using a '.' as the separator)
is owned by thread 4.
is running in "Workstation" or "Server" mode, a distinction which affects the 
is useful for investigating lifetime issues of interop-heavy applications.
IsAggregated 
IsContained 
IsDCOMProxy 
IsDebuggerPresent
IsDisconnected 
IsExtendsCOMObject 
IsFreeThreaded 
isinst
is-IS
is-is
IsJitted:     %s
IsJitted:     yes
IsJitted: yes
IsJupiterObject 
IsProcessorFeaturePresent
IsUnique 
IsValidCodePage
IsValidLocaleName
It creates a graphical display of the GC heap to help you analyze the state of
It is either in the "plan phase," where objects are being moved around, or
It is not always the case that a SyncBlock will be created for every object 
It means that Thread e04 owns object 00a7a194, and Thread ab8 owns object 
it off and add /D to the beginning of a command to get DML based output for it.
It turns a method name into a MethodDesc. Here is an example for a method:
it0jnX;
it-ch
it-CH
it-IT
it-it
IUnknown pointer:           %p
IUnknown V-table pointer :  %p (captured at RCW creation time)
j Xf;
j%Yf9
j*Xf;
j@j _W
j]Zf;
j^Xf;
j+Xf;
j0Xf;
j1PQW
j8Xf;
jA[jZZ+
ja-jp
ja-JP
January
-jd[;
jdYf;
jEXf;
jeZf;
jgXf;
Jit code heap:
JIT Compilation
JITTED %S!%S
JITTED Code Address: %s
JITTED Code Address: 03ef00b8
jiYf;
jjjjj
jjjjjjjj
jnXf9C
JOu?y
joYf;
Jt;}]
Jupiter ref count: %d%s%s%s%s
j-Xf;
jxYf;
jXYf;
jXZf;
j-Yf;
ka-GE
ka-ge
Kernel CPU time   : %d days %02d:%02d:%02d.%02d
kernel32.dll
Kernel32.dll
KERNEL32.dll
kIx:T
kk-KZ
kk-kz
kn-in
kn-IN
kok-IN
kok-in
ko-KR
ko-kr
ky-kg
ky-KG
-l parameter can be used to show information on local variables in a frame.
L$(Qj
L$4Qj
L$dQj
L&*H$_Z
L?T?\?d?l?t?|?
L0J0H
Large
Large        2,461,696     16,703,488     11,956,224          3     35,868,672
Large        6,303,744    974,778,368    169,089,706         12  2,029,076,472
Large object heap starts at 0x%p
Large object heap starts at 0x01a71000
last GC before OOM
Last good object: %p
Last good object: %p.
Last good object: %s
Last good object: 00a73d14
Last good object: 01EE60C4.
LCMapStringEx
LCMapStringW
ldarg
ldarg.0
ldarg.1
ldarg.2
ldarg.3
ldarg.s
ldarga
ldarga.s
ldc.i4
ldc.i4.0
ldc.i4.1
ldc.i4.2
ldc.i4.3
ldc.i4.4
ldc.i4.5
ldc.i4.6
ldc.i4.7
ldc.i4.8
ldc.i4.m1
ldc.i4.s
ldc.i8
ldc.r4
ldc.r8
ldelem
ldelem.i
ldelem.i1
ldelem.i2
ldelem.i4
ldelem.i8
ldelem.r4
ldelem.r8
ldelem.ref
ldelem.u1
ldelem.u2
ldelem.u4
ldelema
ldexp
ldfld
ldflda
ldftn
ldind.i
ldind.i1
ldind.i2
ldind.i4
ldind.i8
ldind.r4
ldind.r8
ldind.ref
ldind.u1
ldind.u2
ldind.u4
ldlen
ldloc
ldloc.0
ldloc.1
ldloc.2
ldloc.3
ldloc.s
ldloca
ldloca.s
ldnull
ldobj
LDR_DATA_TABLE_ENTRY
ldsfld
ldsflda
ldstr
ldtoken
ldvirtftn
leave
leave.s
LeaveCriticalSection
leaving both threads with no option but to wait forever in the second lock 
Legal to Join
Legal_policy_statement
Legal_Policy_Statement
LegalCopyright
Length
-length
Let the program run, and it will stop with the notice
LF_ALWAYS
LF_APPDOMAIN
LF_ASSERT
LF_BCL
LF_CLASSLOADER
LF_CODESHARING
LF_CORDB
LF_CORPROF
LF_DBGALLOC
LF_EEMEM
LF_EH
LF_ENC
LF_GC
LF_GCALLOC
LF_GCINFO
LF_GCROOTS
LF_IJW
LF_INTEROP
LF_JIT
LF_LOADER
LF_LOCKS
LF_MARSHALER
LF_METADATA
LF_REMOTING
LF_SECURITY
LF_STARTUP
LF_STORE
LF_STUBS
LF_SYNC
LF_THREADPOOL
LF_VERIFIER
LF_ZAP
lifetime of your application, you may have a GCHandle leak. This will cause   
Lightweight function
like:
limited to, "[DEFAULT]", "[C]", "[STDCALL]", "[THISCALL]", and so on.  The second
Line number must be positive
line number. The -n (No line numbers) parameter can be specified to disable 
-lines
-lines command line argument.
-list
list<T> too long
listnearobj
ListNearObj
-live
-live     Only print live objects
Live debugging session required
-live:     optional. Only print threads associated with a live thread.
load of mscordacwks.dll.  .cordll -ve -u -l will do a verbose reload.
load the matching version of SOS for the version of CLR you are debugging.
Loaded %S
loaded from an assembly store (such as a SQL db) rather than disk, the
loaded from.
loaded in the process. You shouldn't attempt to use a version of SOS.DLL that 
loaded managed module. <module name> can also be the debugger's name for a 
-loader
Loader Heap:
LoaderCodeHeap:    
LoaderHeap:              %p
LoaderHeap: 001cab3c
LoadLibraryA
LoadLibraryExW
LoadResource
local_%d
localloc
LOCALS:
LOCALS: (none)
LockResource
log entry, and the fourth contains the log message. The facility field is 
log, you would probably want the Shared Source CLI to find out exactly where 
log10
long-lived objects eventually get "promoted" to generation 2.
low on ephemeral space
Low on memory during GC
LowFrequencyHeap:  
LowFrequencyHeap:   %p
LowFrequencyHeap:008f0000(00002000:00001000) Size: 0x00001000 bytes.
LowFrequencyHeap:00900000(00002000:00001000) 03ee0000(00010000:00003000) Size: 0x00004000 bytes.
LowFrequencyHeap:00920000(00002000:00001000) 03e30000(00010000:00003000) Size: 0x00004000 bytes.
lt-LT
lt-lt
lv-lv
lv-LV
-m$B 
m_code
m_debugString
m_handle
m_resolver
m_runtimeType
m_scope
m_tokens
m_value
m_valuetype is a value type. The value in the MT column (0090320c) is the 
M0K0I
M0r0~0
make sense of it. You would usually come to use it if you suspect a gc heap 
make sure you have valid symbols.
managed exception(s), if any, on each managed thread. If you do see an 
Managed object:             %s
Managed object:    %s
managed objects. It is important to keep track of this information, because if 
Managed OOM occured after GC #%d (Requested to allocate %d bytes)
Managed OOM occured after GC #12 (Requested to allocate 100000 bytes)
Managed OOM occured after GC #28 (Requested to allocate 1234 bytes)
Managed ref count:          %d
managed thread. You can run !threads to get a list of managed threads in
Managed to Unmanaged transition
-ManagedExcepStack
Management of the list of pending breakpoints can be done via !BPMD -list,
map/set<T> too long
Mapped
MapViewOfFile
March
-max      Ignore objects larger than the size given in bytes
MAXIMUM
may be some noise in this output, as an unmanaged application may be storing  
MDArray
mdToken:
mdToken:         %p
mdToken:      %p
mdToken:      0600000d
mdToken: 0600000b
mdToken: 0600000d
Medium
Medium         139,264        528,384        337,920          4      1,351,680
Medium         249,856      1,019,904        521,557          6      3,129,342
Member (mdToken token) of
MemberRefToDescMap:      %p
MemberRefToDescMap: 03ec00e8
Memory
Memory Availability (Numbers in MB)
memory for any references to the Strong and Pinned GCHandles in the process, 
memory in that range, you'll see the object pointers that are registered:
memory scan with Control-C or Control-Break.                                   
merged pins
Message
message size
Message:          
message_size
MessageBoxW
MetaData start address:  %p (%d bytes)
MetaData start address: 0040220c (1696 bytes)
MetaData start address: 00402230 (1888 bytes)
METHOD
method 
Method info block:
method might correspond to a "mov edi,ecx" statement.
method name from the metadata, or from the output of the "!dumpmt -md" command. 
Method Name:  %S
Method Name:  Mainy.Main()
Method Name: MainClass.Main()
Method Name: Mainy.Main()
method of my application. How can I do this?"
Method Table:    %s
method. For example, the notation "reg EDI becoming live" at offset 0x11 of the
MethodDefToDescMap:      %p
MethodDefToDescMap: 03ec0064
MethodDesc
MethodDesc = %p
MethodDesc Table
MethodDesc. Here is an example showing class tokens being resolved:
MethodDesc:   %s
MethodDesc:   00902f40
MethodDesc:  %s
MethodDesc:  <not loaded yet>
MethodDesc: 00902f40
MethodDesc: 03310f68
methods of finding the AppDomain failed. Try running
methods, !bpmd will set a breakpoint for all of them.
MethodTable 0090320c
MethodTable for it, and the Value column provides the start address:
MethodTable:  %s
MethodTable:  009032d8
MethodTable: %s
MethodTable: <not loaded yet>
MethodTable: 009032d8
MethodTable: 0090375c
MethodTable: 009038ec
MethodTable: 0331121c
MethodTable: 03e41044
MethodTable: 11a47ae0
Microsoft
Microsoft Code Signing PCA
Microsoft Code Signing PCA 2011
Microsoft Code Signing PCA 20110
Microsoft Code Signing PCA0
Microsoft Corporation
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1!0
Microsoft Corporation1#0!
Microsoft Corporation1&0$
Microsoft Corporation1(0&
Microsoft Corporation1200
Microsoft NTSD extension for .NET Runtime
Microsoft Time-Stamp PCA
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp PCA0
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Visual C++ Runtime Library
microsoft1-0+
might keep a 50 Megabyte array alive because a strong GCHandle points to it,
might store the handle in a strange way (shifting bits, for example).
-min      Ignore objects less than the size given in bytes
Minidumpmode
minidumpmode
MinidumpMode
Minidumps created with ".dump /m" or ".dump" have a very small set of 
MINIMUM
minimum set of SOS debugging commands to work. At this time, those commands 
mi-NZ
mi-nz
Missing CCW address
Missing EEClass address
Missing MethodTable address
Missing quote in %s
Missing RCW address
Missing value for option %s
mk-mk
mk-MK
mkrefany
ml-in
ml-IN
MM/dd/yy
mn-MN
mn-mn
Mode must be 0 or 1
Module %s: 
Module 001c03f0: Size: 0x00000000 bytes.
Module 001c03f0:Size: 0x00000000 bytes.
Module 001c1320: Size: 0x00000000 bytes.
Module 001c1320:Size: 0x00000000 bytes.
Module 001caa38: Size: 0x00000000 bytes.
Module 001caa38:03ec0000(00010000:00002000) Size: 0x00002000 bytes.
Module 5ba22410: Size: 0x00000000 bytes.
Module 5ba22410:Size: 0x00000000 bytes.
module containing the method being examined, the output of the command will
Module does not have base address
module id, then that pending breakpoint is specific to function in that 
Module in 
Module Lookup Table heaps:
module name will look like this:
Module Thunk heaps:
module, such as mscorlib or image00400000.
Module:
Module:          %s
Module:       %s
Module:       001caa38
Module:      %s
Module: 001caa38
Module: 001caa78
Module: 001e2fd8
Module: 10f028b0 (price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null)
Modules. For example:
Monday
MOPR1'0%
more complex. You need to make sure the mscordacwks.dll file that came with
More than %d heap segments, there must be an error
more useful aspects is that it will format the _stackTrace field, which is a 
movt 
movw 
mr-in
mr-IN
ms-bn
ms-BN
mscordac
mscordaccore
mscordacwks
mscordbi
mscoree.dll
mscorlib or image00400000.
ms-my
ms-MY
-mt       List only those objects with the MethodTable given
MTA Interfaces to be released: %d
MTA Interfaces to be released: 0
mt-mt
mt-MT
mul.ovf
mul.ovf.un
MultiByteToWideChar
multiple AppDomains.
multiple processors, you can expect to see a GC Heap of 400MB or more. The 
Must pass a valid expression
n %d 1 %d %d
n(Finalizer) 
N=|)H
N0L0J
name and a stack frame number are specified in the command line, CLRStack will show 
Name:
Name:               
Name:               %S
Name:               Unknown
Name:        %S
Name:        %S[
Name:       %S
Name:      %S
Name:      Shared Domain
Name:      System Domain
Name: Bank
Name: C:\pub\unittest.exe
Name: Customer
Name: Funny
Name: MainClass
Name: MainClass.Main()
Name: Mainy
Name: Price
Name: unittest.exe
Name: Value[]
name2ee
Name2EE
Name2EE                            FindRoots
native int
native uint
nb-no
nb-NO
nCipher DSE ESN:148C-C4B9-20661%0#
nCipher DSE ESN:B8EC-30A4-71441%0#
nCipher NTS ESN:57F6-C1E0-554C1+0)
negatives because a user is free to pass that GCHandle to unmanaged code that 
-nested
Nested exception -------------------------------------------------------------
network down
network reset
network unreachable
network_down
network_reset
network_unreachable
newarr
newobj
NEWVALUE
nl-BE
nl-be
nl-nl
nl-NL
nn-NO
nn-no
no buffer space
No CCW pointer specified
no child process
No duplicate promote or relocate messages found in the log.
No EH info available
No GC info available
no gc mode
No heap corruption detected.
no link
no lock available
no memory for a new seg
no message
no message available
no protocol option
no space on device
no stream resources
No Stress log in the image, GCHist commands unavailable
No Stress log in the image, no file written
no such device
no such device or address
no such file or directory
no such process
no_buffer_space
no_protocol_option
-nofields
-nofields has no effect unless -details is specified
-nofields:     do not print fields of the object, useful for objects like 
-nofuturemodule
NoName
non-static values won't because you need an instance of an object for that.
Normal JIT generated code
Normal JIT:03ef0000(00010000:00002000) Size: 0x00002000 bytes.
-nostacks
not a directory
Not a managed object
not a socket
not a stream
Not a valid exception object
not a valid MethodDesc
Not all SOS commands support DML output.
Not an array, please use !DumpObj instead
Not calculated
not connected
not enough memory
Not enough memory to read IL
Not jitted yet
Not JITTED yet.
Not JITTED yet. Use !bpmd -md %p to break on run.
Not JITTED yet. Use <exec cmd="!bpmd -md %p">!bpmd -md %p</exec> to break on run.
not supported
Not supported on mini dumps.
not_a_socket
not_connected
Note that !PrintException with no parameters will print out the last thrown
Note that CLR keeps track of which RCWs are bound to which managed objects through
Note that dynamic IL is constructed a bit differently. Rather than referring
Note that fields of type Customer and Bank are themselves objects, and you can 
Note that the Thread could have transitioned between
NOTE:
NOTE: THIS FILE CONTAINS SOS DOCUMENTATION. THE FORMAT OF THE FILE IS:
Notes
notification will cause a break in the debugger:
November
ns-za
ns-ZA
ntdll
ntdll!KiUserExceptionDispatcher
ntdll.dll
nt'joZ;
NtQueryInformationProcess
Number of characters requested: %d
Number of GC Heaps: %d
Number of GC Heaps: 1
Number of IFaces in IFaceMap:
number of roots can share a common subgraph, and that part will be reported in 
Number of Timers: %d
NumInstanceFields:   %x
NumStaticFields:     %x
NumThreadStaticFields: %x
o 0x%p %d %d 
O0M0K
Object
object
Object
object %#p does not have valid method table
object %#p is a valid object
Object %p has no generation
Object %p is misaligned.
object %s contains free object %p at %p
Object %s contains free object %p at %p.
Object %s has a bad GCDesc.
Object %s has an invalid method table.
Object %s is too large.  End of segment at %p.
Object %s will survive this collection:
Object %s: %s missing card_table entry for %p
object %s: bad member %p at %p
Object %s: Bad member %p at %p.
Object %s: Failed to read members.
Object %s: Size %d is too small.
object %s: size %d too small
object %s:%s missing card_table entry for %p
Object %s:%s missing card_table entry for %p
object 00a73d24: does not have valid MT
object 01ee60dc: bad member 00000003 at 01EE6168
object 0x28000ec does not have valid method table
object 0x680017c: bad member 00000001 at 06800184
object and corrupt it:
Object header for %p should have a SyncBlock index of %d.
object in question. ThinLocks will not be reported by the !SyncBlk command. 
Object Inspection                  Examining code and stacks
object is not referenced by any "proper" root it may still be referenced by an 
object which correspond to the return value and parameters:
objects ready for finalization are also included in the statistics (if any).
objects through the !SyncBlk command.  You can find more information about RCW
Objects with Finalizers are the easiest case, as the CLR needs to be able to 
objects, such as a managed cache in a web server.
objects, there is a -nostacks option.
objsize
ObjSize
ObjSize                            CLRStack
October
of any objects pointed to by those handles. In calculating object size, 
of GC relocations that may have led to the address passed in as an argument.
of mscordacwks.dll, with names like mscordacwks_<architecture>_<version>.dll
of sos.dll functionality will be available. If needed, attaching to the live
of the signature.
of value classes, while others do not.
of work requests in the queue, number of completion port threads, and number of
offset
Offset
offset 
oIoX]i*
oK0D$"<
Older Generation:
older generations::Root:  068012f8(AAA.Test+a)->
older object (from an older generation), from a generation that has not yet been 
ole32.dll
on by default because very often in a debugging scenario, you are 
On x64 platforms, Transition Frames are not displayed at this time. To avoid
once you have the EEClass, you can run !DumpClass, which will display the
one is if the process is running out of VM space to reserve a segment; the other
One would issue the following commands to set breapoints on G3.F() and 
ones are discussed below:
only for that frame (provided you specify -l or -p or -a of course). If a variable 
only read %x bytes at %p
onto large amounts of memory it does not provide information regarding the 
OOM exceptions could be because of the following reasons:
OpenVirtualProcess2
OpenVirtualProcessImpl
operation canceled
operation in progress
operation not permitted
operation not supported
operation would block
operation_in_progress
operation_not_supported
operation_would_block
operator
option on to protect against running unsafe commands against small minidumps.
or is old (discarded) data. You would have to use !CLRStack and !U to 
or the module is loaded, but the function is not jitted yet. In these cases,
OriginalFilename
OS Thread Id: 0x%x 
other forms has occurred.  Now the debuggee is in the right state for 
Other Handles:
Other mechanisms enabled
out of memory
Out of memory
Outer IUnknown:    %p
Outer, the bpmd command would become:
Outer+ExplicitItfImpl, using the '+' separator, while the method name
OutOfMemoryException exception you can use the !PrintException command on it.
output is the return value (in this case a "void").  Finally, the method's arguments
output of !Threads into !ThreadState.
output to "interesting" threads only, which is defined by
OutputDebugStringW
owner dead
Page File         %8d     %8d
PagefileUsage:  %8d KB       PeakPagefileUsage:  %8d KB
pa-in
pa-IN
param_%d
parameters.
PARAMETERS:
PARAMETERS: (none)
Paremeters:
Parent Class:    %s
Parent Domain:      %s
Parent Domain: 0014f000
particular loaded module. If the pending breakpoint has a zero module id, then
particular managed exception, say a System.OutOfMemoryException, but continue
particular types, restrict to a range, or look for ThinLocks (see !SyncBlk 
particularly in the area of PInvoke/Interop. Adam Nathan has written some great
passed directly to !DumpStack. The -short option tries to narrow down the 
path is pointing to clr.dll as well.
pathto
PathTo
PDB symbol for clr.dll not loaded
PEB_LDR_DATA
PEFile 
PendingThread:
-perdomain
permission denied
permission_denied
Physical Memory   %8d     %8d
pinned
Pinned
PINNED 
pinned 
Pinned Handles:
PjdSQ
places:
Please ensure that %S is on your symbol path.
Please note the -aggregate parameter to !ObjSize has been removed.  Please see
Please provide the -addr argument for the address of the stress log, since no recognized runtime is loaded.
pl-pl
pl-PL
pointer for the method, or a code address within the method body. Unlike the
pointer if provided.
pointer in the output can be passed to !DumpModule. Any AppDomain pointer can 
Pointer table:
portion of the output is either "[hasThis]" or "[explicit]" for whether the method
positives. If you still suspect a leak, use this function over time to        
possibility is eliminated, consider contacting Microsoft Product Support for
Possible thread states:
post pin
post short
post short padded
PP9E u
PPh0/
PPhP/
PPPPP
PQh,d
PQQPSRh
PQSVW
PQVhL,
PQVWhP+
pre and post pin
pre pin
pre short
pre short padded
Preemptive
prefix1
prefix2
prefix3
prefix4
prefix5
prefix6
prefix7
prefixref
PreJIT
preJIT generated code
Presents an annotated disassembly of a managed method when given a MethodDesc
prev_obj_addr + prev_obj_size = arg_addr && arg_obj + arg_size = next_obj_addr
prev_obj_addr + prev_obj_size = next_obj_addr
prevent the garbage collector from moving an object during collection. These 
PREVVALUE
PRhx^
price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
print
printexception
PrintException
Printexception
PrintException (pe)                EHInfo
prints the type name and MethodTable they refer too. Sample output:
Private
PrivateBuild
Process Memory
process or debugging a full dump will allow access to sos.dll's full feature
Process Started at: %4d %s %2d %d:%d:%d.%02d
Process Times
process. It enumerates each Assembly loaded into those AppDomains as well. 
ProcessParameters
ProcInfo
procinfo
ProductName
ProductVersion
ProfilingAPIAttach 
ProfilingAPIDetach 
Program: 
programs. Functions are listed by category, then roughly in order of
programs. The -p parameter will show arguments to the managed function. The 
Prolog size: 
promote/reloc records in error 
Promoted?
Promotes
promoting GCs
Promotion for root %p (MT = %p)
Protect
protection applied to that memory (free, reserved, committed, private, mapped, 
protocol error
protocol not supported
protocol_not_supported
Provides a summary view of the virtual address space, ordered by each type of 
provides a warning about fragmentation:
PSAPI.DLL
Pseudo-register number must be between 0 and 19
PSP slot: 
PSPSym: 
PSSSSV
pt-BR
pt-br
pt-pt
pt-PT
public class ExplicitItfImpl : I1
public class ExplicitItfImpl<U> : IT1<U>
public class G1<T> {
public interface I1
public interface IT1<T>
public void F(T1 p1, T2 p2, T3 p3)
push 
PVht'
PVRh0
PWh _
PWh,,
PWWWWV
Q9N$u
QEX82q'
QPQPhp
QQh0/
QQSVW
QQSVWd
qSOS: warning, prejitted code optimizations could not be changed. This CLR version doesn't support the functionality
QSVWh
QueryPerformanceCounter
question:
Quitting at %p due to user abort
quz-bo
quz-BO
quz-EC
quz-ec
quz-PE
quz-pe
QVVVj
QVWSj
qword ptr [
qword ptr ds:[
R$;Q,r
r$t%d=0
r$t%d=1
r)f;q
r:xcf.
r~akow
r<unknown>
R0a0|0
R0P0N
r2f;A
R6002
R6008
R6009
R6010
R6016
R6017
R6018
R6019
R6024
R6025
R6026
R6027
R6028
R6030
R6031
R6032
R6033
R6034
RaiseException
RandomMove
RCW             %d
RCW is cleaned up.  If you are trying to debug an issue related to one of these
RCW:         %s
RCWCleanupList
rcwcleanuplist
Rcwcleanuplist
RCWCleanupList                     VMStat
RCWs, then you can use the !RCWCleanupList function to display which COM objects
read only file system
ReadConsoleW
ReadFile
readonly.
ReadVirtual failed with code hr = %x.
Ready for finalization %d objects 
Ready for finalization 0 objects (0015bca0->0015bca0)
READYFORMANAGEDCODE
Reason: %s
Reason: Didn't have enough memory to allocate an LOH segment
Reason: Didn't have enough memory to commit
receive news of module loads and JITs, at which time it will try to resolve 
Redmond1
Ref Count Handles:
Ref count:         %d%s
ref counted
refanytype
refanyval
RefCounted
RefCounted Handle: %p%s
reference count:
Reference found in stress log will be ignored
reference the object:
reference to the underlying COM object is no longer needed, the corresponding
reference. This might be a stack address or a field within an object, for 
Reflection 
-refs
ReJITed versions:
Relocation %s for root %p
Relocs
rem.un
Reported Dead
reported frame register
reported invalid pointer
reported pointer relative to wrong base register
reported register in caller's frame
Reserve
Reserve:
resource deadlock would occur
resource unavailable try again
restrict(
result out of range
rethrow
Return Kind: %s
reused seg with best fit
reused seg with normal fit
Root %p promoted multiple times in gc %d
Root %p relocated multiple times in gc %d
root specified as the argument.
Roots
roots (You can use !GCRoot to find out). The statistics section provides a 
roots are keeping it alive. Or you can find all objects of that type with 
ro-RO
ro-ro
RPVQS
RPVQW
RQh8(
RQhH(
Rt%hTf
RtlUnwind
run !DumpObj on them too. You could look at the field directly in memory using
run against a minidump.
running "!DumpArray %p".
running if other exceptions are thrown. The command can be used in two ways:
runtime error 
Runtime Error!
RuntimeCallableWrappers (RCW) to be cleaned:
ru-ru
ru-RU
RVSQj
RVSQSWV
RVSWh
s~h`v
S0Q0O
s4h`v
S9V\u`j`
Safe critical
sa-IN
sa-in
same directory as the main CLR dll (CLR.DLL). Newer versions of the 
Sample output for a field:
Sample output for a method:
Sample output:
Saturday
savemodule
SaveModule
SByte
Scalar
scan wouldn't be able to find those.                                          
scheduled for collection.  At this point !FindRoots will search those older 
searches.
Searching %p...
Searching memory
section %d - VA=%x, VASize=%x, FileAddr=%x, FileSize=%x
section 0 - VA=1000, VASize=e82da9, FileAddr=400, FileSize=e82e00
section 1 - VA=e84000, VASize=24d24, FileAddr=e83200, FileSize=ec00
section 2 - VA=ea9000, VASize=5a8, FileAddr=e91e00, FileSize=600
section 3 - VA=eaa000, VASize=c183c, FileAddr=e92400, FileSize=c1a00
Security
Security object: 
SecurityDescriptor: %p
SecurityException Message: 
See "!help bpmd" for more details.
see that only generation 0 (the youngest generation) has any objects registered
See the documentation for !DumpStack for more info.
se-fi
se-FI
segment
se-no
se-NO
September
Server mode with %d gc heaps
se-SE
se-se
SetDefaultDllDirectories
SetEndOfFile
SetFileInformationByHandleW
SetFilePointer
SetFilePointerEx
SetLastError
SetStdHandle
SetThreadpoolTimer
SetThreadpoolWait
SetThreadStackGuarantee
Setting breakpoint: %s [%S]
SetUnhandledExceptionFilter
Shared
shared
Shared Domain
Shared Domain:      %s
Shared Domain: 5e066970
short
-short
-short    Limits output to just the address of each object. This allows you
-short    Limits the output to just the address of each object.  If used in 
should be used sparingly, and for short periods of time. If you don't follow 
should only need to execute "!CLRStack -i", and from there, click on the DML 
show the mapping between metadata tokens and types/methods in a friendlier way. 
shr.un
Shutdown 
ShutdownHelper 
signature itself.  By trial and error you should be able to find various elements
signature that has been corrupted in some manner you can use !DumpSigElem to read out 
signed byte
signs of corruption. It walks objects one by one in a pattern like this:
similar to !DumpObj. Although static field values will be displayed, 
Simple Context information:
SING error
Single
Size of parameter area: %x
Size:        %d(0x%x) bytes
Size:        %I32d(0x%I32x) bytes
Size: 0x%I32x (%I32lu) bytes
Size: 132(0x84) bytes
Size: 20(0x14) bytes
Size: 28(0x1c) bytes
Size: Expected '0x%x', Actual '0x%x'
sized ref
SizedRef
SizedRef Handles:
sizeof
sizeof(%p) = %d (0x%x) bytes (%S)
sizeof(00a79d40) =      152 (    0x98) bytes (Customer)
SizeOfImage
Skipping allocation context: [%#p-%#p)
sk-SK
sk-sk
Sleep
Slots in VTable:
sl-si
sl-SI
Small
Small            4,096         65,536         43,957         41      1,802,237
Small            4,096         65,536         48,393         27      1,306,611
sma-no
sma-NO
sma-se
sma-SE
smj-NO
smj-no
smj-se
smj-SE
smn-FI
smn-fi
sms-fi
sms-FI
So the total size of the GC Heap is only 72K. On a large web server, with 
So|//
SOH:%3d%% LOH:%3d%%
Some functionality may be impaired
Some handles were not found. If the number of not-found handles grows over the
Sometimes the  source of a memory leak is a GCHandle leak. For example, code
SOS can't retrieve local names at this time, so the output for locals is in
SOS error: GetClrModuleImages failed hr=0x%x
SOS error: IXCLRDataModule->GetFileName failed hr=0x%x
SOS Error: Out of memory
SOS Error: Unable to CoCreateInstance class=CLSID_CorSymBinder_SxS, interface=IID_ISymUnmanagedBinder3, hr=0x%x
SOS Error: Unable to get symbol path length. IDebugSymbols3::GetSymbolPathWide HRESULT=0x%x.
SOS Error: Unable to get symbol path. IDebugSymbols3::GetSymbolPathWide HRESULT=0x%x.
SOS Error: Unable to query IDebugSymbols3 HRESULT=0x%x.
SOS failure
SOS failure!
SOS is a debugger extension DLL designed to aid in the debugging of managed
SOS Version: %u.%u.%u.%u
SOS Warning: Loading symbols for dynamic assemblies is not yet supported
SOS warning: No symbols for module %S, source line breakpoints in this module will not bind hr=0x%x
SOS.dl
SOS.dll
SOS.DLL:
SOS.pdb
SOS: Failed to register callback events
SOS: warning, optimizations for this module could not be surpressed because an optimized prejitted image was loaded
SOS: warning, optimizations for this module could not be surpressed hr=0x%x
SOS: warning, prejitted code optimizations could not be changed at this time. SetDesiredNGENCompilerFlags hr = 0x%x
SOS: warning, prejitted code optimizations could not be changed at this time. This setting is fixed once CLR starts
SOS: warning, prejitted code optimizations could not be changed. Failed to load ICorDebug HR = 0x%x
SOS: warning, prejitted code optimizations could not be changed. GetDesiredNGENCompilerFlags failed hr=0x%x
SOS: warning, prejitted code optimizations could not be changed. This CLR version doesn't support NGEN
SOSFlush
sosflush
Source file:  %s @ %d
Source file:  c:\Code\prj.mini\exc.cs @ 39
SP/REG  Object   Name
space there is in each generation on each heap.  If the -inclUnrooted option is
-special
Special thread information is not available in mini dumps.
Special thread type
-special:  optional. With this switch, the command will display all the special
specified in the command line, CLRStack will show you the parameters and/or locals 
specified the report will include information about the managed objects from the
Specifying -short will inhibit any display related to SyncBlocks or RCWs.
SPPP+
sq-al
sq-AL
sr-ba-cyrl
sr-BA-Cyrl
sr-BA-Latn
sr-ba-latn
SRQPh@
sr-SP-Cyrl
sr-sp-cyrl
sr-sp-latn
sr-SP-Latn
SSh0/
SShlx
SSSSS
SSWPj
STA Interfaces to be released: %d
STA Interfaces to be released: 1
Stabilizing
stack
Stack Crawl Needed
Stack walk complete.
stack, check the AppDomain of that stack with !threads.
StackTrace (generated):
StackTraceString: 
Stage:              %s
starg
starg.s
Start
-start
start     Begin listing from this address
start    end        module name
Start    Stop     Length    AllocProtect  Protect       State    Type
Start index out of range
start. If you pass the "-MD" flag, you'll also see a list of all the methods 
-startAtLowerBound 
Starvation
-stat
-stat     Restrict the output to the statistical type summary
State
state not recoverable
statement will set MyObject to be owned by the current thread. A SyncBlock will
statement. !SyncBlk will detect this with the following output:
static
static public void G<W>(W w)
Statistics for all finalizable objects (including all objects ready for finalization):
Statistics for all finalizable objects that are no longer rooted:
Statistics:
stelem
stelem.i
stelem.i1
stelem.i2
stelem.i4
stelem.i8
stelem.r4
stelem.r8
stelem.ref
stfld
stind.i
stind.i1
stind.i2
stind.i4
stind.i8
stind.r4
stind.r8
stind.ref
stloc
stloc.0
stloc.1
stloc.2
stloc.3
stloc.s
stobj
Stoponexception
stoponexception
StopOnException
stream timeout
Stress log address = 0x%p
Stress log in module 0x%p
STRESS LOG:
StressLog TaskSwitch Marker
StressLog.txt
StressLogSize is the size in bytes of the in-memory log allocated for each 
strike: Failed to store segment
String
string
STRING %x
string too long
String Value
String:      
String[100]" actually creates a System.Object array, but it can only hold
StringFileInfo
-strings
-strings  Restrict the output to a statistical string value summary
Strong
strong
Strong and Pinned GCHandles are reported at this time. You can safely abort the
Strong Handles:
struct
struct, and lives on the stack or within an Object on the GC heap. You need
structure and need to know what its contents are.
structures from the stress log saved in the debuggee.  This is achieved by the 
stsfld
StubHeap:          
StubHeap:           %p
StubHeap:008fa000(00002000:00001000) Size: 0x00001000 bytes.
StubHeap:0090a000(00002000:00001000) Size: 0x00001000 bytes.
StubHeap:0092a000(00002000:00001000) Size: 0x00001000 bytes.
sub.ovf
sub.ovf.un
succeeding the address passed in:
SUCCESS: GCHist structures initialized
SUCCESS: Stress log dumped
Summary
Summary          4,096     16,703,488        816,005         50     40,800,250
Summary          4,096    974,778,368     47,249,646         43  2,031,734,778
-summary" debugger command will show you the largest free region in the VM. For
Sunday
SupportsIInspectable 
SupportsUpdateableMethods
Suspend Unstarted
SuspendEE 
sv-fi
sv-FI
sv-se
sv-SE
SVWhDe
SVWj@
SVWj`
SVWj8
SVWj8j
SVWjA_jZ+
SVWjHj
SVWjXj
SVWPP
SVWUj
SWhTx
switch
SwitchToFiber
sw-KE
sw-ke
sxe %s "!soe %s %s %d;.if(@$t%d==0) {g} .else {.echo '%s hit'}" %x
sxe -c "!HandleCLRN" clrn
symbols for the managed module containing the given <code address>, and if the 
SymFindFileInPath failed for %S. HRESULT=0x%x.
SymFindFileInPathW
Sync Suspended
SyncBlk
syncblk
SyncBlk                            HeapStat
SyncBlock
SyncBlock %d corrupted, points to invalid object %p
SyncBlock %d is invalid%s
SyncBlocks to be cleaned by the finalizer thread:
SyncBlocks to be cleaned up: %d
SyncBlocks to be cleaned up: 0
syr-SY
syr-sy
System
system
System Domain
System Domain:      %s
System Domain: 5e0662a0
System.__ComObject class, and when objects of this type are collected, and a
System.Enum
System.Object
System.Object arrays that are constrained to contain Strings. ("new 
System.RuntimeType
System.RuntimeType+RuntimeTypeCache
System.Security.SecurityException
System.String object pointers). You can use -type in a special way to find
System.ValueType
SystemTimeToTzSpecificLocalTime
SZARRAY
SZArray
t %d 0 %S
t!hXC
t!WhPz
t$(h4&
T$(Rj
T$,;\$`r
t$0ht&
t$8hd&
t&h(u
t(PVS
t)j\W
t*h,2
t.QSh
t/HHt
t;Ht+
t@VSP
t+Vh`
t3Gf;
T5fgr|
t5h@`
t7Shl
t8Shl
tail.
ta-IN
ta-in
tAj P
take the MethodTable pointer in the MT column, and the Value and pass them to 
Task Reset
Task was switched from %x
tChxd
TEB information is not available so a stack size of 0xFFFF is assumed
te-in
te-IN
TerminateProcess
text file busy
that can provide full or partial output are:
That indicates a serious problem. See the help for !VerifyHeap for more 
that install is on your symbol path, and you need to load the corresponding
that is locked by a thread. In version 2.0 of the CLR and above, a mechanism 
that log out to a file. If no Filename is specified, the file "Stresslog.txt" 
that precept, the gc heap can become very fragmented.
That said, if a serious leak is going on, you'll get a ever-growing set of 
that shows up in a run of !Threads.
that the Windows Debugger can load. If you have the correct symbol path to the
That will load the SOS extension DLL from the same place that CLR.DLL is 
The !AnalyzeOOM command aims to help you with investigating 1) which is the most
the !FindRoots command:
The !Threads command outputs, among other things, the state of the thread.
The "-gen" form causes the debugger to break in the debuggee on the next 
the "size" is displayed as 0:
The "Source line" output will only be present if the debugger can find the 
The abbreviation !do can be used for brevity.
The abbreviation !dso can be used for brevity.
The abbreviation !pe can be used for brevity.
The actual offsets that you should add are determined by the contents of the
the address of the signature:
The APT column gives the COM apartment mode. 
The arguments in detail:
The base address of an image can be found with the "LM" debugger command:
the breakpoint applies to modules that have not yet been loaded. Use 
The column VT contains the value 1 if the field is a valuetype structure, and
the command !DumpVC.
The command !FindRoots can only be used after the debugger stopped on a CLRN GC notification.
The command considers the heap as "locally consistent" if:
The command has diagnostic output which doesn't need to be repeated here. One 
The command looks for the address in the GC heap that looks like a valid 
the current AppDomain for each thread.
the current stack. Combined with the stack tracing commands like K and 
The current thread is unmanaged
the debugger must be configured to load the line number information from
The -derived option will cause StopOnException to set the pseudo-register to
The diagnostic output indicates that the operation was successful. If 
The Domain column indicates what AppDomain the thread is currently executing
The EEClass is a data structure associated with an object type. !DumpClass 
The elements of this signature can be obtained by adding offsets into the signature
The first column is the OS thread ID for the thread appending to the log, 
The first command is "contents" which is the general help screen. The rest 
The first section of the output is the calling convention.  This includes, but is not
the fly. Happily it works for non-dynamic code as well.
the format <local address> = <value>. The -a (all) parameter is a short-cut
the freachable queue of the finalizer. Some caution about the stack roots: 
the function to a breakpoint. -nofuturemodule can be used to suppress 
The garbage collector data structures are not in a valid state for traversal.
the GC heap (in Server GC it displays OOM, if any, on each GC heap). 
The GC heap is divided into generations, and objects are listed accordingly. We
the GC Heap to grow larger as objects are being kept alive, referenced only   
the handle in a non-standard way, perhaps with some bits flipped. The memory  
The -i option is a new EXPERIMENTAL addition to CLRStack and will use the ICorDebug
The -i options uses DML output for a better debugging experience, so typically you
The information for the Garbage Collector lists the ranges of each Segment in 
The last form of this command is meant to be used after the break caused by the 
the latter scenario you can look at the "Memory\% Committed Bytes In Use" see
The loader output lists various private heaps associated with AppDomains. It 
the log comes from.
The log facilities are defined as follows:
the managed heap. This can be useful if you believe you have an object pointer.
The Maps listed map metadata tokens to CLR data structures. Without going into 
the method. You can also obtain this information with the !GCInfo command.
The module you are "browsing" with Name2EE needs to be loaded in the process. 
The module you are "browsing" with Token2EE needs to be loaded in the process. 
The most common handles are "Strong Handles," which keep the object they point 
the offset given. "dd a79d40+8 l1" would allow you to look at the bank field 
The optional argument addr allows one to specify a stress log other then the 
The other cases should be fairly obvious from the callstack.
The output contains all COM interface pointers that the RCW holds on to, which
The output contains the COM reference count of the CCW, which is useful for
the output is very noisy and potentially confusing. The command is good for
The percentage column contains a breakout of free or unrooted bytes to total bytes.
the process
The process of answering the question would go something like this:
The pseudo-register number is optional. If you don't pass a number, SOS will 
The root value obtained from !HistObjFind can be used to track the movement of 
the second column is the timestamp, the third is the facility category for the 
the size of all the roots that reference the subgraph.
the size.
The start/end parameters can be obtained from the output of !EEHeap -gc. For 
the symbol files. Use the ".lines; .reload" command to achieve this.
the SyncBlock of the object.  As such, you can see more information about RCW
The type is declared in the shared domain and other
The user dump currently examined is a minidump. Consequently, only a subset
the valid portions of it.
The version of SOS does not match the version of CLR you are debugging.  Please
The Windows Debugger syntax of <module>!<type> is also supported. You can
then you should replace "clr" with "coreclr".
There are 2 legitimate scenarios where GC would return OOM to allocation requests - 
There are nested exceptions on this thread. Run with -nested for details
there are no objects ready for finalization, presumably because they still have
There are three ID columns: 
There is a new option "-mt", which will display the types defined in a module,
There is no current managed exception on this thread
There is yet one more way to specify a module name. In the case of modules
There was no failure to allocate memory
There was no managed OOM due to allocations on the GC heap
there will be a minimal managed environment for executing SOS commands.
these arrays. Just pass "-type System.String[]" and those Object arrays will
These roots may be false positives.
tHh(u
tHHt*Ht#
thing to keep in mind is that anytime you search all of memory for a value, you
-thinlock
ThinLock owner %x (%p), Recursive %x
-thinlock Report on any ThinLocks (an efficient locking scheme, see !SyncBlk 
this behavior.
This brings up a good question: "I want to set a breakpoint on the main
This command allows you to examine elements of an array object.
This command allows you to examine the fields of an object, as well as learn 
This command allows you to take a image loaded in memory and write it to a 
This command dumps a single element of a signature object.  For most circumstances,
This command dumps the signature of a method or field given by <sigaddr>.  This is
This command examines all stress log relocation records and displays the chain 
This command is an aid in tracking down GCHandle leaks. It searches all of 
This command is not supported in a minidump without full memory
This command lists basic information about the ThreadPool, including the number
This command lists information about a COM Callable Wrapper. You can use
This command lists information about a MethodDesc. You can use !IP2MD to turn 
This command lists information about a Runtime Callable Wrapper. You can use
This command lists the objects registered for finalization. Here is output from
This command provides a verbose stack trace obtained by "scraping." Therefore
This command releases any resources used by the Hist-family of commands. 
This command runs !DumpStack on all threads in the process. The -EE option is 
This command shows the generation sizes for each heap and the total, how much free 
This command will display any managed objects it finds within the bounds of 
This command will print a "?" in the domain column if the type is loaded into multiple
This DynamicMethodDesc is not yet JITTED. Placing memory breakpoint at %p
This function allows you to turn a class name into a MethodTable and EEClass. 
This function allows you to turn a metadata token into a MethodTable or 
This function doesn't see much use, especially since a tool like ILDASM can 
This function is important for CLR Devs, but very difficult for anyone else to 
this function, then continue.
This indicates a bug in your application.
This indicates a bug in your application. It is most likely the result of calling an MSIL-compiled (/clr) function from a native constructor or from DllMain.
This is a bit field which corresponds to various states the thread is in.
This is a deadlock situation, as Thread A could take r1, and Thread B r2, 
This is because a Customer points to a Bank, has a name, and the Bank points to
This is dynamic IL. Exception info is not reported at this time.
This is likely to be a bug in GC
This is often easier than module and method name syntax. For example:
This is to handle the case where objects re-register themselves for finalization.
this log in the process. For example, 20 threads with 524288 bytes per thread 
This makes !SyncBlk useful for detecting managed deadlocks. Consider that the
This means that the CLR is not loaded yet, or has been unloaded. You need to 
This means TypeDef token 2 maps to a MethodTable with the value 0090320c. You 
This prints the Common Language Runtime version. It also tells you if the code 
this problem, and running with Managed Debugging Assistants is advised. If that
This token type is not supported
This usually means the installation of .Net Framework on your machine is missing or needs repair
This will format fields of any object derived from System.Exception. One of the
THREAD
THREAD  TIMESTAMP     FACILITY                              MESSAGE
Thread %3d
Thread %x (%S): %S: %d (0x%x) bytes (%S)
Thread %x:
Thread Abort Requested
thread exits.
thread in the process. In the case above, each thread gets a 64K log. You 
Thread Injection History
Thread Pool Worker Thread
Thread state = a030
ThreadCount:
ThreadOBJ
Threadpool
threadpool
ThreadPool
ThreadPool                         SaveModule
ThreadpoolWorker 
threads
Threads
threads. It also enumerates all GCHandles in the process, and totals the size 
threadstate
ThreadState
ThreadTimedOut
throw
th-TH
th-th
Thursday
-time
Time stamp: Expected '0x%x', Actual '0x%x'
timed out
timed_out
Timer 
timers.
tLjHR
TLOSS error
TlsAlloc
TlsFree
TlsGetValue
TlsSetValue
TLstatic
tn-za
tn-ZA
to a loaded, jitted or ngen'd function it will create a breakpoint with "bp".
To aid in diagnosing hard-to-reproduce stress failures, the CLR team added an 
to alive until the handle is explicitly freed. "Pinned Handles" are used to 
to be fully qualified.
To check the state of the thread, simply pass that bit field from the
To correctly specify explicitly implemented methods make sure to retrieve the
To create a full user dump use the command: .dump /ma <filename>
To examine log entries related to an object whose present address is known one 
To get a type name exactly right, first browse the module with ILDASM. You
To get the full callstack use the "kb" command in the debugger for that thread.
to know the MethodTable address to tell SOS how to interpret the fields, as
to metadata tokens, the IL points to objects in a managed object array. Here
to not optimize functions in the managed app by creating a file myapp.ini 
To see the managed exception(s) use the !Threads command which will show you 
To try again re-issue the !FindRoots -gen <N> command.
To try the command anyway, run !MinidumpMode 0
To turn on the stress log, set the following registry keys under
TODO: Implement GetFrameName
TOKEN %x
Token:       %p
Token: 0x02000002
Token: 0x02000003
Token: 0x02000004
Token: 0x02000005
Token: 0x0600000d
token_0x%8.8X
token2ee
Token2EE
Token2EE                           GCHandleLeaks
too many files open
too many files open in system
too many links
too many symbolic link levels
too much detail, you can examine memory at those addresses to find the 
too_many_files_open
TOTAL
Total
Total           %d
Total    %12I32u %12I32u %12I32u %12I32u
Total    132          24           24           80          
Total    307916       0            306196       0           
Total    337556       24           306968       8800        
Total  CPU time   : %d days %02d:%02d:%02d.%02d
Total %d objects
Total 4 objects
total 5 objects
Total 5 objects
total 619 objects
Total LoaderHeap size:   
Total LoaderHeap size: 0x15000(86016)bytes
Total Method Slots:  %x
Total Size   0x1201c(73756)
Total Size  0x5d73a8(6124456)
Total size:      
Total size:        
Total Size:              
Total size: 0x0(0)bytes
Total size: 0x2000(8192)bytes
Total size: 0x3000(12288)bytes
Total size: 0x6000(24576)bytes
Total size: 0x8000(32768)bytes
Total: %d
TotalSize
tQh(u
tracing roots...
Translation
Transparency:        %s
Transparency: %s
Transparency: Critical
Transparent
TraverseHeap
traverseheap
Traverseheap
TraverseHeap                       BPMD 
Traversing a gc heap failed
tRHtC
tr-tr
tr-TR
tt-ru
tt-RU
Tuesday
tUQhT`
Turn on Managed Debugging Assistants. These enable additional runtime diagnostics, 
turned on, then SOS will output DML by default.  Alternatively, you may leave
tyh(u
-type
TYPE           MINIMUM        MAXIMUM        AVERAGE  BLK COUNT          TOTAL
-type     List only those objects whose type name is a substring match of the 
Type "!help <functionname>" for detailed info on that function. 
Type MT:     %s
Type Name:   %S
type sets breakpoints on all already JIT-ted generic methods and sets a pending 
type:
TYPED
TypedByRef
typedbyref
TypeDef
TypeDefToMethodTableMap: %p
TypeDefToMethodTableMap: 03ec0010
typedref
TypedReference
TypeRef
TypeRefToMethodTableMap: %p
TypeRefToMethodTableMap: 03ec0024
Types defined in this module
types in a module with !DumpModule -mt <module pointer>.
Types referenced in this module
tzSVj
u vEj
u"PSh
u(hTe
u.PShX
u[Sht`
U0S0Q
u3h`~
u4Whh 
u5;G rx
uAj8P
uBjAYjZ+
uHj`P
UInt16
uint16
uint32
UInt32
UInt64
uint64
uint8
UIntPtr
u'j0X
uJSSR
uk-ua
uk-UA
Unable to build snapshot of the garbage collector state
Unable to decipher generated stack trace
Unable to determine bounds of gc heap
Unable to display fields
Unable to display GC handles.
Unable to find stress log via DAC
Unable to get AppDomain %lx
Unable to get AppDomain %p
Unable to get AppDomain information
Unable to get appdomain store
Unable to get array of AppDomains
Unable to get array of Assemblies
Unable to get array of Assemblies for the given AppDomain..
Unable to get array of JIT Managers
Unable to get code heap info
Unable to get codeHeader information
Unable to get IMetaDataImport for module %p
Unable to get information for %s.
Unable to get JIT info
Unable to get method name for MethodDesc %p
Unable to get module
Unable to get shared domain info
Unable to get symbol path length. IDebugSymbols3::GetSymbolPathWide HRESULT=0x%x.
Unable to get symbol path. IDebugSymbols3::GetSymbolPathWide HRESULT=0x%x.
Unable to get system domain info.
Unable to get the array of all AppDomains.
Unable to open file
Unable to parse line number
Unable to print IL for DynamicMethodDesc %p
Unable to query IDebugSymbol3 HRESULT=0x%x.
Unable to read module %p
Unable to set breakpoint with IDebugControl::Execute: %x
Unable to walk the managed stack. The current thread is likely not a 
Unable to write heap report
unaligned.
unbox
unbox.any
Undefined
understand xml format:
Unexpected special code %04X
UnhandledExceptionFilter
UNICODE
Unknown
unknown
UNKNOWN
unknown error
Unknown exception
Unknown handle type '%s'.
Unknown internal frame.
unknown Jit
Unknown Jit encountered, ignored
UNKNOWN METHODDESC
Unknown MethodDesc (Module %s, mdToken %08x)
Unknown Module
Unknown option: %s
unknown type
UNLOAD_REQUESTED
Unmanaged code
Unmanaged to Managed transition
UnmapViewOfFile
Unrooted objects:                                           Percentage
Unsafe minidump commands are %s.
UNSET
unsigned int
unsigned long
unsigned short
Unstarted
UnstartedThread:
Unsupported platform
Unsupported token type
Untracked:
unused
UQPXY]Y[
uR8^Xt2
ur-pk
ur-PK
URPQQh
Usage: !bpmd [-nofuturemodule] <module name> <managed function name> [<il offset>]
Usage: !bpmd <filename>:<line number>
Usage: !bpmd -clear <pending breakpoint number>
Usage: !bpmd -clearall
Usage: !bpmd -list
Usage: !bpmd -md <MethodDesc pointer>
Usage: !DumpVC <Method Table> <Value object start addr>
Usage: !ListNearObj <obj_address>
Usage: !Name2EE module_name item_name
Usage: !Token2EE module_name mdToken
Usage: DumpModule [-mt] <Module Address>
usage: HeapTraverse [-xml] filename
Usage: SaveModule <address> <file to save>
usage: StopOnException [-derived] [-create | -create2] <type name>
Use !PrintException %p to see more.
Use <exec cmd="!PrintException /d %p">!PrintException %p</exec> to see more.
use an asterisk on the left of the !, but the type on the right side needs
use pseudo-register $t1.
useful when you are debugging parts of the runtime which returns a raw PCCOR_SIGNATURE
User   CPU time   : %d days %02d:%02d:%02d.%02d
User interrupt.
user specfied compact LOH
User Suspend Pending
USER32.DLL
Using !DumpSigElem we can find the type of the field by adding the offset of it (1) to 
using an Object Pointer from the output of !DumpStackObjects:
using mark list
UTF-16LE
UTF-8
uz-UZ-Cyrl
uz-uz-cyrl
uz-UZ-Latn
uz-uz-latn
v$QSP
v(h(E
v4RPQ
Value
value of all static fields.
value too large
VALUEARRAY
ValueClass
VALUETYPE
valuetype 
VAR OR ARG %d
Varargs: %u
VarFileInfo
Variable
Variable Handles:
vector<T> too long
-verify
Verify that 1) you have a recent build of the debugger (6.2.14 or newer)
Verifyheap
verifyheap
VerifyHeap
verifyobj
VerifyObj
VerifyStackTrace
VerQueryValueA
version of sos.dll (typing .load <full path to sos.dll> rather than using the
VERSION.dll
very high memory load and frag
vhRPQ
view and expand arrays and fields for managed variables. If a stack frame number is 
viewing the complete call stack when "kb" gets confused. For best results,
Virtual Call Stub Heap:
Virtual Memory    %8d     %8d
VirtualSize:    %8d KB       PeakVirtualSize:    %8d KB
vi-VN
vi-vn
VMMap
vmmap
vmstat
VMStat
vnffy
volatile.
VQhLI
VQhTt
VS_VERSION_INFO
Vtable Slots:    %x
VVhhW
VVhP/
VVVVV
VWj`j
Wait 
wait until your managed program is running in order to use these commands. If 
WaitForThreadpoolTimerCallbacks
Walking heap...
Wants Report Only Leaf: %u
Warmup
Warning: These roots are from finalizable objects that are not yet ready for finalization.
Washington1
Wasted: 0x00001000 bytes.
Watson Bucket parameters:
WatsonBuckets
we are at the initialization or shutdown of the gc heap. Commands related to 
We can do something similar for fields.  Here is the full signature of a field:
We can look at the individual elements of this object by adding the offsets into the 
we don't support allocating objects larger than 2GB on CLR v2.0 or prior. And this
We have taken a return address into Mainy.Main, and discovered information 
weak long
Weak Long Handles:
weak short
Weak Short Handles:
Weak WinRT Handles:
WeakLong
WeakShort
WeakWinRT
Wednesday
well as memory usage statistics.
What else can you do with an object? You might run !GCRoot, to determine what 
When called with no parameters, !DumpDomain will list all the AppDomains in the
When called without arguments, !SyncBlk will print the list of SyncBlocks 
When called without options, the output is first a list of objects in the heap,
when calling !DumpSigElem:
When creating a minidump without full memory, special functions are called at
When the argument lies in the managed heap, but is not a valid *object* address 
When the condition is not satisfied:
when you do this kind of memory analysis it could an aftereffect and doesn't 
When you see methods with the name "[Frame:...", that indicates a transition 
Where are we getting these module names from? Run !DumpDomain to see a list of
where N is 0, 1, 2, or "any". OR
which are exposed to managed code.  This is exposed to managed code through the
which can be specified using the -ccw option. 
While running ObjSize with no arguments may point to specific roots that hold 
WideCharToMultiByte
will be in PreEmptive GC mode. 
will be released the next time a cleanup occurs.
will get an error message when running any other commands. A full memory dump
will provide more details about the CLR, including where clr.dll is 
will replace older ones on threads which have reached their buffer limit.
will show attributes, as well as list the fields of the type. The output is 
Windows Debugger provide a command to make it easy to load the right copy of 
with annotations that convert metadata tokens to names.
With no parameters, !ObjSize lists the size of all objects found on managed 
Wj XP
Wj0XP
Wj0XPV
work properly. !dumpheap and !verifyheap may incorrectly complain of heap 
Work Request in Queue: %d
Worker Thread:
WorkingSetSize: %8d KB       PeakWorkingSetSize: %8d KB
Workstation mode
would need to reissue the command.
would use this command. The output of this command contains all entries that 
WPh`$
WPhD$
WqVNHE
wrapper, the context, and the thread of the object.
WriteConsoleW
WriteFile
Writing %s format to file %s
Writing to file: %s
wrong argument
Wrong option: %s
wrong option: %s
Wrong option: stack selection wrong
wrong protocol type
wrong_protocol_type
WVQh8L
WVQSj
WVWh@
WWh,~
WWh0/
WWWWW
x j$j
x#;wHu
xh-ZA
xh-za
xppwpp
xpxxxx
xSVWjX3
XXXX 
y!h|/
Y_^][
Y__^[
y4RCC
y5h`8
y6;\$Hu
Yes.  SOS respects the .prefer_dml option in the debugger.  If this setting is
yfdp'
Yield Requested
YoJ1E
You can also obtain this information with the !EHInfo command.
You can also pass a stack range to limit the output. Use the debugger 
You can also run the debugger command .cordll to control the debugger's
You can break into your process, load SOS, take a snapshot of your heap with 
You can download the CLR Profiler from this link:
You can find out more about the AppDomain with the !DumpDomain command. Not 
You can get a Module address from !DumpDomain, !DumpAssembly and other 
You can get an EEClass to look at from !DumpMT, !DumpObj, !Name2EE, and 
You can pass "*" for <module name> to find what that token maps to in every
you can see that thread 3 is attempting to acquire the Resource 00a7a1a4, which
You can specify breakpoints by file and line number if:
You can use "!DumpHeap -thinlock" to list objects locked in this way.
You can use it in four ways: 
You could run !DumpObj on any of those pointers to learn more. In this example,
you get the notation "(nested exceptions)", you can get details on those
you have just started the program a good way to do this is to type 
You might find an object pointer by running !DumpStackObjects and choosing
you should use !DumpSig to look at individual signature objects, but if you find a 
you the parameters and/or locals for that frame, and will also show you the fields 
you would print this output out and read it alongside a disassembly of the 
your application. 
Your version of the runtime/DAC do not support this command.
yxxx+
yxxxS
YYj0X
YYjgYf9
YYt%hH&
z.9Wv
z?aUY
zc%C1
zh-chs
zh-CHS
zh-cht
zh-CHT
zh-CN
zh-cn
zh-HK
zh-hk
zh-MO
zh-mo
zh-sg
zh-SG
zh-tw
zh-TW
zu-za
zu-ZA
