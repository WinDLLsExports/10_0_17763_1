-------------------------------------------------
           *----------------- [%p] -------------------*
           MCI_CMD=0x%x MCI_RESPONSE_CMD=0x%x MCI_RESPONSE0=0x%x
           MCI_DATA_TIMER=0x%x MCI_DATA_LENGTH=0x%x MCI_DATA_CONTROL=0x%x
           MCI_POWER=0x%x MCI_CLK=0x%x MCI_ARGUMENT=0x%x
           MCI_RESPONSE1=0x%x MCI_RESPONSE2=0x%x MCI_RESPONSE3=0x%x
           MCI_STATUS=0x%x MCI_INTERRUPT0=0x%x MCI_INTERRUPT1=0x%x
           MCI_STATUS=0x%x MCI_INTERRUPT0=0x%x MCI_INTERRUPT1=0x%x MCI_FIFO_COUNT=0x%x
          *------------------------------------------*
    %s
 A^_^
 A_A^_
 A_A^A\
 CMD ERR
 CRC ERR
 Error
 FUNC NUM ERR
 GEN ERR
 http://www.microsoft.com/windows0
 Microsoft Corporation. All rights reserved.
 Operating System
 RANGE ERR
 Windows
'!CHL
!t$H@85qs
!This program cannot be run in DOS mode.
"Microsoft Window
#(-27<FP
$`2X`F
$Microsoft Ireland Operations Limited1
$Microsoft Ireland Operations Limited1&0$
%05x: %02x
%05x: %02x %02x
%05x: %02x %02x %02x
%05x: %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x %02x %02x
%05x: %02x %02x %02x %02x %02x %02x %02x %02x- ...
%Microsoft Windows Production PCA 2011
%Microsoft Windows Production PCA 20110
(&.-&.t_
(&u|I
)E9\$
)Microsoft Root Certificate Authority 20100
** UNKNOWN **
, AppCmd
, RdyForData
,NayKqxF0VsAgYuTmwrK2A/6+FA0Q7THGlKnKfPM+JPI=0Z
.00cfg
.data
.data$brc
.gfids
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.text
.text$mn
.text$mn$00
.text$mn$21
.xdata
?AeoBu
@@9x u
@8hEu
@8hEu[
@8hFu
@8iFu
@8jFr
@8jFu
@8pEu
@8qEu
@8qEu 
@8xED
@8yFH
@A^_^
@A^_^][
@A^A]_
@A_A^A\
@SUVWATAUAVAWH
@SUVWATAUAVH
@SUVWAVH
@SUVWH
@USVWATAVAWH
@wPfD9
[*[Q[
[5\[\
\#]F_
\$ UVWATAUAVAWH
\$HE3
\$HM+
\Q-]T
]/_f^
]t^T_
_DSM High Speed Capabilities: 0x%02X
_DSMH
`A_A^A]A\_^]
{ AVH
|$ ATAVAWH
|$ E3
|hK,_
}HLcC<H
~(%u A
<$*ud
<$*uP@
<$5u#D;
<$5uL
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
000004B0
0A^A\_
0A^A]A\_^
0A_A^_
0A_A^A\_^
0A_A^A]A\_
1(0&0
1/0-0
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
100701213655Z
111019184142Z
180703204550Z
180823202650Z
190726204550Z0p1
191123202650Z0
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
20180915012956.097Z0
20180915063442Z
20180916063442Z0w0=
229879+4379540
250701214655Z0|1
261019185142Z0
3I{7-U
3Vc6kM)
6M2$0
8A_A^A]A\_^][
9{8u%H
9}8tFH
9oP}^
9p8t 
9u8tNH
9x8tT
9Xr&M
A^A]A\_^
A_A^_
A_A^_^]
A_A^A\
A_A^A\_]
A_A^A\_^
A_A^A\_^[]
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_^]
ABRTH
ACMDL
AcReL
ACTIH
ACTIL
addr=0x%05x
address=0x%08x
ADMADescriptorSize
AlignmentRequirement
aO\UD
Ar|2H
Argument
ATAVAWH
B.reloc
B.rsrc
B@<5u9
BAD H
BaseClockFrequency
bcnt=%d
bGFIDS
BJhtKPY
Brqng
bsz=%d
bucketType1IoLatency
bucketType1IoSize
bucketType1IoType
C&L+Kh3
C@;CDv
Callback Routine
CardBga
CardCapabilities
CardIsLocked
CardIsWriteProtected
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
------------------------CID----------------------
CIS %.06x code=%.02x - END OF CHAIN
CIS %.06x code=%.02x link=%.02x
CISTPL_FUNCE (%d) FuncInfo %02x blksize %04x PSN %08x
CISTPL_FUNCE (0) blksize %04x transpeed %02x
CISTPL_FUNCE link %x not big enough for function %d
CISTPL_FUNCE link %x not big enough for function 0
CISTPL_FUNCE TPLFE_TYPE(%x) does not match for function %d
CISTPL_FUNCE TPLFE_TYPE(%x) does not match for function 0
CISTPL_FUNCID invalid id %x
CISTPL_FUNCID invalid link %x
CISTPL_MANFID fn(%d) code=%x, inf=%x
CISTPL_MANFID invalid link %x
CISTPL_VERS_1 fn(%d) %s %s
CISTPL_VERS_1 MfgText longer than Link
CISTPL_VERS_1 MfgText longer than MAX_IDENT_LENGTH
CISTPL_VERS_1 MfgText longer than MAX_MANFID_LENGTH
CISTPL_VERS_1 ProductText longer than Link
classes=0x%x
CMD H
CMD L
CmdLength
Command
Command Completed
Command completed.%nSD Host Physical Address: %1%nCommand: %2%nArgument: %3%nSize: %4
Command Issued
Command issued.%nSD Host Physical Address: %1%nCommand: %2%nArgument: %3%nSize: %4
CommandClasses
CompanyName
CompatType
compatType
CompatType: %d; _DSM Query: 0x%02X
CorrelationId
correlationId
CorrelationId
CRCTH
CRIMd(
------------------------CSD----------------------
d$ E3
D$ fD
D$ SDdtA
D$ SDdtH
D$(E3
D$@M+
D$0E3
D$HE3
D$PB;l
D8[$tYL
D8[$u
D8\$PtaD8
D8`EA
D8`EuxD
D8{$t
D8{$tW
D8{$u
D8=Zp
D81uT
D8c$t
D8k$u
D8s$u|L
D8X$u4D9i
D9`8t
D9{8t
D9g<u
D9o t.E8
D9o<u
D9o4D
D9x u
DbgPrintEx
DDR50Enabled
device cap=%I64u
DeviceCapacity
DMA not supported
DsmFunctionsSupported
DUMP finish.
DUMP open.
Dump READ action=%d, offset=0x%I64x, mdl=%p, length=0x%x
Dump WRITE action=%d, offset=0x%I64x, mdl=%p, length=0x%x
DUMPSD will retry.
dumpsd.pdb
dumpsd.sys
DUMPSD: 
E8f8t$H
E9rDI
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
ElapsedTime100ns
eMMC specific processing
Entering callback routine.%nSD Host Physical Address: %1
en-US
ErHwH
ErHwL
ErReH
Error
Error in bus transfer.%nSD Host Physical Address: %1%nError Code: %2%nError Count: %3
ERROR: length must be a multiple of 4 bytes
ErrorCode
ErrorCount
ErrorRecoveryWorker: err evts=0x%08x
ErrorRecoveryWorker: Sending CMD12
ErrorStates
ErToL
EtwWriteTransfer
EventData
EventMask
ExAllocatePoolWithTag
ExecuteWorkSynchronous: %s
ExFreePoolWithTag
Exiting callback routine.%nSD Host Physical Address: %1
ExpInterlockedPopEntrySList
ExpInterlockedPushEntrySList
ExQueryDepthSList
f9H<u*9
Failed (%x) to build power off work packet for %p
Failed (%x) to power off socket %p
FALSE
fdo  %p SdbusFxComponentIdle
fdo %p SdbusFxComponentActive
fdoext %p P-state change: current = %u, requested = %u, active percent = %u%%, active time = %ums, sample duration = %ums
fdoext %p P-state completed: P-state = %u
ffffff
fffffff
FileDescription
FileVersion
FunctionInfo
FunctionType
G,LcW8D
GHD9p
GQD9i
H WATAUAVAWH
H.data
H.idata
h.rdata
H+J H
HAL.dll
HalDmaAllocateCrashDumpRegistersEx
HalDmaFreeCrashDumpRegistersEx
HasManfid
HighCapacityEraseSize
HighCapacityWriteGroupSupported
HighCapacityWriteProtectSize
HighSpeedEnabled
HINIT
Host DeviceID %04x.%04x.%02x
hostRevision
HostRevision
HPI CMD Accepted
HPI CMD Issued
Hpi CMD sent to the hardware. IRP %1
Hpi CMD was accepted by the hardware. IRP %1
Hpi CMD worker exited. IRP %1 Reason: %2
Hpi CMD worker started. IRP %1
Hpi do not query EXT_CSD
Hpi EXT_CSD received: correct sector count %d
HPI IO
Hpi IO detected.%nSD Host Physical Address: %1%nHpi Count: %2
Hpi Query EXT_CSD
Hpi triggered state cleared
HPI Worker Process
HpiExitReason
HpiIoCount
HpiqL
HpiQL
HpiYL
HS200Enabled
HS400Enabled
I0G1-0+
ident
IDR L
IdReH
IFICH
Information
InternalName
Interrupt
Interrupt detected in ISR.%nSD Host Physical Address: %1%nEvents (masked): %2
Interrupt DPC entered.
Interrupt DPC exited.
Interrupt DPC scheduled.
Interrupt handling
IoBuildDeviceIoControlRequest
IoBuildPartialMdl
ioCountArray
IoDeviceInterface
IofCallDriver
IoInvalidateDeviceRelations
IoOtherBytes
IoOtherCount
IoQueueWorkItemEx
IoReadBytes
IoReadCount
IoTryQueueWorkItem
IoWriteCount
iSHp6
JIoWriteBytes
KeAcquireInStackQueuedSpinLockAtDpcLevel
KeAcquireSpinLockAtDpcLevel
KeBugCheckEx
KeCancelTimer
KeClearEvent
KeInitializeEvent
KeInitializeSpinLock
KeInsertQueueDpc
KeLowerIrql
KeQueryInterruptTimePrecise
KeQueryPerformanceCounter
KeQueryTimeIncrement
KeReleaseInStackQueuedSpinLockFromDpcLevel
KeReleaseSpinLockFromDpcLevel
KeSetCoalescableTimer
KeSetEvent
KeSetTimer
KeStallExecutionProcessor
KeSynchronizeExecution
KeWaitForSingleObject
KfRaiseIrql
L$ E3
L$ UH
l$ VWATAUAVH
L$@E3
L$@H3
L$@L+
L$`E3
L$`H3
L$0H3
L$PH3
L$XH3
L+A H
l<4uO
LastError
LcG<A
LcO<H
LcW<A
LcW<D
Legal_Policy_Statement
LegalCopyright
LEVL@
M0K0I
ManufactureMonth
ManufacturerDate=%02d/%04d
ManufacturerId
manufacturerId
ManufacturerId=%02x OEMId=%04x Rev=%02x PSN=%08x
ManufactureYear
max block len=%d
max trans rate=0x%x
MaxBlcokCount
MaxBlockLength
MaxBlockSize
MaxDataTransferRate
maxDeviceQueueCount
MaxHighFrequency
MaxNormalFrequency
maxOutstandingCount
maxReadWriteLatency_ms
mbcnt=%d
memcpy_s
MemFunction
MfgId
MfgInfo
MfgText
Microsoft
Microsoft Corporation
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1.0,
Microsoft Corporation1-0+
Microsoft Corporation1200
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp service
Microsoft Time-Stamp service0
Microsoft Windows0
Microsoft.Windows.Storage.SDBus
Microsoft-Windows-Sdbus
Microsoft-Windows-Sdbus/Analytic
Microsoft-Windows-Sdbus/Debug
MmBuildMdlForNonPagedPool
MmGetPhysicalAddress
MmMapIoSpaceEx
MmMapLockedPagesSpecifyCache
MmMapLockedPagesWithReservedMapping
MmUnmapIoSpace
MmUnmapLockedPages
MmUnmapReservedMapping
N0L0J
NeedsSoftwareRetuner
ntoskrnl.exe
NumIoFunctions
O0M0K
OemId
oK0D$"<
OPCOx
OriginalFilename
p WATAUAVAWH
P(D8xED
PA^A]A\_^][
PA_A^A]A\_^]
pA_A^A]A\_^]
pdo %p ActivateSocket RequestFunctionStart, activecount=%d
pdo %p ActivateSocket RequestFunctionStop, activecount=%d
PL180_SDHC Pl180SetEventMask(hwmask=%8.8x)
PL180_SDHC[%p - Pl180SetHighSpeed(set=%d)
PL180_SDHC[%p] - Pl180DetectCardInSocket
PL180_SDHC[%p] - Pl180InitializeCard)
PL180_SDHC[%p] - Pl180InitializeFunction
PL180_SDHC[%p] - Pl180InitializeSocket
PL180_SDHC[%p] - Pl180IsWriteProtected
PL180_SDHC[%p] - Pl180ResetHost
PL180_SDHC[%p] - Pl180SetBusWidth(wide=%d)
PL180_SDHC[%p] - Pl180SetPower voltage profile=0%x
PL180_SDHC[%p] DMA not supported)
PL180_SDHC[%p] Pl180AcknowledgeEvent(sw=%8.8x -> hw=%8.8x)
PL180_SDHC[%p] Pl180ClearStatusFlags cleared in %lld usec
PL180_SDHC[%p] Pl180ClearStatusFlags could not clear status flags in %lld usec (%8.8x)
PL180_SDHC[%p] Pl180DisableAllHostControllerInterrupts
PL180_SDHC[%p] Pl180GetPendingEvents(HW mask changed for CMD%d, new=%8.8x)
PL180_SDHC[%p] Pl180GetPendingEvents(hw=%8.8x -> sw=%8.8x)
PL180_SDHC[%p] Pl180GetResponse CMD%2d (type 0x%x, len=%d)
PL180_SDHC[%p] Pl180InitializeTransfer: DIR=%s METHOD=%d, BLOCKS=%d x %d
PL180_SDHC[%p] Pl180InitializeTransfer: transfer size must be multiple of 4
PL180_SDHC[%p] Pl180PrepareTransfer phase %d
PL180_SDHC[%p] Pl180QueryTransferMode = %d
PL180_SDHC[%p] Pl180SendCommand CMD%2d (Argument 0x%x)
PL180_SDHC[%p] Pl180SendCommand CMD%2d (Argument 0x%x) to start SD CARD not supported
PL180_SDHC[%p] Pl180SetClock(enable=%d, Freq=%d khz)
PL180_SDHC[%p] Pl180SetEventMask(new=%8.8x, changed=%8.8x)
PL180_SDHC[%p] Pl180SetEventMask: ignored in crash dump mode
PL180_SDHC[%p] Pl180StartTransfer phase %d
PL180_SDHC[%p] Pl180WriteDataPort (buff=%p, len=%d)
PL180_SDHC[%p] PlReadDataPort (buff=%p, len=%d)
Pl180ReadDataPort - ERROR! Stop Reading Data Error! Status(0x%x)
Pl180StartDevice: Host Register Base at %p, size %x
Pl180WriteDataPort - ERROR! Stop Writing Data Error! Status(0x%x)
Pl180WriteDataPort - ERROR! We did overrun the FIFO! FifoCount left(0x%x)
PlReadDataPort - ERROR! Stop Reading Data Error! Status(0x%x)
PlWriteDataPort - ERROR! Stop Writing Data Error! Status(0x%x)
PoFx Device Handle
PoFxActivateComponent
PoFxIdleComponent
PoFxPowerControl
PoFxSetComponentLatency
PoFxSetComponentResidency
PoSetHiberRange
PowerOffLongTimeout
PowerOffNotificationEnabled
PowerUpBusy
PresetValueEnabled
productId
ProductName
ProductName=%s
ProductText
ProductVersion
PRVAD
PScpH
PsReL
P-State change requested.%nPoFx Device Handle: %1%nP-State Active Percentage: %2%nP-State Active Duration: %3%nP-State Sample Duration: %4%nP-State Current Frequency: %5%nP-State Requested Frequency: %6
P-State change requested.%nPoFx Device Handle: %1%nP-State Completed: %2%nP-State Completion Count: %3
P-State change requested.%nPoFx Device Handle: %1%nP-State Requested: %2%nP-State Request Count: %3
P-State Completion
P-State Request
P-State Utilization
PStateActiveDuration
PStateActivePercent
PStateCompleted
PStateCompletionCount
PStateCurrentFrequency
PStateRequestCount
PStateRequested
PStateRequestedFrequency
PStateSampleDuration
QC_SDHC PlSetEventMask(hwmask=%8.8x)
QC_SDHC[%p - PlSetHighSpeed(set=%d)
QC_SDHC[%p] - Pl180SetBusWidthExplicit(width=%d)
QC_SDHC[%p] - PlDetectCardInSocket
QC_SDHC[%p] - PlInitializeCard)
QC_SDHC[%p] - PlInitializeFunction
QC_SDHC[%p] - PlInitializeSocket
QC_SDHC[%p] - PlIsWriteProtected
QC_SDHC[%p] - PlResetHost
QC_SDHC[%p] - PlSetBusWidth(wide=%d)
QC_SDHC[%p] - PlSetBusWidthExplicit(width=%d)
QC_SDHC[%p] - PlSetPower voltage profile=0%x
QC_SDHC[%p] ClearStatusFlags cleared in %lld usec
QC_SDHC[%p] ClearStatusFlags could not clear status flags in %lld usec (%8.8x)
QC_SDHC[%p] PlAcknowledgeEvent(sw=%8.8x -> hw=%8.8x)
QC_SDHC[%p] PlDisableAllHostControllerInterrupts
QC_SDHC[%p] PlDmaCompletionRoutine
QC_SDHC[%p] PlGetPendingEvents(HW mask changed for CMD%d, new=%8.8x)
QC_SDHC[%p] PlGetPendingEvents(hw=%8.8x -> sw=%8.8x)
QC_SDHC[%p] PlGetPendingEvents(ReadDmaCounter 0x%x)
QC_SDHC[%p] PlGetResponse CMD%2d (type 0x%x, len=%d)
QC_SDHC[%p] PlInitializeTransfer: DIR=%s METHOD=%d, BLOCKS=%d x %d
QC_SDHC[%p] PlInitializeTransfer: transfer size must be multiple of 4
QC_SDHC[%p] PlPrepareTransfer: phase %d
QC_SDHC[%p] PlPrepareTransfer: Unable to initialize DMA transfer context
QC_SDHC[%p] PlQueryTransferMode = %d
QC_SDHC[%p] PlReadDataPort (buff=%p, len=%d)
QC_SDHC[%p] PlSetClock(enable=%d, Freq=%d khz)
QC_SDHC[%p] PlSetClock(Freq=%d Khz -> HCLK_CTL=%8.8x, CLK_MD=%8.8x, CLK_NS=%8.8x)
QC_SDHC[%p] PlSetEventMask(new=%8.8x, changed=%8.8x)
QC_SDHC[%p] PlSetEventMask: ignored in crash dump mode
QC_SDHC[%p] PlStartTransfer: MapTransferEx failed: %08X
QC_SDHC[%p] PlStartTransfer: phase %d
QC_SDHC[%p] PlWriteDataPort (buff=%p, len=%d)
QC_SDHC[%p] SendCommand CMD%2d (Argument 0x%x)
QCI L
QCPrH
QueryCardInterrupts: CallBack: pdo=%p context=%p
QueryCardInterrupts: pdo %p int still in service
QueryCardInterrupts: skt %p pending_ints=%x, reg_cb=%x, cb_in_service=%x
R!s4Z
r~akow
R1UGY
READ failure offset 0x%I64x try %d status 0x%x.
ready
Redmond1
Request
RESET activation failed tries left %d status 0x%x.
RESET activation stage %d
RESET activation stage phase 2 %d
RESET activation.
Retune
RetuneCount
Retuning Sequence detected.%nSD Host Physical Address: %1%nRetuning Count: %2
RetuningTimerCount100ns
Revision
RlSAWpW4[m\
RtlCompareMemory
s WAVAWH
s"zuN
Scheduled callback routine.%nSD Host Physical Address: %1
SCS_CARD_DETECTED
SCS_CARD_ENUMERATED
SCS_NO_CARD
SD bus DPC
SD bus errors
SD bus request
SD Crashdump Port Driver
SD specific processing
SD_RESP           %d.%dV - %d.%dV, %s
SD_RESP           prevState=%s%s%s
SD_RESP CMD%d <== none
SD_RESP CMD%d <== R1 Card Status = %08x
SD_RESP CMD%d <== R2 %08x %08x %08x %08x
SD_RESP CMD%d <== R3 Mem OCR %08x
SD_RESP CMD%d <== R4 Io OCR %08x
SD_RESP CMD%d <== R5 %08x state=%d%s%s%s%s%s
SD_RESP CMD%d <== R6 RCA+Status %08x
SdAcH
SdAcI
SdAiA
SdAiH
Sdbus P-state frequency scaling
SDBus_Activation
SDBus_BatchedIOError
SDBus_CardDetails_Mem
SDBus_CardDetails_SDIO
SDBus_CardPerformance
SDBUS_ERROR_ACMD12_CWODAT_NOT_EXECUTED
SDBUS_ERROR_ACMD12_END_BIT_ERROR
SDBUS_ERROR_ACMD12_INDEX_ERROR
SDBUS_ERROR_ACMD12_NOT_EXECUTED
SDBUS_ERROR_ACMD12_RESPONSE_CRC_ERROR
SDBUS_ERROR_ACMD12_RESPONSE_TIMEOUT
SDBUS_ERROR_ADMA_ERROR
SDBUS_ERROR_BUS_POWER_ERROR
SDBUS_ERROR_CMD_CRC_ERROR
SDBUS_ERROR_CMD_END_BIT_ERROR
SDBUS_ERROR_CMD_INDEX_ERROR
SDBUS_ERROR_CMD_TIMEOUT
SDBUS_ERROR_DATA_CRC_ERROR
SDBUS_ERROR_DATA_END_BIT_ERROR
SDBUS_ERROR_DATA_TIMEOUT
SDBUS_ERROR_UNKNOWN
SDBUS_EVENT_BUFFER_EMPTY
SDBUS_EVENT_BUFFER_FULL
SDBUS_EVENT_CARD_CHANGE
SDBUS_EVENT_CARD_INTERRUPT
SDBUS_EVENT_CARD_RESPONSE
SDBUS_EVENT_CARD_RW_END
SDBUS_EVENT_DMA_COMPLETE
SDBUS_EVENT_ERROR
SDBUS_EVENT_SG_LIST
SDBus_IOError
SDBus_SocketCapabilities
SDBus_WorkingStatus
SdbusRequest
SdbusRequestComplete: SD Host Physical Address: %1 Irp: %2 Cmd: %3 Arg %4 Status %5
SdbusRequestStart: SD Host Physical Address: %1 Irp: %2 Cmd: %3 Arg: %4 Status: %5
SdbusStartDevice: Host Register Base at %p, size %x
SdbusWait: STALL %d
SdbusWait: wait %d
SdbusWorkerDpc
SdbusWorkerDpcEnter: SD Host Physical Address: %1 Irp: %2 Workpacket Function: %3 CurrentState: %4 FunctionPhase: %5
SdbusWorkerDpcExit: SD Host Physical Address: %1 Irp: %2 Workpacket Function: %3 CurrentState: %4 FunctionPhase: %5
SdCaH
SDDUMP RESET activation FAILED tries left %d
sdhc - clock is stable, enable clock
sdhc - clock ready
sdhc - controller version=%d
sdhc - DB DMA: physical=0x%08x, DBDMA physical=0x%08x, DBDMA length=0x%08x
sdhc - enable bus power: reg=%x
sdhc - failed to enable bus power: reg=%x
sdhc - failed to set voltage: reg=%x
sdhc - HACKFLAG LIE Support 1.8v (low voltage)
sdhc - HACKFLAG LIE Support 3.0v
sdhc - HACKFLAG LIE Support 3.3v
sdhc - Power off
sdhc - power stable
sdhc - SdhcInitializeCard
sdhc - SdhcInitializeController
sdhc - SdhcInitializeFunction(%d)
sdhc - SdhcInitializeSocket
sdhc - SdhcInitializeSocket: Global value 0x%x
sdhc - SdhcResetHost - reset issued type %d
sdhc - set voltage retried %d times before success
sdhc - set voltage: reg=%x
sdhc - skt %p SdhcSetClock - target=%d, base=%d, actual=%d, divisor=%d, register value=0x%x
sdhc - skt %p SEND: Cmd%d (0x%04x) arg = 0x%08x
sdhc - Support 1.8v (low voltage)
sdhc - Support 3.0v
sdhc - Support 3.3v
sdhc - Support 64 bit bus
sdhc - Support 8 bit bus width
sdhc - Support ADMA2
sdhc - Support DDR50
sdhc - Support DMA
sdhc - Support high speed
sdhc - Support SDR104
sdhc - Support SDR50
sdhc - turning off clock
sdhc - Use tuning for SDR50
sdhc - wait for clock to be enabled
sdhc - wait for clock to be stable
SDHC[%p] SdhcDmaCompletionRoutine
SDHC[%p] SdhcPrepareSystemDmaTransfer: Unable to initialize DMA transfer context
SDHC[%p] SdhcStartSystemDmaTransfer: ConfigureAdapterChannel failed: %08X
SDHC[%p] SdhcStartSystemDmaTransfer: MapTransferEx failed: %08X
SdhcInitializeSocketDma - Invalid DmaBufferSize: %d
SdhcInitializeSocketDma: can't handle > 4GB dma physical addresses!
SDHostPhysicalAddress
SDIO specific processing
SdMpH
SDR104Enabled
SDR50Enabled
SDWP_ACTIVATE_SOCKET
SDWP_BASIC_COMMAND
SDWP_DATA_COMMAND
SDWP_DESELECT_CARD
SDWP_DETECT_BUS_WIDTH
SDWP_DETECT_FRENQUENCY
SDWP_DETECT_HIGH_SPEED
SDWP_DISABLE_FUNCTION_INT
SDWP_ENABLE_FUNCTION_INT
SDWP_ENUMERATE_DEVICES
SDWP_ERASE_COMMAND
SDWP_GET_BUS_CLOCK
SDWP_GET_BUS_INTERFACE_CONTROL
SDWP_GET_BUS_WIDTH
SDWP_GET_FN0_BLOCKLEN
SDWP_GET_FUNCTION_BLOCKLEN
SDWP_GET_FUNCTION_INT
SDWP_GET_SOCKET_CARDDATA
SDWP_INIT_BUS_CLOCK
SDWP_INITIALIZE_CARD
SDWP_INITIALIZE_CARD_AND_VERIFY
SDWP_MMC_SLEEP
SDWP_MMC_WAKE
SDWP_POWER_OFF
SDWP_POWER_ON
SDWP_POWER_ON_AND_VERIFY
SDWP_QUERY_CARD_INTERRUPTS
SDWP_READ_DEVICE_CONFIG
SDWP_REFLECT_BUS_CLOCK
SDWP_REFLECT_BUS_WIDTH
SDWP_REFLECT_FN0_BLOCKLEN
SDWP_REFLECT_FUNCTION_BLOCKLEN
SDWP_REFLECT_FUNCTION_INT
SDWP_REFLECT_HIGH_SPEED
SDWP_SDIO_RESET
SDWP_SELECT_CARD
SDWP_SET_BUS_CLOCK
SDWP_SET_BUS_INTERFACE_CONTROL
SDWP_SET_BUS_WIDTH
SDWP_SET_FN0_BLOCKLEN
SDWP_SET_FUNCTION_BLOCKLEN
SDWP_SOCKET_RESET
SDWP_START_FUNCTION
SDWP_STOP_FUNCTION
SDWP_STOP_SOCKET
SDWP_UNSPECIFIED
SendCmdAsync ph(%d): CMD%d
SerialNumber
Signaling1_8VEnabled
skt  %p SD_SEND CMD%d ==> arg=%08x, rt=%d
skt %p ActivateSocket delaying(%d) for VERIFY_CARD_STATE
skt %p ActivateSocket START type(%d)
skt %p ActivateSocketComplete: start PDO failed and will retry: retry=%d, pdo=%p, type=%d
skt %p ActivateSocketComplete: status=0x%X
skt %p ActivateSocketComplete: verify socket failed and will retry: retry=%d
skt %p activateSocketWorker card state: %s
skt %p ActivateSocketWorker error exit, status=%X
skt %p activateSocketWorker switch to: %s
skt %p cardInSocket=%s
skt %p IO enable TIMEOUT
skt %p pio transfer: complete one block of data
skt %p SD_SEND ACMD%d ==> arg=%08x, rt=%d
skt %p SDHOST: ADMA Error Status = %08x
skt %p SDHOST: Auto Cmd12 Error Status = %08x
skt %p SDHOST: Clean error status
skt %p SDHOST: hwErrorStatus = %08x
skt %p SetEventMask:  new=%08x, changed=%08x
skt %p: Optimal Tap Tuning Success! TAP_VAL: %d, Phase: %d
skt %p: Retuning timed out, stop retuning procedure
skt %p: Start retuning procedure
skt %p: Tuning Failure! TAP_VAL: %3d, Phase: %d, Frequency: %6dkHz, Voltage: %4dmV
skt %p: Tuning Success! TAP_VAL: %3d, Phase: %d, Frequency: %6dkHz, Voltage: %4dmV
socket  %p SdbusWorkerSetRetuningTimer %08x
socket %p - needs software retuning
Socket %p powered off
SpecVersion
Start
state=ready
Status
STOPH
StringFileInfo
strstr
Support1_8VSignaling
Support64Bus
Support8BitBus
SupportAdma2
SupportAutoCmd23
SupportCurrentLimit200
SupportCurrentLimit400
SupportCurrentLimit600
SupportCurrentLimit800
SupportDDR50
SupportDma
SupportDriverType0
SupportDriverType1
SupportDriverType2
SupportDriverType3
SupportDriverTypeA
SupportDriverTypeB
SupportDriverTypeC
SupportDriverTypeD
SupportHighCapacity
SupportHighSpeed
SupportHS200
SupportHS400
SupportSDR104
SupportSDR50
SupportWideBus
systemUptime_s
t#H9H
t$ UWATAVAWH
t$ WATAUAVAWH
t$ WAUAVH
t$ WH
T$(E3
t$@8jF
T$@E3
t$`E3
t$08A$t
t$H9C
t(~)A
Task.CallbackRoutine
Task.CommandCompleted
Task.CommandIssued
Task.Error
Task.HpiCmdAccepted
Task.HpiCmdIssue
Task.HpiCmdWorker
Task.HpiIo
Task.Interrupt
Task.PStateCompletion
Task.PStateRequest
Task.PStateUtilization
Task.Retune
Task.SdbusRequest
Task.SdbusWorkerDpc
tc@8hFu]
tCL9g0t=
tDD8=
TEMP$
TEMP(
TEMP\
TEMP`
TEMPd
TEMPh
TEMPP
Thales TSS ESN:2AD4-4B92-FA011%0#
TIMEOUT failure offset 0x%I64x try %d.
timeSinceLastSentMS
TIU*X
tl                   SDBus_BatchedIOError: UnloggedErrorCount:%llu
TlP0X
TlUA\
tm=%d
totalIoCount
TransferDirection
TransferType
Translation
TTBL`
TUN A
TUN H
type1LatencyBucket0Count
type1LatencyBucket1Count
type1LatencyBucket2Count
type1LatencyBucket3Count
type1LatencyBucket4Count
type1LatencyBucket5Count
u"D8pFu
u.D8_Qu(3
u`D9`8u`D8
u><`@
U0S0Q
UATAUAVAWH
ueE8xFu_M
uHLcC<H
UnloggedErrorCount
Unspecified
UseTuningForSDR50
UVWATAUAVAWH
UVWAVAWH
UwD9B`u
VarFileInfo
vDbgPrintEx
vDbgPrintExWithPrefix
version
VHW{Z
VoltageProfile
VS_VERSION_INFO
VWATAUAVH
VWATAVAWH
VWAVH
Washington1
WATAUAVAWH
WATAVH
WAVAWH
we %p unexpected evts occurred: evts=0x%08x, err evts=0x%08x
WEVT@(
WEVT_TEMPLATE
WEXhX
Wide8BitBusEnabled
WideBusEnabled
Will attempt to power off (%x)
win:Info
win:Informational
win:Start
win:Stop
WorkEngine.Argument
WorkEngine.Command
WorkEngine.CurrentState
WorkEngine.FunctionPhase
WORKER_IDLE
WORKER_IN_PROCESS
WORKER_PACKET_PENDING
WORKER_WAITING_FOR_TIMER
WORKER_WAITING_INFINITE
WorkPacket.WorkerProcFunction
wp  %p   Overall transfer info: length=%d
wp  %p  enter low mem mode
wp  %p  GetScatterGatherList failed, transitioning to low memory mode 0x%x
wp  %p  Mapping address failed in low mem mode
wp  %p  next tran: len=%d
wp  %p _SdDumpBusWorker enter
wp  %p _SdDumpBusWorker exit processing
wp  %p _SdDumpReadWriteRequestAsync enter
wp  %p _SdDumpReadWriteRequestAsync exit %x
wp  %p _SdDumpReadWriteRequestSync enter
wp  %p _SdDumpReadWriteRequestSync exit %x
wp  %p ======== SdbusDataCommandWorker: begin I/O ========
wp  %p BasicCommand COMPLETE
wp  %p BasicCommand START
wp  %p BasicCommand: deselect command timed out
wp  %p BasicCommand: select command timed out
wp  %p bus clock set, freq=%d
wp  %p Can't map memory. Switch to low memory mode
wp  %p card is High Capacity Card: %d
wp  %p Card is locked, switching to high speed is illegal
wp  %p card locked, cannot switch to high speed
wp  %p card returns IO_READY
wp  %p card returns memory OCR: ocr=0x%08x, volt prof=0x%08x
wp  %p CardData is already in socket - known card
wp  %p CMD5 Response: #func=%d, ioOCR=%08x
wp  %p CMD8 succeeded. It is a 2.0 card
wp  %p cur evts=0x%08x; req evts=0x%08x; delay=%d; retries=%d
wp  %p cur fre=%d
wp  %p Current CCCR_BUS_CONTROL vale:%x
wp  %p DataCommandWorker card status reported card lock state is %x
wp  %p DataCommandWorker COMPLETE, Info=0x%x
wp  %p DataCommandWorker I/O error(0x%08x)! Info=0x%x
wp  %p DataCommandWorker TIMEOUT on card in transfer state %x
wp  %p DataTransfer zero length!
wp  %p DDR50 -> HS400 bus clock set, freq=%d
wp  %p DeselectCard Entered
wp  %p Disable pull-up resistor error!
wp  %p Disable pull-up resistor for memory card
wp  %p end - func %s; phase %d; status=0x%x
wp  %p enumerate MEM card fails
wp  %p enumerate MMC card fails
wp  %p err evts: 0x%x, cur evts=0x%08x
wp  %p Error: cannot set bus width if card is locked
wp  %p Error: memory block size should always be 512
wp  %p Error: the card does not support wide bus
wp  %p Error: the new block size is larger than the card's cap
wp  %p Error: the new block size is larger than the controller's cap
wp  %p Error: trying to set the block size to 0
wp  %p Events cleared: evts=0x%x
wp  %p Events have fired: cur evts=0x%08x, req evts=0x%08x
wp  %p Force to set high speed
wp  %p func(%d) didn't provide block size limit, uses 64 by default
wp  %p FunctionBlockLength enter
wp  %p GetDeviceConfig Entered
wp  %p Go delay: delay=%d
wp  %p Go waiting for events: req evts=0x%08x, retries=%d
wp  %p Go waiting infinitely for events: req evts=0x%08x
wp  %p hackflag disables 8-bit bus!
wp  %p high speed and UHS are not enabled. max high freq=%d
wp  %p High Speed is not supported: disabled (forced)
wp  %p High Speed is not supported: MMC card
wp  %p HighSpeedDetection Complete: support=%d, enabled=%d
wp  %p HighSpeedDetection entered
wp  %p HighSpeedDetection Failed
wp  %p ICW_CMD8_ERROR error handler!
wp  %p ICW_SEND_CMD8 - send CMD8
wp  %p INIT_IO - send CMD5
wp  %p INIT_MMC_MEM
wp  %p INIT_MMC_MEM - retry sequence after delay
wp  %p INIT_MMC_MEM - send CMD1
wp  %p INIT_MMC_MEM - send CMD1 for low voltage
wp  %p INIT_MMC_MEM error handler!
wp  %p INIT_SD_MEM
wp  %p INIT_SD_MEM - retry after delay
wp  %p INIT_SD_MEM - start setting operation condition
wp  %p INIT_SD_MEM error handler!
wp  %p InitializeCard ABORT!
wp  %p InitializeCard COMPLETE, rca=0x%08x
wp  %p INVALID cisPtr=%.06x
wp  %p invalid state switch(%d)!
wp  %p io card reset error handler!
wp  %p IO init FAILURE
wp  %p IO init TIMEOUT
wp  %p max high freq=%d, cur fre=%d
wp  %p max norm freq=%d
wp  %p mem card reset error handler!
wp  %p Missing: req evts=0x%x, cur evts=0x%08x
wp  %p MMC card returns initialized
wp  %p MMC High Speed is not supported: disabled (forced)
wp  %p mmc OCR: volt range=0x%08x, volt prof=0x%08x
wp  %p MMC Sleep Complete
wp  %p MMC Sleep Failed
wp  %p MMC Sleep Initiated
wp  %p MMC Wake Complete
wp  %p MMC Wake Failed
wp  %p MMC Wake Initiated
wp  %p MmcSoftReset ABORT!
wp  %p MSR_CMD1_LOOP_RESPONSE - retry sequence after delay
wp  %p New CardData - invalidating old card data
wp  %p ProcessTupleChain COMPLETE %08x
wp  %p ProcessTuplePacket returns 0x%08x
wp  %p PushEvent entered: engine state=%s, pending evts=0x%08x, new evts=0x%08x
wp  %p Read CSD Error!
wp  %p returning current clock frequency at %dKHz
wp  %p SD Combo card failed to initilize memory function!
wp  %p SD spec version=%d, support wide bus=%d, enable wide bus=%d
wp  %p SdbusArmWakeInterrupt Entered
wp  %p SdbusBusWidthWorker: UHS-I Read SCR Error!
wp  %p SdbusDetectBusWidthWorker: BUSTEST 4 Error!
wp  %p SdbusDetectBusWidthWorker: BUSTEST 8 Error!
wp  %p SdbusDetectBusWidthWorker: card is locked, unable to read SCR
wp  %p SdbusDetectBusWidthWorker: non-MMC 4.x memory card
wp  %p SdbusDetectBusWidthWorker: Read SCR Error!
wp  %p SdbusDetectBusWidthWorker: sdio card caps %x
wp  %p SdbusHighSpeedWorker entered
wp  %p SdbusHS400RetuningWorker completed
wp  %p SdbusHS400Worker completed
wp  %p SdbusHS400Worker entered
wp  %p SdbusMmcSoftResetWorker COMPLETE, rca=0x%08x
wp  %p SdbusWorkerQueuePacket enter: irp %p engine state=%s
wp  %p SDIO card capabilities=%x
wp  %p SDIO card sdio spec revision=%x
wp  %p SDIO card support async interrupt=%x
wp  %p SDIO card support high speed=%x
wp  %p sdio card: max norm freq=%d, max high freq=%d
wp  %p SDIO fn(%d) IoDeviceInterface=%x
wp  %p SDIO is disabled on this controller
wp  %p SDIO Process COMMON tuple chain: CCCR cisPtr=%.06x
wp  %p SDIO Process FUNCTION(%d) Tuple Chain: cisPtr=%.06x
wp  %p SDIO Reset Complete
wp  %p SDIO Reset Failed
wp  %p SDIO Reset Initiated
wp  %p SDIO SetHighSpeed init
wp  %p Select/Deselect Card Complete
wp  %p Select/Deselect Handle Command Timeout
wp  %p SelectCard Entered
wp  %p Set HS400 failed
wp  %p Set wide bus for memory function. bus width=%d
wp  %p Set wide bus for sdio function. bus width=%d, new BC=%x
wp  %p SetBusClock Entered
wp  %p SetBusWidth Complete
wp  %p SetFunctionBlockLen(mem) = %d
wp  %p SetFunctionBlockLen(sdio) = %d
wp  %p SetHighSpeed Failed
wp  %p SetHighSpeed failed
wp  %p SetHighSpeed succeeded
wp  %p skt %p BusWidthWorker entered
wp  %p skt %p disable card interrupt event
wp  %p skt %p enable card interrupt event
wp  %p skt %p InitializeCardWorker: ICW_START
wp  %p skt %p IntEnableWorker entered
wp  %p skt %p IntEnableWorker: workstat=0x%08x, cur mask=0x%08x, tar=0x%08x
wp  %p skt %p SdbusStartFunctionWorker enabled power off notifications
wp  %p skt %p SdbusStartFunctionWorker sent power off notification
wp  %p skt %p SdbusStartFunctionWorker succeeded: enabled func=0x%08x
wp  %p skt %p SetPowerWorker entered
wp  %p skt %p SetPowerWorker: parameter=0x%08x
wp  %p skt %p Socket now %s
wp  %p skt %p SocketReset complete
wp  %p skt %p SocketResetWorker entered, type %d
wp  %p skt %p StartFunctionWorker: func type=%d
wp  %p skt %p StopFunctionWorker succeeded
wp  %p skt %p update workstat: 0x%08x
wp  %p soft reset MMC card fails
wp  %p start - func %s phase %d
wp  %p STATE SWITCH %d => %d
wp  %p STATE SWITCH error=>normal
wp  %p transfer length is not correct
wp  %p Unhandled error: error status: %08x
wp  %p ValidateDeviceCommand - cmd blocked!
wp  %p ValidateDeviceCommand - invalid pdo state!
wp  %p Will set clock frequency at %dKHz enable %d
wp  %p Worker %s - COMPLETE 0x%08x
wp %p DataCommandWorker CardStatus Reported Error %x
wp %p HS200 -> High speed bus clock set, freq=%d
wp %p SdbusHS400Worker Status Error %x
Write
WRITE failure offset 0x%I64x try %d status 0x%x.
x ATAVAWH
x AVH
x AWH
X_^][
X2[V[
Y2Z^Z
z.9Wv
ZR!H3
