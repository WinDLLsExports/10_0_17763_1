 A_A^_
 A_A^A\
 A_A^A]A\_
 H3E H3E
 I;D$
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!\$XI
!|$HH
!}@!}0H
!This program cannot be run in DOS mode.
"|Js0
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%d)\%hs!%p: 
(_^][
(caller: %p) 
(L$PL
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVexception@std@@
.?AVResultException@wil@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.xdata
.xdata$x
;\$Ht
;E@s;H
?_Xlength_error@std@@YAXPEBD@Z
@.data
@.didat
@.reloc
@/;TF
@8,1u
@8==W
@A^_^
@A^_^[]
@A_A^A]A\_^[
@SUVWATAUAVAWH
@SVWATAUAVAWH
@SVWH
@USVWATAUAVAWH
@USVWAVH
@UWATAVAWH
[%hs(%hs)]
[%hs]
\$ UH
\$ UVWAVAWH
\$ VWAVH
\$(D!t$ L
\$`E3
__C_specific_handler
__CxxFrameHandler3
__std_terminate
_CxxThrowException
_initterm
_initterm_e
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vswprintf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__register_onexit_function
_o__seh_filter_dll
_o_free
_o_malloc
_o_towupper
_o_wcscpy_s
`.rdata
`A_A^_^]
`A_A^A]A\_^]
|$ AVH
040904B0
0A^_^
0A_A^_
0A_A^A]A\_
0A_A^A]A\_^[
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
3I9v@
9t$Ht
9t$Ht~I9v
9t$Lt
9t$Lt~I9v txH
9t$Pt
9t$Pt~I9v(txH
9t$Tt
9t$Tt~I9v0txH
A^_^[]
A_A^]
A_A^_
A_A^_^]
A_A^A\_[
A_A^A\_]
A_A^A\_^[
A_A^A]_[
A_A^A]A\_
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
A_A^A]A\_^][
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
AccountChange
Active
AdminCids
AllowFindMyDevice
Altitude
AltitudeErrorDistance
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-cryptoapi-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-stateseparation-helpers-l1-1-0.dll
ApiSetQueryApiSetPresence
AuthD
Authorization: 
AuthorizedCids
bad allocation
bad array new length
BatteryLevel
CallContext:[%hs] 
CBR((dwMsgFormat == c_bEncryptedNotification && !fIsSecureChannel) || (dwMsgFormat == c_bNon_EncryptedNotification && fIsSecureChannel))
CBR((pftWorkStarted != nullptr && pftWorkFinished != nullptr) || (pftWorkStarted == nullptr && pftWorkFinished == nullptr))
CBR((pParameters->m_pAdmins == nullptr && pParameters->m_pDeviceOwners == nullptr && pParameters->m_pStandardUsers == nullptr && pParameters->m_pConnectedAdmins == nullptr) || (pParameters->m_pAdmins != nullptr && pParameters->m_pDeviceOwners != nullptr && pParameters->m_pStandardUsers != nullptr && pParameters->m_pConnectedAdmins != nullptr))
CBR(*ppJsonValue == nullptr)
CBR(*ppMdmTransport == nullptr)
CBR(*ppRequest == 0)
CBR(*ppszArray == nullptr)
CBR(*ppWideCharBuffer == nullptr)
CBR(*ppwszBuffer == nullptr)
CBR(*ppwszCpn == nullptr)
CBR(*ppwszPin == nullptr)
CBR(::WinHttpAddRequestHeaders( m_hRequest, pwszContentType, (DWORD)wcslen(pwszContentType), 0x80000000 | 0x20000000))
CBR(::WinHttpAddRequestHeaders( m_hRequest, wstrCorrelationVectorHeader.c_str(), (DWORD)wstrCorrelationVectorHeader.length(), 0x80000000 | 0x20000000))
CBR(::WinHttpAddRequestHeaders( m_hRequest, wstrMainTicketHeader.c_str(), (DWORD)wstrMainTicketHeader.length(), 0x80000000 | 0x20000000))
CBR(::WinHttpAddRequestHeaders( m_hRequest, wstrSecondaryTicketHeader.c_str(), (DWORD)wstrSecondaryTicketHeader.length(), 0x80000000 | 0x20000000))
CBR(::WinHttpQueryHeaders( m_hRequest, 19 | 0x20000000, nullptr, (LPVOID)&dwHttpStatus, &cbHttpStatus, nullptr))
CBR(::WinHttpQueryHeaders( m_hRequest, 5 | 0x20000000, nullptr, (LPVOID)&cbContentLength, &cbSize, nullptr))
CBR(::WinHttpReadData( m_hRequest, pbBuffer, cbBuffer, &cbWinHttpRead))
CBR(::WinHttpReadData( m_hRequest, pstrBuffer, c_cbBufferSize, &cbWinHttpRead))
CBR(::WinHttpSetOption( m_hRequest, 47, 0, 0))
CBR(::WinHttpSetOption( m_hSession, 3, &c_dwConnectTimeout, sizeof(c_dwConnectTimeout)))
CBR(::WinHttpSetOption( m_hSession, 5, &c_dwSendTimeout, sizeof(c_dwSendTimeout)))
CBR(::WinHttpSetOption( m_hSession, 6, &c_dwReceiveTimeout, sizeof(c_dwReceiveTimeout)))
CBR(0 != MultiByteToWideChar( 65001, 0, (CHAR*)pbByteArray, cbByteArray, pszBuffer, nNeededLen + 1))
CBR(0 != pszBuffer)
CBR(0 != WideCharToMultiByte( 65001, 0, pwszArray, cchwszArray, pMultiByte, cbNeededLen + 1, nullptr, nullptr))
CBR(0 == memcmp(blobHash.pbData, blobHashed.pbData, c_rgdwCommandInfo[CmdInfo_Hash][1]))
CBR(0 == memcpy_s(pbIndexPtr, cbRemainingBufferSize, pstrBuffer, cbWinHttpRead))
CBR(0L == dwResult)
CBR(blobData.cbData > 0)
CBR(blobDataIn.cbData > 0)
CBR(blobEncrypted.cbData > 0)
CBR(blobHash.cbData > 0)
CBR(blobHashed.cbData == c_rgdwCommandInfo[CmdInfo_Hash][1])
CBR(blobSharedSecret.cbData > 0)
CBR(blobToHash.cbData > 0)
CBR(blobUnprotectedSecret.cbData > 0)
CBR(c_rgdwCommandInfo[CmdInfo_Hash][0] < cbCommandSize)
CBR(cbBinaryData > 0)
CBR(cbBuffer == cbWinHttpRead)
CBR(cbBuffer > 0)
CBR(cbCommand >= 1)
CBR(cbCommand >= 16)
CBR(cbCommand >= cbCpn)
CBR(cbCommand >= cbPin)
CBR(cbCommandSize > 0)
CBR(cbDataIn >= dwOffset + cbRead)
CBR(cbDataOut >= cbRead)
CBR(cbRemainingBufferSize == 0)
CBR(cbRemainingBufferSize >= cbWinHttpRead)
CBR(cbValue >= cbSize)
CBR(cchCids >= cchNeeded)
CBR(cchEncodedData > 0 && cchEncodedData % 4 == 0)
CBR(cMaxCount >= 1)
CBR(ConvertStringSidToSidW(propertyValue.calpwstr.pElems[i], &pSid))
CBR(ConvertStringSidToSidW(pwszSid, &pSid))
CBR(CryptAcquireContextA(phProv, 0, "Microsoft Enhanced RSA and AES Cryptographic Provider", 24, 0xF0000000 | 0x00000040))
CBR(CryptCreateHash(hProv, ((4 << 13) | (0) | 9), hKey, 0, &hHMACHash))
CBR(CryptCreateHash(hProv, algorithmId, 0, 0, phHash))
CBR(CryptDecrypt(hKey, 0, 1, 0, pbTempData, &dwSize))
CBR(CryptDeriveKey(hProv, ((3 << 13)|(4 << 9)|1), hHash, 0x00800000, &hKey))
CBR(CryptDeriveKey(hProv, algorithmId, hBaseHash, 0, phKey))
CBR(CryptGetHashParam(hHash, 0x0002, 0, &cbBuffer, 0))
CBR(CryptGetHashParam(hHash, 0x0002, pbBuffer, &cbBuffer, 0))
CBR(CryptGetHashParam(hHMACHash, 0x0002, 0, &pblobHMACHash->cbData, 0))
CBR(CryptGetHashParam(hHMACHash, 0x0002, pblobHMACHash->pbData, &pblobHMACHash->cbData, 0))
CBR(CryptHashData(hHash, (PBYTE)wstrString.c_str(), (DWORD)wstrString.length() * 2, 0))
CBR(CryptHashData(hHash, blobHash.pbData, blobHash.cbData, 0))
CBR(CryptSetHashParam(hHMACHash, 0x0005, (BYTE*)&hmacInfo, 0))
CBR(CryptUnprotectData(const_cast<DATA_BLOB*>(&blobDataIn), 0, 0, 0, 0, 0, pDataOut))
CBR(dwResult == 0L)
CBR(dwSecKeyId == dwCurrentSecretId || dwSecKeyId == dwUpdatingSecretId)
CBR(dwSize > 0)
CBR(dwSize >= 0 && dwSize < 2147483647L)
CBR(dwType == ( 1ul ) || cbSize <= 1 || (cbSize & 0x1) != 0)
CBR(eTrigger != MdmRegistrationTrigger_Unknown)
CBR(hComplete.m_h != 0)
CBR(hKey != nullptr)
CBR(iFullChargeCapacity != 0)
CBR(lRet != 2L && lRet != 3L)
CBR(lRet == 0L)
CBR(m_hRequest != nullptr)
CBR(m_hSession != nullptr)
CBR(m_pbDataBuffer != nullptr)
CBR(m_pbDataBuffer == nullptr)
CBR(memcpy_s(blobPrefixedSecret.pbData + c_cbCcpEncryptPrefix, blobUnprotectedSecret.cbData, blobUnprotectedSecret.pbData, blobUnprotectedSecret.cbData) == 0)
CBR(memcpy_s(blobPrefixedSecret.pbData + c_cbCcpHmacPrefix, blobUnprotectedSecret.cbData, blobUnprotectedSecret.pbData, blobUnprotectedSecret.cbData) == 0)
CBR(memcpy_s(blobPrefixedSecret.pbData, c_cbCcpEncryptPrefix + blobUnprotectedSecret.cbData, c_szCcpEncryptPrefix, c_cbCcpEncryptPrefix) == 0)
CBR(memcpy_s(blobPrefixedSecret.pbData, c_cbCcpHmacPrefix + blobUnprotectedSecret.cbData, c_szCcpHmacPrefix, c_cbCcpHmacPrefix) == 0)
CBR(memcpy_s(blobSharedSecret.pbData, cbCurrentSecretSize, pbCurrentSecret, cbCurrentSecretSize) == 0)
CBR(memcpy_s(blobSharedSecret.pbData, cbUpdatingSecretSize, pbUpdatingSecret, cbUpdatingSecretSize) == 0)
CBR(memcpy_s(pbCommandDataCopy, cbCommandData, pbCommandData, cbCommandData) == 0)
CBR(memcpy_s(pbDataOut, cbDataOut, pbDataIn + dwOffset, cbRead) == 0)
CBR(memcpy_s(pblobDecrypted->pbData, dwSize, pbTempData, dwSize) == 0)
CBR(memcpy_s(pbTempData, dwSize, blobEncrypted.pbData, blobEncrypted.cbData) == 0)
CBR(nStatus == 0 || nStatus == 234L)
CBR(nStatus == 0)
CBR(ntStatus == 0)
CBR(nullptr != m_hConnection)
CBR(nullptr != m_hRequest)
CBR(pbBuffer != nullptr)
CBR(pbCommandData)
CBR(pblobHMACHash->cbData > 0)
CBR(pcbContentSize != nullptr)
CBR(pch + 3 < (pchEncodedData + cchEncodedData))
CBR(pch < pchEncodedData + cchEncodedData)
CBR(pdwHttpStatus != nullptr)
CBR(pFullChargeCapacity != nullptr)
CBR(pGeoposition != 0)
CBR(pMultiByte != nullptr)
CBR(pRemainingCapacity != nullptr)
CBR(pResult != 0)
CBR(propertyValue.vt == (VT_VECTOR | VT_LPWSTR))
CBR(pstrBuffer != nullptr)
CBR(pwszHeaderValue != nullptr)
CBR(pwszHost != nullptr)
CBR(pwszMethod != nullptr)
CBR(pwszUrlPath != nullptr)
CBR(spRequest)
CBR(WaitForSingleObject(hComplete, 0xFFFFFFFF) == ((((NTSTATUS)0x00000000L) ) + 0 ))
CBR(wcscpy_s(pwszCids, cchCids, wstrCids.c_str()) == 0)
CcpServiceTarget
CD$8H
CD$hH
CD$pH
ChannelType
CHR(((HRESULT) ((ntstatus) | 0x10000000)))
CHR(((HRESULT)0x80004005L))
CHR(((HRESULT)0x80070005L))
CHR(((HRESULT)0x8007000EL))
CHR(((HRESULT)0x80070057L))
CHR(_Encode( pbBinaryData, cbBinaryData, pszBuffer, cchEncodedData ))
CHR(_Encode(pbBinaryData, cbBinaryData, 0, cchEncodedData))
CHR(ActivateInstance(geolocatorClassId.Get(), pGeolocator.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pJsonObject.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(AddCorrelationVectorHeader(wstrCorrelationVectorHeader))
CHR(AddDelegationTicketHeader(pwszMainTicket, pwszSecondaryTicket, wstrMainTicketHeader))
CHR(AddMainTicketHeader(pwszMainTicket, wstrMainTicketHeader))
CHR(AddSecondaryTicketHeader(pwszSecondaryTicket, wstrSecondaryTicketHeader))
CHR(b64coder.Decode(pszData, wcslen(pszData)))
CHR(b64coder.Encode((BYTE *)&guid, 12, wstrCorrelationVector))
CHR(b64coder.Encode(pbBuffer, cbBuffer, wstrHash))
CHR(CheckDataIntegrity(blobHash, blobSharedSecret, blobIntegrity))
CHR(CoCreateGuid(&guid))
CHR(CoCreateInstance( __uuidof(CoClassConnectedUserStore), 0, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(**(spUserStore.GetAddressOf())), IID_PPV_ARGS_Helper(spUserStore.GetAddressOf())))
CHR(CoCreateInstance( __uuidof(CoClassConnectedUserStore), nullptr, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(**(spUserStore.GetAddressOf())), IID_PPV_ARGS_Helper(spUserStore.GetAddressOf())))
CHR(CoCreateInstance( __uuidof(CoClassIdentityStore), nullptr, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(**(spUserStore.GetAddressOf())), IID_PPV_ARGS_Helper(spUserStore.GetAddressOf())))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, blobDecryptedData.cbData - c_rgdwCommandInfo[CmdInfo_Hash][1], c_rgdwCommandInfo[CmdInfo_ProfileId][0] - dwEncryptOffset, blobIntegrity.pbData + c_rgdwCommandInfo[CmdInfo_SecKeyId][1], blobIntegrity.cbData - c_rgdwCommandInfo[CmdInfo_SecKeyId][1] ))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_Hash][1], c_rgdwCommandInfo[CmdInfo_Hash][0] - dwEncryptOffset, blobHash.pbData, c_rgdwCommandInfo[CmdInfo_Hash][1] ))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_ProfileId][1], c_rgdwCommandInfo[CmdInfo_ProfileId][0] - dwDataOffset, rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_ReqId][1], c_rgdwCommandInfo[CmdInfo_ReqId][0] - dwDataOffset, rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( blobDecryptedData.pbData, blobDecryptedData.cbData, c_rgdwCommandInfo[CmdInfo_Timestamp][1], c_rgdwCommandInfo[CmdInfo_Timestamp][0] - dwDataOffset, rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_MsgId][1], c_rgdwCommandInfo[CmdInfo_MsgId][0], rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_MsgSize][1], c_rgdwCommandInfo[CmdInfo_MsgSize][0], rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_SecKeyId][1], c_rgdwCommandInfo[CmdInfo_SecKeyId][0], blobIntegrity.pbData, blobIntegrity.cbData ))
CHR(CopyBytes( pbCommand, cbCommandSize, c_rgdwCommandInfo[CmdInfo_SecKeyId][1], c_rgdwCommandInfo[CmdInfo_SecKeyId][0], rgbData, (sizeof(*RtlpNumberOf(rgbData))) ))
CHR(CopyBytes( pbCommand, cbCommandSize, dwCmdSize, c_rgdwCommandInfo[CmdInfo_SecKeyId][0], blobDecryptedData.pbData, blobDecryptedData.cbData ))
CHR(CreateCommandChannelEntity(pParameters->m_pwszChannelUrl, pCommandChannel.GetAddressOf()))
CHR(CreateConnectedAccountsEntity(pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pJsonValue.ReleaseAndGetAddressOf()))
CHR(CreateConnectedAccountsEntity(pParameters->m_pAdmins, pParameters->m_pDeviceOwners, pParameters->m_pStandardUsers, pParameters->m_pConnectedAdmins, pConnectedAccounts.GetAddressOf()))
CHR(CreateHash(hProv, ((4 << 13) | (0) | 12), &hHash))
CHR(CreateHttpRequest(pMdmTransport.GetAddressOf()))
CHR(CreateLocationEntity(pLocation, MdmLocationTechnique_Active, pJsonLocation.GetAddressOf()))
CHR(CreateRegisterDeviceRequestBody( pParameters, wstrRequestBody, wstrCommandChannelHash, wstrMobileNetworksHash, wstrDeviceInfoHash, wstrHardwareInfoHash, wstrStorageInfoHash, wstrProtectionStateHash, wstrConnectedAccountsHash, &fProtectionSessionGuidIncluded))
CHR(CreateRegisterUserDeviceRequestBody( eTrigger, pDeviceInfo, pUserInfo, wstrRequestBody))
CHR(CreateUpdateStatusBody( eCommandStatus, eCommandSource, dwRetries, hrErrorCode, ftCommandReceived, pftWorkStarted, pftWorkFinished, pLocation, pAuthorizedCids, pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pfMasterLocationSwitchOn, pfLocationSyncEnabled, pfMasterLocationEnabledByClient, pfLocationSyncEnabledByClient, wstrRequestBody))
CHR(Decrypt(hKey, blobEncrypted, pblobDecrypted))
CHR(DecryptCommand( pbCommand, cbCommandSize, fIsSecureChannel, &blobDecryptedData, dwCurrentSecretId, dwUpdatingSecretId, pbCurrentSecret, cbCurrentSecretSize, pbUpdatingSecret, cbUpdatingSecretSize, pfUpdateSecret))
CHR(DeriveKey(hProv, hHash, ((3 << 13)|(3 << 9)|15), &hKey))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValueStatics.GetAddressOf()))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Devices_Power_Battery).Get(), pBatteryStatics.GetAddressOf()))
CHR(GetActualRegistrationTrigger(pParameters->m_eDeviceContext, pParameters->m_eTrigger, &eActualTrigger))
CHR(GetContentSize(&m_cbDataBufferSize))
CHR(GetMdmCommonSettingValuesPersistedLocation(wszKey, &cchKey))
CHR(GetProvider(&hProv))
CHR(HashData(hHash, blobPrefixedSecret, 0))
CHR(HashData(hHMACHash, blobToHash, 0))
CHR(hr)
CHR(hrCallback)
CHR(HRESULT_FROM_WIN32(GetPersistedRegistryLocationW( c_pszMdmCommonPersistedKeyId, c_pszGeneralSettingsKey, pwszPath, *pcchPath, pcchPath)))
CHR(IsAdminBySid(pSid, &fFoundMatch, &fIsAdmin))
CHR(IsAdminBySidAndName(pTempBuffer->usri0_name, pSid, &fFoundMatch, &fIsAdmin))
CHR(IsDeviceOwnerBySid(pSid, &fIsDeviceOwner))
CHR(MdmAccountHelper::EnumerateAllUsers(&vAdmins, &vDeviceOwners, nullptr))
CHR(MdmAccountHelper::EnumerateAllUsers(pvAdmins, pvDeviceOwners, pvStandardUsers))
CHR(MdmAccountHelper::EnumerateConnectedUsers(pvAdmins, pvDeviceOwners, pvStandardUsers))
CHR(MdmAccountHelper::GetSidsByConnectedCids(vCids, vSids))
CHR(MdmCommandParser::HandlePushNotification(wnfStateName, &pTaskRequest))
CHR(MdmCommandParser::ParseCommandData(pbCommand, cbCommand, pCommandAndAcknowledgement))
CHR(MdmCommandParser::ParseLocateCommand(pbCommand, cbCommand, pfEnableLocation))
CHR(MdmCommandParser::ParseLockCommand(pbCommand, cbCommand, ppwszPin, ppwszCpn, pfRingAfterLock, vCids))
CHR(MdmConverters::ConvertMultiByteToWideChar( bBuffer, cbBuffer, &pszData))
CHR(MdmConverters::ConvertMultiByteToWideChar(pbBuffer, cbBuffer, &pwszBuffer))
CHR(MdmConverters::ConvertMultiByteToWideChar(pbCommand, 16, &pwszCid))
CHR(MdmConverters::ConvertMultiByteToWideChar(pbCommand, cbCpn, &pwszCpn))
CHR(MdmConverters::ConvertMultiByteToWideChar(pbCommand, cbPin, &pwszPin))
CHR(MdmConverters::ConvertWideCharToMultiByte( wstrBody.c_str(), (DWORD)wstrBody.length(), &pszMultiByteBody, &cbNeededLen))
CHR(MdmCrypto::ComputeHMAC(blobData, blobSharedSecret, &blobHashed))
CHR(MdmCrypto::DecryptData(blobEncryptedData, blobSharedSecret, &blobDecryptedData))
CHR(MdmCrypto::HashString(wstrCommandChannel, wstrCommandChannelNewHash))
CHR(MdmCrypto::HashString(wstrConnectedAccounts, wstrConnectedAccountsNewHash))
CHR(MdmCrypto::HashString(wstrDeviceInfo, wstrDeviceInfoNewHash))
CHR(MdmCrypto::HashString(wstrHardwareInfo, wstrHardwareInfoNewHash))
CHR(MdmCrypto::HashString(wstrMobileNetworks, wstrMobileNetworksNewHash))
CHR(MdmCrypto::HashString(wstrProtectionState, wstrProtectionStateNewHash))
CHR(MdmCrypto::HashString(wstrStorageInfo, wstrStorageInfoNewHash))
CHR(MdmHttpWrapper::CreateConnectedAccountsEntity(pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pConnectedAccounts.GetAddressOf()))
CHR(MdmHttpWrapper::CreateRegisterDeviceRequestBody( pParameters, wstrBody, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, wstrNotUsed, &fNotUsed))
CHR(MdmHttpWrapper::MdmSendRequestToCS( pwszMethod, pwszPath, pwszMainTicket, pwszSecondaryTicket, pRequestJsonObject, ppwszBuffer, pdwHttpStatus))
CHR(MdmHttpWrapper::MdmSendRequestToCSWithDelegation( pwszMethod, pwszPath, pwszDeviceTicket, pwszDelegationTicket, pRequestJsonObject, ppwszBuffer, pdwHttpStatus))
CHR(MdmHttpWrapper::RegisterDevice(pdwHttpStatus, pwszTicket, pParameters))
CHR(MdmHttpWrapper::RegisterUserDevice( pdwHttpStatus, pwszUserTicket, eTrigger, pDeviceInfo, pUserInfo))
CHR(MdmHttpWrapper::UpdateStatus( pdwHttpStatus, pwszTicket, dwRequestId, eCommandStatus, eCommandSource, dwRetries, hrErrorCode, ftCommandReceived, pftWorkStarted, pftWorkFinished, pLocation, pAuthorizedCids, pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pfMasterLocationSwitchOn, pfLocationSyncEnabled, pfMasterLocationEnabledByClient, pfLocationSyncEnabledByClient, ppwszBuffer))
CHR(MdmLocationHelper::GetLocation(desiredAccuracy, pResult))
CHR(MdmRegistry::GetBOOLValue(c_szFMDSettingRegistryRootPhone, c_szFMDEnabledValueName, *pfEnabled))
CHR(MdmRegistry::GetDWORDValue( c_pszGeneralInternalKey, c_pszProtectionSessionUpdateFrequencyInMinutes, dwValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszRegisterDevicePathValueName, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszRegisterUserDevicePathValueName, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszServiceHostValueName, pszValue))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszServiceTargetValueName, strServiceTarget))
CHR(MdmRegistry::GetStringValue( c_pszGeneralInternalKey, c_pszUpdateStatusPathValueName, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszConnectedAccountsHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszDeviceInfoHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszHardwareInfoHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszMobileNetworksHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszProtectionStateHash, pszValue))
CHR(MdmRegistry::GetStringValue( hKey, wszKey, c_pszStorageInfoHash, pszValue))
CHR(MdmRegistry::SetBOOLValue( hKey, wszKey, c_pszRegisteredWithService, fRegistered))
CHR(MdmRegistry::SetBOOLValue(wszKey, c_szFMDEnabledValueName, fEnabled))
CHR(MdmRegistry::SetByteValue( wszKey, c_pszProtectionSessionLastSent, (BYTE *)&ullValue, sizeof(ullValue)))
CHR(MdmRegistry::SetDWORDValue( hKey, wszKey, c_pszRegisteredVersion, 5))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszCommandChannelHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszConnectedAccountsHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszDeviceInfoHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszHardwareInfoHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszMobileNetworksHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszProtectionStateHash, pszValue))
CHR(MdmRegistry::SetStringValue( hKey, wszKey, c_pszStorageInfoHash, pszValue))
CHR(MdmSettings::GetConnectedAccountsHash(eDeviceType, wstrConnectedAccountsHashFromRegistry))
CHR(MdmSettings::GetConnectedAccountsHash(pParameters->m_eDeviceContext, wstrConnectedAccountsHashFromRegistry))
CHR(MdmSettings::GetDeviceInfoHash(pParameters->m_eDeviceContext, wstrDeviceInfoHashFromRegistry))
CHR(MdmSettings::GetHardwareInfoHash(pParameters->m_eDeviceContext, wstrHardwareInfoHashFromRegistry))
CHR(MdmSettings::GetMobileNetworksHash(eDeviceType, wstrMobileNetworksHashFromRegistry))
CHR(MdmSettings::GetMobileNetworksHash(pParameters->m_eDeviceContext, wstrMobileNetworksHashFromRegistry))
CHR(MdmSettings::GetProtectionSessionLastSent(&ftProtectionSessionLastSent.ullTime))
CHR(MdmSettings::GetProtectionSessionUpdateFrequencyInMinutes(&dwProtectionSessionUpdateFrequencyInMinutes))
CHR(MdmSettings::GetProtectionStateHash(eDeviceType, wstrProtectionStateHashFromRegistry))
CHR(MdmSettings::GetProtectionStateHash(pParameters->m_eDeviceContext, wstrProtectionStateHashFromRegistry))
CHR(MdmSettings::GetRegisterDevicePath(wstrPath))
CHR(MdmSettings::GetRegisterUserDevicePath(wstrPath))
CHR(MdmSettings::GetServiceTarget(strServiceTarget))
CHR(MdmSettings::GetStorageInfoHash(pParameters->m_eDeviceContext, wstrStorageInfoHashFromRegistry))
CHR(MdmSettings::GetUpdateStatusPath(wstrPath))
CHR(MdmSettings::HasRegisteredWithService(eDeviceType, &fRegistered))
CHR(MdmSettings::HasRegisteredWithService(eDeviceType, &fRegistered, &fCurrentVersionRegistered))
CHR(MdmSettings::IsUnmanagedFmdEnabled(pfEnabled))
CHR(MdmSettings::SetCommandChannelHash(pParameters->m_eDeviceContext, wstrCommandChannelHash))
CHR(MdmSettings::SetConnectedAccountsHash(pParameters->m_eDeviceContext, wstrConnectedAccountsHash))
CHR(MdmSettings::SetDeviceInfoHash(pParameters->m_eDeviceContext, wstrDeviceInfoHash))
CHR(MdmSettings::SetHardwareInfoHash(pParameters->m_eDeviceContext, wstrHardwareInfoHash))
CHR(MdmSettings::SetMobileNetworksHash(pParameters->m_eDeviceContext, wstrMobileNetworksHash))
CHR(MdmSettings::SetProtectionSessionLastSent(ftNow.ullTime))
CHR(MdmSettings::SetProtectionStateHash(pParameters->m_eDeviceContext, wstrProtectionStateHash))
CHR(MdmSettings::SetRegisteredWithService(pParameters->m_eDeviceContext, 1))
CHR(MdmSettings::SetStorageInfoHash(pParameters->m_eDeviceContext, wstrStorageInfoHash))
CHR(MdmUsersAuthorizedToSeeLocation(&vCids))
CHR(pAggregateBattery->GetReport(pBatteryReport.GetAddressOf()))
CHR(pBatteryReport->get_FullChargeCapacityInMilliwattHours(pFullChargeCapacity.GetAddressOf()))
CHR(pBatteryReport->get_RemainingCapacityInMilliwattHours(pRemainingCapacity.GetAddressOf()))
CHR(pBatteryStatics->get_AggregateBattery(pAggregateBattery.GetAddressOf()))
CHR(pCommandChannel->Stringify(hstrCommandChannel.GetAddressOf()))
CHR(pConnectedAccounts->Stringify(hstrConnectedAccounts.GetAddressOf()))
CHR(pFullChargeCapacity->get_Value(&iFullChargeCapacity))
CHR(pGeocoordinate.As(&pGeocoordinateWithPoint))
CHR(pGeocoordinate->get_Accuracy(&dPositionAccuracy))
CHR(pGeocoordinate->get_AltitudeAccuracy(&pdAltitudeAccuracy))
CHR(pGeocoordinateWithPoint->get_Point(&pGeopoint))
CHR(pGeolocator->GetGeopositionAsyncWithAgeAndTimeout(ageTimeSpan, timeoutTimeSpan, pGetOperation.GetAddressOf()))
CHR(pGeolocator->put_DesiredAccuracy(desiredAccuracy))
CHR(pGeopoint->get_Position(&basicGeoposition))
CHR(pGeoposition->get_Coordinate(pGeocoordinate.GetAddressOf()))
CHR(pGetOperation->put_Completed(CompletionCallback.Get()))
CHR(pJsonObject.As(&pJsonObjectAsValue))
CHR(pJsonObject->SetNamedValue(HStringReference(L"AdminCids").Get(), pAdmins))
CHR(pJsonObject->SetNamedValue(HStringReference(L"Altitude").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"AltitudeErrorDistance").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"AuthorizedCids").Get(), pAuthorizedCids))
CHR(pJsonObject->SetNamedValue(HStringReference(L"BatteryLevel").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ChannelType").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ClientVersion").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"CommandChannel").Get(), pCommandChannel.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"CommandChannelUrl").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ConnectedAccounts").Get(), pConnectedAccounts.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ConnectedAccounts").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ConnectedAdminCids").Get(), pConnectedAdmins))
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceHardwareInfo").Get(), pParameters->m_pHardwareInfo))
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceInfo").Get(), pDeviceInfo))
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceInfo").Get(), pParameters->m_pDeviceInfo))
CHR(pJsonObject->SetNamedValue(HStringReference(L"DeviceOwnerCids").Get(), pDeviceOwners))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ErrorCode").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ErrorRadius").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"LastKnownLocation").Get(), pLastKnownLocation.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"Latitude").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"Location").Get(), pJsonLocation.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"LocationTechnique").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"Longitude").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"MobileNetworks").Get(), pParameters->m_pMobileNetworks))
CHR(pJsonObject->SetNamedValue(HStringReference(L"MpnsEnabled").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ProtectionSession").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ProtectionState").Get(), pParameters->m_pProtectionState))
CHR(pJsonObject->SetNamedValue(HStringReference(L"PushChannelType").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"ReceivedTime").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"RegistrationTrigger").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"Retries").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"StandardCids").Get(), pStandardUsers))
CHR(pJsonObject->SetNamedValue(HStringReference(L"StatusCode").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"StatusFlags").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"StorageInfo").Get(), pParameters->m_pStorageInfo))
CHR(pJsonObject->SetNamedValue(HStringReference(L"UpdatedTime").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"UserInfo").Get(), pUserInfo))
CHR(pJsonObject->SetNamedValue(HStringReference(L"WorkFinishedTime").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(L"WorkStartedTime").Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(pParameters->m_ppwszAdditionalValuesNames[i]).Get(), pParameters->m_ppAdditionalValues[i]))
CHR(pJsonObjectAsValue->Stringify(hstrBody.GetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue(false, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)eCommandSource, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)eCommandStatus, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)hrErrorCode, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(1, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(5, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(dBatteryLevel, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(dwRetries, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(dwStatusFlags, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dAltitude, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dLatitude, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dLongitude, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dwAltitudeAccuracy, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pLocation->m_dwPositionAccuracy, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pParameters->m_pwszProtectionSessionGuid).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszChannelUrl).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrTrigger.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wszLocationTechniqueMappings[eLocationTechnique]).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wszTimestamp).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pMdmHttpRequest->QueryInterface(IID_IMdmTransport, (PVOID *)pMdmTransportLocal.GetAddressOf()))
CHR(pMdmTransport->SendDelegationRequestToCommandService( pwszMethod, pwszPath, pwszDeviceTicket, pwszDelegationTicket, wstrRequestBody, &dwHttpStatus, fReadResponse ? &pwszBuffer : nullptr ))
CHR(pMdmTransport->SendRequestToCommandService( L"PUT", pwszPath, pwszTicket, nullptr, wstrRequestBody, &dwHttpStatus, fReadResponse ? &pwszBuffer : nullptr ))
CHR(pMdmTransport->SendRequestToCommandService( L"PUT", wstrPath.c_str(), pwszTicket, nullptr, wstrRequestBody, &dwHttpStatus, nullptr))
CHR(pMdmTransport->SendRequestToCommandService( pwszMethod, pwszPath, pwszMainTicket, pwszSecondaryTicket, wstrRequestBody, &dwHttpStatus, fReadResponse ? &pwszBuffer : nullptr ))
CHR(pMobileNetworks->Stringify(hstrMobileNetworks.GetAddressOf()))
CHR(PolicyManager_GetPolicyInt(c_szFMDMDMAreaName, c_szFMDMDMPolicyName, &value))
CHR(pParameters->m_pDeviceInfo->Stringify(hstrDeviceInfo.GetAddressOf()))
CHR(pParameters->m_pHardwareInfo->Stringify(hstrHardwareInfo.GetAddressOf()))
CHR(pParameters->m_pMobileNetworks->Stringify(hstrMobileNetworks.GetAddressOf()))
CHR(pParameters->m_pProtectionState->Stringify(hstrProtectionState.GetAddressOf()))
CHR(pParameters->m_pStorageInfo->Stringify(hstrStorageInfo.GetAddressOf()))
CHR(pProtectionState->Stringify(hstrProtectionState.GetAddressOf()))
CHR(pRemainingCapacity->get_Value(&iRemainingCapacity))
CHR(pRequestJsonObjectAsValue->Stringify(hstrBody.GetAddressOf()))
CHR(pRequestJsonObjectLocal.As(&pRequestJsonObjectAsValue))
CHR(PropVariantToStringAlloc(propertyValue, &pwszCid))
CHR(PropVariantToStringAlloc(propertyValue, &pwszSid))
CHR(PropVariantToStringAlloc(propertyValue, &pwszValue))
CHR(pTaskRequestParser->ParseEncryptedRequest( pbCommand, cbCommandSize, &pTaskRequest, dwCurrentSecretId, dwUpdatingSecretId, pbCurrentSecret, cbCurrentSecretSize, pbUpdatingSecret, cbUpdatingSecretSize, pfUpdateSecret))
CHR(pTaskRequestParser->ParseNonEncryptedRequest( b64coder.DecodedMessage(), b64coder.DecodedLength(), &pTaskRequest))
CHR(pTaskRequestParser->ParseNonEncryptedRequest( pbCommand, cbCommandSize, &pTaskRequest))
CHR(QueryWnfState(&wnfStateName, bBuffer, &cbBuffer))
CHR(ReadData( cbBuffer, pbBuffer))
CHR(ReadDataGreaterThan1KB( cbBuffer, pbBuffer))
CHR(RegistrationTriggerToString(eActualTrigger, wstrTrigger))
CHR(RegistrationTriggerToString(eTrigger, wstrTrigger))
CHR(SendHttpRequest( pwszMethod, L"Content-Type: application/json\r\n", pwszHost, pwszUrlPath, pwszDeviceTicket, pwszDelegationTicket, 1, nullptr, 0, wstrBody.c_str(), pszMultiByteBody, cbNeededLen, pdwHttpStatus, fReadResponse ? &cbBuffer : nullptr, fReadResponse ? &pbBuffer : nullptr ))
CHR(SendHttpRequest( pwszMethod, L"Content-Type: application/json\r\n", pwszHost, pwszUrlPath, pwszMainTicket, pwszSecondaryTicket, 0, nullptr, 0, wstrBody.c_str(), pszMultiByteBody, cbNeededLen, pdwHttpStatus, fReadResponse ? &cbBuffer : nullptr, fReadResponse ? &pbBuffer : nullptr ))
CHR(SetDefaultTimeoutOptions())
CHR(spPropStore->GetValue(PKEY_Identity_PrimarySid, &propertyValue))
CHR(spPropStore->GetValue(PKEY_Identity_ProviderData, &propertyValue))
CHR(spPropStore->GetValue(PKEY_Identity_UniqueID, &propertyValue))
CHR(spRequest->SetCommandData( blobDecryptedData.pbData + c_rgdwCommandInfo[CmdInfo_Data][0] - dwDataOffset, dwSize))
CHR(spUnknown.As(&spPropStore))
CHR(spUnknown.As(&spUser))
CHR(spUser->GetConnectedUserInfo(spPropStore.GetAddressOf()))
CHR(spUserEnum->Next(1, spUnknown.GetAddressOf(), &cFetch))
CHR(spUserStore->EnumerateIdentities( IDENTITIES_ALL, nullptr, nullptr, &spUserEnum))
CHR(spUserStore->GetConnectedUserEnum( 0, 0, &spUserEnum))
CHR(spUserStore->GetConnectedUserEnum( 0, nullptr, &spUserEnum))
CHR(StringCchCopyNW( szServerName, (sizeof(*__countof_helper(szServerName)) + 0), urlComponents.lpszHostName, urlComponents.dwHostNameLength))
CHR(StringCchLengthW(L"msaauth1.0 usertoken=\"%s\", delegationtoken=\"%s\"", 2147483647, &cchfStrLen))
CHR(StringCchLengthW(pwszDelegationTicket, 2147483647, &cchDelegationTicketLen))
CHR(StringCchLengthW(pwszDeviceTicket, 2147483647, &cchDeviceTicketLen))
CHR(StringCchPrintfW(pwszBuffer, strServiceTarget.length() + 1, strServiceTarget.c_str()))
CHR(StringCchPrintfW(pwszHeaderValue, allocSize, L"msaauth1.0 usertoken=\"%s\", delegationtoken=\"%s\"", pwszDeviceTicket, pwszDelegationTicket))
CHR(StringCchPrintfW(pwszPath, cchPath, wstrPath.c_str(), dwRequestId))
CHR(StringCchPrintfW(wszTimestamp, (sizeof(*RtlpNumberOf(wszTimestamp))), L"%llu", ftConverter.ullTime))
CHR(UnprotectData(blobSharedSecret, &blobUnprotectedSecret))
CHR(UnprotectData(blobToHash, &blobHash))
CL$PH
ClientVersion
CloseHandle
CoCreateGuid
CoCreateInstance
CommandChannel
CommandChannelHash
CommandChannelUrl
CompanyName
ConnectedAccounts
ConnectedAccountsHash
ConnectedAdminCids
ConnectedToNetwork
Content-Type: application/json
ConvertStringSidToSidW
CoTaskMemFree
CPR(blobDataIn.pbData)
CPR(blobDecryptedData.pbData)
CPR(blobEncrypted.pbData)
CPR(blobEncryptedData.pbData)
CPR(blobHash.pbData)
CPR(blobIntegrity.pbData)
CPR(blobPrefixedSecret.pbData)
CPR(blobSharedSecret.pbData)
CPR(blobToHash.pbData)
CPR(pAdmins)
CPR(pbBinaryData)
CPR(pbBuffer)
CPR(pbByteArray)
CPR(pbCommand)
CPR(pbCommandDataCopy)
CPR(pbCurrentSecret)
CPR(pbDataIn)
CPR(pbDataOut)
CPR(pbDecodedMessage)
CPR(pbEndOfTriplets)
CPR(pblobDecrypted)
CPR(pblobDecrypted->pbData)
CPR(pblobDecryptedData)
CPR(pblobHMACHash)
CPR(pblobHMACHash->pbData)
CPR(pbTempData)
CPR(pbUpdatingSecret)
CPR(pcActualCount)
CPR(pcbArray)
CPR(pcbCommandData)
CPR(pcchCids)
CPR(pCommandAndAcknowledgement)
CPR(pConnectedAdmins)
CPR(pDataOut)
CPR(pDeviceOwners)
CPR(pdLevel)
CPR(pdwHttpStatus)
CPR(pdwProfileId)
CPR(pdwRequestId)
CPR(pdwTimestamp)
CPR(pdwValue)
CPR(peActualTrigger)
CPR(pfChanged)
CPR(pfConfiguredByPolicy)
CPR(pfEnabled)
CPR(pfEnableLocation)
CPR(pfFoundMatch)
CPR(pfIsAdmin)
CPR(pfIsDeviceOwner)
CPR(pfProtectionSessionGuidIncluded)
CPR(pfRegistered)
CPR(pfRingAfterLock)
CPR(pfShouldRegister)
CPR(pfUpdateSecret)
CPR(phHash)
CPR(phKey)
CPR(phProv)
CPR(pLocation)
CPR(pMdmHttpRequest)
CPR(pMobileNetworks)
CPR(ppbCommandData)
CPR(ppJsonValue)
CPR(ppMdmTransport)
CPR(ppRequest)
CPR(pProtectionState)
CPR(ppszArray)
CPR(ppWideCharBuffer)
CPR(ppwszBuffer)
CPR(ppwszCpn)
CPR(ppwszPin)
CPR(pSid)
CPR(pStandardUsers)
CPR(pszBuffer)
CPR(pTaskRequestParser)
CPR(pullValue)
CPR(pwszArray)
CPR(pwszBuffer)
CPR(pwszHost)
CPR(pwszMethod)
CPR(pwszPath)
CPR(pwszUrlPath)
CreateEventA
CreateMutexExW
CreateSemaphoreExW
CRYPT32.dll
CryptAcquireContextA
CryptCreateHash
CryptDecrypt
CryptDeriveKey
CryptDestroyHash
CryptDestroyKey
CryptGetHashParam
CryptHashData
CryptReleaseContext
CryptSetHashParam
CryptUnprotectData
CT$`H
CT$hH
D!t$ D
D!t$@
D$ E3
D$ fD
D$(E3
D$@E3
D$`fE
D$`L;
D$0E3
D$0H;
D$8E3
D$8H!t$8H
D$HE3
D$PE3
D$pH#
D$pL;
D$xfE
D$XH!\$@H
D9:w/
D9?w/
D9>w/
D99w/
D9D$0t(
D9K(t
DebugBreak
DelayLoadFailureHook
Device Owners
DeviceDirectoryClient
DeviceHardwareInfo
DeviceInfo
DeviceInfoHash
DeviceOwnerCids
ENCRYPT
EqualSid
ErrorCode
ErrorRadius
EventRegister
EventUnregister
EventWriteTransfer
Exception
Experience
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
f9,Au
f9,Hu
f9,Ku
f9<Bu
f9D$xt+
fA;Tn
fA9,Qu
fA9<Bu
fA9Z*v$A
FailFast
fB94@u
fB94`u
fD9(t
fD9,B
fD9,Qu
fD9t]
fF9$Fu
FileDescription
FileVersion
FirstTimeSignIn
FNULL
FormatMessageW
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetLastError
GetModuleFileNameA
GetModuleHandleExW
GetModuleHandleW
GetPersistedRegistryLocationW
GetProcAddress
GetProcessHeap
GetSystemTimeAsFileTime
H WATAUAVAWH
H!\$ E3
H!\$(H
H!\$0H
H!\$0L
H!\$8E
H!}HH
H9.t,A
H9_Hs<
H9M v,H
H9M@v*H
H9t$`
H9t$`tyH
hA_A^A]A\_^][
HardwareInfoHash
HeapAlloc
HeapFree
I9vHu
I9vPu
InitializeSListHead
internal\sdk\inc\wil\Resource.h
InternalName
IsDebuggerPresent
IsProcessorFeaturePresent
JTk_S/
K SVWH
kernelbase.dll
L$ E3
L$ SUVWH
L$ SVWH
L$@9\$dt,D
L$@E3
L$@fD
L$@H+
L$@H3
L$0E3
L$0fD
L$8E3
L$LE3
L$pE3
L$PE3
L$PH3
L$XE3
L$XH3
L$XL+
L9/t/A
L9{@u
L9{0t#H
L91t,A
L92t,A
L9d$`
L9d$`H
L9d$pt
L9l$hu/A
L9L$ps(
L9o@t
L9t$ht9H
LastKnownLocation
Latitude
LegalCopyright
Local\SM0:%d:%d:%hs
LocalAlloc
LocalFree
Location
LocationSyncEnabled
LocationSyncEnabledOverride
LocationTechnique
LogHr
Longitude
M H1E
M9 t.A
M9!t.A
M9(t,
M90t,A
mD9l$Tt:H
MdmClearAllHashes
MdmCommon
MdmCommon.dll
MdmCommon.DLL
MdmCommon.pdb
MdmConnectedAccountsChanged
MdmEnumerateUsers
MdmGetLocation
MdmGetServiceTarget
MdmGetSidsByConnectedCids
MdmHandlePushNotification
MdmIsFindMyDeviceEnabled
MdmIsRegisteredWithService
MdmMobileNetworksChanged
MdmParseCommandData
MdmParseEncryptedRequest
MdmParseLocateCommand
MdmParseLockCommand
MdmParseNonEncryptedRequest
MdmProtectionStateChanged
MdmRegisterDevice
MdmRegisterUserDevice
MdmSendRequestToCS
MdmSendRequestToCSWithDelegation
MdmSetFindMyDevice
MdmShouldRegisterDevice
MdmUpdateStatus
MdmUsersAuthorizedToSeeLocation
MdmUsersAuthorizedToSeeLocationAsString
memcmp
memcpy
memmove
memset
Microsoft
Microsoft Corporation
Microsoft Enhanced RSA and AES Cryptographic Provider
MobileNetworks
MobileNetworksHash
MpnsEnabled
msaauth1.0 usertoken="%s", delegationtoken="%s"
MS-CV: 
Msg:[%ws] 
msvcp_win.dll
MultiByteToWideChar
NetApiBufferFree
NetLocalGroupGetMembers
NetUserEnum
NetUserGetInfo
netutils.dll
NewAccount
ntdll.dll
ntelD
NtQueryWnfStateData
o\$PH
oD$ f
oL$0f
onecoreuap\shell\devicedirectory\mdmcommon\dll\dllmain.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmaccounthelper.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmbase64coder.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmcommandparser.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmconverters.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmcrypto.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmhttprequest.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmhttpwrapper.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmlocationhelper.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmregistry.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmsettings.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmtaskrequestimpl.cpp
onecoreuap\shell\devicedirectory\mdmcommon\lib\mdmtaskrequestparserimpl.cpp
OpenSemaphoreW
OriginalFilename
OSUpgradeToThreshold
oT$@f
OutputDebugStringW
p WATAUAVAWH
p WAVAWH
PA^_^[]
PA_A^_
PA_A^_^]
Passive
Periodic
PolicyManager_GetPolicyInt
PolicyManager_IsPolicySetByMobileDeviceManager
ProductName
ProductVersion
PROPSYS.dll
PropVariantClear
PropVariantToStringAlloc
ProtectionSession
ProtectionSessionLastSent
ProtectionSessionUpdateFrequencyInMinutes
ProtectionState
ProtectionStateChanged
ProtectionStateHash
PushChannelType
QueryPerformanceCounter
R$fA;Z*
RaiseException
RaiseFailFastException
ReceivedTime
RegCloseKey
RegCreateKeyExW
RegisterDevicePath
RegisteredVersion
RegisteredWithService
RegisterUserDevicePath
RegistrationTrigger
RegOpenKeyExW
RegQueryValueExW
RegSetValueExW
ReleaseMutex
ReleaseSemaphore
ResolveDelayLoadedAPI
Retries
ReturnHr
RoActivateInstance
RoGetActivationFactory
RSDSk_
RtlCaptureContext
RtlDllShutdownInProgress
RtlLookupFunctionEntry
RtlPublishWnfStateData
RtlVirtualUnwind
samcli.dll
ScreenOnOff
ServiceHost
SetEvent
SetLastError
SettingChange
SetUnhandledExceptionFilter
SimCardChanged
Sleep
Software\Microsoft\MdmCommon\Internal
Software\Microsoft\MdmCommon\Settings
Software\Microsoft\MdmCommon\SettingValues
Software\Microsoft\Settings\FindMyDevice
Software\Microsoft\Settings\FindMyPhone
SOFTWARE\Policies\Microsoft\FindMyDevice
StandardCids
StatusCode
StatusFlags
std::exception: %hs
StorageInfo
StorageInfoHash
string too long
StringFileInfo
SUVWATAUAVAWH
SVWATAUAVAWH
SVWATAVAWH
SWATAVAWH
SWAUAVAWH
t"D8=7[
t$ E3
T$ E3
t$ UWATAVAWH
t$ WH
T$@E3
T$`H;
T$0E3
T$0H+
T$8E3
T$8H!\$8
T$DfD
T$pH!\$XE3
T$xI;
t;M94$t/A
t^@8=
t{HcL$ HcD$$H
t~I9v8txH
t4A96u
tCI9]
TerminateProcess
Translation
UnhandledExceptionFilter
Unknown
Unknown exception
UpdatedTime
UpdateStatusPath
UserInfo
UVWATAUAVAWH
UVWAVAWH
UWAVH
UWAVI
VarFileInfo
vCL9N(
vector<T> too long
VS_VERSION_INFO
VWAVH
WaitForSingleObject
WaitForSingleObjectEx
WATAUAVAWH
WAVAWH
WideCharToMultiByte
WilError_02
Windows Device Management Platform
Windows.Data.Json.JsonObject
Windows.Data.Json.JsonValue
Windows.Devices.Geolocation.Geolocator
Windows.Devices.Power.Battery
WindowsCreateStringReference
WindowsDeleteString
WindowsGetStringRawBuffer
WINHTTP.dll
WinHttpAddRequestHeaders
WinHttpCloseHandle
WinHttpConnect
WinHttpCrackUrl
WinHttpOpen
WinHttpOpenRequest
WinHttpQueryHeaders
WinHttpReadData
WinHttpReceiveResponse
WinHttpSendRequest
WinHttpSetOption
WorkFinishedTime
WorkStartedTime
x ATAVAWH
x AVH
x UAVAWH
X-Device-Token: 
X-User-Token: 
