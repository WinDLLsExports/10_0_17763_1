'------------------------------------------------------------------------------
    '
    '''
    ''''''''
    ' 
    ''' 
    '''''''' 
        ''''''''
        ' 
        '' 
        '''''''' 
            
            '
             
            ' 
                
                ' 
                                                 error.ErrorCode.ToString(CultureInfo.InvariantCulture),
                                                 error.Message);
                                  .Select(i => code.GetGlobalItemName(i))))
                                  .Where(i => i is StructuralType || i is EnumType || i is EntityContainer)
                                 ((DateTime)value).Ticks);
                                 ((Guid)value).ToString("D", CultureInfo.InvariantCulture));
                                 ((TimeSpan)value).Ticks);
                                 dto.Ticks, dto.Offset.Ticks);
                                this.formatProviderField })));
                              .FirstOrDefault())
                              .Select(p => (string)p.Value)
                              .Where(p => p.Name == ExternalTypeNameAttributeName)
                            typeof(System.IFormatProvider)});
                        ((IDisposable)reader).Dispose();
                        .IsWarning = True _
                        || this.endsWithNewline))
                        allReaders.Add(reader)
                        allReaders.Add(reader);
                        CodeGenerationTools.GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)));
                        CodeGenerationTools.GetResourceString("Template_UnsupportedSchema"))
                        Dim reader As XmlReader = reference.CreateReader()
                        DirectCast(reader, IDisposable).Dispose()
                        GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)));
                        Me.formatProviderField  = value
                        navProperty.Name, entity.FullName, refPropertyName)));
                        OrElse Me.endsWithNewline) Then
                        ownedReaders.Add(reader)
                        ownedReaders.Add(reader);
                        Return False
                        return false;
                        subTypes.Add(typeInCollection)
                        this.formatProviderField  = value;
                        XmlReader reader = reference.CreateReader();
                        yield return typeInCollection;
                       member.Name, rawGetterAccessibility, rawSetterAccessibility)));
                    "       MyBase.New(connection, """)
                    "   MyBase.New(connectionString, """)
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' <auto-generated>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
                    "---------------------"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.ComponentModel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports "& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
                    "");
                    "((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection" +
                    "((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<" +
                    "\n// <auto-generated>\r\n// ");
                    "<");
                    "anager.GetRelatedCollection<");
                    "anager.GetRelatedReference<");
                    "edReference(Of ")
                    "etRelatedReference(Of ")
                    "GetRelatedReference<");
                    "Relationships).RelationshipManager.InitializeRelatedCollection(Of ")
                    "Relationships).RelationshipManager.InitializeRelatedReference(Of ")
                    "System.Data.EntityClient"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Data.Objects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Data.Objec"& _ 
                    "te()]\r\n    [EdmRelationshipNavigationPropertyAttribute(\"");
                    "te()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmRelationshipNavigationPropertyAttribute(""")
                    "tRelatedCollection(Of ")
                    "ts System.Xml.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Assembly: EdmSchemaAttribute(""")
                    "ts System.Xml.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Assembly: EdmSchemaAttribute(""")
                    "ts.DataClasses"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Linq"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Runtime.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Impor"& _ 
                    && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + "."))
                    ((IDisposable)reader).Dispose();
                    _dynamicHost = New DynamicHost(_host.GetValue(_instance, Nothing))
                    _dynamicHost = new DynamicHost(_host.GetValue(_instance, null));
                    _dynamicHost = New NullHost()
                    _dynamicHost = new NullHost();
                    _textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), -1, -1, string.Empty,
                    {
                    || dte.SourceControl.IsItemCheckedOut(fileName))
                    }
                    })
                    CodeGenerationTools.GetResourceString("Template_ConflictingGeneratedNavPropName"),
                    CodeGenerationTools.GetResourceString("Template_DuplicateTopLevelType"),
                    CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")))
                    CodeGenerationTools.GetResourceString("Template_UnsupportedSchema")) With { _
                    Continue For
                    continue;
                    Dim errors As IList(Of EdmSchemaError) = Nothing
                    Dim manager As System.Resources.ResourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
                    Dim reference As XElement = Nothing
                    Dim tempItemCollection As ItemCollection = CreateItemCollection(readers, errors)
                    DirectCast(reader, IDisposable).Dispose()
                    End If
                    fks.ToColumn.Parent as ToTable
                    For Each reader As XmlReader In readers
                    foreach (XmlReader reader in readers)
                    GetResourceString("Template_ConflictingGeneratedNavPropName"),
                    GetResourceString("Template_ReplaceVsItemTemplateToken")))
                    if ( includeAbstractTypes || !typeInCollection.Abstract)
                    if ((value != null))
                    If (Not (value) Is Nothing) Then
                    if (ProcessErrors(errors, sourcePath))
                    If includeAbstractTypes OrElse Not typeInCollection.Abstract Then
                    If ProcessErrors(errors, sourcePath) Then
                    If TryLoadRootElement(path, reference) Then
                    if(TryLoadRootElement(path, out reference))
                    IList<EdmSchemaError> errors = null;
                    itemCollection = tempItemCollection
                    itemCollection = tempItemCollection;
                    ItemCollection tempItemCollection = CreateItemCollection(readers, out errors);
                    Me.currentIndentField = Me.currentIndentField.Remove((Me.currentIndentField.Length - indentLength))
                    Me.errorsField = New Global.System.CodeDom.Compiler.CompilerErrorCollection()
                    Me.generationEnvironmentField = New Global.System.Text.StringBuilder()
                    Me.indentLengthsField = New Global.System.Collections.Generic.List(Of Integer)()
                    newError.FileName = sourceFilePath
                    newError.FileName = sourceFilePath;
                    Next
                    pair.Value.Delete()
                    pair.Value.Delete();
                    readers.Add(schemaElement.CreateReader())
                    readers.Add(schemaElement.CreateReader());
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                    Return CType(method.Invoke(objectToConvert, New Object() {Me.formatProviderField }),String)
                    Return Me.formatProviderField 
                    Return objectToConvert.ToString
                    return objectToConvert.ToString();
                    return this.formatProviderField ;
                    Return True
                    return true;
                    returnValue = Me.currentIndentField.Substring((Me.currentIndentField.Length - indentLength))
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    System.Threading.Interlocked.CompareExchange(_resourceManager, manager, Nothing)
                    templateProjectItem.ProjectItems.AddFromFile(fileName)
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                    Throw New Global.System.ArgumentNullException("objectToConvert")
                    throw new global::System.ArgumentNullException("objectToConvert");
                    type)));
                    WriteFunctionParameters(parameters)
                    WriteFunctionParameters(parameters);
                    XElement reference;
                   c.ForeignKeys as fk) as fks
                   CodeGenerationTools.GetResourceString("GeneratedPropertyAccessibilityConflict"),
                   CodeGenerationTools.GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)))
                   GetResourceString("GeneratedPropertyAccessibilityConflict"),
                   GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)))
                   Ref(fk.Constraint) as cRef
                   set.ElementType.Name, typeAccess, set.Name, setAccess)));
                  AndAlso Not (Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + ".") Then
                  cross apply 
                  CROSS APPLY pk.Columns as pkc) as pk
                  OfType(SchemaInformation.Functions, Store.TableValuedFunction) as t 
                  OfType(SchemaInformation.TableConstraints, Store.PrimaryKeyConstraint) as pk
                  OfType(SchemaInformation.ViewConstraints, Store.PrimaryKeyConstraint) as pk
                  r.CatalogName as CatalogName
                  SchemaInformation.Tables as t 
                  SchemaInformation.Views as v 
                  sp.CatalogName
                  sp.SchemaName
                  t.CatalogName
                  t.Columns as c ) as t 
                  t.Columns as c ) as tvf
                  true as IsPrimaryKey
                  tvf.CatalogName
                  v.CatalogName
                  v.Columns as c ) as v 
                 ,  fk.ToColumn
                 , fk.FromColumn
                 , fk.Ordinal
                ' load from single metadata file (.csdl, .ssdl, or .msl)
                 OUTER APPLY
                 r.ToTable.CatalogName as ToTableCatalog
                ( SELECT 
                ((RefType)a.AssociationEndMembers[0].TypeUsage.EdmType).ElementType == entity && IsCascadeDeletePrincipal(a.AssociationEndMembers[1]) ||
                ((RefType)a.AssociationEndMembers[1].TypeUsage.EdmType).ElementType == entity && IsCascadeDeletePrincipal(a.AssociationEndMembers[0])).Any();
                , pkc.Id
                , sp.IsAggregate
                , sp.IsBuiltIn
                , sp.IsComposable
                , sp.IsNiladic
                , sp.IsTvf
                , sp.Mode
                , sp.Name 
                , sp.ParameterName
                , sp.ParameterType
                , sp.ReturnTypeName
                , sp.SchemaName
                .Select(Function(g) GetGlobalItemName(g))
                .Where(Function(i) TypeOf i Is EntityType OrElse TypeOf i Is ComplexType OrElse TypeOf i Is EnumType OrElse TypeOf i is EntityContainer) _
                // 
                // load from single metadata file (.csdl, .ssdl, or .msl)
                _generationEnvironment.Remove(block.Start, block.Length)
                _generationEnvironment.Remove(block.Start, block.Length);
                _textTransformation.Errors.Add(new CompilerError(
                _textTransformation.Errors.Add(New CompilerError(If(_textTransformation.Host.TemplateFile, CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate")), -1, -1, String.Empty, _
                _textTransformation.Errors.Add(new System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, "6023", formatMessage(item)));
                _textTransformation.Errors.Add(New System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, 6023, formatMessage(item)))
                _textTransformation.Errors.Add(newError)
                _textTransformation.Errors.Add(newError);
                {
                {IsWarning = true});
                | BindingFlags.Instance | BindingFlags.Static;
                || !dte.SourceControl.IsItemUnderSCC(fileName)
                || TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement);
                || TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
                }
                ++numberOfConflicts;
                adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture)
                adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
                allReaders.AddRange(readers)
                allReaders.AddRange(readers);
                CheckoutFileIfRequired(fileName)
                CheckoutFileIfRequired(fileName);
                CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")))
                CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")));
                CompilerError newError = new CompilerError(error.SchemaLocation, error.Line, error.Column,
                container.Name, SourceCsdlPath) Then
                continue;
                CreateFile(fileName, content)
                CreateFile(fileName, content);
                Dim clrType As Type = ef.UnderlyingClrType(parameter.TypeUsage.EdmType)
                Dim content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText
                Dim fileName As String = Path.Combine(outputPath, block.Name)
                Dim indentLength As Integer = Me.indentLengths((Me.indentLengths.Count - 1))
                Dim method As System.Reflection.MethodInfo = t.GetMethod("ToString", New System.Type() {GetType(System.IFormatProvider)})
                Dim newError As New CompilerError(schemaError.SchemaLocation, schemaError.Line, schemaError.Column, schemaError.ErrorCode.ToString(CultureInfo.InvariantCulture), schemaError.Message)
                Dim readers As New List(Of XmlReader)()
                Dim t As System.Type = objectToConvert.GetType
                Dim typeUsage As TypeUsage = parameter.TypeUsage
                else
                Else
                else
                Else
                else
                Else
                else
                Else
                else
                End Get
                End If
                End Set
                End Try
                EndBlock()
                EndBlock();
                Errors.Add(New System.CodeDom.Compiler.CompilerError(Host.TemplateFile, -1, -1, String.Empty,
                Exit Sub
                File.WriteAllText(fileName, content)
                File.WriteAllText(fileName, content);
                finally
                Finally
                For Each path As String In _referenceSchemas.Distinct()
                For Each reader As XmlReader In ownedReaders
                foreach (string path in _referenceSchemas.Distinct())
                foreach (XmlReader reader in ownedReaders)
                foundErrors |= error.Severity == EdmSchemaErrorSeverity.Error;
                foundErrors = foundErrors Or schemaError.Severity = EdmSchemaErrorSeverity.Error
                FROM
                generatedFileNames.Add(fileName)
                generatedFileNames.Add(fileName);
                Get
                get
                Get
                get
                GetResourceString("Template_CaseInsensitiveEntitySetConflict"), entityContainerName, e), sourceFile)
                GetResourceString("Template_CaseInsensitiveMemberConflict"), declaringType, m), sourceFile)
                GetResourceString("Template_DuplicateTopLevelType"),
                GetResourceString("Template_ReplaceVsItemTemplateToken")));
                if (!keepFileNames.Contains(pair.Key)
                if (!parameter.NeedsLocalVariable)
                if (!projectFiles.ContainsKey(fileName))
                if ((indentLength > 0))
                if ((method == null))
                if ((objectToConvert == null))
                if ((this.errorsField == null))
                if ((this.generationEnvironmentField == null))
                if ((this.indentLengthsField == null))
                if (ef.ClrType(primitiveProperty.TypeUsage) == typeof(byte[]))
                if (ef.ClrType(simpleProperty.TypeUsage) == typeof(byte[]))
                if (error.SchemaLocation == null)
                If (indentLength > 0) Then
                If (Me.errorsField Is Nothing) Then
                If (Me.generationEnvironmentField Is Nothing) Then
                If (Me.indentLengthsField Is Nothing) Then
                If (method Is Nothing) Then
                If (Not parameter.NeedsLocalVariable) Then
                If (objectToConvert Is Nothing) Then
                If (returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType)
                if (type.Equals(typeInCollection) == false && this.IsSubtypeOf(typeInCollection, type))
                If _host Is Nothing Then
                If Not keepFileNames.Contains(pair.Key) _
                If Not projectFiles.ContainsKey(fileName) Then
                If schemaError.SchemaLocation Is Nothing Then
                If type.Equals(typeInCollection) = False AndAlso Me.IsSubtypeOf(typeInCollection, type) Then
                if(_host == null)
                If(ef.ClrType(primitiveProperty.TypeUsage) = GetType(byte())) Then
                If(ef.ClrType(simpleProperty.TypeUsage) = GetType(byte())) Then
                if(returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
                importParameter.EsqlParameterName = parameter.Name
                importParameter.EsqlParameterName = parameter.Name;
                importParameter.ExecuteParameterName = importParameter.FunctionParameterName
                importParameter.ExecuteParameterName = importParameter.FunctionParameterName;
                importParameter.ExecuteParameterName = importParameter.LocalVariableName
                importParameter.ExecuteParameterName = importParameter.LocalVariableName;
                importParameter.FunctionParameterType = "ObjectParameter"
                importParameter.FunctionParameterType = "ObjectParameter";
                importParameter.FunctionParameterType = code.GetTypeName(typeUsage)
                importParameter.FunctionParameterType = code.GetTypeName(typeUsage);
                importParameter.IsNullableOfT = clrType.IsValueType
                importParameter.IsNullableOfT = clrType.IsValueType;
                importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName & "Parameter")
                importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName + "Parameter");
                importParameter.NeedsLocalVariable = False
                importParameter.NeedsLocalVariable = false;
                importParameter.NeedsLocalVariable = True
                importParameter.NeedsLocalVariable = true;
                importParameter.RawClrTypeName = If(TypeOf typeUsage.EdmType Is EnumType, code.GetTypeName(typeUsage.EdmType), code.Escape(clrType))
                importParameter.RawClrTypeName = typeUsage.EdmType is EnumType ? code.GetTypeName(typeUsage.EdmType) : code.Escape(clrType);
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                List<XmlReader> readers = new List<XmlReader>();
                Me.endsWithNewline = false
                Me.endsWithNewline = true
                Me.GenerationEnvironment.Append(Me.currentIndentField)
                Me.GenerationEnvironment.Append(textToAppend)
                Me.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - Me.currentIndentField.Length))
                Me.GenerationEnvironment.Length - (CurrentIndent.Length + 2), (CurrentIndent.Length + 2))
                Me.generationEnvironmentField = value
                Me.indentLengths.RemoveAt((Me.indentLengths.Count - 1))
                Me.sessionField = value
                metadataWorkspace.RegisterItemCollection(storageMappingItemCollection)
                metadataWorkspace.RegisterItemCollection(storageMappingItemCollection);
                metadataWorkspace.RegisterItemCollection(storeItemCollection)
                metadataWorkspace.RegisterItemCollection(storeItemCollection);
                namespaceName += "."
                namespaceName += ".";
                newError.IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning;
                newError.IsWarning = schemaError.Severity = EdmSchemaErrorSeverity.Warning
                Next
                numberOfConflicts += 1
                OfType(SchemaInformation.Functions, Store.ScalarFunction) as r 
                OfType(SchemaInformation.TableConstraints, Store.ForeignKeyConstraint) as c,
                PopIndent()
                projectFiles.Add(projectItem.FileNames(0), projectItem)
                projectFiles.Add(projectItem.FileNames[0], projectItem);
                PushIndent(CodeRegion.GetIndent(1))
                r.Parameters as p)
                r.Parameters as p)) as sp
                Return
                Return _edmxSectionName
                Return _fileExtension
                Return _rootElementName
                Return attribute.Value
                return attribute.Value;
                Return False
                return false;
                Return ItemCollection.EdmVersion
                Return Me.currentIndentField
                Return Me.errorsField
                Return Me.generationEnvironmentField
                Return Me.indentLengthsField
                Return Me.sessionField
                Return Me.toStringHelperField
                Return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, errors)
                return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, out errors);
                Return New List(Of String)
                return new List<string>();
                Return New VsEntityFrameworkTemplateFileManager(transformation)
                return new VsEntityFrameworkTemplateFileManager(transformation);
                Return String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName)
                return String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName);
                return this.currentIndentField;
                return this.errorsField;
                return this.generationEnvironmentField;
                return this.indentLengthsField;
                return this.sessionField;
                return this.toStringHelperField;
                Return True
                return true;
                return TryLoadRootElementFromEdmx(sourcePath, out schemaElement);
                Return TryLoadRootElementFromEdmx(sourcePath, schemaElement)
                return;
                schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
                schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)
                SchemaInformation.Functions as r 
                SchemaInformation.Procedures as r 
                set
                Set
                set
                sp.SchemaName
                String.Format(CultureInfo.CurrentCulture,
                String.Format(CultureInfo.CurrentCulture, _
                String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ConflictingGeneratedNavPropName"), navProperty.Name, entity.FullName, refPropertyName)))
                String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ConflictingGeneratedNavPropName"), navProperty.Name, entity.FullName, refPropertyName)))
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                System.Type t = objectToConvert.GetType();
                templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION
                templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION;
                this.endsWithNewline = false;
                this.endsWithNewline = true;
                this.GenerationEnvironment.Append(textToAppend);
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.GenerationEnvironment.Length - (CurrentIndent.Length + 5), CurrentIndent.Length + 3);
                this.generationEnvironmentField = value;
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                this.sessionField = value;
                Throw New ArgumentNullException("Could not obtain DTE from host")
                throw new ArgumentNullException("Could not obtain DTE from host");
                Throw New ArgumentNullException("Could not obtain hostServiceProvider")
                throw new ArgumentNullException("Could not obtain hostServiceProvider");
                Throw New Global.System.ArgumentNullException("indent")
                throw new global::System.ArgumentNullException("indent");
                Try
                try
                Try
                Type clrType = ef.UnderlyingClrType(parameter.TypeUsage.EdmType);
                typeName = clrType.FullName
                typeName = clrType.GetElementType().FullName & "()"
                typeName = Escape(clrType)
                typeName = Escape(clrType);
                typeName;
                typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
                TypeUsage typeUsage = parameter.TypeUsage;
                value.Start = _generationEnvironment.Length
                value.Start = _generationEnvironment.Length;
                var content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText;
                var fileName = Path.Combine(outputPath, block.Name);
                WHERE fks.cRef = Ref(c)) as r
                WriteFunctionParameters(parameters)
                WriteFunctionParameters(parameters);
               ,    c.DeleteRule = 'CASCADE' as IsCascadeDelete
               ,    c.Id as RelationshipId
               ,    c.Name as RelationshipName
               ,    c.Parent as FromTable
               ,    fks.FromColumn.Name as FromColumnName
               ,    fks.Ordinal as Ordinal
               ,    fks.ToColumn.Name as ToColumnName
               , r.FromColumnName
               , r.FromTable.CatalogName as FromTableCatalog
               , r.FromTable.Name as FromTableName
               , r.FromTable.SchemaName as FromTableSchema
               , r.IsCascadeDelete
               , r.Ordinal
               , r.RelationshipId
               , r.RelationshipName
               , r.ToColumnName
               , r.ToTable.Name as ToTableName
               , r.ToTable.SchemaName as ToTableSchema
               }
               CodeGenerationTools.GetResourceString("EntityTypeAndSetAccessibilityConflict"),
               GetResourceString("EntityTypeAndSetAccessibilityConflict"),
               SELECT 
              ,   c.ColumnType.DateTimePrecision as DateTimePrecision
              ,   c.ColumnType.MaxLength as MaxLength
              ,   c.ColumnType.Precision as Precision
              ,   c.ColumnType.Scale as Scale
              ,   c.ColumnType.TypeName as TypeName
              ,   c.Id as ColumnId
              ,   c.IsIdentity
              ,   c.IsNullable
              ,   c.IsStoreGenerated
              ,   c.Name as ColumnName
              ,   c.Ordinal
              ,   CASE WHEN pk.IsPrimaryKey IS NULL THEN false ELSE pk.IsPrimaryKey END as IsPrimaryKey
              ,   CAST(NULL as string) as ReturnTypeName
              ,   false as IsAggregate
              ,   false as IsBuiltIn
              ,   false as IsComposable
              ,   false as IsIdentity
              ,   false as IsNiladic
              ,   false as IsPrimaryKey
              ,   false as IsStoreGenerated
              ,   false as IsTvf
              ,   IsTvf(r) as IsTvf
              ,   p.Mode as Mode
              ,   p.Name as ParameterName
              ,   p.Ordinal as Ordinal
              ,   p.ParameterType.TypeName as ParameterType
              ,   r.IsAggregate as IsAggregate
              ,   r.IsBuiltIn as IsBuiltIn
              ,   r.IsNiladic as IsNiladic
              ,   r.Name as Name
              ,   r.ReturnType.TypeName as ReturnTypeName
              ,   r.SchemaName as SchemaName
              ,   t.ColumnName
              ,   t.DateTimePrecision
              ,   t.IsIdentity
              ,   t.IsNullable
              ,   t.IsStoreGenerated
              ,   t.MaxLength
              ,   t.Name
              ,   t.Ordinal
              ,   t.Precision
              ,   t.Scale
              ,   t.SchemaName                           
              ,   t.TypeName
              ,   TREAT(r as Store.ScalarFunction).IsAggregate as IsAggregate
              ,   TREAT(r as Store.ScalarFunction).ReturnType.TypeName as ReturnTypeName
              ,   true as IsComposable
              ,   tvf.ColumnName
              ,   tvf.DateTimePrecision
              ,   tvf.IsNullable
              ,   tvf.MaxLength
              ,   tvf.Name
              ,   tvf.Ordinal
              ,   tvf.Precision
              ,   tvf.Scale
              ,   tvf.SchemaName                           
              ,   tvf.TypeName
              ,   v.ColumnName
              ,   v.DateTimePrecision
              ,   v.IsIdentity
              ,   v.IsNullable
              ,   v.IsStoreGenerated
              ,   v.MaxLength
              ,   v.Name
              ,   v.Ordinal
              ,   v.Precision
              ,   v.Scale
              ,   v.SchemaName                           
              ,   v.TypeName
              FROM
              FROM (
              SELECT
              SELECT 
            ' Add missing files to the project
             CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)) :
            ' default to public
             Else
             Escape(edmType));
            ' find a unique name by adding suffix as necessary
             GetGlobalItemName(type))));
             if (ef.ClrType(primitiveProperty.TypeUsage) == typeof(byte[]))
             if (ef.ClrType(simpleProperty.TypeUsage) == typeof(byte[]))
             If(ef.ClrType(primitiveProperty.TypeUsage) = GetType(byte())) Then
             If(ef.ClrType(simpleProperty.TypeUsage) = GetType(byte())) Then
             Nothing) ' 
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"))
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"));
            ' Remove unused items from the project
            ' run on worker thread to prevent T4 calling back into VS
             String.Format(CultureInfo.CurrentCulture,
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 & ":StoreGeneratedPattern", False, storeGeneratedPatternProperty) AndAlso
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty) &&
            (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
            (SELECT
            ,   sp.Name
            ,   sp.Ordinal
            .CamelCaseFields = False _
            .CreateContextAddToMethods = True, _
            .FullyQualifySystemTypes = True, _
            .ReferenceCsdlPaths = New string () {}, _
            .SingleOrDefault(n => Object.ReferenceEquals(n.RelationshipType, navProperty.RelationshipType) && !Object.ReferenceEquals(n, navProperty));
            .SourceCsdlPath = "$edmxInputFile$", _
            // 
            // Add missing files to the project
            // because the appropriate indent will be added when the next time Write() is called
            // Check if the current text ends with a newline
            // default to public
            // Everywhere there is a newline in the text, add an indent after it
            // find a unique name by adding suffix as necessary
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // If we're starting off, or if the previous text ended with a newline,
            // of the more complex stuff further down.
            // Remove unused items from the project
            // run on worker thread to prevent T4 calling back into VS
            // This is an optimization. If the current indent is "", then we don't have to do any
            // we have to append the current indent first.
            /// </summary>
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            : base(textTemplating)
            : base(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
            : base(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
            : base(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
            : this(textTransformation)
            ??
            [error].ErrorText = message
            [error].IsWarning = true
            _CamelCaseFields = value
            _edmItemCollection = edmItemCollection
            _edmItemCollection = edmItemCollection;
            _edmToObjectNamespaceMap = Value
            _edmxSectionName = edmxSectionName
            _edmxSectionName = edmxSectionName;
            _EsqlParameterName = value
            _ExecuteParameterName = value
            _fileExtension = fileExtension
            _fileExtension = fileExtension;
            _FullyQualifySystemTypes = value
            _FunctionParameterName = value
            _FunctionParameterType = value
            _IsNullableOfT = value
            _knownIdentifiers = New HashSet(Of String)(StringComparer.OrdinalIgnoreCase)
            _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
            _LocalVariableName = value
            _NeedsLocalVariable = value
            _RawClrTypeName = value
            _RawFunctionParameterName = value
            _referenceSchemas.AddRange(referenceSchemas)
            _referenceSchemas.AddRange(referenceSchemas);
            _resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design",
            _resourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
            _rootElementName = rootElementName
            _rootElementName = rootElementName;
            _Source = value
            _storeItemCollection = storeItemCollection
            _storeItemCollection = storeItemCollection;
            _textTransformation = textTransformation
            _textTransformation = textTransformation;
            _textTransformation.GenerationEnvironment.Length = _beforeRegionLength
            _textTransformation.GenerationEnvironment.Length = _beforeRegionLength;
            _textTransformation.Write(GetIndent(indentLevel))
            _textTransformation.Write(GetIndent(indentLevel));
            _textTransformation.WriteLine("#End Region")
            _textTransformation.WriteLine("#endregion");
            _textTransformation.WriteLine(String.Empty)
            _textTransformation.WriteLine(String.Empty);
            {
            { "Friend", 2}, _
            { "internal", 2},
            { "private", 1},
            { "Private", 1}, _
            { "protected", 3},
            { "Protected", 3}, _
            { "Public", 4} _
            { "public", 4},
            }
            ++numberOfConflicts;
            '''</summary>
            '''<summary>
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture)
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
            baseType = baseType.BaseType as EntityType;
            baseType = TryCast(baseType.BaseType, EntityType)
            'because the appropriate indent will be added when the next time Write() is called
            bool foundErrors = false;
            bool isLazyLoading = false;
            CamelCaseFields = false,
            'Check if the current text ends with a newline
            checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
            checkOutAction = Function(fileName) dte.SourceControl.CheckOutItem(fileName)
            checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, Nothing, Nothing))
            checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
            CreateContextAddToMethods = true,
            CreateContextAddToMethods = userSettings.CreateContextAddToMethods
            currentBlock = value;
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            Dim adjustedIdentifier As String = identifier
            Dim allReaders As New List(Of XmlReader)()
            Dim arrayInit As String = String.Join(", ", DirectCast(value, Byte()).Select(Function(b) b.ToString(CultureInfo.InvariantCulture)).ToArray())
            Dim attribute As XAttribute = model.Attribute("Namespace")
            Dim clrType = _ef.UnderlyingClrType(edmType)
            Dim clrType As Type = _ef.UnderlyingClrType(typeUsage.EdmType)
            Dim decalredNavigationProperties As IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
            Dim declaredMembers As IEnumerable(Of EdmMember) = entity.Members.Where(Function(m) m.DeclaringType Is entity)
            Dim dte = DirectCast(hostServiceProvider.GetService(GetType(EnvDTE.DTE)), EnvDTE.DTE)
            Dim dto As DateTimeOffset = DirectCast(value, DateTimeOffset)
            Dim edmxNs As XNamespace = schemaConstants.EdmxNamespace
            Dim element As XElement = XElement.Load(edmxPath, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)
            Dim entity As EntityType = refConstraint.ToRole.GetEntityType()
            Dim extension As String = Path.GetExtension(sourcePath)
            Dim footerText As String = _generationEnvironment.ToString(footer.Start, footer.Length)
            Dim foundErrors As Boolean = False
            Dim generatedFileNames As IEnumerable(Of String) = MyBase.Process(split)
            Dim headerText As String = _generationEnvironment.ToString(header.Start, header.Length)
            Dim hostServiceProvider = _textTransformation.Host.AsIServiceProvider()
            Dim importParameter As FunctionImportParameter = importParameters(i)
            Dim importParameter As New FunctionImportParameter()
            Dim isLazyLoading As Boolean = False
            Dim keepFileNameSet = New HashSet(Of String)(keepFileNames)
            Dim numberOfConflicts As Integer = 0
            Dim originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames(0))
            Dim outputPath As String = Path.GetDirectoryName(_textTransformation.Host.TemplateFile)
            Dim ownedReaders As New List(Of XmlReader)()
            Dim parameter As New FactoryMethodParameter()
            Dim parameters As IEnumerable(Of FunctionImportParameter) = FunctionImportParameter.Create(edmFunction.Parameters, code, ef)
            Dim paramList As String = String.Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
            Dim projectFiles = New Dictionary(Of String, EnvDTE.ProjectItem)()
            Dim returnType As TypeUsage = If(edmFunction.ReturnParameters.Count = 0, Nothing, ef.GetElementType(edmFunction.ReturnParameters(0).TypeUsage))
            Dim returnValue As String = ""
            Dim runtime As XElement = edmxDocument.Element(edmxNs + "Runtime")
            Dim schemaElement As XElement = Nothing
            Dim section As XElement = runtime.Element(edmxNs + sectionName)
            Dim sectionNs As XNamespace = GetNamespace(schemaConstants)
            Dim storageMappingItemCollection As StorageMappingItemCollection = Nothing
            Dim templateVersion As String = Nothing
            Dim typeName As String = If(TypeOf typeUsage.EdmType Is EnumType, Escape(typeUsage.EdmType.Name), Escape(clrType))
            Dim typeName As String = MultiSchemaEscape(usage.EdmType, code)
            Dim typesInCollection As IEnumerable(Of EntityType) = itemCollection.GetItems(Of EntityType)()
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            dte = DirectCast(hostServiceProvider.GetService(GetType(EnvDTE.DTE)), EnvDTE.DTE)
            edmItemCollection = (EdmItemCollection)itemCollection;
            edmItemCollection = DirectCast(itemCollection, EdmItemCollection)
            Else
            else
            Else
            else
            Else
            else
            Else
            else
            Else
            else if(extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase))
            ElseIf extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase) Then
            End Function
            End Get
            End If
            End Property
            End Set
            End Try
            End While
            EndBlock()
            EndBlock();
            EntityType entity = refConstraint.ToRole.GetEntityType();
            EnvDTE.DTE dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(new System.CodeDom.Compiler.CompilerError(Host.TemplateFile, -1, -1, "",
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6017",
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6017", String.Format(CultureInfo.CurrentCulture,
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6034",
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, 6023, formatMessage(item)))
            'Everywhere there is a newline in the text, add an indent after it
            Exit Sub
            FactoryMethodParameter parameter = new FactoryMethodParameter();
            File.WriteAllText(fileName, content)
            File.WriteAllText(fileName, content);
            files.Add(CurrentBlock)
            files.Add(CurrentBlock);
            files.Reverse()
            files.Reverse();
            Finally
            finally
            Finally
            first = false;
            For Each block As Block In files
            For Each fileName As String In keepFileNameSet
            For Each pair As KeyValuePair(Of String, EnvDTE.ProjectItem) In projectFiles
            For Each parameter As FunctionImportParameter In parameters
            For Each projectItem As EnvDTE.ProjectItem In templateProjectItem.ProjectItems
            For Each schemaError As EdmSchemaError In errors
            For Each typeInCollection As EntityType In typesInCollection
            foreach (EdmSchemaError error in errors)
            foreach (EntityType typeInCollection in typesInCollection)
            foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
            foreach (FunctionImportParameter parameter in parameters)
            foreach (string fileName in keepFileNameSet)
            foreach (var block in files)
            foreach (var pair in projectFiles)
            FROM
            FROM 
            FROM (
            FROM (  
            FullyQualifySystemTypes = true,
            FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes
            Function IsTvf(f Store.Function) as (f is of (Store.TableValuedFunction))
            Function(m) String.Format(CultureInfo.CurrentCulture, _
            Function(t) String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile)
            FunctionImportParameter importParameter = importParameters[i];
            FunctionImportParameter importParameter = new FunctionImportParameter();
            Get
            get
            Get
            get
            Get
            get
            Get
            get
            Get
            get
            Get
            get
            Get
            get
            Get
            get
            Get
            get { return _edmxSectionName; }
            get { return _fileExtension; }
            get { return _rootElementName; }
            GetResourceString("Template_CaseInsensitiveEntitySetConflict"), e.EntityContainer.Name, e.Name))
            GetResourceString("Template_CaseInsensitiveMemberConflict"), m.DeclaringType.FullName, m.Name))
            GetResourceString("Template_CaseInsensitiveTypeConflict"), GetGlobalItemName(g)))
            '''Gets or sets format provider to be used by ToStringWithCulture method.
            getterAccessibility = String.Empty
            getterAccessibility = String.Empty;
            IEnumerable<EntityType> typesInCollection = itemCollection.GetItems<EntityType>();
            IEnumerable<FunctionImportParameter> parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            if (!(edmType is EnumType))
            if (!hash.Add(item))
            if (!parameter.NeedsLocalVariable)
            if (!TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, out templateVersion))
            if (!ValidateInputPath(sourcePath, _textTransformation))
            if (((this.GenerationEnvironment.Length == 0) 
            if ((indent == null))
            If ((Me.GenerationEnvironment.Length = 0)  _
            if ((this.currentIndentField.Length == 0))
            if ((this.indentLengths.Count > 0))
            if (_dynamicHost == null)
            if (attribute != null)
            if (clrType.IsValueType && _ef.IsNullable(typeUsage))
            if (CurrentBlock != null)
            if (dte != null)
            if (dte == null)
            if (dte.SourceControl == null
            if (edmFunction.IsComposableAttribute)
            if (ef.IsNullable(usage))
            if (extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase))
            if (hostServiceProvider == null)
            if (importParameter.NeedsLocalVariable)
            If (indent = Nothing) Then
            if (IsFileContentDifferent(fileName, content))
            If (Me.currentIndentField.Length = 0) Then
            If (Me.indentLengths.Count > 0) Then
            if (namespaceName != String.Empty)
            if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            If (Not ItemCollection Is Nothing) Then
            if (parameter.IsComplexType)
            if (parameter.Mode == ParameterMode.In)
            If (returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType)
            if (runtime == null)
            if (schemaConstants.MinimumTemplateVersion > new Version(templateVersion))
            if (section == null)
            if (string.IsNullOrEmpty(textToAppend))
            if (t == secondType)
            if (templateProjectItem.ProjectItems == null)
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            if (this.endsWithNewline)
            if (TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, out storageMappingItemCollection))
            if (TryLoadRootElement(sourcePath, out schemaElement))
            if (value != null)
            If _dynamicHost Is Nothing Then
            If attribute IsNot Nothing Then
            If Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) Then
            If clrType.IsValueType AndAlso _ef.IsNullable(typeUsage) Then
            If CurrentBlock IsNot Nothing Then
            If dte Is Nothing Then
            If dte IsNot Nothing Then
            If dte.SourceControl Is Nothing OrElse Not dte.SourceControl.IsItemUnderSCC(fileName) OrElse dte.SourceControl.IsItemCheckedOut(fileName) Then
            If edmFunction.IsComposableAttribute Then
            If ef.IsNullable(usage) Then
            If extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase) Then
            If hostServiceProvider Is Nothing Then
            If importParameter.NeedsLocalVariable Then
            If IsFileContentDifferent(fileName, content) Then
            If Me.endsWithNewline Then
            If namespaceName <> String.Empty Then
            If Not (TypeOf edmType Is EnumType) Then
            If Not hash.Add(item) Then
            If Not TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, templateVersion) Then
            If Not ValidateInputPath(sourcePath, _textTransformation) Then
            If parameter.Mode = ParameterMode.In Then
            If runtime Is Nothing Then
            If schemaConstants.MinimumTemplateVersion > New Version(templateVersion) Then
            If section Is Nothing Then
            If String.IsNullOrEmpty(textToAppend) Then
            If t.Equals(secondType) Then
            If templateProjectItem.ProjectItems Is Nothing Then
            If textToAppend.EndsWith(Global.System.Environment.NewLine, Global.System.StringComparison.CurrentCulture) Then
            'If the text ends with a newline, then we should strip off the indent added at the very end
            If TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, storageMappingItemCollection) Then
            If TryLoadRootElement(sourcePath, schemaElement) Then
            If userSettings.SourceCsdlPath = ("$" & "edmxInputFile" & "$")
            If value IsNot Nothing Then
            'If we're starting off, or if the previous text ended with a newline,
            If(_resourceManager Is Nothing)
            if(bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading))
            If(navProperty.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many) Then
            If(Not clrType.IsArray) Then
            If(parameter.IsComplexType) Then
            importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName)
            importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName);
            importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name))
            importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name));
            importParameter.Source = parameter
            importParameter.Source = parameter;
            importParameters.Add(importParameter)
            importParameters.Add(importParameter);
            int numberOfConflicts = 0;
            itemCollection = Nothing
            itemCollection = null;
            LEFT OUTER JOIN (
            List<XmlReader> allReaders = new List<XmlReader>();
            List<XmlReader> ownedReaders = new List<XmlReader>();
            m_CsdlNamespace = Value
            m_currentBlock = value
            m_EdmxNamespace = Value
            m_MinimumTemplateVersion = Value
            m_MslNamespace = Value
            m_SsdlNamespace = Value
            Me.currentIndentField = ""
            Me.currentIndentField = (Me.currentIndentField + indent)
            Me.endsWithNewline = true
            Me.Errors.Add([error])
            Me.GenerationEnvironment.AppendLine
            Me.GenerationEnvironment.Remove(
            Me.indentLengths.Add(indent.Length)
            Me.indentLengths.Clear
            Me.New(textTransformation)
            Me.Write("        Dim ")
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write("        OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #End Region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #Region """)
            Me.Write("        Return MyBase.CreateQuery(Of ")
            Me.Write("        Return MyBase.ExecuteFunction")
            Me.Write("        Return MyBase.ExecuteFunction(Of ")
            Me.Write("     ")
            Me.Write("    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write("    ")
            Me.Write("    None"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(" ")
            Me.Write(" = ")
            Me.Write(" = MyBase.CreateObjectSet(Of ")
            Me.Write(" = New ObjectParameter(""")
            Me.Write(" As ")
            Me.Write(" As ObjectParameter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        If (")
            Me.Write(" As ObjectSet(Of ")
            Me.Write(" Enum ")
            Me.Write(" Function ")
            Me.Write(" Is Nothing) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ")
            Me.Write(" Partial Class ")
            Me.Write(" Property ")
            Me.Write(" ReadOnly Property ")
            Me.Write(" Sub AddTo")
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Partial Private Sub OnContextCreated()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #End Region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
            Me.Write("""")
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return ")
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""").Value = value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""").Value"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute(IsReference:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Serializable()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<Serializable()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<DataContractAttribute(IsReference:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""", """)
            Me.Write(""", ")
            Me.Write(""", GetType(")
            Me.Write(""", mergeOption")
            Me.Write(""", Name:=""")
            Me.Write(""", value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        MyBase.New(""name=")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New(ByVal connection As EntityConnection)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Sub New(ByVal connectionString As String)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <param name=""mergeOption""></param>")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <BrowsableAttribute(False)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmFunction(""")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EnumMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <XmlIgnoreAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <SoapIgnoreAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribu"& _ 
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ComplexObject"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Inherits ObjectContext"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    #Region """)
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' </auto-generated>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'---------------------------------------------------------"& _ 
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'------------------------------------------------------------------------------"& _ 
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"' ")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmComplexTypeAttribute(NamespaceName:=""")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmEntityTypeAttribute(NamespaceName:=""")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"<EdmEnumTypeAttribute(NamespaceName:=""")
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write("(""")
            Me.Write("(")
            Me.Write("() As ")
            Me.Write("() As EntityCollection(Of ")
            Me.Write("() As EntityReference(Of ")
            Me.Write("() As ObjectSet(Of ")
            Me.Write("(ByVal ")
            Me.Write(") As ")
            Me.Write(") As IQueryable(Of ")
            Me.Write(")""")
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (")
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        MyBase.AddObject(""")
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(")")
            Me.Write(")(""")
            Me.Write(")(""[")
            Me.Write("))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write("))>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write("), """)
            Me.Write(")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(", GetType(")
            Me.Write("](")
            Me.Write("].[")
            Me.Write("<Assembly: EdmRelationshipAttribute(""")
            Me.Write("<FlagsAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write("<KnownTypeAttribute(GetType(")
            Me.Write("End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write("End Enum"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write("End Namespace"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me, IEntityWithRelationships).RelationshipManager.G"& _ 
            Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return CType(Me,IEntityWithRelationships).RelationshipManager.Ge"& _ 
            Me.Write("mergeOption As MergeOption) As ")
            Me.Write("Namespace ")
            Me.Write("Partial Class ")
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CType(Me, IEntityWithRelationships).RelationshipManager.GetRelat"& _ 
            Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If (Not value Is Nothing)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                CType(Me, IEntityWith"& _ 
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForReadOnlyProperty(entitySet)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(addTo.ElementType)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(complex)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(container)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(entity)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForType(enumType)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(addTo.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(association.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(association.NamespaceName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(BaseTypeName(entity, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(complex)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(container)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(entity)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(entitySet)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(enumType)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(enumType.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes:= False)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(member)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(entitySet)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(code.MustInheritOption(entity))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(entitySet))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringAfter(paramList, ", ")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", If(association.IsForeignKey, "True", Nothing))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionConstructors")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionPartialMethods")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(complex.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(complex.NamespaceName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(container.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(edmFunction.NamespaceName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 0, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 1, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndName(association, 0)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EndName(association, 1)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entity.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entity.NamespaceName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(entitySet.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(enumType.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(enumType.NamespaceName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 0, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 1, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine1")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine2")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine3")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionConstructors")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionPartialMethods")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Guid.NewGuid().ToString("D", CultureInfo.InvariantCulture)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(parameter.IsNullableOfT, parameter.FunctionParameterName + ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType Is Nothing, "", "(Of " & MultiSchemaEscape(returnType, code) & ")")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(If(returnType IsNot Nothing, "ObjectResult(Of " & MultiSchemaEscape(returnType, code) & ")", "Integer")))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complex, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(container, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entity, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entitySet, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(enumType, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(member, region.CurrentIndentLevel + 1)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(member.Value))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(addTo.ElementType, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(entitySet.ElementType, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(returnType, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(subType, code)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(namespaceName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.NamespaceName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(parameterName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(paramList))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(refPropertyName))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextCommonCtorComment"), container.Name)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_GenCommentAddToMethodVb"), addTo.Name)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_GenCommentAddToMethodVb"), addTo.Name)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", parameters.Select(Function(p) "@" + p.EsqlParameterName).ToArray())))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(complex)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(container)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(entity)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(entitySet)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(enumType)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(member)))
            Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)))
            Me.Write(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
            Me.Write(textToAppend)
            Me.WriteLine(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
            MyBase.New(textTemplating)
            MyBase.New(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
            MyBase.New(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
            MyBase.New(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
            namespaceName += Escape(part)
            namespaceName += Escape(part);
            namespaceName = GetObjectNamespace(ModelNamespace)
            needsMethod = !ContainsCascadeDeleteAssociation(itemCollection, baseType);
            needsMethod = Not ContainsCascadeDeleteAssociation(itemCollection, baseType)
            Next
            numberOfConflicts += 1
            'of the more complex stuff further down.
            ON t.ColumnId = pk.Id                   
            ON v.ColumnId = pk.Id                   
            ORDER BY
            parameter.IsComplexType = property.TypeUsage.EdmType is ComplexType;
            parameter.IsComplexType = TypeOf edmProperty.TypeUsage.EdmType Is ComplexType
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CommentFactoryMethodParam"), edmProperty.Name)
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CommentFactoryMethodParam"), property.Name);
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CommentFactoryMethodParam"), edmProperty.Name)
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CommentFactoryMethodParam"), property.Name);
            parameter.ParameterName = code.Escape(parameter.RawParameterName)
            parameter.ParameterName = code.Escape(parameter.RawParameterName);
            parameter.ParameterType = multiSchemaEscape(edmProperty.TypeUsage, code)
            parameter.ParameterType = multiSchemaEscape(property.TypeUsage, code);
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(edmProperty.Name, code))
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(property.Name, code));
            parameter.Source = edmProperty
            parameter.Source = property;
            parameters.Add(parameter)
            parameters.Add(parameter);
            Private formatProviderField  As System.IFormatProvider = Global.System.Globalization.CultureInfo.InvariantCulture
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
            projectSyncAction = Sub(keepFileNames) ProjectSync(templateProjectItem, keepFileNames)
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, Nothing, Nothing))
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
            Public Function ToStringWithCulture(ByVal objectToConvert As Object) As String
            Public Property FormatProvider() As System.IFormatProvider
            public string ToStringWithCulture(object objectToConvert)
            public System.IFormatProvider FormatProvider
            ReferenceCsdlPaths = new string[] {},
            ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths
            referenceSchemas = New String(-1) {}
            referenceSchemas = new string[0];
            Return
            return !refConstraint.ToProperties.Where(tp => !entity.KeyMembers.Contains(tp)).Any();
            Return "_" & CamelCase(name)
            Return "_" & name
            return "_" + CamelCase(name);
            return "_" + name;
            return "abstract";
            Return "Friend"
            return "internal";
            Return "MustInherit"
            Return "Private"
            return "private";
            Return "Protected"
            return "protected";
            Return "Public"
            return "public";
            return ((EdmType)item).Name;
            return ((EntityContainer)item).Name;
            return ((EntityType)property.DeclaringType).KeyMembers.Contains(property);
            return (bool)nullableFacet.Value;
            return (string)_templateFile.GetValue(_instance, null);
            Return (type.FullName & ".") + value.ToString()
            Return _CamelCaseFields
            Return _dynamicHost
            return _dynamicHost;
            Return _edmToObjectNamespaceMap
            Return _EsqlParameterName
            Return _ExecuteParameterName
            Return _FullyQualifySystemTypes
            Return _FunctionParameterName
            Return _FunctionParameterType
            Return _IsNullableOfT
            Return _LocalVariableName
            Return _NeedsLocalVariable
            Return _RawClrTypeName
            Return _RawFunctionParameterName
            Return _regionIndentLevel
            Return _resourceManager
            Return _Source
            Return 0.0
            Return adjustedIdentifier
            return adjustedIdentifier;
            Return CBool(nullableFacet.Value)
            return clrType.IsValueType && isNullable == true ?
            Return constants.CsdlNamespace
            return constants.CsdlNamespace;
            Return constants.MslNamespace
            return constants.MslNamespace;
            Return constants.SsdlNamespace
            return constants.SsdlNamespace;
            Return CType(item, EdmType).Name
            Return CType(item, EntityContainer).Name
            Return declaredMembers.Union(decalredNavigationProperties.Cast(Of EdmMember)()).Select(Function(m) m.Name)
            Return DirectCast(_errors.GetValue(_instance, Nothing), System.CodeDom.Compiler.CompilerErrorCollection)
            Return DirectCast(_generationEnvironment.GetValue(_instance, Nothing), StringBuilder)
            Return DirectCast(_templateFile.GetValue(_instance, Nothing), String)
            Return DirectCast(edmProp.DeclaringType, EntityType).KeyMembers.Contains(edmProp)
            Return edmItemCollection
            return edmItemCollection;
            Return enumType.Members.Select(Function(m) m.Name)
            Return enumType.UnderlyingType.ClrEquivalentType
            return enumType.UnderlyingType.ClrEquivalentType;
            Return Escape(typeUsage.EdmType.Name)
            return Escape(typeUsage.EdmType.Name);
            Return False
            return false;
            Return foundErrors
            return foundErrors;
            Return generatedFileNames
            return generatedFileNames;
            return GetElementType(((CollectionType)typeUsage.EdmType).TypeUsage);
            Return GetElementType(DirectCast(typeUsage.EdmType, CollectionType).TypeUsage)
            Return identifier
            Return identifier(0).ToString(CultureInfo.InvariantCulture).ToLowerInvariant()
            return identifier;
            return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant();
            Return If(clrType.IsValueType AndAlso isNullable = True, String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName), typeName)
            return ItemCollection.EdmVersion;
            Return m_CsdlNamespace
            Return m_currentBlock
            Return m_EdmxNamespace
            Return m_MinimumTemplateVersion
            Return m_MslNamespace
            Return m_SsdlNamespace
            Return Me.GenerationEnvironment.ToString
            Return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, errors)
            return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, out errors);
            Return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, errors)
            return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, out errors);
            Return MultiSchemaEscape(usage.EdmType, code)
            return MultiSchemaEscape(usage.EdmType, code);
            Return name
            return name;
            Return namespaceName
            return namespaceName;
            Return Not refConstraint.ToProperties.Where(Function(tp) Not entity.KeyMembers.Contains(tp)).Any()
            Return Nothing
            return null;
            Return primitiveType.ClrEquivalentType
            return primitiveType.ClrEquivalentType;
            Return returnValue
            return returnValue;
            return rootElement != null;
            Return rootElement IsNot Nothing
            Return String.Empty
            return String.Empty;
            return string.Empty;
            return String.Empty;
            Return String.Format(CultureInfo.InvariantCulture, "{0}D", DirectCast(value, Decimal).ToString(CultureInfo.InvariantCulture))
            Return String.Format(CultureInfo.InvariantCulture, "ICollection( Of {0})", GetTypeName(collectionType.TypeUsage, modelNamespace))
            Return String.Format(CultureInfo.InvariantCulture, "ICollection(Of {0})", Escape(DirectCast(typeUsage.EdmType, CollectionType).TypeUsage))
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", Escape(((CollectionType)typeUsage.EdmType).TypeUsage));
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
            Return String.Format(CultureInfo.InvariantCulture, "New Byte() {{{0}}}", arrayInit)
            return string.Format(CultureInfo.InvariantCulture, "new Byte[] {{{0}}}", arrayInit);
            return string.Format(CultureInfo.InvariantCulture, "new DateTime({0}, DateTimeKind.Unspecified)",
            Return String.Format(CultureInfo.InvariantCulture, "New DateTime({0}, DateTimeKind.Unspecified)", DirectCast(value, DateTime).Ticks)
            return string.Format(CultureInfo.InvariantCulture, "new DateTimeOffset({0}, new TimeSpan({1}))",
            Return String.Format(CultureInfo.InvariantCulture, "New DateTimeOffset({0}, New TimeSpan({1}))", dto.Ticks, dto.Offset.Ticks)
            Return String.Format(CultureInfo.InvariantCulture, "New Guid(""{0}"")", DirectCast(value, Guid).ToString("D", CultureInfo.InvariantCulture))
            return string.Format(CultureInfo.InvariantCulture, "new Guid(\"{0}\")",
            return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})",
            Return String.Format(CultureInfo.InvariantCulture, "New TimeSpan({0})", DirectCast(value, TimeSpan).Ticks)
            Return structural.Members.Where(Function(m) m.DeclaringType Is structural).Select(Function(m) m.Name)
            Return textTransformation
            return textTransformation;
            return this.GenerationEnvironment.ToString();
            Return TranslateUserAccessibilityToCSharpAccessibility(accessibility)
            return TranslateUserAccessibilityToCSharpAccessibility(accessibility);
            return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
            Return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement) OrElse TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement) OrElse TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, rootElement)
            return type.FullName + "." + value.ToString();
            Return typeName
            return typeName;
            Return typeUsage
            return typeUsage;
            return value + append;
            return;
            rootElement = Nothing
            rootElement = null;
            rootElement = section.Element(sectionNs + rootElementName)
            rootElement = section.Element(sectionNs + rootElementName);
            schemaElement = Nothing
            schemaElement = null;
            SELECT
            set
            Set
            set
            Set
            set
            setterAccessibility = String.Empty
            setterAccessibility = String.Empty;
            SourceCsdlPath = @"$edmxInputFile$",
            SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath)
            SourceCsdlPath = userSettings.SourceCsdlPath
            storageMappingItemCollection = (StorageMappingItemCollection)itemCollection;
            storageMappingItemCollection = DirectCast(itemCollection, StorageMappingItemCollection)
            StorageMappingItemCollection storageMappingItemCollection = null;
            storeItemCollection = (StoreItemCollection)itemCollection;
            storeItemCollection = DirectCast(itemCollection, StoreItemCollection)
            string adjustedIdentifier = identifier;
            string extension = Path.GetExtension(sourcePath);
            string parameterName = code.Escape(FixParameterName(set.ElementType.Name, code));
            string paramList = string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            string returnValue = "";
            string templateVersion;
            string typeName = MultiSchemaEscape(usage.EdmType, code);
            string typeName = typeUsage.EdmType is EnumType ? Escape(typeUsage.EdmType.Name) : Escape(clrType);
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            System.Resources.ResourceManager resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
            System.Threading.Interlocked.CompareExchange(ref _resourceManager, resourceManager, null);
            t = t.BaseType
            templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile)
            templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile);
            textToAppend = textToAppend.Replace(Global.System.Environment.NewLine, (Global.System.Environment.NewLine + Me.currentIndentField))
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            textTransformation.Errors.Add(New CompilerError(If(textTransformation.Host.TemplateFile, CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate")), -1, -1, String.Empty, _
            textTransformation.Errors.Add(new CompilerError(textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), -1, -1, string.Empty,
            'This is an optimization. If the current indent is "", then we don't have to do any
            '''This is called from the compile/run appdomain to convert objects within an expression block to a string
            this.currentIndentField = "";
            this.currentIndentField = (this.currentIndentField + indent);
            this.endsWithNewline = true;
            this.Errors.Add(error);
            this.GenerationEnvironment.AppendLine();
            this.GenerationEnvironment.Remove(
            this.indentLengths.Add(indent.Length);
            this.indentLengths.Clear();
            this.Write("        ObjectParameter ");
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region ");
            this.Write("        OnContextCreated();\r\n    }\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write("        return base.");
            this.Write("        return base.CreateQuery<");
            this.Write("        return base.ExecuteFunction");
            this.Write("    ");
            this.Write("    /// <summary>\r\n    /// ");
            this.Write(" ");
            this.Write(" : ");
            this.Write(" : ComplexObject\r\n{\r\n");
            this.Write(" : ObjectContext\r\n{\r\n    #region ");
            this.Write(" = ");
            this.Write(" = base.CreateObjectSet<");
            this.Write(" = new ObjectParameter(\"");
            this.Write(" == null))\r\n            {\r\n                ");
            this.Write(" EntityCollection<");
            this.Write(" EntityReference<");
            this.Write(" enum ");
            this.Write(" ObjectSet<");
            this.Write(" partial class ");
            this.Write(" void AddTo");
            this.Write("(");
            this.Write("() : base(\"name=");
            this.Write("(\"");
            this.Write("(EntityConnection connection) : base(connection, \"");
            this.Write("(string connectionString) : base(connectionString, \"");
            this.Write(")");
            this.Write("));\r\n        }\r\n\r\n");
            this.Write("))]\r\n");
            this.Write("), \"");
            this.Write(");\r\n        }\r\n        else\r\n        {\r\n            ");
            this.Write(");\r\n    }\r\n");
            this.Write(")\"");
            this.Write(")\r\n        {\r\n            ");
            this.Write(")\r\n    {\r\n        base.AddObject(\"");
            this.Write(")\r\n    {\r\n");
            this.Write(")]\r\n");
            this.Write(", typeof(");
            this.Write(",\r\n\r\n");
            this.Write("//------------------------------------------------------------------------------\r" +
            this.Write(";\r\n        }\r\n    }\r\n    private ObjectSet<");
            this.Write(";\r\n        if (");
            this.Write(";\r\n");
            this.Write("[assembly: EdmRelationshipAttribute(\"");
            this.Write("[FlagsAttribute()]\r\n");
            this.Write("[KnownTypeAttribute(typeof(");
            this.Write("\"");
            this.Write("\").Value = value;\r\n        }\r\n    }\r\n");
            this.Write("\").Value;\r\n        }\r\n        ");
            this.Write("\");\r\n            }\r\n            return ");
            this.Write("\");\r\n        }\r\n        ");
            this.Write("\")\r\n    {\r\n");
            this.Write("\")]\r\n    ");
            this.Write("\")]\r\n");
            this.Write("\")]\r\n[DataContractAttribute()]\r\n");
            this.Write("\")]\r\n[DataContractAttribute(IsReference=true)]\r\n[Serializable()]\r\n");
            this.Write("\")]\r\n[Serializable()]\r\n[DataContractAttribute(IsReference=true)]\r\n");
            this.Write("\", ");
            this.Write("\", \"");
            this.Write("\", mergeOption");
            this.Write("\", Name=\"");
            this.Write("\", typeof(");
            this.Write("\", value);\r\n            }\r\n        }\r\n    }\r\n");
            this.Write("\r\n    ");
            this.Write("\r\n    /// </summary>");
            this.Write("\r\n    /// </summary>\r\n    ");
            this.Write("\r\n    /// </summary>\r\n    public ");
            this.Write("\r\n    /// <param name=\"mergeOption\"></param>");
            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write("\r\n    [BrowsableAttribute(false)]\r\n    [DataMemberAttribute()]\r\n    ");
            this.Write("\r\n    [EdmFunction(\"");
            this.Write("\r\n    [EnumMemberAttribute()]\r\n    ");
            this.Write("\r\n    [XmlIgnoreAttribute()]\r\n    [SoapIgnoreAttribute()]\r\n    [DataMemberAttribu" +
            this.Write("\r\n    {\r\n        ");
            this.Write("\r\n    {\r\n        get\r\n        {\r\n            if ((");
            this.Write("\r\n");
            this.Write("\r\n// ");
            this.Write("\r\n/// </summary>");
            this.Write("\r\n/// <summary>\r\n/// ");
            this.Write("\r\n//\r\n// ");
            this.Write("\r\n[EdmComplexTypeAttribute(NamespaceName=\"");
            this.Write("\r\n[EdmEntityTypeAttribute(NamespaceName=\"");
            this.Write("\r\n[EdmEnumTypeAttribute(NamespaceName=\"");
            this.Write("\r\n\r\n    /// <summary>\r\n    /// ");
            this.Write("\r\n\r\n    partial void OnContextCreated();\r\n\r\n    #endregion\r\n\r\n");
            this.Write("\r\n{\r\n");
            this.Write("](");
            this.Write("].[");
            this.Write("}\r\n");
            this.Write("> ");
            this.Write(">(\"");
            this.Write(">(\"[");
            this.Write("get\r\n        {\r\n            return ((IEntityWithRelationships)this).RelationshipM" +
            this.Write("MergeOption mergeOption)\r\n    {\r\n");
            this.Write("namespace ");
            this.Write("partial class ");
            this.Write("set\r\n        {\r\n            ((IEntityWithRelationships)this).RelationshipManager." +
            this.Write("set\r\n        {\r\n            if ((value != null))\r\n            {\r\n                " +
            this.Write(@"
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
            this.Write(textToAppend);
            this.Write(this.ToStringHelper.ToStringWithCulture("IQueryable<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForMethod(edmFunction)));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(navProperty)));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForReadOnlyProperty(set)));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(complex)));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(container)));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(entity)));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(enumType)));
            this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForType(set.ElementType)));
            this.Write(this.ToStringHelper.ToStringWithCulture(association.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(association.NamespaceName));
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseTypeName(entity, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(complex)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(container)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(edmFunction)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(entity)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(enumType)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(enumType.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes: false)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(member)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(navProperty)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(set)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(set)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(navProperty))));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(navProperty))));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(code.AbstractOption(entity))));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(edmFunction))));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(navProperty))));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(set))));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringAfter(paramList, ", ")));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", association.IsForeignKey ? "true" : null)));
            this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))));
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")));
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")));
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")));
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionConstructors")));
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationTools.GetResourceString("Template_RegionPartialMethods")));
            this.Write(this.ToStringHelper.ToStringWithCulture(complex.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(complex.NamespaceName));
            this.Write(this.ToStringHelper.ToStringWithCulture(container.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(edmFunction.NamespaceName));
            this.Write(this.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 0, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(EndMultiplicity(association, 1, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(EndName(association, 0)));
            this.Write(this.ToStringHelper.ToStringWithCulture(EndName(association, 1)));
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.NamespaceName));
            this.Write(this.ToStringHelper.ToStringWithCulture(enumType.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(enumType.NamespaceName));
            this.Write(this.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 0, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(EscapeEndTypeName(association, 1, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine1")));
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine2")));
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_GeneratedCodeCommentLine3")));
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionConstructors")));
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResourceString("Template_RegionPartialMethods")));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complex, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(container, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(entity, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(enumType, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(member, region.CurrentIndentLevel + 1)));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(set, region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Value));
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(returnType, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(set.ElementType, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(subType, code)));
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.FullName));
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.RelationshipType.NamespaceName));
            this.Write(this.ToStringHelper.ToStringWithCulture(navProperty.ToEndMember.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName));
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"));
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName));
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)));
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterName));
            this.Write(this.ToStringHelper.ToStringWithCulture(paramList));
            this.Write(this.ToStringHelper.ToStringWithCulture(refPropertyName));
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "" : "<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "ExecuteFunction" : "ExecuteFunction<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == null ? "int" : "ObjectResult<" + MultiSchemaEscape(returnType, code) + ">"));
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextCommonCtorComment"), container.Name)));
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)));
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_GenCommentAddToMethodCs"), set.Name)));
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)));
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)));
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_GenCommentAddToMethodCs"), set.Name)));
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray())));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(complex)));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(container)));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(edmFunction)));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(entity)));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(enumType)));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(member)));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(navProperty)));
            this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(set)));
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
            Throw New ArgumentException("firstIndentLevel")
            throw new ArgumentException("firstIndentLevel");
            Throw New ArgumentException("indentLevel")
            throw new ArgumentException("indentLevel");
            Throw New ArgumentException("sourcePath")
            throw new ArgumentException("sourcePath");
            Throw New ArgumentNullException("association")
            throw new ArgumentNullException("association");
            Throw New ArgumentNullException("associationEnd")
            throw new ArgumentNullException("associationEnd");
            Throw New ArgumentNullException("code")
            throw new ArgumentNullException("code");
            Throw New ArgumentNullException("dependentProperty")
            throw new ArgumentNullException("dependentProperty");
            Throw New ArgumentNullException("edmItemCollection")
            throw new ArgumentNullException("edmItemCollection");
            Throw New ArgumentNullException("ef")
            throw new ArgumentNullException("ef");
            Throw New ArgumentNullException("instance")
            throw new ArgumentNullException("instance");
            Throw New ArgumentNullException("name")
            throw new ArgumentNullException("name");
            Throw New ArgumentNullException("navProperty")
            throw new ArgumentNullException("navProperty");
            Throw New ArgumentNullException("parameters")
            throw new ArgumentNullException("parameters");
            Throw New ArgumentNullException("principalProperty")
            throw new ArgumentNullException("principalProperty");
            Throw New ArgumentNullException("regionName")
            throw new ArgumentNullException("regionName");
            Throw New ArgumentNullException("storeItemCollection")
            throw new ArgumentNullException("storeItemCollection");
            Throw New ArgumentNullException("textTransformation")
            throw new ArgumentNullException("textTransformation");
            try
            Try
            try
            Try
            Type clrType = _ef.UnderlyingClrType(typeUsage.EdmType);
            typeName = "Global." & typeName
            typeName = "global::" + clrType.FullName;
            typeName = _code.GetTypeOutput(New CodeTypeReference(clrType))
            typeName = _code.GetTypeOutput(new CodeTypeReference(clrType));
            TypeUsage returnType = edmFunction.ReturnParameters.Count == 0 ? null : ef.GetElementType(edmFunction.ReturnParameters[0].TypeUsage);
            typeUsage.EdmType is EntityType)
            typeUsage.Facets.TryGetValue("Nullable", true, out nullableFacet))
            UNION ALL
            value = (string)property.Value;
            value = DirectCast([property].Value, String)
            var arrayInit = string.Join(", ", ((byte[])value).Select(b => b.ToString(CultureInfo.InvariantCulture)).ToArray());
            var clrType = _ef.UnderlyingClrType(edmType);
            var dto = (DateTimeOffset)value;
            var footerText = _generationEnvironment.ToString(footer.Start, footer.Length);
            var generatedFileNames = base.Process(split);
            var headerText = _generationEnvironment.ToString(header.Start, header.Length);
            var hostServiceProvider = _textTransformation.Host.AsIServiceProvider();
            var keepFileNameSet = new HashSet<string>(keepFileNames);
            var originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]);
            var outputPath = Path.GetDirectoryName(_textTransformation.Host.TemplateFile);
            var projectFiles = new Dictionary<string, EnvDTE.ProjectItem>();
            VerifyEntityTypeAndSetAccessibilityCompatability(entitySet)
            VerifyEntityTypeAndSetAccessibilityCompatability(set);
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            VerifyGetterAndSetterAccessibilityCompatability(navProperty);
            VerifyGetterAndSetterAccessibilityCompatability(property);
            'we have to append the current indent first.
            while (!_knownIdentifiers.Add(adjustedIdentifier))
            While Not _knownIdentifiers.Add(adjustedIdentifier)
            WriteComplexTypeProperty(edmProperty, code)
            WriteComplexTypeProperty(property, code);
            WriteFactoryMethod(entity, code)
            WriteFactoryMethod(entity, code);
            WriteLine(string.Empty);
            WritePrimitiveTypeProperty(edmProperty, code)
            WritePrimitiveTypeProperty(property, code);
            WriteSimpleTypeProperty(edmProperty, code)
            WriteSimpleTypeProperty(property, code);
            XAttribute attribute = model.Attribute("Namespace");
            XElement element = XElement.Load(edmxPath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
            XElement runtime = edmxDocument.Element(edmxNs  + "Runtime");
            XElement schemaElement = null;
            XElement section = runtime.Element(edmxNs + sectionName);
            XNamespace edmxNs = schemaConstants.EdmxNamespace;
            XNamespace sectionNs = GetNamespace(schemaConstants);
           // 
           {
           }
           Else
           else
           Else
           else
           Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture,
           if(returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
        ''' </summary>
        ''' <summary>
        ''' a suffix (1, 2, 3, ...), and returns the adjusted identifier.
        ' as pretty and sensible as possible
        ' Check to make sure no base types have already declared this method
        ''' Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
        ''' Ctor to setup the ItemCollectionBuilder members
        ''' FileExtension for individual (non-edmx) metadata file for this
        ''' Given an identifier, makes it unique within the scope by adding
         If(ef.IsKey(primitiveProperty)) Then
         If(ef.IsKey(simpleProperty)) Then
        ''' Method to build the appropriate ItemCollection
        ' normalize the path, remove ..\ from it
         null); // 
        ''' Selects a namespace from the supplied constants.
        ''' specific ItemCollection type
        ''' Takes an Enumerable of EdmSchemaErrors, and adds them
        ''' The name of the root element of this ItemCollection's metadata
        ''' The name of the XmlElement in the .edmx <Runtime> element
        ''' to find this ItemCollection's metadata
        ''' to the errors collection of the template class
        ''' Tries to load the root element from the metadata file provided
        ''' Tries to load the root element from the provided .edmx metadata file
        ''' Tries to load the root element from the provided edmxDocument
        ''' Try to create an ItemCollection loaded with the metadata provided
        ' walk up firstType hierarchy list
        ' we save the local parameter uniquification for a second pass to make the visible parameters
        "apElement(IsNullable=true)]\r\n    [DataMemberAttribute()]\r\n    ");
        "http://schemas.microsoft.com/ado/2006/04/edm",
        "http://schemas.microsoft.com/ado/2006/04/edm/ssdl",
        "http://schemas.microsoft.com/ado/2007/06/edmx",
        "http://schemas.microsoft.com/ado/2008/09/edm",
        "http://schemas.microsoft.com/ado/2008/09/mapping/cs",
        "http://schemas.microsoft.com/ado/2008/10/edmx",
        "http://schemas.microsoft.com/ado/2009/02/edm/ssdl",
        "http://schemas.microsoft.com/ado/2009/11/edm",
        "http://schemas.microsoft.com/ado/2009/11/edm/ssdl",
        "http://schemas.microsoft.com/ado/2009/11/edmx",
        "http://schemas.microsoft.com/ado/2009/11/mapping/cs",
        "nerSerializationVisibility.Content)]\r\n    [XmlElement(IsNullable=true)]\r\n    [So" +
        "nerSerializationVisibility.Content)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <XmlElement(IsNullable:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <S"& _ 
        "oapElement(IsNullable:=True)>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
        "urn:schemas-microsoft-com:windows:storage:mapping:CS",
        #End If
        #End Region
        #endregion
        #If Not PREPROCESSED_TEMPLATE Then
        #Region "Fields"
        #Region "Properties"
        #Region "ToString Helpers"
        #Region "Transform-time helpers"
        #region Fields
        #region Properties
        #region ToString Helpers
        #region Transform-time helpers
        (factoryType != edmProperty.DeclaringType && Accessibility.ForWriteOnlyProperty(edmProperty) == "private")
        (rawGetterAccessibility == "protected" && rawSetterAccessibility == "internal"))
        .CamelCaseFields = False _
        .CreateContextAddToMethods = True, _
        .FullyQualifySystemTypes = True, _
        .ReferenceCsdlPaths = new string () {}, _
        .SourceCsdlPath = "$edmxInputFile$", _
        // 
        // as pretty and sensible as possible
        // Check to make sure no base types have already declared this method
        // possibly namespace-qualifying it.
        // Try to get an external type name, and if that is null, then try to get escape the name from metadata,
        // walk up firstType hierarchy list
        // we save the local parameter uniquification for a second pass to make the visible parameters
        /// </summary>
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// a suffix (1, 2, 3, ...), and returns the adjusted identifier.
        /// Create the template output
        /// Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
        /// Ctor to setup the ItemCollectionBuilder members
        /// Current transformation session
        /// FileExtension for individual (non-edmx) metadata file for this
        /// Gets the current indent we use when adding lines to the output
        /// Given an identifier, makes it unique within the scope by adding
        /// Helper to produce culture-oriented representation of an object as a string
        /// Increase the indent
        /// Method to build the appropriate ItemCollection
        /// Raise a warning
        /// Raise an error
        /// Remove any indentation
        /// Remove the last indent that was added with PushIndent
        /// Selects a namespace from the supplied constants.
        /// specific ItemCollection type
        /// Takes an Enumerable of EdmSchemaErrors, and adds them
        /// The error collection for the generation process
        /// The name of the root element of this ItemCollection's metadata
        /// The name of the XmlElement in the .edmx <Runtime> element
        /// The string builder that generation-time code is using to assemble generated output
        /// to find this ItemCollection's metadata
        /// to the errors collection of the template class
        /// Tries to load the root element from the metadata file provided
        /// Tries to load the root element from the provided .edmx metadata file
        /// Tries to load the root element from the provided edmxDocument
        /// Try to create an ItemCollection loaded with the metadata provided
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// Write formatted text directly into the generated output
        /// Write text directly into the generated output
        ////////
        //////// 
        : this(textTransformation)
        [End](1)
        _beforeRegionLength = _textTransformation.GenerationEnvironment.Length
        _beforeRegionLength = _textTransformation.GenerationEnvironment.Length;
        _code = new CSharpCodeProvider();
        _code = New VBCodeProvider()
        _ef = New MetadataTools(_textTransformation)
        _ef = new MetadataTools(_textTransformation);
        _emptyRegionLength = _textTransformation.GenerationEnvironment.Length
        _emptyRegionLength = _textTransformation.GenerationEnvironment.Length;
        _errors = type.GetProperty("Errors")
        _errors = type.GetProperty("Errors");
        _generationEnvironment = _textTransformation.GenerationEnvironment
        _generationEnvironment = _textTransformation.GenerationEnvironment;
        _generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance | BindingFlags.NonPublic);
        _generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance Or BindingFlags.NonPublic)
        _host = type.GetProperty("Host")
        _host = type.GetProperty("Host");
        _instance = instance
        _instance = instance;
        _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
        _regionIndentLevel += levelsToIncreaseIndent
        _regionIndentLevel += levelsToIncreaseIndent;
        _regionIndentLevel = firstIndentLevel - 1
        _regionIndentLevel = firstIndentLevel - 1;
        _regionIndentLevel -= levelsToDecrease
        _regionIndentLevel -= levelsToDecrease;
        _resolveParameterValue = type.GetMethod("ResolveParameterValue", New Type() {GetType(String), GetType(String), GetType(String)})
        _resolveParameterValue = type.GetMethod("ResolveParameterValue", new Type[] { typeof(string), typeof(string), typeof(string) });
        _resolvePath = type.GetMethod("ResolvePath", New Type() {GetType(String)})
        _resolvePath = type.GetMethod("ResolvePath", new Type[] { typeof(string) });
        _templateFile = type.GetProperty("TemplateFile")
        _templateFile = type.GetProperty("TemplateFile");
        _textTransformation = DynamicTextTransformation.Create(textTransformation)
        _textTransformation = DynamicTextTransformation.Create(textTransformation);
        _textTransformation.Write(GetIndent(_regionIndentLevel))
        _textTransformation.Write(GetIndent(_regionIndentLevel));
        _textTransformation.WriteLine("#region " + regionName);
        _textTransformation.WriteLine("#Region """ + regionName + """")
        _write = type.GetMethod("Write", New Type() {GetType(String)})
        _write = type.GetMethod("Write", new Type[] { typeof(string) });
        _write.Invoke(_instance, New Object() {text})
        _write.Invoke(_instance, new object[] { text });
        _writeLine = type.GetMethod("WriteLine", New Type() {GetType(String)})
        _writeLine = type.GetMethod("WriteLine", new Type[] { typeof(string) });
        _writeLine.Invoke(_instance, New Object() {text})
        _writeLine.Invoke(_instance, new object[] { text });
        {
        { _
        }
        };
        '''</summary>
        '''<summary>
        '''A list of the lengths of each indent that was added with PushIndent
        baseType = GetType(ComplexObject)
        baseType = GetType(EntityObject)
        baseType = typeof(ComplexObject);
        baseType = typeof(EntityObject);
        Begin(regionName, 1)
        Begin(regionName, 1);
        bool isNullable = ef.IsNullable(member.TypeUsage) ||
        bool needsMethod = ContainsCascadeDeleteAssociation(itemCollection, entity);
        builder.Append(CodeRegion.GetIndent(indentLevel))
        builder.Append(CodeRegion.GetIndent(indentLevel));
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=""{0}"">{1}</param>", parameter.Item1, parameter.Item2))
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=\"{0}\">{1}</param>", parameter.Item1, parameter.Item2));
        builder.Append(XMLCOMMENT_START)
        builder.Append(XMLCOMMENT_START);
        builder.AppendLine()
        builder.AppendLine();
        CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
        CalculatePropertyAccessibility(member, propertyAccess, getterAccess, setterAccess)
        CamelCaseFields = false,
        CamelCaseFields = True
        CamelCaseFields = true;
        clrType = String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", clrType)
        clrType = String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", clrType);
        code.GenerateCodeFromExpression(expression, writer, New CodeGeneratorOptions())
        code.GenerateCodeFromExpression(expression, writer, new CodeGeneratorOptions());
        CodeRegion region = new CodeRegion(this, 1);
        comment += (lineStart & "<LongDescription>") + Environment.NewLine
        comment += lineStart & "</LongDescription>"
        comment += lineStart + "</LongDescription>";
        comment += lineStart + "<LongDescription>" + Environment.NewLine;
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine;
        '''Create the template output
        CreateContextAddToMethods = true,
        CreateContextAddToMethods = userSettings.CreateContextAddToMethods;
        CsdlNamespace = csdlNamespace;
        CSharpCodeProvider code = new CSharpCodeProvider();
        '''Current transformation session
        CurrentBlock = footer
        CurrentBlock = footer;
        CurrentBlock = header
        CurrentBlock = header;
        CurrentBlock = new Block { Name = name };
        CurrentBlock = New Block() With { .Name = name }
        currentBlock = null;
        CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start
        CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start;
        DefaultSummaryComment = CodeGenerationTools.GetResourceString("Template_CommentNoDocumentation")
        DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation")
        Dim [property] As MetadataProperty = item.MetadataProperties.FirstOrDefault(Function(p) p.Name = propertyName)
        Dim accessibility As String = Nothing
        Dim add As MethodInfo = ei.GetAddMethod()
        Dim addToMethods As IEnumerable(Of EntitySet) = If(CreateContextAddToMethods.Value, container.BaseEntitySets.OfType(Of EntitySet)(), Enumerable.Empty(Of EntitySet)())
        Dim adjustedIdentifier As String = identifier
        Dim baseType As EntityType = TryCast(entity.BaseType, EntityType)
        Dim builder As New EdmItemCollectionBuilder(_textTransformation)
        Dim code As VBCodeProvider = New VBCodeProvider()
        Dim collectionBuilder As New EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(Function(s) _textTransformation.Host.ResolvePath(s)).Where(Function(s) s <> sourcePath))
        Dim collectionBuilder As New StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection)
        Dim collectionBuilder As New StoreItemCollectionBuilder(_textTransformation)
        Dim collectionType = TryCast(edmType, CollectionType)
        Dim comment As String = Environment.NewLine
        Dim complex As ComplexType = loopComplex
        Dim decalredNavigationProperties As IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
        Dim declaredMembers As IEnumerable(Of EdmMember) = entity.Members.Where(Function(m) m.DeclaringType Is entity)
        Dim edmItemCollection As EdmItemCollection = CreateEdmItemCollection(inputFile)
        Dim edmItemCollection As EdmItemCollection = Nothing
        Dim ef As MetadataTools = New MetadataTools(Me)
        Dim ei As EventInfo = DirectCast(memberInfo, EventInfo)
        Dim entity As EntityType = CType(structural, EntityType)
        Dim entity As EntityType = loopEntity
        Dim entity As EntityType = TryCast(edmType, EntityType)
        Dim entitySet As MethodInfo = pi.GetSetMethod()
        Dim enumType = TryCast(edmType, EnumType)
        Dim enumType As EnumType = TryCast(edmType, EnumType)
        Dim expression As CodePrimitiveExpression = New CodePrimitiveExpression(value)
        Dim fi As FieldInfo = DirectCast(memberInfo, FieldInfo)
        Dim fromProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetPrincipalProperties(navProperty)
        Dim generatedFileNames As List(Of String) = New List(Of String)()
        Dim getMethod As MethodInfo = pi.GetGetMethod()
        Dim getterAccess As String = Nothing
        Dim getterRank As Integer = AccessibilityRankIdLookup(getterAccessibility)
        Dim hash As HashSet(Of String) = New HashSet(Of String)(StringComparer.InvariantCultureIgnoreCase)
        Dim host As IDynamicHost = transformation.Host
        Dim hostServiceProvider = host.AsIServiceProvider()
        Dim importParameters As New List(Of FunctionImportParameter)()
        Dim indentLevel As Integer = _regionIndentLevel
        Dim instanceName As String = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))))
        Dim isNullable As Boolean = ef.IsNullable(member.TypeUsage) OrElse
        Dim itemCollection As ItemCollection = Nothing
        Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 & ":LazyLoadingEnabled"
        Dim lazyLoadingAttributeValue As String = Nothing
        Dim lineStart As String = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START & " "
        Dim mb As MethodBase = DirectCast(memberInfo, MethodBase)
        Dim methodName As String = "Create" + structuralType.Name
        Dim model As XElement = Nothing
        Dim namespaceName As String = code.VsNamespaceSuggestion()
        Dim needsMethod As Boolean = ContainsCascadeDeleteAssociation(itemCollection, entity)
        Dim nullableFacet As Facet = Nothing
        Dim numberOfConflicts As Int32 = 0
        Dim parameterName As String = code.Escape(FixParameterName(addTo.ElementType.Name, code))
        Dim parameters As IEnumerable(Of FactoryMethodParameter) = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType(Of EdmProperty)().Where(Function(p) IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, Function(t, c) MultiSchemaEscape(t, c), code)
        Dim parameters As New List(Of FactoryMethodParameter)()
        Dim parts As String() = namespaceName.Split("."c)
        Dim pi As PropertyInfo = DirectCast(memberInfo, PropertyInfo)
        Dim primitiveType = TryCast(edmType, PrimitiveType)
        Dim propertyAccess As String = Nothing
        Dim propertyRank As Integer = Math.Max(getterRank, setterRank)
        Dim refConstraint As ReferentialConstraint = DirectCast(associationEnd.DeclaringType, AssociationType).ReferentialConstraints.Where(Function(rc) rc.FromRole Is associationEnd).SingleOrDefault()
        Dim refPropertyName As String = navProperty.Name & "Reference"
        Dim region As CodeRegion = new CodeRegion(Me, 1)
        Dim region As CodeRegion = New CodeRegion(Me, 1)
        Dim remove As MethodInfo = ei.GetRemoveMethod()
        Dim setterAccess As String = Nothing
        Dim setterRank As Integer = AccessibilityRankIdLookup(setterAccessibility)
        Dim storeGeneratedPatternProperty As MetadataProperty = Nothing
        Dim storeItemCollection As StoreItemCollection = Nothing
        Dim structural As StructuralType = TryCast(edmType, StructuralType)
        Dim subTypes As List(Of EntityType) = New List(Of EntityType)
        Dim suggestion As String = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint")
        Dim t As EdmType = firstType.BaseType
        Dim textTransformation As DynamicTextTransformation = TryCast(instance, DynamicTextTransformation)
        Dim toEntity As EntityType = navProperty.ToEndMember.GetEntityType()
        Dim toProperties As ReadOnlyMetadataCollection(Of EdmProperty) = GetDependentProperties(navProperty)
        Dim transformation As DynamicTextTransformation = DynamicTextTransformation.Create(textTransformation)
        Dim type As Type = _instance.GetType()
        Dim type As Type = value.GetType()
        Dim typeName = If(Escape(edmType.MetadataProperties.Where(Function(p) p.Name = ExternalTypeNameAttributeName).[Select](Function(p) DirectCast(p.Value, String)).FirstOrDefault()), (If(modelNamespace IsNot Nothing AndAlso edmType.NamespaceName <> modelNamespace, CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)), Escape(edmType))))
        Dim typeName As String
        Dim unique As New UniqueIdentifierService()
        Dim uniqueIdentifier As UniqueIdentifierService = new UniqueIdentifierService()
        Dim uniqueIdentifier As UniqueIdentifierService = New UniqueIdentifierService()
        Dim writer As StringWriter = New StringWriter()
        DynamicTextTransformation textTransformation = instance as DynamicTextTransformation;
        DynamicTextTransformation transformation = DynamicTextTransformation.Create(textTransformation);
        edmItemCollection = Nothing
        edmItemCollection = null;
        EdmItemCollection edmItemCollection = CreateEdmItemCollection(inputFile);
        EdmItemCollection edmItemCollection;
        EdmItemCollectionBuilder builder = new EdmItemCollectionBuilder(_textTransformation);
        EdmItemCollectionBuilder collectionBuilder = new EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(s => _textTransformation.Host.ResolvePath(s)).Where(s => s != sourcePath));
        EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace)
        EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace);
        EdmxNamespace = edmxNamespace;
        else
        Else
        else
        Else
        else
        Else
        else
        Else
        else
        Else
        else
        Else
        else if (type == typeof(byte[]))
        else if (type == typeof(DateTime))
        else if (type == typeof(DateTimeOffset))
        else if (type == typeof(TimeSpan))
        else if (typeUsage.EdmType is CollectionType)
        else if (typeUsage.EdmType is SimpleType)
        else if (usage.EdmType is EnumType)
        else if (userAccessibility == ACCESS_INTERNAL)
        else if (userAccessibility == ACCESS_PRIVATE)
        ElseIf type Is GetType(Byte()) Then
        ElseIf type Is GetType(DateTime) Then
        ElseIf type Is GetType(DateTimeOffset) Then
        ElseIf type Is GetType(Decimal) Then
        ElseIf type Is GetType(TimeSpan) Then
        ElseIf TypeOf typeUsage.EdmType Is CollectionType Then
        ElseIf TypeOf typeUsage.EdmType Is SimpleType Then
        ElseIf TypeOf usage.EdmType Is EnumType Then
        ElseIf userAccessibility = ACCESS_INTERNAL Then
        ElseIf userAccessibility = ACCESS_PRIVATE Then
        End Class
        End Function
        End Get
        End If
        End Property
        End Set
        End Sub
        End While
        End(1);
        EntityType baseType = entity.BaseType as EntityType;
        EntityType toEntity = navProperty.ToEndMember.GetEntityType();
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("GeneratedPropertyAccessibilityConflict"), member.Name, rawGetterAccessibility, rawSetterAccessibility)))
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture, GetResourceString("GeneratedPropertyAccessibilityConflict"), member.Name, rawGetterAccessibility, rawSetterAccessibility)))
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("EntityTypeAndSetAccessibilityConflict"), entitySet.ElementType.Name, typeAccess, entitySet.Name, setAccess)))
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture, GetResourceString("EntityTypeAndSetAccessibilityConflict"), entitySet.ElementType.Name, typeAccess, entitySet.Name, setAccess)))
        EventInfo ei = (EventInfo)memberInfo;
        Facet nullableFacet = null;
        FieldInfo fi = (FieldInfo)memberInfo;
        for (EdmType t = firstType.BaseType; t != null; t = t.BaseType)
        for (int i = 0; i < importParameters.Count; i++)
        For Each addTo As EntitySet in addToMethods
        For Each edmFunction As EdmFunction in container.FunctionImports
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is PrimitiveType)
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is SimpleType)
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is PrimitiveType)
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is SimpleType)
        For Each edmProperty As EdmProperty In properties
        For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
        For Each item As String in items
        For Each member As EnumMember In enumType.Members
        For Each navProperty As NavigationProperty in entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)
        For Each parameter As FactoryMethodParameter in parameters
        For Each parameter As FunctionImportParameter In parameters
        For Each parameter As FunctionParameter In parameters
        For Each part As String In parts
        For Each subType As EntityType in ItemCollection.GetItems(Of EntityType)().Where(Function(b) b.BaseType is entity)
        For i As Integer = 0 To importParameters.Count - 1
        foreach (EdmFunction edmFunction in container.FunctionImports)
        foreach (EdmProperty property in complex.Properties.Where(p => p.DeclaringType == complex && p.TypeUsage.EdmType is ComplexType))
        foreach (EdmProperty property in complex.Properties.Where(p => p.DeclaringType == complex && p.TypeUsage.EdmType is PrimitiveType))
        foreach (EdmProperty property in complex.Properties.Where(p => p.DeclaringType == complex && p.TypeUsage.EdmType is SimpleType))
        foreach (EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is ComplexType))
        foreach (EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is PrimitiveType))
        foreach (EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is SimpleType))
        foreach (EdmProperty property in properties)
        foreach (EntitySet set in addToMethods)
        foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())
        foreach (EntityType subType in ItemCollection.GetItems<EntityType>().Where(b => b.BaseType == entity))
        foreach (EnumMember member in enumType.Members)
        foreach (FactoryMethodParameter parameter in parameters)
        foreach (FunctionImportParameter parameter in parameters)
        foreach (FunctionParameter parameter in parameters)
        foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
        foreach (string item in items)
        foreach (string part in parts)
        FullyQualifySystemTypes = False
        FullyQualifySystemTypes = false;
        FullyQualifySystemTypes = true,
        Function(e) String.Format(CultureInfo.CurrentCulture, _
        Function(g) GetGlobalItemName(g), _
        Function(g) String.Format(CultureInfo.CurrentCulture, _
        Function(m) String.Format(CultureInfo.CurrentCulture, _
        Get
        get
        Get
        get
        Get
        get
        Get
        get
        Get
        get
        Get
        get
        Get
        get { return currentBlock; }
        '''Gets the current indent we use when adding lines to the output
        getterAccessibility = GetAccessibility(item, GETTER_ACCESS)
        getterAccessibility = GetAccessibility(item, GETTER_ACCESS);
        HashSet<string> hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        '''Helper to produce culture-oriented representation of an object as a string
        IDynamicHost host = transformation.Host;
        IEnumerable<EntitySet> addToMethods = CreateContextAddToMethods.Value ? container.BaseEntitySets.OfType<EntitySet>() : Enumerable.Empty<EntitySet>();
        IEnumerable<FactoryMethodParameter> parameters = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType<EdmProperty>().Where(p => IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, MultiSchemaEscape, code);
        if (!entity.Abstract)
        if (!hash.Add(GetGlobalItemName(type)))
        if (!hash.Add(type))
        if (!ValidateInputPath(sourcePath, _textTransformation))
        if (_emptyRegionLength == _textTransformation.GenerationEnvironment.Length)
        if (_resourceManager == null)
        if (association == null)
        if (associationEnd == null)
        if (CamelCaseFields)
        if (code == null)
        if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
        if (collectionBuilder.TryCreateItemCollection(sourcePath, out itemCollection))
        if (collectionType != null)
        if (container == null)
        if (CurrentBlock != header && CurrentBlock != footer)
        if (CurrentBlock == null)
        if (dependentProperty == null)
        if (edmItemCollection == null)
        if (edmType == null)
        if (edmType is SimpleType)
        if (edmType is StructuralType)
        if (ef == null)
        if (ef.IsKey(primitiveProperty))
        if (ef.IsKey(simpleProperty))
        if (entity.Abstract)
        if (entity.Members.Any(m => m.Name == refPropertyName))
        if (enumType != null)
        if (enumType.IsFlags)
        if (enumType.Members.Any())
        if (first)
        if (firstIndentLevel < 0)
        if (fullyQualifySystemTypes)
        if (function == null)
        if (getterRank == propertyRank)
        if (hostServiceProvider != null)
        if (identifier.Length == 1)
        if (indentLevel < 0)
        if (instance == null)
        if (IsFileContentDifferent(fileName, content))
        if (item == null)
        if (item is EdmType)
        if (ItemCollection != null)
        if (mb.IsSpecialName)
        if (member == null)
        if (MetadataTools.TryGetStringMetadataPropertySetting(item, name, out accessibility))
        if (name == null)
        if (navProperty == null)
        if (parameters == null)
        If (parameters.Count() = 0) Then
        if (parameters.Count() == 0)
        if (primitiveType != null)
        if (principalProperty == null)
        if (property != null && property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
        if (property != null)
        if (refConstraint != null)
        if (referenceSchemas == null)
        if (regionName == null)
        if (secondType == null)
        if (set == null)
        if (setterRank == propertyRank)
        if (split)
        if (storeItemCollection == null)
        if (String.IsNullOrEmpty(identifier))
        if (String.IsNullOrEmpty(namespaceName))
        if (String.IsNullOrEmpty(sourcePath))
        if (String.IsNullOrEmpty(suggestion))
        if (String.IsNullOrEmpty(value))
        if (structuralType.Members.Any(m => m.Name == methodName))
        if (textTransformation != null)
        if (textTransformation == null)
        if (TryCreateStoreItemCollection(inputFile, out storeItemCollection))
        if (type != null)
        if (type == null)
        if (type == typeof(Guid))
        if (type.IsEnum)
        if (typeUsage != null &&
        if (typeUsage == null)
        if (typeUsage.EdmType is CollectionType)
        if (typeUsage.EdmType is ComplexType ||
        if (usage.EdmType is StructuralType)
        if (userAccessibility == ACCESS_PROTECTED)
        if (value == null)
        If [property] IsNot Nothing Then
        If _emptyRegionLength = _textTransformation.GenerationEnvironment.Length Then
        If _resourceManager Is Nothing Then
        If association Is Nothing Then
        If associationEnd Is Nothing Then
        If builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), model) Then
        If CamelCaseFields Then
        If clrType Is Nothing Then
        If code Is Nothing Then
        If collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), itemCollection) Then
        If collectionBuilder.TryCreateItemCollection(sourcePath, itemCollection) Then
        If collectionType IsNot Nothing Then
        If container Is Nothing Then
        If CurrentBlock Is Nothing Then
        If CurrentBlock IsNot header AndAlso CurrentBlock IsNot footer Then
        If dependentProperty Is Nothing Then
        If edmFunction Is Nothing Then
        If edmItemCollection Is Nothing Then
        If edmProp IsNot Nothing AndAlso edmProp.DeclaringType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
        If edmSet Is Nothing Then
        If edmType Is Nothing Then
        If ef Is Nothing Then
        If entity.Abstract Then
        If enumType IsNot Nothing Then
        If enumType.IsFlags Then
        If enumType.Members.Any() Then
        If firstIndentLevel < 0 Then
        If fullyQualifySystemTypes Then
        If getterRank = propertyRank Then
        If hostServiceProvider IsNot Nothing Then
        If identifier.Length = 1 Then
        If indentLevel < 0 Then
        If instance Is Nothing Then
        If IsFileContentDifferent(fileName, content) Then
        If item Is Nothing Then
        If mb.IsSpecialName Then
        If member Is Nothing Then
        If MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) Then
        If MetadataTools.TryGetStringMetadataPropertySetting(item, name, accessibility) Then
        If name Is Nothing Then
        If navProperty Is Nothing Then
        If Not code.VerifyCaseInsensitiveEntitySetUniqueness(container.BaseEntitySets.OfType(Of EntitySet)().Select(Function(e) e.Name), _
        If Not code.VerifyCaseInsensitiveMemberUniqueness(code.GetAllDeclaredMembers(complex), complex.FullName, SourceCsdlPath) Then
        If Not code.VerifyCaseInsensitiveMemberUniqueness(code.GetAllDeclaredMembers(entity), entity.FullName, SourceCsdlPath) Then
        If Not code.VerifyCaseInsensitiveMemberUniqueness(code.GetAllDeclaredMembers(enumType), enumType.FullName, SourceCsdlPath)  Then
        If Not entity Is Nothing Then
        If Not enumType Is Nothing Then
        If Not hash.Add(getIdentity(item)) Then
        If Not structural Is Nothing Then
        If Not ValidateInputPath(sourcePath, _textTransformation) Then
        If parameters Is Nothing Then
        If primitiveType IsNot Nothing Then
        If principalProperty Is Nothing Then
        If refConstraint IsNot Nothing Then
        If referenceSchemas Is Nothing Then
        If regionName Is Nothing Then
        If secondType Is Nothing Then
        If setterRank = propertyRank Then
        If sourcePath = "$edmxInputFile$" Then
        If split Then
        If storeItemCollection Is Nothing Then
        If String.IsNullOrEmpty(identifier) Then
        If String.IsNullOrEmpty(namespaceName) Then
        If String.IsNullOrEmpty(sourcePath) Then
        If String.IsNullOrEmpty(suggestion) Then
        If String.IsNullOrEmpty(value) Then
        If textTransformation Is Nothing Then
        If textTransformation IsNot Nothing Then
        If TryCreateEdmItemCollection(sourcePath, referenceSchemas, edmItemCollection) Then
        If TryCreateStoreItemCollection(inputFile, storeItemCollection) Then
        If type Is GetType(Guid) Then
        If type Is Nothing Then
        If type IsNot Nothing Then
        If type.IsEnum Then
        If TypeOf edmType Is SimpleType Then
        If TypeOf edmType Is StructuralType Then
        If TypeOf item Is EdmType Then
        If TypeOf typeUsage.EdmType Is CollectionType Then
        If TypeOf typeUsage.EdmType Is ComplexType OrElse TypeOf typeUsage.EdmType Is EntityType Then
        If TypeOf usage.EdmType Is StructuralType Then
        If typeUsage Is Nothing Then
        If typeUsage IsNot Nothing AndAlso typeUsage.Facets.TryGetValue("Nullable", True, nullableFacet) Then
        If userAccessibility = ACCESS_PROTECTED Then
        If value Is Nothing Then
        if(_resourceManager == null)
        if(builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), out model))
        if(clrType == null)
        If(entity.Members.Any(Function(m) m.Name = refPropertyName)) Then
        if(MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue))
        if(navProperty == null)
        If(Not CreateContextAddToMethods.HasValue) Then
        If(Not entity.Abstract) Then
        If(Not FullyQualifySystemTypes.HasValue) Then
        If(ReferenceCsdlPaths Is Nothing) Then
        If(SourceCsdlPath Is Nothing) Then
        if(sourcePath == "$edmxInputFile$")
        If(structuralType.Members.Any(Function(m) m.Name = methodName)) Then
        if(TryCreateEdmItemCollection(sourcePath, referenceSchemas, out edmItemCollection))
        if(userSettings.SourceCsdlPath == "$" + "edmxInputFile" + "$")
        '''Increase the indent
        Inherits EntityFrameworkTemplateFileManager
        Inherits ItemCollectionBuilder
        Inherits VBCodeGenTemplateBase
        Inherits VBCodeGenTemplateV50Base
        int getterRank = AccessibilityRankIdLookup[getterAccessibility];
        int indentLevel = _regionIndentLevel;
        int propertyRank = Math.Max(getterRank, setterRank);
        int setterRank = AccessibilityRankIdLookup[setterAccessibility];
        ItemCollection itemCollection = null;
        list += ", " & code.CreateLiteral(isNullable)
        list += ", " + code.CreateLiteral(isNullable);
        List<FactoryMethodParameter> parameters = new List<FactoryMethodParameter>();
        List<FunctionImportParameter> importParameters = new List<FunctionImportParameter>();
        m_currentBlock = Nothing
        Me.CsdlNamespace = csdlNamespace
        Me.EdmxNamespace = edmxNamespace
        Me.MinimumTemplateVersion = minimumTemplateVersion
        Me.MslNamespace = mslNamespace
        Me.New(textTransformation)
        Me.SsdlNamespace = ssdlNamespace
        MetadataProperty property = item.MetadataProperties.FirstOrDefault(p => p.Name == propertyName);
        MetadataProperty storeGeneratedPatternProperty = null;
        MetadataTools ef = new MetadataTools(this);
        metadataWorkspace = New MetadataWorkspace()
        metadataWorkspace = new MetadataWorkspace();
        metadataWorkspace.RegisterItemCollection(edmItemCollection)
        metadataWorkspace.RegisterItemCollection(edmItemCollection);
        MethodBase mb = (MethodBase)memberInfo;
        MethodInfo add = ei.GetAddMethod();
        MethodInfo get = pi.GetGetMethod();
        MethodInfo remove = ei.GetRemoveMethod();
        MethodInfo set = pi.GetSetMethod();
        MinimumTemplateVersion = minimumTemplateVersion;
        MslNamespace = mslNamespace;
        namePart = code.CamelCase(namePart)
        namePart = code.CamelCase(namePart);
        namespaceName = GetObjectNamespace(ModelNamespace);
        namespaceName = String.Empty
        namespaceName = String.Empty;
        new UserSettings
        New UserSettings With _
        New Version("3.5"))
        new Version("3.5"));
        New Version("4.0"))
        new Version("4.0"));
        New Version("5.0"))
        new Version("5.0"));
        Next
        out string getterAccessibility,
        out string propertyAccessibility,
        out string setterAccessibility)
        PopIndent();
        Private _referenceSchemas As New List(Of String)()
        private Action<IEnumerable<string>> projectSyncAction;
        private Action<string> checkOutAction;
        private bool endsWithNewline;
        private bool ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
        private bool TryLoadRootElementFromEdmx(string edmxPath, out XElement rootElement)
        private bool TryLoadRootElementFromEdmx(XElement edmxDocument, SchemaConstants schemaConstants, string sectionName, string rootElementName, out XElement rootElement)
        Private checkOutAction As Action(Of String)
        Private currentIndentField As String = ""
        Private dte As EnvDTE.DTE
        Private endsWithNewline As Boolean
        private EnvDTE.DTE dte;
        private EnvDTE.ProjectItem templateProjectItem;
        Private errorsField As Global.System.CodeDom.Compiler.CompilerErrorCollection
        Private Function ProcessErrors(ByVal errors As IEnumerable(Of EdmSchemaError), ByVal sourceFilePath As String) As Boolean
        Private Function TryLoadRootElementFromEdmx(ByVal edmxDocument As XElement, ByVal schemaConstants As SchemaConstants, ByVal sectionName As String, ByVal rootElementName As String, ByRef rootElement As XElement) As Boolean
        Private Function TryLoadRootElementFromEdmx(ByVal edmxPath As String, ByRef rootElement As XElement) As Boolean
        Private generationEnvironmentField As Global.System.Text.StringBuilder
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private global::System.Text.StringBuilder generationEnvironmentField;
        Private indentLengthsField As Global.System.Collections.Generic.List(Of Integer)
        private List<string> _referenceSchemas = new List<string>();
        Private projectSyncAction As Action(Of IEnumerable(Of String))
        Private ReadOnly _edmItemCollection As EdmItemCollection
        Private ReadOnly _edmxSectionName As String
        Private ReadOnly _fileExtension As String
        Private ReadOnly _knownIdentifiers As HashSet(Of String)
        Private ReadOnly _rootElementName As String
        Private ReadOnly _storeItemCollection As StoreItemCollection
        Private ReadOnly _textTransformation As DynamicTextTransformation
        private readonly DynamicTextTransformation _textTransformation;
        private readonly EdmItemCollection _edmItemCollection;
        private readonly HashSet<string> _knownIdentifiers;
        Private ReadOnly Property indentLengths() As System.Collections.Generic.List(Of Integer)
        private readonly StoreItemCollection _storeItemCollection;
        private readonly string  _rootElementName;
        private readonly string _edmxSectionName;
        private readonly string _fileExtension;
        Private sessionField As Global.System.Collections.Generic.IDictionary(Of String, Object)
        Private Set
        Private Shared Sub ProjectSync(ByVal templateProjectItem As EnvDTE.ProjectItem, ByVal keepFileNames As IEnumerable(Of String))
        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<string> keepFileNames)
        private string currentIndentField = "";
        Private Sub CheckoutFileIfRequired(ByVal fileName As String)
        private System.Collections.Generic.List<int> indentLengths
        Private templateProjectItem As EnvDTE.ProjectItem
        Private toStringHelperField As ToStringInstanceHelper = New ToStringInstanceHelper()
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        private void CheckoutFileIfRequired(string fileName)
        propertyAccessibility = AccessibilityRankIdLookup.Where(Function(v) v.Value = propertyRank).Select(Function(v) v.Key).Single()
        propertyAccessibility = AccessibilityRankIdLookup.Where(v => v.Value == propertyRank).Select(v => v.Key).Single();
        PropertyInfo pi = (PropertyInfo)memberInfo;
        protected abstract ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors);
        protected abstract string GetNamespace(SchemaConstants constants);
        protected ItemCollectionBuilder(DynamicTextTransformation textTransformation, string fileExtension, string edmxSectionName, string rootElementName)
        Protected MustOverride Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
        Protected MustOverride Function GetNamespace(ByVal constants As SchemaConstants) As String
        Protected Overloads Overrides Function CreateItemCollection(ByVal readers As IEnumerable(Of XmlReader), ByRef errors As IList(Of EdmSchemaError)) As ItemCollection
        Protected Overloads Overrides Sub CreateFile(ByVal fileName As String, ByVal content As String)
        protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
        protected override string GetNamespace(SchemaConstants constants)
        protected override void CreateFile(string fileName, string content)
        Protected Overrides Function GetNamespace(ByVal constants As SchemaConstants) As String
        Protected Property GenerationEnvironment() As System.Text.StringBuilder
        Protected Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal fileExtension As String, ByVal edmxSectionName As String, ByVal rootElementName As String)
        protected System.Text.StringBuilder GenerationEnvironment
        public bool TryCreateItemCollection(string sourcePath, out ItemCollection itemCollection)
        public bool TryLoadRootElement(string sourcePath, out XElement schemaElement)
        Public Class ToStringInstanceHelper
        public class ToStringInstanceHelper
        public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation)
        public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation, IEnumerable<string> referenceSchemas)
        Public Function AdjustIdentifier(ByVal identifier As String) As String
        Public Function PopIndent() As String
        Public Function TryCreateItemCollection(ByVal sourcePath As String, ByRef itemCollection As ItemCollection) As Boolean
        Public Function TryLoadRootElement(ByVal sourcePath As String, ByRef schemaElement As XElement) As Boolean
        public int Start, Length;
        Public Name As String
        Public Overloads Overrides Function Process(Optional split As Boolean = True) As IEnumerable(Of String)
        Public Overloads Sub Write(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
        Public Overloads Sub Write(ByVal textToAppend As String)
        Public Overloads Sub WriteLine(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
        Public Overloads Sub WriteLine(ByVal textToAppend As String)
        Public Overridable Function TransformText() As String
        Public Overridable Property Session() As Global.System.Collections.Generic.IDictionary(Of String, Object)
        public override IEnumerable<string> Process(bool split)
        Public Property CamelCaseFields() As Boolean
        Public Property CreateContextAddToMethods() As Boolean
        Public Property FullyQualifySystemTypes() As Boolean
        Public Property ReferenceCsdlPaths() As String ()
        Public Property SourceCsdlPath() As String
        Public ReadOnly Property CurrentIndent() As String
        Public ReadOnly Property EdmxSectionName() As String
        Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
        Public ReadOnly Property FileExtension() As String
        Public ReadOnly Property RootElementName() As String
        Public ReadOnly Property ToStringHelper() As ToStringInstanceHelper
        Public Start As Integer, Length As Integer
        public StorageMappingItemCollectionBuilder(DynamicTextTransformation textTransformation, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection)
        public StoreItemCollectionBuilder(DynamicTextTransformation textTransformation)
        public string AdjustIdentifier(string identifier)
        public string CurrentIndent
        public string EdmxSectionName
        public string FileExtension
        public String Name;
        public string PopIndent()
        public string RootElementName
        Public Sub [Error](ByVal message As String)
        Public Sub ClearIndent()
        Public Sub New()
        Public Sub New(ByVal textTemplating As Object)
        Public Sub New(ByVal textTransformation As DynamicTextTransformation)
        Public Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal edmItemCollection As EdmItemCollection, ByVal storeItemCollection As StoreItemCollection)
        Public Sub New(ByVal textTransformation As DynamicTextTransformation, ByVal referenceSchemas As IEnumerable(Of String))
        Public Sub PushIndent(ByVal indent As String)
        Public Sub Warning(ByVal message As String)
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        public ToStringInstanceHelper ToStringHelper
        public UniqueIdentifierService()
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        public virtual string TransformText()
        public void ClearIndent()
        public void Error(string message)
        public void PushIndent(string indent)
        public void Warning(string message)
        public void Write(string format, params object[] args)
        public void Write(string textToAppend)
        public void WriteLine(string format, params object[] args)
        public void WriteLine(string textToAppend)
        public VsEntityFrameworkTemplateFileManager(object textTemplating)
        PushIndent(CodeRegion.GetIndent(1))
        PushIndent(CodeRegion.GetIndent(1));
        '''Raise a warning
        '''Raise an error
        ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
        ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
        ReferenceCsdlPaths = new string[] {},
        ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths;
        ReferentialConstraint refConstraint = ((AssociationType)associationEnd.DeclaringType).ReferentialConstraints.Where(rc => rc.FromRole == associationEnd).SingleOrDefault();
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionAddToMethods"))
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionAddToMethods"));
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexProperties"))
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexProperties"));
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFactoryMethod"))
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFactoryMethod"));
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFunctionImports"))
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionFunctionImports"));
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionNavigationProperties"))
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionNavigationProperties"));
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionObjectSetProperties"))
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionObjectSetProperties"));
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionSimpleProperties"))
        region.Begin(CodeGenerationTools.GetResourceString("Template_RegionSimpleProperties"));
        region.Begin(GetResourceString("Template_RegionAddToMethods"))
        region.Begin(GetResourceString("Template_RegionAddToMethods"));
        region.Begin(GetResourceString("Template_RegionComplexProperties"))
        region.Begin(GetResourceString("Template_RegionComplexProperties"));
        region.Begin(GetResourceString("Template_RegionFactoryMethod"))
        region.Begin(GetResourceString("Template_RegionFactoryMethod"));
        region.Begin(GetResourceString("Template_RegionFunctionImports"))
        region.Begin(GetResourceString("Template_RegionFunctionImports"));
        region.Begin(GetResourceString("Template_RegionNavigationProperties"))
        region.Begin(GetResourceString("Template_RegionNavigationProperties"));
        region.Begin(GetResourceString("Template_RegionObjectSetProperties"))
        region.Begin(GetResourceString("Template_RegionObjectSetProperties"));
        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"))
        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"));
        region.End()
        region.End();
        '''Remove any indentation
        '''Remove the last indent that was added with PushIndent
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
        return !fi.IsPrivate && !fi.IsAssembly;
        Return "id"
        return "id";
        return "new";
        Return "Public"
        return "public";
        Return "Shadows"
        return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].FromProperties;
        return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].ToProperties;
        return ((ComplexType)type).Properties;
        return ((EdmType)item).Name;
        return ((EntityContainer)item).Name;
        return ((EntityType)type).Properties;
        Return (namespaceName & ".") + name
        return (string)_resolveParameterValue.Invoke(_instance, new object[] { id, name, otherName });
        return (string)_resolvePath.Invoke(_instance, new object[] { path });
        Return _code.CreateEscapedIdentifier(name)
        return _code.CreateEscapedIdentifier(name);
        return _instance as IServiceProvider;
        Return _resourceManager.GetString(resourceName, culture)
        return _resourceManager.GetString(resourceName, culture);
        return _resourceManager;
        return 0.0;
        Return adjustedIdentifier
        return adjustedIdentifier;
        Return associationEnd.DeleteBehavior = OperationAction.Cascade OrElse IsPrincipalEndOfIdentifyingRelationship(associationEnd)
        return associationEnd.DeleteBehavior == OperationAction.Cascade || IsPrincipalEndOfIdentifyingRelationship(associationEnd);
        Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type))
        return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type));
        Return comment
        return comment;
        Return CType(item, EdmType).Name
        Return CType(item, EntityContainer).Name
        Return declaredMembers.Union(decalredNavigationProperties.Cast(Of EdmMember)())
        Return DefaultSummaryComment
        return DefaultSummaryComment;
        Return DirectCast(_resolveParameterValue.Invoke(_instance, New Object() {id, name, otherName}), String)
        Return DirectCast(_resolvePath.Invoke(_instance, New Object() {path}), String)
        Return DirectCast(navProperty.RelationshipType, AssociationType).ReferentialConstraints(0).FromProperties
        Return DirectCast(navProperty.RelationshipType, AssociationType).ReferentialConstraints(0).ToProperties
        Return DirectCast(type, ComplexType).Properties
        Return DirectCast(type, EntityType).Properties
        return edmItemCollection != null;
        Return edmItemCollection IsNot Nothing
        Return edmProp IsNot Nothing AndAlso IsNullable(edmProp.TypeUsage)
        Return Enumerable.Empty(Of String)()
        Return Escape(clrType, FullyQualifySystemTypes)
        return Escape(clrType, FullyQualifySystemTypes);
        Return Escape(container.Name)
        return Escape(container.Name);
        Return Escape(edmFunction.Name)
        Return Escape(edmSet.Name)
        return Escape(function.Name);
        Return Escape(member.Name)
        return Escape(member.Name);
        return Escape(set.Name);
        Return Escape(type.Name)
        return Escape(type.Name);
        Return False
        return false;
        Return FieldName(edmSet.Name)
        Return FieldName(member.Name)
        return FieldName(member.Name);
        return FieldName(set.Name);
        Return fromProperties(toProperties.IndexOf(dependentProperty))
        return fromProperties[toProperties.IndexOf(dependentProperty)];
        Return generatedFileNames
        return generatedFileNames;
        Return GetAccessibility(edmFunction, METHOD_ACCESS)
        Return GetAccessibility(edmSet, GETTER_ACCESS)
        return GetAccessibility(function, METHOD_ACCESS);
        Return GetAccessibility(item, TYPE_ACCESS)
        return GetAccessibility(item, TYPE_ACCESS);
        Return GetAccessibility(member, GETTER_ACCESS)
        return GetAccessibility(member, GETTER_ACCESS);
        Return GetAccessibility(member, SETTER_ACCESS)
        return GetAccessibility(member, SETTER_ACCESS);
        return GetAccessibility(set, GETTER_ACCESS);
        Return getterAccess
        return getterAccess;
        Return GetType(Object)
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := modelNamespace)
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := Nothing)
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
        Return identifier(0).ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1)
        return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1);
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace := Nothing))
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace))
        Return importParameters
        return importParameters;
        return IsCascadeDeletePrincipal((AssociationEndMember)navProperty.FromEndMember);
        Return IsCascadeDeletePrincipal(DirectCast(navProperty.FromEndMember, AssociationEndMember))
        Return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers(0)) OrElse IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers(1))
        return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[0]) || IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[1]);
        return IsVisibleMethod(add) || IsVisibleMethod(remove);
        Return IsVisibleMethod(add) OrElse IsVisibleMethod(remove)
        return IsVisibleMethod(get) || IsVisibleMethod(set);
        Return IsVisibleMethod(getMethod) OrElse IsVisibleMethod(entitySet)
        Return IsVisibleMethod(mb)
        return IsVisibleMethod(mb);
        Return itemCollection.GetItems(Of AssociationType)().Where(Function(a) DirectCast(a.AssociationEndMembers(0).TypeUsage.EdmType, RefType).ElementType Is entity AndAlso IsCascadeDeletePrincipal(a.AssociationEndMembers(1)) OrElse DirectCast(a.AssociationEndMembers(1).TypeUsage.EdmType, RefType).ElementType Is entity AndAlso IsCascadeDeletePrincipal(a.AssociationEndMembers(0))).Any()
        Return itemCollection.GetItems(Of GlobalItem)() _
        Return ItemCollection.GetItems(Of T)()
        Return ItemCollection.GetItems(Of T)().Where(Function(e) e.MetadataProperties.Any(Function(mp) mp.Name = "SchemaSource" AndAlso DirectCast(mp.Value, String) = SourceCsdlPath))
        Return itemCollection.GetItems(Of T)().Where(Function(i) Not i.MetadataProperties.Any(Function(p) p.Name = ExternalTypeNameAttributeName))
        return itemCollection.GetItems<AssociationType>().Where(a =>
        return itemCollection.GetItems<GlobalItem>().Where(i => i is EntityType || i is ComplexType || i is EnumType || i is EntityContainer).Select(g => GetGlobalItemName(g));
        return ItemCollection.GetItems<T>().Where(e => e.MetadataProperties.Any(mp => mp.Name == "SchemaSource" && (string)mp.Value == SourceCsdlPath));
        return itemCollection.GetItems<T>().Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName));
        return ItemCollection.GetItems<T>();
        Return MultiSchemaEscape(structural, code)
        return MultiSchemaEscape(structural, code);
        Return namespaceName
        return namespaceName + "." + name;
        return namespaceName;
        Return needsMethod
        return needsMethod;
        Return New DynamicTextTransformation(instance)
        return new DynamicTextTransformation(instance);
        Return New EdmItemCollection()
        return new EdmItemCollection();
        Return New EntityFrameworkTemplateFileManager(transformation)
        return new EntityFrameworkTemplateFileManager(transformation);
        Return Not (File.Exists(fileName) AndAlso File.ReadAllText(fileName) = newContent)
        Return Not fi.IsPrivate AndAlso Not fi.IsAssembly
        Return Nothing
        return null;
        Return objectNamespace
        return objectNamespace;
        Return parameters
        return parameters;
        Return path
        return path;
        Return PrefixLinesOfMultilineComment(XMLCOMMENT_START & " ", XmlEntityize(item.Documentation.Summary))
        return PrefixLinesOfMultilineComment(XMLCOMMENT_START + " ", XmlEntityize(item.Documentation.Summary));
        Return prepend + value
        return prepend + value;
        return property != null && IsNullable(property.TypeUsage);
        Return propertyAccess
        return propertyAccess;
        Return ResourceManager.GetString(resourceName, _
        Return setterAccess
        return setterAccess;
        return storageMappingItemCollection != null;
        Return storageMappingItemCollection IsNot Nothing
        return storeItemCollection != null;
        Return storeItemCollection IsNot Nothing
        Return String.Empty
        Return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH)
        return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH);
        return String.Empty;
        return string.Empty;
        return String.Empty;
        return string.Empty;
        return String.Empty;
        return string.Empty;
        return String.Empty;
        Return StringAfter(value, " ")
        return StringAfter(value, " ");
        Return StringBefore(" ", value)
        return StringBefore(" ", value);
        Return subTypes
        Return suggestion
        return suggestion;
        return toEntity.NavigationProperties
        Return toEntity.NavigationProperties.SingleOrDefault(Function(n) n.RelationshipType Is navProperty.RelationshipType AndAlso n IsNot navProperty)
        Return toProperties(fromProperties.IndexOf(principalProperty))
        return toProperties[fromProperties.IndexOf(principalProperty)];
        Return True
        return true;
        Return TryCast(_instance, IServiceProvider)
        Return TryCreateEdmItemCollection(sourcePath, Nothing, edmItemCollection)
        return TryCreateEdmItemCollection(sourcePath, null, out edmItemCollection);
        Return typeName
        return typeName;
        return typeof(object);
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
        Return UnderlyingClrType(typeUsage.EdmType)
        return UnderlyingClrType(typeUsage.EdmType);
        return value != null;
        Return value + append
        Return value IsNot Nothing
        Return VerifyCaseInsensitiveUniqueness(entitySets, Function(e) String.Format(CultureInfo.CurrentCulture, _
        Return VerifyCaseInsensitiveUniqueness(members, _
        Return VerifyCaseInsensitiveUniqueness(types, _
        return VerifyCaseInsensitiveUniqueness(types, t => string.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile);
        Return writer.ToString()
        return writer.ToString();
        Set
        set
        Set(ByVal value As Block)
        Set(ByVal value As Boolean)
        Set(ByVal value As FunctionParameter)
        Set(ByVal value As String)
        setterAccessibility = GetAccessibility(item, SETTER_ACCESS)
        setterAccessibility = GetAccessibility(item, SETTER_ACCESS);
        SourceCsdlPath = @"$edmxInputFile$",
        SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath);
        SourceCsdlPath = Path.GetFullPath(SourceCsdlPath)
        SourceCsdlPath = userSettings.SourceCsdlPath;
        sourcePath = _textTransformation.Host.ResolvePath(sourcePath)
        sourcePath = _textTransformation.Host.ResolvePath(sourcePath);
        SsdlNamespace = ssdlNamespace;
        storageMappingItemCollection = Nothing
        storageMappingItemCollection = null;
        StorageMappingItemCollectionBuilder collectionBuilder = new StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection);
        storeItemCollection = Nothing
        storeItemCollection = null;
        StoreItemCollection storeItemCollection = null;
        StoreItemCollectionBuilder collectionBuilder = new StoreItemCollectionBuilder(_textTransformation);
        string accessibility;
        string comment = Environment.NewLine;
        string getterAccess, setterAccess, propertyAccess;
        string instanceName = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))));
        string lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        string lazyLoadingAttributeValue = null;
        string lineStart = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START + " ";
        string methodName = "Create" + structuralType.Name;
        string refPropertyName = navProperty.Name + "Reference";
        string suggestion = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
        string typeName;
        string[] parts = namespaceName.Split('.');
        '''The error collection for the generation process
        '''The string builder that generation-time code is using to assemble generated output
        Throw New ArgumentException("typeUsage")
        throw new ArgumentException("typeUsage");
        Type type = _instance.GetType();
        Type type = value.GetType();
        UniqueIdentifierService unique = new UniqueIdentifierService();
        UniqueIdentifierService uniqueIdentifier = new UniqueIdentifierService();
        '''Utility class to produce culture-oriented representation of an object as a string.
        value = null;
        var adjustedIdentifier = identifier;
        var collectionType = edmType as CollectionType;
        var enumType = edmType as EnumType;
        var expression = new CodePrimitiveExpression(value);
        var generatedFileNames = new List<string>();
        var hostServiceProvider = host.AsIServiceProvider();
        var numberOfConflicts = 0;
        var primitiveType = edmType as PrimitiveType;
        var typeName = Escape(edmType.MetadataProperties
        var writer = new StringWriter();
        VerifyCaseInsensitiveEntitySetUniqueness(container.BaseEntitySets.OfType(Of EntitySet)())
        VerifyCaseInsensitiveMemberUniqueness(GetAllDeclaredMembers(complex))
        VerifyCaseInsensitiveMemberUniqueness(GetAllDeclaredMembers(entity))
        while (!_knownIdentifiers.Add(adjustedIdentifier))
        While needsMethod AndAlso baseType IsNot Nothing
        While Not _knownIdentifiers.Add(adjustedIdentifier)
        While t IsNot Nothing
        while(needsMethod && baseType != null)
        '''Write formatted text directly into the generated output
        '''Write text directly into the generated output
        WriteFactoryMethod(complex, code)
        WriteFactoryMethod(complex, code);
        WriteLazyLoadingEnabled(container)
        WriteLazyLoadingEnabled(container);
        XElement model;
       )
       Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture,
    ''' </summary>
    ''' <param name="edmType">The o-space type to get a name for.</param>
    ''' <param name="isNullable">Set this to true for nullable usage of this type.</param>
    ''' <param name="itemCollection">The item collection to look in.</param>
    ''' <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    ''' <param name="typeUsage">The o-space type usage to get a name for.</param>
    ''' <returns>The items to generate.</returns>
    ''' <returns>The type name to use.</returns>
    ''' <summary>
    ''' <typeparam name="T">The type of item to return.</typeparam>
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' already is a DynamicTextTransformation, it casts it and sends it back.
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    ''' An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    ''' an external type name if the ExternalTypeName annotation has been specified in the
    ''' and marks this point in generation as a new file.
    ''' and the indent level to start the first region at.
    ''' Any types for which an ExternalTypeName annotation has been applied in the conceptual model
    ''' are fully qualified to keep them from conflicting with
    ''' at
    ''' Attempts to create a EdmItemCollection from the specified metadata file
    ''' Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
    ''' Attempts to create a StoreItemCollection from the specified metadata file
    ''' available, otherwise it returns null.
    ''' base class for ItemCollectionBuilder classes that
    ''' Builder class for creating a EdmItemCollection
    ''' Builder class for creating a StorageMappingItemCollection
    ''' Builder class for creating a StoreItemCollection
    ''' Calls the wrapped TextTranformation instance's Write method.
    ''' Calls the wrapped TextTranformation instance's WriteLine method.
    ''' cascade delete defined, or if it is the dependent in any identifying relationships
    ' Class to create unique variables within the same scope
    ''' conceptual model metadata (CSDL).
    ''' Create an EdmItemCollection loaded with the metadata provided
    ''' created, some of the ItemCollections may be registered and usable even if false is
    ''' Creates a set of FunctionImportParameter objects from the parameters passed in.
    ''' Creates an instance of the DynamicHost class around the passed in
    ''' Creates an instance of the DynamicTextTransformation class around the passed in
    ''' creates the file system version.
    ''' Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
    ''' Default is false.
    ''' Default is true.
    ''' defaults to empty if no annotation is found or the accessibility is the same as the property level.
    ''' defaults to public if no annotation is found.
    ''' desired.
    ''' effects: if secondType is among the base types of the firstType, return true,
    ''' Ends a region, or totaly removes it if nothing
    ''' fully qualified name will be returned.</param>
    ''' generated from the provided EdmMember.
    ''' generated from the provided EntitySet.
    ''' Get a string of spaces equivelent to the number of indents
    ''' Gets the accessibility that should be applied at the get level for a property being
    ''' Gets the accessibility that should be applied at the property level for a property being
    ''' Gets the accessibility that should be applied at the property level for a Read-Only property being
    ''' Gets the accessibility that should be applied at the property level for a Write-Only property being
    ''' Gets the accessibility that should be applied at the set level for a property being
    ''' Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
    ''' Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
    ''' Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
    ''' Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
    ''' Gets the current indent level that the next end region statement will be written
    ''' Gets the entity, complex, or enum types for which code should be generated from the given item collection.
    ''' Gets the Model Namespace from the provided schema file.
    ''' Gets the value of the wrapped TextTranformation instance's Errors property
    ''' Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
    ''' Gets the value of the wrapped TextTranformation instance's Host property
    ''' Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
    ''' Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
    ''' if available (shows up when hostspecific is set to true in the template directive) and returns
    ''' If the passed in TypeUsage represents a collection this method returns final element
    ''' If the value parameter is null or empty an empty string is returned,
    ''' In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    ''' Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
    ''' Initializes an CodeRegion instance with the
    ''' Initializes an EntityFrameworkTemplateFileManager Instance  with the
    ''' Initializes an MetadataLoader Instance with the
    ''' Initializes an MetadataTools Instance with the
    ''' Keywords are escaped.
    ''' Load the metadata for Edm, Store, and Mapping collections and register them
    ''' load the specific types of metadata
    ''' Marks the end of the last file if there was one, and starts a new
    ''' metadata (CSDL) are filtered out of the returned list.
    ''' Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
    ''' not been defined on any base type
    ''' Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    ''' null.
    ''' or if the association end has cascade delete defined.
    ''' or if the source end has cascade delete defined.
    ''' otherwise it retuns value with a single space concatenated on the end.
    ''' otherwise it retuns value with append concatenated on the end.
    ''' otherwise it retuns value with prepend concatenated on the front.
    ''' otherwise returns false.
    ''' otherwise returns true.
    ''' otherwise they will preserve the case they
    ''' Produce the template output files.
    ' reference to the GenerationEnvironment StringBuilder on the
    ''' requires: firstType is not null
    ''' Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
    ''' Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
    ''' Requires: The association has a referential constraint.
    ''' Retuns a literal representing the supplied value.
    ''' Retuns as full of a name as possible, if a namespace is provided
    ''' returned
    ''' Returns a resource string from the System.Data.Entity.Design assembly.
    ''' Returns a string that is safe for use as an identifier in C#.
    ''' Returns false and shows an error if the supplied entity set names aren't case-insensitively unique,
    ''' Returns false and shows an error if the supplied strings aren't case-insensitively unique,
    ''' Returns false and shows an error if the supplied type members names aren't case-insensitively unique,
    ''' Returns false and shows an error if the supplied type names aren't case-insensitively unique,
    ''' Returns null.
    ''' Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
    ''' Returns the escaped type name to use for the given o-space type. This might be
    ''' Returns the escaped type name to use for the given usage of an o-space type. This might be
    ''' Returns the Host instance cast as an IServiceProvider
    ''' Returns the name of the EdmFunction that is safe for
    ''' Returns the name of the EdmMember formatted for
    ''' Returns the name of the EdmMember that is safe for
    ''' Returns the name of the EdmType that is safe for
    ''' Returns the name of the EntityContainer that is safe for
    ''' Returns the name of the EntitySet formatted for
    ''' Returns the name of the EntitySet that is safe for
    ''' Returns the name of the EnumMember that is safe for
    ''' Returns the name of the StructuralType that is safe for
    ''' Returns the name of the supplied GlobalItem.
    ''' Returns the name of the Type object formatted for
    ''' Returns the name of the TypeUsage's EdmType that is safe for
    ''' Returns the names of the items in the supplied collection that correspond to O-Space types.
    ''' Returns the names of the members of the supplied EdmType.
    ''' Returns the NamespaceName suggested by VS if running inside VS. Otherwise, returns
    ''' Returns the NamespaceName with each segment safe to
    ''' Returns the NavigationProperty that is the other end of the same association set if it is
    ''' Returns the passed in identifier with the first letter changed to lowercase
    ''' Returns the subtype of the EntityType in the current itemCollection
    ''' Returns true if the specified file path is valid
    ''' setting.
    ''' something like a type being generated named System.
    ''' Start the begining of a region, indented
    ''' start with.
    ''' Starts the begining of a region
    ''' TextTransformation (T4 generated class) that is currently running
    ''' TextTransformation (T4 generated class) that is currently running,
    ' TextTransformation object
    ''' TextTransformation shapped instance passed in, or if the passed in instance
    ''' that is currently running.
    ''' that returns null.
    ''' that simply retuns null.
    ''' that simply retuns the path passed in.
    ''' the appropriate implementation of IDynamicHost
    ''' the name is returned.
    ''' the namespace and name are combined with a period, otherwise just
    ''' the number of levels specified.
    ''' the numbers of levels specified
    ''' This method changes behavior based on the CamelCaseFields
    ''' This method changes behavior based on the FullyQualifySystemTypes
    ''' This method returns the underlying CLR type of given the O-space type.
    ''' This method returns the underlying CLR type of the O-space type corresponding to the supplied <paramref name="typeUsage"/>
    ''' True if the EdmProperty is a key of its DeclaringType, False otherwise.
    ''' True if the EdmProperty TypeUsage is Nullable, False otherwise.
    ''' True if the source end of the specified navigation property is the principal in an identifying relationship.
    ''' True if the specified association end is the principal end in an identifying relationship.
    ''' True if the specified association end is the principal in an identifying relationship.
    ''' True if the specified association type is an identifying relationship.
    ''' True if the TypeUsage is Nullable, False otherwise.
    ''' True if this entity type participates in any relationships where the other end has an OnDelete
    ''' True if this entity type requires the HandleCascadeDelete method defined and the method has
    ''' type of the collection, otherwise it returns the value passed in.
    ''' types that are being generated. Useful when you have
    ''' use as a field identifier.
    ''' use as an identifier.
    ''' use in source code.
    ''' was generted since the begining of the region, also outdents
    ''' was generted since the begining of the region.
    ''' when firstType is same as the secondType, return false.
    ''' When true, all types that are not being generated
    ''' When true, the field names are Camel Cased,
    ''' with a new MetadataWorkspace, returns false if any of the parts can't be
    '''''''' Write Relationship Attributes.
    #End If
    #End Region
    #endregion
    #If Not PREPROCESSED_TEMPLATE Then
    #Region "Base class"
    #region Base class
    //
    // 
    // Class to create unique variables within the same scope
    // normalize the path, remove ..\ from it
    // reference to the GenerationEnvironment StringBuilder on the
    // TextTransformation object
    ///
    /// 
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <param name="isNullable">Set this to true for nullable usage of this type.</param>
    /// <param name="itemCollection">The item collection to look in.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// <param name="typeUsage">The c-space type usage to get a name for.</param>
    /// <returns>The items to generate.</returns>
    /// <returns>The type name to use.</returns>
    /// <summary>
    /// <typeparam name="T">The type of item to return.</typeparam>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// already is a DynamicTextTransformation, it casts it and sends it back.
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// and marks this point in generation as a new file.
    /// and the indent level to start the first region at.
    /// Any types for which an ExternalTypeName annotation has been applied in the conceptual model
    /// are fully qualified to keep them from conflicting with
    /// at
    /// Attempts to create a EdmItemCollection from the specified metadata file
    /// Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
    /// Attempts to create a StoreItemCollection from the specified metadata file
    /// available, otherwise it returns null.
    /// Base class for ItemCollectionBuilder classes that
    /// Base class for this transformation
    /// Builder class for creating a EdmItemCollection
    /// Builder class for creating a StorageMappingItemCollection
    /// Builder class for creating a StoreItemCollection
    /// Calls the wrapped TextTranformation instance's Write method.
    /// Calls the wrapped TextTranformation instance's WriteLine method.
    /// cascade delete defined, or if it is the dependent in any identifying relationships
    /// Class to produce the template output
    /// conceptual model metadata (CSDL).
    /// Create an EdmItemCollection loaded with the metadata provided
    /// created, some of the ItemCollections may be registered and usable even if false is
    /// Creates a set of FunctionImportParameter objects from the parameters passed in.
    /// Creates an instance of the DynamicHost class around the passed in
    /// Creates an instance of the DynamicTextTransformation class around the passed in
    /// creates the file system version.
    /// Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
    /// Default is false.
    /// Default is true.
    /// defaults to empty if no annotation is found or the accessibility is the same as the property level.
    /// defaults to public if no annotation is found.
    /// desired.
    /// effects: if secondType is among the base types of the firstType, return true,
    /// Ends a region, or totaly removes it if nothing
    /// fully qualified name will be returned.</param>
    /// generated from the provided EdmMember.
    /// generated from the provided EntitySet.
    /// Get a string of spaces equivelent to the number of indents
    /// Gets the accessibility that should be applied at the get level for a property being
    /// Gets the accessibility that should be applied at the property level for a property being
    /// Gets the accessibility that should be applied at the property level for a Read-Only property being
    /// Gets the accessibility that should be applied at the property level for a Write-Only property being
    /// Gets the accessibility that should be applied at the set level for a property being
    /// Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
    /// Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
    /// Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
    /// Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
    /// Gets the current indent level that the next end region statement will be written
    /// Gets the entity, complex, or enum types for which code should be generated from the given item collection.
    /// Gets the Model Namespace from the provided schema file.
    /// Gets the value of the wrapped TextTranformation instance's Errors property
    /// Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
    /// Gets the value of the wrapped TextTranformation instance's Host property
    /// Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
    /// Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
    /// if available (shows up when hostspecific is set to true in the template directive) and returns
    /// If the passed in TypeUsage represents a collection this method returns final element
    /// If the value parameter is null or empty an empty string is returned,
    /// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
    /// Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
    /// Initializes an CodeRegion instance with the
    /// Initializes an EntityFrameworkTemplateFileManager Instance  with the
    /// Initializes an MetadataLoader Instance  with the
    /// Initializes an MetadataTools Instance  with the
    /// Keywords are escaped.
    /// Load the metadata for Edm, Store, and Mapping collections and register them
    /// loads the specific types of metadata
    /// Marks the end of the last file if there was one, and starts a new
    /// metadata (CSDL) are filtered out of the returned list.
    /// Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
    /// not been defined on any base type
    /// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    /// null.
    /// or if the association end has cascade delete defined.
    /// or if the source end has cascade delete defined.
    /// otherwise it retuns value with a single space concatenated on the end.
    /// otherwise it retuns value with append concatenated on the end.
    /// otherwise it retuns value with prepend concatenated on the front.
    /// otherwise returns false.
    /// otherwise returns true.
    /// otherwise they will preserve the case they
    /// Produce the template output files.
    /// requires: firstType is not null
    /// Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
    /// Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
    /// Requires: The association has a referential constraint.
    /// Retuns a literal representing the supplied value.
    /// Retuns as full of a name as possible, if a namespace is provided
    /// returned
    /// Returns a resource string from the System.Data.Entity.Design assembly.
    /// Returns a string that is safe for use as an identifier in C#.
    /// Returns false and shows an error if the supplied strings aren't case-insensitively unique,
    /// Returns false and shows an error if the supplied type names aren't case-insensitively unique,
    /// Returns null.
    /// Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// Returns the escaped type name to use for the given usage of a c-space type in o-space. This might be
    /// Returns the escaped type name to use for the given usage of an c-space type in o-space. This might be
    /// Returns the Host instance cast as an IServiceProvider
    /// Returns the name of the EdmFunction that is safe for
    /// Returns the name of the EdmMember formatted for
    /// Returns the name of the EdmMember that is safe for
    /// Returns the name of the EdmType that is safe for
    /// Returns the name of the EntityContainer that is safe for
    /// Returns the name of the EntitySet formatted for
    /// Returns the name of the EntitySet that is safe for
    /// Returns the name of the EnumMember that is safe for
    /// Returns the name of the StructuralType that is safe for
    /// Returns the name of the supplied GlobalItem.
    /// Returns the name of the Type object formatted for
    /// Returns the name of the TypeUsage's EdmType that is safe for
    /// Returns the names of the items in the supplied collection that correspond to O-Space types.
    /// Returns the NamespaceName suggested by VS if running inside VS.  Otherwise, returns
    /// Returns the NamespaceName with each segment safe to
    /// Returns the NavigationProperty that is the other end of the same association set if it is
    /// Returns the passed in identifier with the first letter changed to lowercase
    /// Returns the subtype of the EntityType in the current itemCollection
    /// Returns true if the specified file path is valid
    /// setting.
    /// something like a type being generated named System.
    /// Start the begining of a region, indented
    /// start with.
    /// Starts the begining of a region
    /// TextTransformation (T4 generated class) that is currently running
    /// TextTransformation (T4 generated class) that is currently running,
    /// TextTransformation shapped instance passed in, or if the passed in instance
    /// that is currently running
    /// that returns null.
    /// that simply retuns null.
    /// that simply retuns the path passed in.
    /// the appropriate implementation of IDynamicHost
    /// the name is returned.
    /// the namespace and name are combined with a period, otherwise just
    /// the number of levels specified.
    /// the numbers of levels specified
    /// This method changes behavior based on the CamelCaseFields
    /// This method changes behavior based on the FullyQualifySystemTypes
    /// This method returns the underlying CLR type given the c-space type.
    /// This method returns the underlying CLR type of the o-space type corresponding to the supplied <paramref name="typeUsage"/>
    /// True if the EdmProperty is a key of its DeclaringType, False otherwise.
    /// True if the EdmProperty TypeUsage is Nullable, False otherwise.
    /// True if the source end of the specified navigation property is the principal in an identifying relationship.
    /// True if the specified association end is the principal end in an identifying relationship.
    /// True if the specified association end is the principal in an identifying relationship.
    /// True if the specified association type is an identifying relationship.
    /// True if the TypeUsage is Nullable, False otherwise.
    /// True if this entity type participates in any relationships where the other end has an OnDelete
    /// True if this entity type requires the HandleCascadeDelete method defined and the method has
    /// type of the collection, otherwise it returns the value passed in.
    /// types that are being generated. Useful when you have
    /// use as a field identifier.
    /// use as an identifier.
    /// use in source code.
    /// was generted since the begining of the region, also outdents
    /// was generted since the begining of the region.
    /// when firstType is same as the secondType, return false.
    /// When true, all types that are not being generated
    /// When true, the field names are Camel Cased,
    /// with a new MetadataWorkspace, returns false if any of the parts can't be
    ////////
    //////// 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    {
    { _
    }
    };
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")>  _
    '''<summary>
    '''Base class for this transformation
    BindingFlags bindingFlags = BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Public
    bool first = true;
'    Changes to this file may cause incorrect behavior and will be lost if
    '''Class to produce the template output
    DefaultSummaryComment = CodeGenerationTools.GetResourceString("Template_CommentNoDocumentation");
    DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation");
    Dim _edmToObjectNamespaceMap As Dictionary(Of string, string) = New Dictionary(Of string, string)
    Dim _edmToObjectNamespaceMap As Dictionary(Of string, string) = new Dictionary(Of string, string)
    Dim baseType As Type
    Dim baseType As Type = GetType(EntityObject)
    Dim baseType As Type = GetType(ObjectContext)
    Dim bindings As BindingFlags = BindingFlags.FlattenHierarchy Or BindingFlags.NonPublic Or BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.Static
    Dim builder As New System.Text.StringBuilder()
    Dim clrType As String = code.Escape(type.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes := False)
    Dim ef As MetadataTools = New MetadataTools(Me)
    Dim ef As New MetadataTools(Me)
    Dim entity As EntityType = association.AssociationEndMembers(index).GetEntityType()
    Dim hash As HashSet(Of String) = New HashSet(Of String)(StringComparer.InvariantCultureIgnoreCase)
    Dim id As String = Guid.NewGuid().ToString()
    Dim list As String = String.Empty
    Dim namePart As String = edmProperty.Name & "Initialized"
    Dim objectNamespace As String = Nothing
    Dim rawGetterAccessibility As String = Accessibility.ForReadOnlyProperty(member)
    Dim rawSetterAccessibility As String = Accessibility.ForWriteOnlyProperty(member)
    Dim setAccess As String = Accessibility.ForReadOnlyProperty(entitySet)
    Dim Shared _resourceManager As System.Resources.ResourceManager
    Dim structural As StructuralType = TryCast(usage.EdmType, StructuralType)
    Dim type As EnumType = TryCast(typeUsage.EdmType, EnumType)
    Dim type As PrimitiveType = TryCast(member.TypeUsage.EdmType, PrimitiveType)
    Dim typeAccess As String = Accessibility.ForType(entitySet.ElementType)
    Dim userSettings As UserSettings =
    else
    Else
    else
    Else
    else
    Else
    else if (memberInfo is FieldInfo)
    else if (memberInfo is MethodBase)
    else if (memberInfo is PropertyInfo)
    ElseIf TypeOf memberInfo Is FieldInfo Then
    ElseIf TypeOf memberInfo Is MethodBase Then
    ElseIf TypeOf memberInfo Is PropertyInfo Then
    End Class
    End Function
    End If
    End Property
    End Sub
    EntityType entity = association.AssociationEndMembers[index].GetEntityType();
    EnumType type = typeUsage.EdmType as EnumType;
    For Each  loopComplex As ComplexType in GetSourceSchemaTypes(Of ComplexType)().OrderBy(Function(e) e.Name)
    For Each association As AssociationType in GetSourceSchemaTypes(Of AssociationType)()
    For Each container as EntityContainer in GetSourceSchemaTypes(Of EntityContainer)()
    For Each enumType As EnumType in GetSourceSchemaTypes(Of EnumType)().OrderBy(Function(e) e.Name)
    For Each item As MetadataItem in items
    For Each loopEntity As EntityType in GetSourceSchemaTypes(Of EntityType)().OrderBy(Function(e) e.Name)
    For Each parameter As Tuple(Of String, String) In parameters
    foreach (AssociationType association in GetSourceSchemaTypes<AssociationType>())
    foreach (ComplexType complex in GetSourceSchemaTypes<ComplexType>().OrderBy(c => c.Name))
    foreach (EntityContainer container in GetSourceSchemaTypes<EntityContainer>())
    foreach (EntityType entity in GetSourceSchemaTypes<EntityType>().OrderBy(e => e.Name))
    foreach (EnumType enumType in GetSourceSchemaTypes<EnumType>().OrderBy(c => c.Name))
    foreach (GlobalItem type in allTypes)
    foreach (string type in types)
    foreach (Tuple<string, string> parameter in parameters)
    Function AsIServiceProvider() As IServiceProvider
    Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String
    Function ResolvePath(ByVal path As String) As String
    get
    get { return _edmToObjectNamespaceMap; }
    HashSet<string> hash = new HashSet<string>();
    IDynamicHost _dynamicHost;
    IEnumerable<GlobalItem> allTypes = GetSourceSchemaTypes<GlobalItem>().Where(i => i is StructuralType || i is EntityContainer);
    if (!CreateContextAddToMethods.HasValue)
    if (!String.IsNullOrEmpty(namespaceName))
    if (!VerifyTypeUniqueness(GetSourceSchemaTypes<GlobalItem>()
    if (((PrimitiveType)member.TypeUsage.EdmType).ClrEquivalentType.IsClass)
    if ((Accessibility.ForReadOnlyProperty(edmProperty) != "public" && Accessibility.ForWriteOnlyProperty(edmProperty) != "public") ||
    if ((rawGetterAccessibility == "internal" && rawSetterAccessibility ==   "protected") ||
    If (Accessibility.ForReadOnlyProperty(edmProperty) <> "Public" AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) <> "Public") OrElse (factoryType IsNot edmProperty.DeclaringType AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) = "Private") Then
    if (code.CamelCaseFields)
    if (DefaultSummaryComment != null)
    if (edmProperty.DefaultValue != null)
    if (edmProperty.Nullable)
    if (EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, out objectNamespace))
    if (ef.IsNullable(typeUsage))
    if (HasBaseMemberWithMatchingName(type, memberName))
    if (item is EdmType)
    if (item.Documentation != null && !String.IsNullOrEmpty(item.Documentation.LongDescription))
    if (item.Documentation != null && item.Documentation.Summary != null)
    if (memberInfo is EventInfo)
    if (methodBase == null)
    If (Not String.IsNullOrEmpty(namespaceName)) Then
    if (Path.GetExtension(SourceCsdlPath) != ".edmx")
    if (property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    If (rawGetterAccessibility = "Friend" AndAlso rawSetterAccessibility = "Protected") OrElse (rawGetterAccessibility = "Protected" AndAlso rawSetterAccessibility = "Friend") Then
    if (ReferenceCsdlPaths == null)
    if (SourceCsdlPath == null)
    if (String.IsNullOrEmpty(namespaceName))
    if (string.IsNullOrEmpty(text))
    if (StringComparer.OrdinalIgnoreCase.Equals(name, "id"))
    if (structural != null)
    if (type != null && type.ClrEquivalentType.IsClass)
    if (type == null)
    if (type.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    if (type.NamespaceName != ModelNamespace)
    if (usage.EdmType != null)
    If code.CamelCaseFields Then
    If DefaultSummaryComment IsNot Nothing Then
    If DirectCast(member.TypeUsage.EdmType, PrimitiveType).ClrEquivalentType.IsClass Then
    If edmProperty.DeclaringType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
    If edmProperty.DefaultValue IsNot Nothing Then
    If edmProperty.Nullable Then
    If EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, objectNamespace) Then
    If ef.IsNullable(typeUsage) Then
    If HasBaseMemberWithMatchingName(type, memberName) Then
    If item.Documentation IsNot Nothing AndAlso item.Documentation.Summary IsNot Nothing Then
    If item.Documentation IsNot Nothing AndAlso Not String.IsNullOrEmpty(item.Documentation.LongDescription) Then
    If methodBase Is Nothing Then
    If Not code.VerifyCaseInsensitiveTypeUniqueness(code.GetAllGlobalItems(ItemCollection), SourceCsdlPath) Then
    If Not objectNamespace = ModelNamespace AndAlso Not EdmToObjectNamespaceMap.ContainsKey(ModelNamespace)
    If Path.GetExtension(SourceCsdlPath) <> ".edmx" Then
    If String.IsNullOrEmpty(text) Then
    If StringComparer.OrdinalIgnoreCase.Equals(name, "id") Then
    If structural IsNot Nothing Then
    If type Is Nothing Then
    If type IsNot Nothing AndAlso type.ClrEquivalentType.IsClass Then
    If type.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
    If type.NamespaceName <> ModelNamespace Then
    If typeAccess = "Friend" AndAlso (setAccess = "Public" OrElse setAccess = "Protected") Then
    If TypeOf item Is EdmType Then
    If TypeOf memberInfo Is EventInfo Then
    If usage.EdmType IsNot Nothing Then
    If(Not String.IsNullOrEmpty(namespaceName)) Then
    if(objectNamespace != ModelNamespace && !EdmToObjectNamespaceMap.ContainsKey(ModelNamespace))
    if(typeAccess == "internal" && (setAccess == "public" || setAccess == "protected"))
    If(TypeOf structural Is EntityType) Then
    Implements IDynamicHost
    IServiceProvider AsIServiceProvider();
    MetadataTools ef = new MetadataTools(this);
    new UserSettings
    New UserSettings With _
    Next
    Partial Public Class VBCodeGenTemplate
    Partial Public Class VBCodeGenTemplateV50
    PopIndent()
    PrimitiveType type = member.TypeUsage.EdmType as PrimitiveType;
    Private _beforeRegionLength As Integer
    Private _CamelCaseFields As Boolean
    Private _dynamicHost As IDynamicHost
    Private _emptyRegionLength As Integer
    Private _FullyQualifySystemTypes As Boolean
    Private _instance As Object
    Private _regionIndentLevel As Integer = -1
    private abstract class ItemCollectionBuilder
    private Block CurrentBlock
    private Block currentBlock;
    private bool ContainsCascadeDeleteAssociation(ItemCollection itemCollection, EntityType entity)
    private bool VerifyCaseInsensitiveUniqueness(IEnumerable<string> items, Func<string, string> formatMessage, string sourceFile)
    Private Class EdmItemCollectionBuilder
    private class EdmItemCollectionBuilder : ItemCollectionBuilder
    Private Class StorageMappingItemCollectionBuilder
    private class StorageMappingItemCollectionBuilder : ItemCollectionBuilder
    Private Class StoreItemCollectionBuilder
    private class StoreItemCollectionBuilder : ItemCollectionBuilder
    Private Class UserSettings
    Private Const ACCESS_INTERNAL As String = "Internal"
    Private Const ACCESS_PRIVATE As String = "Private"
    Private Const ACCESS_PROTECTED As String = "Protected"
    Private Const ExternalTypeNameAttributeName As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName"
    Private Const GETTER_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess"
    private const int STANDARD_INDENT_LENGTH = 4;
    Private Const METHOD_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess"
    Private Const SETTER_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess"
    Private Const STANDARD_INDENT_LENGTH As Integer = 4
    private const string ACCESS_INTERNAL = "Internal";
    private const string ACCESS_PRIVATE = "Private";
    private const string ACCESS_PROTECTED = "Protected";
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";
    private const string GETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess";
    private const string METHOD_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess";
    private const string SETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess";
    private const string TYPE_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess";
    Private Const TYPE_ACCESS As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess"
    private DynamicTextTransformation(object instance)
    private EntityFrameworkTemplateFileManager(object textTransformation)
    Private Function ContainsCascadeDeleteAssociation(itemCollection As ItemCollection, entity As EntityType) As Boolean
    Private Function FieldName(ByVal name As String) As String
    Private Function GetGlobalItemName(item As GlobalItem) As String
    Private Function GetNamespaceName(code As CodeGenerationTools) As String
    Private Function GetTypeName(edmType As EdmType, isNullable As System.Nullable(Of Boolean), modelNamespace As String) As String
    Private Function VerifyCaseInsensitiveUniqueness(items As IEnumerable(Of String), formatMessage As Func(Of String, String), ByVal sourceFile As String) As Boolean
    private int _beforeRegionLength;
    private int _emptyRegionLength;
    private int _regionIndentLevel = -1;
    Private m_CsdlNamespace As String
    Private m_currentBlock As Block
    Private m_EdmxNamespace As String
    Private m_MinimumTemplateVersion As Version
    Private m_MslNamespace As String
    Private m_SsdlNamespace As String
    Private MustInherit Class ItemCollectionBuilder
    Private NotInheritable Class Block
    Private NotInheritable Class UniqueIdentifierService
    Private NotInheritable Class VsEntityFrameworkTemplateFileManager
    private object _instance;
    Private Property CurrentBlock() As Block
    Private ReadOnly _code As VBCodeProvider
    Private ReadOnly _ef As MetadataTools
    Private ReadOnly _errors As PropertyInfo
    Private ReadOnly _generationEnvironment As PropertyInfo
    Private ReadOnly _generationEnvironment As StringBuilder
    Private ReadOnly _host As PropertyInfo
    Private ReadOnly _instance As Object
    Private ReadOnly _knownIdentifiers As HashSet(Of String) = New HashSet(Of string)(StringComparer.OrdinalIgnoreCase)
    Private ReadOnly _resolveParameterValue As MethodInfo
    Private ReadOnly _resolvePath As MethodInfo
    Private ReadOnly _templateFile As PropertyInfo
    Private ReadOnly _textTransformation As DynamicTextTransformation
    Private ReadOnly _write As MethodInfo
    Private ReadOnly _writeLine As MethodInfo
    private readonly Block footer = new Block();
    private readonly Block header = new Block();
    private readonly CSharpCodeProvider _code;
    private readonly DynamicTextTransformation _textTransformation;
    Private ReadOnly files As New List(Of Block)()
    Private ReadOnly footer As New Block()
    private readonly HashSet<string> _knownIdentifiers;
    Private ReadOnly header As New Block()
    private readonly List<Block> files = new List<Block>();
    private readonly MetadataTools _ef;
    private readonly MethodInfo _resolveParameterValue;
    private readonly MethodInfo _resolvePath;
    private readonly MethodInfo _write;
    private readonly MethodInfo _writeLine;
    private readonly object _instance;
    private readonly PropertyInfo _errors;
    private readonly PropertyInfo _generationEnvironment;
    private readonly PropertyInfo _host;
    private readonly PropertyInfo _templateFile;
    private readonly StringBuilder _generationEnvironment;
    private sealed class Block
    private sealed class UniqueIdentifierService
    private sealed class VsEntityFrameworkTemplateFileManager : EntityFrameworkTemplateFileManager
    Private Shared Function GetAccessibility(ByVal item As MetadataItem, ByVal name As String) As String
    Private Shared Function GetResourceString(resourceName As String) As String
    Private Shared Function TranslateUserAccessibilityToCSharpAccessibility(ByVal userAccessibility As String) As String
    Private Shared Function ValidateInputPath(sourcePath As String, textTransformation As DynamicTextTransformation) As Boolean
    Private Shared ReadOnly AccessibilityRankIdLookup As New Dictionary(Of String, Integer)() From _
    Private Shared ReadOnly Property ResourceManager As System.Resources.ResourceManager
    Private Shared Sub CalculatePropertyAccessibility(ByVal item As MetadataItem, ByRef propertyAccessibility As String, ByRef getterAccessibility As String, ByRef setterAccessibility As String)
    private static bool ValidateInputPath(string sourcePath, DynamicTextTransformation textTransformation)
    private static readonly Dictionary<string, int> AccessibilityRankIdLookup = new Dictionary<string, int>
    private static string GetAccessibility(MetadataItem item, string name)
    private static string TranslateUserAccessibilityToCSharpAccessibility(string userAccessibility)
    private static void CalculatePropertyAccessibility(MetadataItem item,
    private string FieldName(string name)
    private string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    Private Sub ApplyUserSettings(userSettings as UserSettings)
    Private Sub New()
    Private Sub New(ByVal instance As Object)
    Private Sub New(ByVal textTransformation As Object)
    Private Sub WriteComplexTypeProperty(complexProperty As EdmProperty, code As CodeGenerationTools)
    Private Sub WriteFactoryMethod(structuralType As StructuralType, code As CodeGenerationTools)
    Private Sub WriteFunctionParameters(ByVal parameters As IEnumerable(Of FunctionImportParameter))
    Private Sub WriteLazyLoadingEnabled(ByVal container As EntityContainer)
    Private Sub WritePrimitiveTypeProperty(primitiveProperty As EdmProperty, code As CodeGenerationTools)
    Private Sub WriteSimpleTypeProperty(simpleProperty As EdmProperty, code As CodeGenerationTools)
    private void WriteComplexTypeProperty(EdmProperty complexProperty, CodeGenerationTools code)
    private void WriteFactoryMethod(StructuralType structuralType, CodeGenerationTools code)
    private void WriteFunctionParameters(IEnumerable<FunctionImportParameter> parameters)
    private void WriteLazyLoadingEnabled(EntityContainer container)
    private void WritePrimitiveTypeProperty(EdmProperty primitiveProperty, CodeGenerationTools code)
    private void WriteSimpleTypeProperty(EdmProperty simpleProperty, CodeGenerationTools code)
    protected bool IsFileContentDifferent(String fileName, string newContent)
    Protected Function IsFileContentDifferent(ByVal fileName As String, ByVal newContent As String) As Boolean
    Protected Overridable Sub CreateFile(ByVal fileName As String, ByVal content As String)
    protected virtual void CreateFile(string fileName, string content)
    public bool CamelCaseFields { get; set; }
    public bool CamelCaseFields{ get; set; }
    public bool CreateContextAddToMethods{ get; set; }
    public bool FullyQualifySystemTypes { get; set; }
    public bool FullyQualifySystemTypes{ get; set; }
    public bool IsCascadeDeletePrincipal(AssociationEndMember associationEnd)
    public bool IsCascadeDeletePrincipal(NavigationProperty navProperty)
    public bool IsComplexType;
    public bool IsIdentifyingRelationship(AssociationType association)
    public bool IsKey(EdmProperty property)
    public bool IsNullable(EdmProperty property)
    public bool IsNullable(TypeUsage typeUsage)
    public bool IsNullableOfT { get; set; }
    public bool IsPrincipalEndOfIdentifyingRelationship(AssociationEndMember associationEnd)
    public bool IsSubtypeOf(EdmType firstType, EdmType secondType)
    public bool NeedsHandleCascadeDeleteMethod(ItemCollection itemCollection, EntityType entity)
    public bool NeedsLocalVariable { get; set; }
    public bool TryCreateEdmItemCollection(string sourcePath, out EdmItemCollection edmItemCollection)
    public bool TryCreateEdmItemCollection(string sourcePath, string[] referenceSchemas, out EdmItemCollection edmItemCollection)
    public bool TryCreateStorageMappingItemCollection(string sourcePath, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, out StorageMappingItemCollection storageMappingItemCollection)
    public bool TryCreateStoreItemCollection(string sourcePath, out StoreItemCollection storeItemCollection)
    public bool TryLoadAllMetadata(string inputFile, out MetadataWorkspace metadataWorkspace)
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    public class CSharpCodeGenTemplateBase
    public class CSharpCodeGenTemplateV50Base
    Public Class VBCodeGenTemplateBase
    Public Class VBCodeGenTemplateV50Base
    public CodeGenerationTools(object textTransformation)
    public CodeRegion(object textTransformation)
    public CodeRegion(object textTransformation, int firstIndentLevel)
    Public Const CSDL_EDMX_SECTION_NAME As String = "ConceptualModels"
    Public Const CSDL_EXTENSION As String = ".csdl"
    Public Const CSDL_ROOT_ELEMENT_NAME As String = "Schema"
    Public Const DEFAULT_TEMPLATE_VERSION As String = "4.0"
    Public Const EDM_ANNOTATION_09_02 As String = "http://schemas.microsoft.com/ado/2009/02/edm/annotation"
    Public Const MSL_EDMX_SECTION_NAME As String = "Mappings"
    Public Const MSL_EXTENSION As String = ".msl"
    Public Const MSL_ROOT_ELEMENT_NAME As String = "Mapping"
    Public Const SSDL_EDMX_SECTION_NAME As String = "StorageModels"
    Public Const SSDL_EXTENSION As String = ".ssdl"
    Public Const SSDL_ROOT_ELEMENT_NAME As String = "Schema"
    public const string CSDL_EDMX_SECTION_NAME = "ConceptualModels";
    public const string CSDL_EXTENSION = ".csdl";
    public const string CSDL_ROOT_ELEMENT_NAME = "Schema";
    public const string DEFAULT_TEMPLATE_VERSION = "4.0";
    public const string EDM_ANNOTATION_09_02 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";
    public const string MSL_EDMX_SECTION_NAME = "Mappings";
    public const string MSL_EXTENSION = ".msl";
    public const string MSL_ROOT_ELEMENT_NAME = "Mapping";
    public const string SSDL_EDMX_SECTION_NAME = "StorageModels";
    public const string SSDL_EXTENSION = ".ssdl";
    public const string SSDL_ROOT_ELEMENT_NAME = "Schema";
    public const string TT_MINIMUM_ENTITY_FRAMEWORK_VERSION = "MinimumEntityFrameworkVersion";
    public const string TT_TEMPLATE_NAME = "TemplateName";
    public const string TT_TEMPLATE_VERSION = "TemplateVersion";
    Public Const TT_MINIMUM_ENTITY_FRAMEWORK_VERSION As String = "MinimumEntityFrameworkVersion"
    Public Const TT_TEMPLATE_NAME As String = "TemplateName"
    Public Const TT_TEMPLATE_VERSION As String = "TemplateVersion"
    public DynamicHost(object instance)
    public EdmItemCollection CreateEdmItemCollection(string sourcePath, params string[] referenceSchemas)
    public EdmProperty GetCorrespondingDependentProperty(NavigationProperty navProperty, EdmProperty principalProperty)
    public EdmProperty GetCorrespondingPrincipalProperty(NavigationProperty navProperty, EdmProperty dependentProperty)
    public EdmProperty Source;
    Public Function AdjustIdentifier(identifier As String) As String
    Public Function AsIServiceProvider() As IServiceProvider Implements IDynamicHost.AsIServiceProvider
    Public Function CamelCase(ByVal identifier As String) As String
    Public Function ClrType(typeUsage As TypeUsage) As Type
    Public Function CreateEdmItemCollection(ByVal sourcePath As String, ByVal ParamArray referenceSchemas As String()) As EdmItemCollection
    Public Function CreateFullName(ByVal namespaceName As String, ByVal name As String) As String
    Public Function CreateLiteral(ByVal value As Object) As String
    Public Function Escape(ByVal clrType As Type) As String
    Public Function Escape(ByVal clrType As Type, ByVal fullyQualifySystemTypes As Boolean) As String
    Public Function Escape(ByVal container As EntityContainer) As String
    Public Function Escape(ByVal edmFunction As EdmFunction) As String
    Public Function Escape(ByVal edmSet As EntitySet) As String
    Public Function Escape(ByVal member As EdmMember) As String
    Public Function Escape(ByVal member As EnumMember) As String
    Public Function Escape(ByVal name As String) As String
    Public Function Escape(ByVal type As EdmType) As String
    Public Function Escape(ByVal type As StructuralType) As String
    Public Function Escape(ByVal typeUsage As TypeUsage) As String
    Public Function EscapeNamespace(ByVal namespaceName As String) As String
    Public Function FieldName(ByVal edmSet As EntitySet) As String
    Public Function FieldName(ByVal member As EdmMember) As String
    Public Function GetAllDeclaredMembers(edmType As EdmType) As IEnumerable(Of String)
    Public Function GetAllGlobalItems(ByVal itemCollection As EdmItemCollection) As IEnumerable(Of String)
    Public Function GetCorrespondingDependentProperty(ByVal navProperty As NavigationProperty, ByVal principalProperty As EdmProperty) As EdmProperty
    Public Function GetCorrespondingPrincipalProperty(ByVal navProperty As NavigationProperty, ByVal dependentProperty As EdmProperty) As EdmProperty
    Public Function GetDependentProperties(ByVal navProperty As NavigationProperty) As ReadOnlyMetadataCollection(Of EdmProperty)
    Public Function GetElementType(ByVal typeUsage As TypeUsage) As TypeUsage
    Public Function GetItemsToGenerate(Of T As GlobalItem)(itemCollection As ItemCollection) As IEnumerable(Of T)
    Public Function GetModelNamespace(ByVal sourcePath As String) As String
    Public Function GetPrincipalProperties(ByVal navProperty As NavigationProperty) As ReadOnlyMetadataCollection(Of EdmProperty)
    Public Function GetSubtypesOf(ByVal type As EntityType, ByVal itemCollection As ItemCollection, ByVal includeAbstractTypes As Boolean) As IEnumerable(Of EntityType)
    Public Function GetTypeName(edmType As EdmType) As String
    Public Function GetTypeName(edmType As EdmType, modelNamespace As String) As String
    Public Function GetTypeName(typeUsage As TypeUsage) As String
    Public Function GetTypeName(typeUsage As TypeUsage, modelNamespace As String) As String
    Public Function Inverse(ByVal navProperty As NavigationProperty) As NavigationProperty
    Public Function IsCascadeDeletePrincipal(ByVal associationEnd As AssociationEndMember) As Boolean
    Public Function IsCascadeDeletePrincipal(ByVal navProperty As NavigationProperty) As Boolean
    Public Function IsIdentifyingRelationship(ByVal association As AssociationType) As Boolean
    Public Function IsKey(ByVal edmProp As EdmProperty) As Boolean
    Public Function IsNullable(ByVal edmProp As EdmProperty) As Boolean
    Public Function IsNullable(ByVal typeUsage As TypeUsage) As Boolean
    Public Function IsPrincipalEndOfIdentifyingRelationship(ByVal associationEnd As AssociationEndMember) As Boolean
    Public Function IsSubtypeOf(ByVal firstType As EdmType, ByVal secondType As EdmType) As Boolean
    Public Function MustInheritOption(entity As EntityType) As String
    Public Function NeedsHandleCascadeDeleteMethod(itemCollection As ItemCollection, entity As EntityType) As Boolean
    Public Function ResolveParameterValue(ByVal id As String, ByVal name As String, ByVal otherName As String) As String Implements IDynamicHost.ResolveParameterValue
    Public Function ResolvePath(ByVal path As String) As String Implements IDynamicHost.ResolvePath
    Public Function SpaceAfter(ByVal value As String) As String
    Public Function SpaceBefore(ByVal value As String) As String
    Public Function StringAfter(ByVal value As String, ByVal append As String) As String
    Public Function StringBefore(ByVal prepend As String, ByVal value As String) As String
    Public Function TryCreateEdmItemCollection(ByVal sourcePath As String, ByRef edmItemCollection As EdmItemCollection) As Boolean
    Public Function TryCreateEdmItemCollection(ByVal sourcePath As String, ByVal referenceSchemas As String(), ByRef edmItemCollection As EdmItemCollection) As Boolean
    Public Function TryCreateStorageMappingItemCollection(ByVal sourcePath As String, ByVal edmItemCollection As EdmItemCollection, ByVal storeItemCollection As StoreItemCollection, ByRef storageMappingItemCollection As StorageMappingItemCollection) As Boolean
    Public Function TryCreateStoreItemCollection(ByVal sourcePath As String, ByRef storeItemCollection As StoreItemCollection) As Boolean
    Public Function TryLoadAllMetadata(ByVal inputFile As String, ByRef metadataWorkspace As MetadataWorkspace) As Boolean
    Public Function UnderlyingClrType(edmType As EdmType) As Type
    Public Function VerifyCaseInsensitiveEntitySetUniqueness(entitySets As IEnumerable(Of String), ByVal entityContainerName As String, ByVal sourceFile As String) As Boolean
    Public Function VerifyCaseInsensitiveMemberUniqueness(members As IEnumerable(Of String), ByVal declaringType As String, ByVal sourceFile As String) As Boolean
    Public Function VerifyCaseInsensitiveTypeUniqueness(types As IEnumerable(Of String), ByVal sourceFile As String) As Boolean
    Public Function VsNamespaceSuggestion() As String
    public FunctionParameter Source { get; set; }
    public IDynamicHost Host
    public IEnumerable<EntityType> GetSubtypesOf(EntityType type, ItemCollection itemCollection, bool includeAbstractTypes)
    public IEnumerable<string> GetAllGlobalItems(EdmItemCollection itemCollection)
    public IEnumerable<T> GetItemsToGenerate<T>(ItemCollection itemCollection) where T: GlobalItem
    public int CurrentIndentLevel { get { return _regionIndentLevel; } }
    Public IsComplexType As Boolean
    public IServiceProvider AsIServiceProvider()
    public MetadataLoader(object textTransformation)
    public MetadataTools(object textTransformation)
    public NavigationProperty Inverse(NavigationProperty navProperty)
    Public Overridable Function Process(Optional split As Boolean = True) As IEnumerable(Of String)
    Public ParameterComment As String
    Public ParameterName As String
    Public ParameterType As String
    public partial class CSharpCodeGenTemplate : CSharpCodeGenTemplateBase
    public partial class CSharpCodeGenTemplateV50 : CSharpCodeGenTemplateV50Base
    Public Property CamelCaseFields() As Boolean
    Public Property CreateContextAddToMethods As Nullable(Of Boolean)
    Public Property CsdlNamespace() As String
    Public Property EdmToObjectNamespaceMap() As Dictionary(Of string, string)
    Public Property EdmxNamespace() As String
    Public Property EsqlParameterName() As String
    Public Property ExecuteParameterName() As String
    Public Property FullyQualifySystemTypes() As Boolean
    Public Property FullyQualifySystemTypes() As Nullable(Of Boolean)
    Public Property FunctionParameterName() As String
    Public Property FunctionParameterType() As String
    Public Property IsNullableOfT() As Boolean
    Public Property ItemCollection() As EdmItemCollection
    Public Property LocalVariableName() As String
    Public Property MinimumTemplateVersion() As Version
    Public Property ModelNamespace() As String
    Public Property MslNamespace() As String
    Public Property NeedsLocalVariable() As Boolean
    Public Property RawClrTypeName() As String
    Public Property RawFunctionParameterName() As String
    Public Property ReferenceCsdlPaths() As IEnumerable(Of String)
    Public Property Source() As FunctionParameter
    Public Property SourceCsdlPath() As String
    Public Property SsdlNamespace() As String
    Public RawParameterName As String
    Public ReadOnly Property CurrentIndentLevel() As Integer
    Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
    Public ReadOnly Property GenerationEnvironment() As StringBuilder
    Public ReadOnly Property Host() As IDynamicHost
    Public ReadOnly Property SourceEdmVersion As Double
    Public ReadOnly Property TemplateFile() As String Implements IDynamicHost.TemplateFile
    public ReadOnlyMetadataCollection<EdmProperty> GetDependentProperties(NavigationProperty navProperty)
    public ReadOnlyMetadataCollection<EdmProperty> GetPrincipalProperties(NavigationProperty navProperty)
    public SchemaConstants(string edmxNamespace, string csdlNamespace, string ssdlNamespace, string mslNamespace, Version minimumTemplateVersion) : this()
    Public Shared Function Create(ByVal instance As Object) As DynamicTextTransformation
    Public Shared Function Create(ByVal parameters As IEnumerable(Of FunctionParameter), ByVal code As CodeGenerationTools, ByVal ef As MetadataTools) As IEnumerable(Of FunctionImportParameter)
    Public Shared Function Create(ByVal textTransformation As Object) As EntityFrameworkTemplateFileManager
    Public Shared Function CreateParameters(ByVal properties As IEnumerable(Of EdmProperty), ByVal unique As UniqueIdentifierService, ByVal multiSchemaEscape As Func(Of TypeUsage, CodeGenerationTools, String), ByVal code As CodeGenerationTools) As IEnumerable(Of FactoryMethodParameter)
    Public Shared Function ForGetter(ByVal member As EdmMember) As String
    Public Shared Function ForMethod(ByVal edmFunction As EdmFunction) As String
    Public Shared Function ForProperty(ByVal member As EdmMember) As String
    Public Shared Function ForReadOnlyProperty(ByVal edmSet As EntitySet) As String
    Public Shared Function ForReadOnlyProperty(ByVal member As EdmMember) As String
    Public Shared Function ForSetter(ByVal member As EdmMember) As String
    Public Shared Function ForType(ByVal item As GlobalItem) As String
    Public Shared Function ForWriteOnlyProperty(ByVal member As EdmMember) As String
    Public Shared Function GetIndent(ByVal indentLevel As Integer) As String
    Public Shared Function GetResourceString(resourceName As String, Optional culture As CultureInfo = Nothing) As String
    Public Shared Function TryGetStringMetadataPropertySetting(ByVal item As MetadataItem, ByVal propertyName As String, ByRef value As String) As Boolean
    Public Shared ReadOnly V1_SCHEMA_CONSTANTS As New SchemaConstants(
    Public Shared ReadOnly V2_SCHEMA_CONSTANTS As New SchemaConstants(
    Public Shared ReadOnly V3_SCHEMA_CONSTANTS As New SchemaConstants(
    Public Source As EdmProperty
    public static bool TryGetStringMetadataPropertySetting(MetadataItem item, string propertyName, out string value)
    public static DynamicTextTransformation Create(object instance)
    public static EntityFrameworkTemplateFileManager Create(object textTransformation)
    public static IEnumerable<FactoryMethodParameter> CreateParameters(IEnumerable<EdmProperty> properties, UniqueIdentifierService unique, Func<TypeUsage, CodeGenerationTools, string> multiSchemaEscape, CodeGenerationTools code)
    public static IEnumerable<FunctionImportParameter> Create(IEnumerable<FunctionParameter> parameters, CodeGenerationTools code, MetadataTools ef)
    public static readonly SchemaConstants V1_SCHEMA_CONSTANTS = new SchemaConstants(
    public static readonly SchemaConstants V2_SCHEMA_CONSTANTS = new SchemaConstants(
    public static readonly SchemaConstants V3_SCHEMA_CONSTANTS = new SchemaConstants(
    public static string ForGetter(EdmMember member)
    public static string ForMethod(EdmFunction function)
    public static string ForProperty(EdmMember member)
    public static string ForReadOnlyProperty(EdmMember member)
    public static string ForReadOnlyProperty(EntitySet set)
    public static string ForSetter(EdmMember member)
    public static string ForType(GlobalItem item)
    public static string ForWriteOnlyProperty(EdmMember member)
    public static string GetIndent(int indentLevel)
    public static string GetResourceString(string resourceName, CultureInfo culture = null)
    public string AbstractOption(EntityType entity)
    public string AdjustIdentifier(string identifier)
    public string CamelCase(string identifier)
    public string CreateFullName(string namespaceName, string name)
    public string CreateLiteral(object value)
    public string CsdlNamespace { get; private set; }
    public string EdmxNamespace { get; private set; }
    public string Escape(EdmFunction function)
    public string Escape(EdmMember member)
    public string Escape(EdmType type)
    public string Escape(EntityContainer container)
    public string Escape(EntitySet set)
    public string Escape(EnumMember member)
    public string Escape(string name)
    public string Escape(StructuralType type)
    public string Escape(Type clrType)
    public string Escape(Type clrType, bool fullyQualifySystemTypes)
    public string Escape(TypeUsage typeUsage)
    public string EscapeNamespace(string namespaceName)
    public string EsqlParameterName { get; set; }
    public string ExecuteParameterName { get; set; }
    public string FieldName(EdmMember member)
    public string FieldName(EntitySet set)
    public string FunctionParameterName { get; set; }
    public string FunctionParameterType { get; set; }
    public string GetGlobalItemName(GlobalItem item)
    public string GetModelNamespace(string sourcePath)
    public string GetTypeName(EdmType edmType)
    public string GetTypeName(EdmType edmType, string modelNamespace)
    public string GetTypeName(TypeUsage typeUsage)
    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    public string LocalVariableName { get; set; }
    public string MslNamespace { get; private set; }
    public string ParameterComment;
    public string ParameterName;
    public string ParameterType;
    public string RawClrTypeName { get; set; }
    public string RawFunctionParameterName { get; set; }
    public string RawParameterName;
    public string ResolveParameterValue(string id, string name, string otherName)
    public string ResolvePath(string path)
    public string SourceCsdlPath{ get; set; }
    public string SpaceAfter(string value)
    public string SpaceBefore(string value)
    public string SsdlNamespace { get; private set; }
    public string StringAfter(string value, string append)
    public string StringBefore(string prepend, string value)
    public string TemplateFile
    public string VsNamespaceSuggestion()
    public string[] ReferenceCsdlPaths{ get; set; }
    public StringBuilder GenerationEnvironment { get { return (StringBuilder)_generationEnvironment.GetValue(_instance, null); } }
    Public Sub [End]()
    Public Sub [End](ByVal levelsToDecrease As Integer)
    Public Sub Begin(ByVal regionName As String)
    Public Sub Begin(ByVal regionName As String, ByVal levelsToIncreaseIndent As Integer)
    Public Sub EndBlock()
    Public Sub New(ByVal edmxNamespace As String, ByVal csdlNamespace As String, ByVal ssdlNamespace As String, ByVal mslNamespace As String, ByVal minimumTemplateVersion As Version)
    Public Sub New(ByVal instance As Object)
    Public Sub New(ByVal textTransformation As Object)
    Public Sub New(ByVal textTransformation As Object, ByVal firstIndentLevel As Integer)
    Public Sub StartFooter()
    Public Sub StartHeader()
    Public Sub StartNewFile(ByVal name As String)
    Public Sub Write(ByVal text As String)
    Public Sub WriteLine(ByVal text As String)
    public System.CodeDom.Compiler.CompilerErrorCollection Errors { get { return (System.CodeDom.Compiler.CompilerErrorCollection)_errors.GetValue(_instance, null); } }
    public Type ClrType(TypeUsage typeUsage)
    public Type UnderlyingClrType(EdmType edmType)
    public TypeUsage GetElementType(TypeUsage typeUsage)
    public UniqueIdentifierService()
    public Version MinimumTemplateVersion { get; private set; }
    public virtual IEnumerable<string> Process(bool split = true)
    public void Begin(string regionName)
    public void Begin(string regionName, int levelsToIncreaseIndent)
    public void End()
    public void End(int levelsToDecrease)
    public void EndBlock()
    public void StartFooter()
    public void StartHeader()
    public void StartNewFile(string name)
    public void Write(string text)
    public void WriteLine(string text)
    ReadOnly Property TemplateFile() As String
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexTypes"))
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionComplexTypes"));
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionContexts"))
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionContexts"));
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEntities"))
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEntities"));
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEnumTypes"))
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionEnumTypes"));
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionRelationships"))
    region.Begin(CodeGenerationTools.GetResourceString("Template_RegionRelationships"));
    region.Begin(GetResourceString("Template_RegionComplexTypes"))
    region.Begin(GetResourceString("Template_RegionComplexTypes"));
    region.Begin(GetResourceString("Template_RegionContexts"))
    region.Begin(GetResourceString("Template_RegionContexts"));
    region.Begin(GetResourceString("Template_RegionEntities"))
    region.Begin(GetResourceString("Template_RegionEntities"));
    region.Begin(GetResourceString("Template_RegionRelationships"))
    region.Begin(GetResourceString("Template_RegionRelationships"));
    region.End()
    region.End();
    return !methodBase.IsPrivate && !methodBase.IsAssembly;
    return "(" + clrType + ")";
    return "(" + MultiSchemaEscape(typeUsage, code) + ")";
    Return ", " & clrType & ")"
    Return ", " & MultiSchemaEscape(typeUsage, code) & ")"
    Return "_" & namePart
    return "_" + namePart;
    Return "CType("
    Return association.AssociationEndMembers(index).Name
    return association.AssociationEndMembers[index].Name;
    Return builder.ToString()
    return builder.ToString();
    Return code.CamelCase(name)
    return code.CamelCase(name);
    Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity))
    return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity));
    Return code.CreateLiteral(association.AssociationEndMembers(index).RelationshipMultiplicity)
    return code.CreateLiteral(association.AssociationEndMembers[index].RelationshipMultiplicity);
    Return code.Escape(type)
    return code.Escape(type);
    Return code.Escape(usage)
    return code.Escape(usage);
    Return comment.Replace(Environment.NewLine, Environment.NewLine + prefix)
    return comment.Replace(Environment.NewLine, Environment.NewLine + prefix);
    Return csdlNamespaceName
    return csdlNamespaceName;
    return entity.BaseType == null ? "EntityObject" : MultiSchemaEscape((StructuralType)entity.BaseType, code);
    return entity.BaseType == null ? "EntityObject" : MultiSchemaEscape(entity.BaseType, code);
    Return False
    return false;
    Return If(entity.BaseType Is Nothing, "EntityObject", MultiSchemaEscape(DirectCast(entity.BaseType, StructuralType), code))
    Return If(entity.BaseType Is Nothing, "EntityObject", MultiSchemaEscape(entity.BaseType, code))
    Return list
    return list;
    return namespaceName;
    Return NewModifier(baseType, edmFunction.Name)
    return NewModifier(baseType, edmFunction.Name);
    Return NewModifier(baseType, edmProperty.Name)
    Return NewModifier(baseType, entitySet.Name)
    Return NewModifier(baseType, navigationProperty.Name)
    return NewModifier(baseType, navigationProperty.Name);
    return NewModifier(baseType, property.Name);
    return NewModifier(baseType, set.Name);
    Return Not methodBase.IsPrivate AndAlso Not methodBase.IsAssembly
    return ResourceManager.GetString(resourceName,
    Return String.Empty
    return string.Empty;
    return String.Empty;
    return string.Empty;
    return String.Empty;
    return string.Empty;
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name)
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name);
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name)
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name);
    Return structural.Members.Where(Function(m) m.DeclaringType Is structural)
    Return text.Replace("'", "&apos;").Replace("""", "&quot;")
    return text.Replace("\'","&apos;").Replace("\"","&quot;");
    Return True
    return true;
    return type.GetMembers(bindingFlags).Where(m => IsVisibleMember(m)).Any(m => m.Name == memberName);
    Return type.GetMembers(bindings).Where(Function(m) IsVisibleMember(m)).Any(Function(m) m.Name.Equals(memberName, StringComparison.OrdinalIgnoreCase))
'    Runtime Version: 11.0.0.0
    set { _edmToObjectNamespaceMap = value; }
    Shared Private _resourceManager As System.Resources.ResourceManager
    SourceCsdlPath = Path.GetFullPath(SourceCsdlPath);
    static System.Resources.ResourceManager _resourceManager;
    string clrType = code.Escape(type.UnderlyingType.ClrEquivalentType, fullyQualifySystemTypes: false);
    string id = Guid.NewGuid().ToString();
    string list = string.Empty;
    string namePart = property.Name + "Initialized";
    string namespaceName = code.VsNamespaceSuggestion();
    string objectNamespace;
    string rawGetterAccessibility = Accessibility.ForReadOnlyProperty(member);
    string rawSetterAccessibility = Accessibility.ForWriteOnlyProperty(member);
    string ResolveParameterValue(string id, string name, string otherName);
    string ResolvePath(string path);
    string setAccess = Accessibility.ForReadOnlyProperty(set);
    string TemplateFile { get; }
    string typeAccess = Accessibility.ForType(set.ElementType);
    StructuralType structural = usage.EdmType as StructuralType;
    System.Text.StringBuilder builder = new System.Text.StringBuilder();
    TemplateMetadata(MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION) = "4.0"
    TemplateMetadata(MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION) = "5.0"
    TemplateMetadata(MetadataConstants.TT_TEMPLATE_NAME) = "VBCodeGen"
    TemplateMetadata(MetadataConstants.TT_TEMPLATE_VERSION) = "4.0"
    TemplateMetadata(MetadataConstants.TT_TEMPLATE_VERSION) = "5.0"
    TemplateMetadata[MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION] = "4.0";
    TemplateMetadata[MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION] = "5.0";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_NAME] = "CSharpCodeGen";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "4.0";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "5.0";
    text = text.Replace("&", "&amp;")
    text = text.Replace("&","&amp;");
    text = text.Replace("\r", "&#xD;").Replace("\n","&#xA;");
    text = text.Replace("<", "&lt;").Replace(">", "&gt;")
    text = text.Replace("<","&lt;").Replace(">","&gt;");
    text = text.Replace(Environment.NewLine, id)
    text = text.Replace(Environment.NewLine, id);
    text = text.Replace(id, Environment.NewLine)
    text = text.Replace(id, Environment.NewLine);
    text = text.Replace(vbCr, "&#xD;").Replace(vbLf, "&#xA;")
'    the code is regenerated.
'    This code was generated by a tool.
    Type baseType = typeof(EntityObject);
    Type baseType = typeof(ObjectContext);
    Type baseType;
    using Microsoft.CSharp;
    using System.CodeDom.Compiler;
    using System.CodeDom;
    using System.Collections.Generic;
    using System.Data.Entity.Design;
    using System.Data.Mapping;
    using System.Data.Metadata.Edm;
    using System.Data.Objects.DataClasses;
    using System.Data.Objects;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Xml.Linq;
    using System.Xml;
    using System;
    VerifyCaseInsensitiveTypeUniqueness()
    VerifyCaseInsensitiveUniqueness(entitySets, Function(e) e.Name, _
    VerifyCaseInsensitiveUniqueness(GetSourceSchemaTypes(Of GlobalItem)().Where(Function(i) TypeOf i is StructuralType OrElse TypeOf i is EntityContainer), _
    VerifyCaseInsensitiveUniqueness(members, Function(m) m.Name, _
    VerifyTypeUniqueness();
 .NET Framework
''' </summary>
''' <summary>
''' accessible for code generation.
''' actually produces something.
 AND 
''' and the parameters that need to be sent to the Execute method.
''' and there is no common known type that can be
''' annotations in the EntityFramework Metadata to a form that is useful in code generation.
''' by type. This is necessary when the
 class 
' Copyright (c) Microsoft Corporation.  All rights reserved.
''' correctly formated and functional
''' directive is set to true.
 e!|!
''' Host property is not available on the TextTemplating type. The Host
 i'd5
''' interface type so that the code can be run in preprocessed mode
 LIKE @
''' members. It accesses member by name and signature rather than
 Microsoft Corporation.  All rights reserved.
 Microsoft Operations Puerto Rico1
''' on a .net framework only installed machine.
''' passed instead
''' property only exists when the hostspecific attribute of the template
''' rather than type dependent wrapper. We don't use the
''' Reponsible for abstracting the use of Host between times
''' Reponsible for implementing the IDynamicHost as a dynamic
''' Reponsible for implementing the IDynamicHost when the
''' Responsible creating an instance that can be passed
''' Responsible for collecting together the actual method parameters
''' Responsible for creating source code regions in code when the loop inside
''' Responsible for encapsulating the constants defined in Metadata
''' Responsible for encapsulating the retrieval and translation of the CodeGeneration
''' Responsible for helping to create source code that is
''' Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
''' Responsible for making the Entity Framework Metadata more
''' Responsible for marking the various sections of the generation,
''' shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
''' so they can be split up into separate files
''' template is being used in Preprocessed mode
''' to helper classes that need to access the TextTransformation
''' when it is available and not
!."U"j"
!This program cannot be run in DOS mode.
"Initial value of the {0} property.
"Microsoft Time Source Master Clock0
###H#^#
#Blob
#Else
#else
#Else
#else
#End If
#endif
#GUID
#I$e$k$
#if !PREPROCESSED_TEMPLATE
#If NOT PREPROCESSED_TEMPLATE
#if PREPROCESSED_TEMPLATE
#If PREPROCESSED_TEMPLATE Then
#Strings
$"H+$-$;$
$,FKB
$.6+A
$`2X`F
$7$@$O$
$f:\dd\tools\devdiv\EcmaPublicKey.snk
$Microsoft Root Certificate Authority
$Microsoft Root Certificate Authority0
$No Metadata Documentation available.
$There are no comments in the schema.
%/.U6
%K%Z%a%o%
%T,T<
%The EDM Schema argument is not valid.
&*.r{
&*':'V'r'
&|A|R|e|nCv9
&a&j&
&amp;
&apos;
&H&s&
&HCHKGYH[HbIk
&quot;
&QZU1W
(]W%#
(+(=(Q(
(api&
)&*>*N*d*j*
).*D*Z*p*z*
);)A)R)f)s)
)`'v4$
)Microsoft Root Certificate Authority 20100
)Microsoft Root Certificate Authority 20110
*.r5+
*.rc&
*.rE)
*.rG*
*.ro'
*.rQ%
*.rW(
*.ry*
*.ry+
*?*kXIc
*fr;!
*fr+$
*fr3"
*fr3,
*frQ 
*fry"
*I+u+
*Vr3'
*vrI#
*Vri,
,:Sv&<l
,There are no comments for {0} in the schema.
.cctor
.csdl
.ctor
.edmx
.ssdl
.text
.tq[m
//------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
//     Changes to this file may cause incorrect behavior and will be lost if
//     Runtime Version: 11.0.0.0
//     the code is regenerated.
//     This code was generated by a tool.
// </auto-generated>
// <auto-generated>
// Copyright (c) Microsoft Corporation.  All rights reserved.
/// </summary>
/// <summary>
/// accessible for code generation.
/// actually produces something.
/// and the parameters that need to be sent to the Execute method.
/// and there is no common known type that can be
/// annotations in the EntityFramework Metadata to a form that is useful in code generation.
/// by type.  This is necessary when the
/// correctly formated and functional
/// directive is set to true.
/// Host property is not available on the TextTemplating type. The Host
/// interface type so that the code can be run in preprocessed mode
/// members.  It accesses member by name and signature rather than
/// on a .net framework only installed machine.
/// passed instead
/// property only exists when the hostspecific attribute of the template
/// rather than type dependent wrapper.  We don't use the
/// Reponsible for abstracting the use of Host between times
/// Reponsible for implementing the IDynamicHost as a dynamic
/// Reponsible for implementing the IDynamicHost when the
/// Responsible creating an instance that can be passed
/// Responsible for collecting together the actual method parameters
/// Responsible for creating source code regions in code when the loop inside
/// Responsible for encapsulating the constants defined in Metadata
/// Responsible for encapsulating the retrieval and translation of the CodeGeneration
/// Responsible for helping to create source code that is
/// Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
/// Responsible for making the Entity Framework Metadata more
/// Responsible for marking the various sections of the generation,
/// shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
/// so they can be split up into separate files
/// template is being used in Preprocessed mode
/// to helper classes that need to access the TextTransformation
/// when it is available and not
////////
//////// 
/=aJcY
/d:PREPROCESSED_TEMPLATE
/edmx:Edmx/edmx:Designer/edmx:Connection/edmx:DesignerInfoPropertySet/edmx:DesignerProperty
/edmx:Edmx/edmx:Runtime/edmx:ConceptualModels/edm:Schema
/edmx:Edmx/edmx:Runtime/edmx:Mappings/map:Mapping
/edmx:Edmx/edmx:Runtime/edmx:StorageModels/ssdl:Schema
:c=VV
:System.Data.Entity.Design.dl
:The custom attribute supplied for type '{0}' is not valid.
;The additional member supplied for type '{0}' is not valid.
?http://crl.microsoft.com/pki/crl/products/microsoftrootcert.crl0T
?Parameter '{0}' is not valid. String arguments cannot be empty.
?TGR_Tb
@.reloc
@002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3
@System.Data.EntityModel.ClientApiGenerator+<GetSourceTypes>d__33
[^a-zA-Z\s]
[4DT*RE
[assembly: EdmSchemaAttribute()]
[B=VV
\&`@f
]^v*X
]System.Data.Entity.Design.EntityStoreSchemaGenerator+LoadMethodSessionState+<get_Errors>d__20
^(?<LeadingBlanks>\s{1,})\S
^Foreign keys may only be generated when targeting version 4.0 of the .NET Framework or higher.
^The type contains views for EntitySets and AssociationSets that were generated at design time.
_*_8_J
__StaticArrayInitTypeSize=6
_additionalAttributes
_additionalGetStatements
_additionalInterfaces
_additionalMembers
_additionalSetStatements
_assimilatedClassicalInflectionDictionary
_assimilatedClassicalInflectionPluralizationService
_attributeEmitter
_backingFieldName
_baseType
_byteArray
_catalog
_class
_classFixUps
_classicalInflectionDictionary
_classicalInflectionPluralizationService
_codeNamespace
_columnCatalog
_columnDataType
_columnDateTimePrecision
_columnFieldColumn
_columnFieldOrdinal
_columnFKCatalog
_columnFKColumn
_columnFKSchema
_columnFKTable
_columnIsIdentity
_columnIsNullable
_columnIsPrimaryKey
_columnIsServerGenerated
_columnMaximumLength
_columnOrdinal
_columnPKCatalog
_columnPKColumn
_columnPKSchema
_columnPKTable
_columnPrecision
_columnRelationshipId
_columnRelationshipIsCascadeDelete
_columnRelationshipName
_columnScale
_columnSchema
_columnTable
_command
_compileUnit
_complexPropertyInitializedFieldRef
_complexPropertyInitializedSuffix
_connection
_CorDllMain
_CSClassKeyWord
_CSEndOfClassDelimiters
_CSFieldMarkers
_CSFixMethods
_csharpCodeGeneratorTypeV2
_csharpCodeGeneratorTypeV3
_currentRow
_dateTime
_dateTimeOffset
_declaringTypeUsesStandardBaseType
_edmItemCollection
_edmToObjectNamespaceMap
_edmxFileExtension
_effect
_entityContainer
_entityLookup
_errors
_errorsLookup
_fieldRef
_fixUps
_forTypeMemoizer
_fromStringGenericMemoizer
_fromStringMemoizer
_GeneratedCodeAttribute
_generator
_guid
_hasAnnotationNamespace
_identifierToAdjustedIdentifier
_Initialize_
_instance
_invalidTypes
_irregularPluralsDictionary
_irregularPluralsPluralizationService
_irregularVerbList
_irregularVerbPluralizationService
_isLanguageCaseSensitive
_isModel
_item
_knownConflictingPluralList
_knownIdentifiers
_knownPluralWords
_knownSingluarWords
_language
_loader
_lookups
_mappingLookups
_method
_missingEntities
_modelAssociationSet
_modelContainer
_modelEntityContainer
_modelEntityContainerName
_name
_namespaceName
_nonNullable
_nullable
_nullableForTypeMemoizer
_nullExpression
_objectContext
_objectType
_onContextCreatedString
_oSuffixDictionary
_oSuffixPluralizationService
_ownTextWriter
_pluralizationServiceHandler
_privateMemberPrefixes
_pronounList
_property
_propertySource
_provider
_providerInvariantName
_providerManifestToken
_reader
_referenceCsdlPaths
_Result
_returnType
_reverseEntityLookup
_schema
_schemaVersion
_sourceCsdlPath
_sourceSchema
_storeAssociationSets
_storeContainer
_storeEntityContainer
_storeEntitySet
_storeFunctions
_storeItemCollection
_storeNamespace
_storeSchemaModelVersion
_string
_tableRelationshipDetails
_tablesWithoutKeys
_tableTableDetails
_targetEntityFrameworkVersion
_targetFilePath
_The specified store provider '{0}' cannot be found in the configuration, or '{0}' is not valid.
_thisRef
_timeSpan
_transform
_transformText
_tvfReturnTypeLookup
_typeReference
_typeReservedNames
_types
_typeSource
_uninflectiveSuffixList
_uninflectiveWordList
_userDictionary
_usingStandardBaseClass
_values
_vbCodeGeneratorTypeV2
_vbCodeGeneratorTypeV3
_VBEndOfClassDelimiters
_VBFixMethods
_VBNonDeclMarkers
_wordsEndingWithInxAnxYnxDictionary
_wordsEndingWithInxAnxYnxPluralizationService
_wordsEndingWithSeDictionary
_wordsEndingWithSePluralizationService
_wordsEndingWithSisDictionary
_wordsEndingWithSisPluralizationService
_wordsEndingWithSusDictionary
_wordsEndingWithSusPluralizationService
_writer
_xmlNamespace
`.rsrc
`Ge`@N
{0}({1})
{B=VV
{The function import '{0}' is not mapped to a store function. A function import needs to be mapped for successful execution.
|,|5|P|_9aC
|D)U1
|hK,_
}f%T`~
~The entity set '{0}' differs only in case from an existing entity set, and is not compatible with the current language option.
+   This code was generated from a template.
+ 3 e 
<.cctor>b__12_0
<.cctor>b__12_1
<.cctor>b__12_2
<.cctor>b__12_3
<.ctor>b__0_0
<.ctor>b__18_0
<.ctor>b__5_0
</{0}>
'</auto-generated>
</KeyProperties>
</Summary>
<{0}>
<>1__state
<>2__current
<>3__largeViewString
<>3__viewStrings
<>4__this
<>7__wrap1
<>7__wrap2
<>9__0
<>9__0_0
<>9__1_0
<>9__11_0
<>9__12_0
<>9__12_1
<>9__12_2
<>9__12_3
<>9__13_0
<>9__13_1
<>9__13_2
<>9__13_3
<>9__14_0
<>9__14_1
<>9__14_2
<>9__14_3
<>9__15_0
<>9__15_1
<>9__15_2
<>9__15_3
<>9__16_0
<>9__18_0
<>9__22_0
<>9__29_0
<>9__29_1
<>9__29_11
<>9__29_12
<>9__29_13
<>9__29_2
<>9__29_3
<>9__29_4
<>9__29_5
<>9__29_6
<>9__29_7
<>9__29_8
<>9__29_9
<>9__31_0
<>9__31_1
<>9__31_10
<>9__31_11
<>9__31_13
<>9__31_14
<>9__31_2
<>9__31_3
<>9__31_4
<>9__31_5
<>9__31_6
<>9__31_7
<>9__31_8
<>9__31_9
<>9__37_0
<>9__38_0
<>9__38_1
<>9__38_3
<>9__38_4
<>9__39_0
<>9__39_1
<>9__39_2
<>9__39_3
<>9__39_4
<>9__4_0
<>9__4_1
<>9__41_0
<>9__5_0
<>9__53_0
<>9__53_1
<>9__55_0
<>9__55_1
<>9__6_0
<>9__7_0
<>9__9_0
<>c__DisplayClass0_0
<>c__DisplayClass11_0
<>c__DisplayClass15_0
<>c__DisplayClass16_0
<>c__DisplayClass20_0
<>c__DisplayClass31_0
<>c__DisplayClass38_0
<>c__DisplayClass51_0
<>c__DisplayClass51_1
<>c__DisplayClass9_0
<>l__initialThreadId
<>m__Finally1
<>m__Finally2
'<auto-generated>
<CreateAssociationType>b__39_0
<CreateAssociationType>b__39_1
<CreateAssociationType>b__39_2
<CreateAssociationType>b__39_3
<CreateAssociationType>b__39_4
<CreateCodeGeneratorType>b__41_0
<CreateEdmItemCollection>b__1_0
<CreateEdmProperties>b__53_0
<CreateEdmProperties>b__53_1
<CreateEndMultiplicityOverride>b__55_0
<CreateEndMultiplicityOverride>b__55_1
<CreateEntityType>b__0
<CreateEntityType>b__1
<CreateFunctionImportStructuralTypeReaderMethod>b__13_0
<CreateStorageMappingItemCollection>b__6_0
<CreateStoreSchemaConnection>b__4_0
<CreateStoreSchemaConnection>b__4_1
<Culture>k__BackingField
<DoesWordContainSuffix>b__0
<EmitFactoryMethod>b__7_0
<FirstToSecondDictionary>k__BackingField
<GenerateCode>b__11_0
<GenerateCode>b__13_0
<GenerateCode>b__15_0
<GenerateCode>b__9_0
<GenerateCodeFor1_1Schema>b__22_0
<GenerateForeignKeyProperties>k__BackingField
<GenerateViews>b__0
<get_Errors>d__20
<GetDirectSubTypes>b__0
<GetSchemaElement>b__0
<GetSourceTypes>d__33
<GetViewStringsAppendToStringBuilder>d__29
<HandleValidationErrors>b__16_0
<http://www.microsoft.com/pki/certs/MicrosoftTimeStampPCA.crt0
<i>5__1
<InternalGenerateCode>b__0
<InternalPluralize>b__29_0
<InternalPluralize>b__29_1
<InternalPluralize>b__29_10
<InternalPluralize>b__29_11
<InternalPluralize>b__29_12
<InternalPluralize>b__29_13
<InternalPluralize>b__29_2
<InternalPluralize>b__29_3
<InternalPluralize>b__29_4
<InternalPluralize>b__29_5
<InternalPluralize>b__29_6
<InternalPluralize>b__29_7
<InternalPluralize>b__29_8
<InternalPluralize>b__29_9
<InternalSingularize>b__12
<InternalSingularize>b__31_0
<InternalSingularize>b__31_1
<InternalSingularize>b__31_10
<InternalSingularize>b__31_11
<InternalSingularize>b__31_13
<InternalSingularize>b__31_14
<InternalSingularize>b__31_2
<InternalSingularize>b__31_3
<InternalSingularize>b__31_4
<InternalSingularize>b__31_5
<InternalSingularize>b__31_6
<InternalSingularize>b__31_7
<InternalSingularize>b__31_8
<InternalSingularize>b__31_9
<IsAtLeastOneColumnFKInBothAssociations>b__0
<KeyProperties>
<LoadFunctionReturnTableDetails>b__14_0
<LoadFunctionReturnTableDetails>b__14_1
<LoadFunctionReturnTableDetails>b__14_2
<LoadFunctionReturnTableDetails>b__14_3
<LoadRelationships>b__15_0
<LoadRelationships>b__15_1
<LoadRelationships>b__15_2
<LoadRelationships>b__15_3
<LoadTableDetails>b__13_0
<LoadTableDetails>b__13_1
<LoadTableDetails>b__13_2
<LoadTableDetails>b__13_3
<LoadViewDetails>b__12_0
<LoadViewDetails>b__12_1
<LoadViewDetails>b__12_2
<LoadViewDetails>b__12_3
<MapFunctions>b__2
<MapFunctions>b__38_0
<MapFunctions>b__38_1
<MapFunctions>b__38_3
<MapFunctions>b__38_4
<Module>
<param name="{0}">{1}</param>
<PrivateImplementationDetails>
<SecondToFirstDictionary>k__BackingField
<Service>k__BackingField
<SplitViewStrings>d__28
<Summary>
<WriteEntityContainerElement>b__37_0
<WriteExtendedPropertyAttributes>b__41_0
>9xLu
>http://www.microsoft.com/pki/certs/MicCodSigPCA_08-31-2010.crt0
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
>se`Q
>sr`T
>The additional interface supplied for type '{0}' is not valid.
>The custom attribute supplied for property '{0}' is not valid.
>The namespace '{0}' is a system namespace, and cannot be used.
000004b0
070403125309Z
0O)/;GY
0pHp`
0The method returns the view for the index given.
1(0&0
1,0*0
100701213655Z
100831221932Z
110708205909Z
160907175649Z
160907175854Z
180712200848Z
180712201119Z
180807090616Z0#
180907175649Z0
180907175854Z0
190726200848Z0t1
190726201119Z0t1
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
1Jv1=+r
200831222932Z0y1
20180807073521Z
20180807090619.714Z0
20180808073521Z0t0:
210403130309Z0w1
229803+4379500
230012+4379650
250701214655Z0|1
260708210909Z0~1
3http://www.microsoft.com/pkiops/docs/primarycps.htm0@
4.0.0.0
4.7.3190.0
46 _u
46._w
46'_v
46<_y
465_x
46D_{
46K_|
4Catalog={Catalog}, Schema={Schema}, Name={TableName}
4The value for column '{0}' in table '{1}' is DBNull.
4The value in the parameter {0} at index {1} is null.
5There are no comments for property {0} in the schema.
6}!`}
6+0@YHF
7|@4BHP4R
7The parameter must specify a single file, not multiple.
8http://www.microsoft.com/pki/certs/MicrosoftRootCert.crt0
8The GlobalItem of type '{0}' is not a serializable type.
8There are no comments for ComplexType {0} in the schema.
9!=VV
9!0f6
90EEE9F1BE125B634A197AA7BD83E6811BE8B6F3
9The EntityContainer '{0}' is not a store EntityContainer.
A null was returned after calling the '{0}' method on a store provider instance of type '{1}'. The store provider might not be functioning correctly.
A14p,C
a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d
AB>`u
abscissa
abscissae
Abstract
accessibility
AccessibilityFromGettersAndSetters
AccessViolationException
AccessViolationType
accumulated
action
Action
Action`5
Activator
actualVersion
add_OnPropertyGenerated
add_OnTypeGenerated
AddArtifactReference
AddAssociationSetEnd
AddAttributeArguments
AddBrowsableAttribute
AddCodeCompileUnit
AddComparison
AddDataMemberAttribute
AddEdmSchemaResourceMapEntries
AddElementNameToCache
addenda
addendum
AddEntity
AddEntitySetBase
AddError
AddErrorsForType
AddExtension
AddFile
AddFilterEntry
AddFunctionImport
AddGetterSetterFixUp
addGlobalQualifier
AddIfNotPresent
AddIgnoreAttributes
AddInterfaces
AddInternal
additionalEdmSchema
additionalEdmSchemaFilePaths
additionalEdmSchemas
AddMappingSchemaResourceMapEntries
AddMember
AddMembers
AddMetadataProperties
AddNamedAttributeArguments
AddNamespace
AddObject
AddRange
AddReferentialConstraint
AddStoreGeneratedPatternAnnoation
AddStoreSchemaResourceMapEntries
AddTableWithoutKey
AddTo
AddTo Methods
AddToPropertyNames
AddTvfReturnType
AddValue
AddWord
adjustedIdentifier
AdjustIdentifier
AdoAttributeDataClassesNamespace
AdoEntityClientNamespace
AdoEntityClientType
AdoFrameworkDataClassesNamespace
AdoFrameworkDataClassesType
AdoFrameworkGenericClass
AdoFrameworkGenericDataClass
AdoFrameworkMetadataEdmNamespace
AdoFrameworkMetadataEdmType
AdoFrameworkNamespace
AdoFrameworkType
afreet
afreeti
afrit
afriti
agenda
agendum
Aggregate
aircraft
albino
albinos
algae
alias
Alias
alias
aliases
Allow
AllowPartiallyTrustedCallersAttribute
almshouse
almshouses
alumna
alumnae
alumni
alumnus
alves
amniocenteses
amniocentesis
amoeba
amoebae
An EntityContainer with the name '{0}' already exists in the EdmItemCollection containing the EntityContainer '{1}'. Please choose a different model EntityContainer name.
analyses
analysis
anastomoses
anastomosis
anathema
anathemata
AncestorClassDefinesName
annotation
AnnotationPrefix
another
antenna
antennae
antitheses
antithesis
anybody
anyone
anything
aphelia
aphelion
apices
apocalypse
apocalypses
apoptoses
apoptosis
apotheoses
apotheosis
apparatus
Append
AppendChild
AppendLine
AppendStringToStringBuilder
appendToFrontIfFirstCharIsInvalid
Application
applyToSpecificType
ApplyUserSettings(userSettings)
ApplyUserSettings(userSettings);
aquaria
aquarium
archipelago
archipelagos
AreAllEntityColumnsMappedAsToColumns
AreAllFkKeyColumnsNullable
AreAnyFkKeyColumnsNullable
AreRelationshipColumnsTheTypesEntireKey
AreTypeAndSetAccessCompatible
argument
ArgumentException
ArgumentNullException
ArgumentOutOfRange
ArgumentOutOfRangeException
arguments
armadillo
armadillos
arves
AsDictionary
AsEnumerable
asparagus
AsReadOnly
Assembly Version
assemblyBuilder
AssemblyBuilder
AssemblyCompanyAttribute
AssemblyCopyrightAttribute
AssemblyDefaultAliasAttribute
AssemblyDelaySignAttribute
AssemblyDescriptionAttribute
AssemblyFileVersionAttribute
AssemblyInformationalVersionAttribute
AssemblyKeyFileAttribute
AssemblyName
AssemblyProductAttribute
AssemblySignatureKeyAttribute
AssemblyTitleAttribute
AssignBaseType
Association
association
AssociationMissingKeyColumn
AssociationSet
associationSet
associationSetEnd
AssociationSetMapping
associationType
AssociationTypeEmitter
AsyncCallback
asyndeta
asyndeton
atheroscleroses
atherosclerosis
Attach
attribute
attributeName
AttributeTargets
attributeType
AttributeUsageAttribute
aurora
aurorae
automata
automaton
bacteria
bacterium
bases
BaseType
BaseTypeName
BaseValue
basis
bassi
basso
BeginClass
BeginInvoke
BeginMethod
BeginProperty
BeginPropertyGetter
BeginPropertySetter
bemata
Bhttp://www.microsoft.com/pki/certs/MicRooCerAut2011_2011_03_22.crt0
BidirectionalDictionary`2
BindAs
Binder
BindingFlags
bison
blouse
blouses
boathouse
boathouses
bonus
bonuses
bool IncludePropertyInFactoryMethod(StructuralType factoryType, EdmProperty edmProperty)
Boolean
bream
breeches
briefcase
briefcases
britches
broccoli
brother
brothers
bruise
bruises
BThe {0} value '{1}' already exists in the user-defined dictionary.
builder
BuildManager
BuildProviderAppliesTo
BuildProviderAppliesToAttribute
BuildProviderResultFlags
BuildProviderUtils
BuiltIn
buses
c!e"g$m&r's)w,|0}1~2
CA|m>
cabbage
cache
callback
calorie
calories
CamelCase
candelabra
candelabrum
CandidateCollapsedAssociations
CannotChangePropertyReturnType
CannotChangePropertyReturnTypeToNull
CannotCreateEntityWithNoPrimaryKeyDefined
CannotCreateEntityWithoutPrimaryKey
canti
canto
cantus
capacity
Capitalize
Capture
carcinoma
carcinomata
cases
caseSensitive
casino
casinos
CatalogName
catchphrase
catchphrases
category
cattle
CdmEntityContainer
cellulose
celluloses
census
censuses
change
Changed
changes
Changing
chaos
charisma
charismata
chassis
CheckArgumentNull
CheckForCompatibleSchemaAndTarget
checkForSpecial
CheckIfAllErrorsAreWarnings
CheckLanguageOptionArgument
CheckStringArgument
CheckTargetEntityFrameworkVersionArgument
CheckValidItemCollection
CheckValidSchema
cherub
cherubim
child
children
chili
chilies
Chttp://crl.microsoft.com/pki/crl/products/MicrosoftTimeStampPCA.crl0X
Chttp://www.microsoft.com/pkiops/crl/MicCodSigPCA2011_2011-07-08.crl0a
cirrhoses
cirrhosis
Class
class
class FactoryMethodParameter
class UserSettings
className
Clear
clearinghouse
clearinghouses
ClientApiGenerator
ClientAutoGenerated
ClientAutoGenNotAllowed
clippers
clitorides
clitoris
clockwise
clockwises
Clone
Close
closeReaders
cloth
clothes
CLSCompliantAttribute
clubhouse
clubhouses
CodeArgumentReferenceExpression
CodeArrayCreateExpression
CodeAssignStatement
CodeAttributeArgument
CodeAttributeArgumentCollection
CodeAttributeDeclaration
CodeAttributeDeclarationCollection
CodeBaseReferenceExpression
CodeBinaryOperatorExpression
CodeBinaryOperatorType
CodeCastExpression
CodeCommentStatement
CodeCommentStatementCollection
CodeConditionStatement
CodeConstructor
CodeDirectionExpression
CodeExpressionCollection
CodeExpressionStatement
CodeFieldReferenceExpression
CodeGenAdditionalEdmSchemaIsInvalid
CodeGenerationTools code = new CodeGenerationTools(this){FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, CamelCaseFields = userSettings.CamelCaseFields};
CodeGenerationValueAccessibilityInternal
CodeGenerationValueAccessibilityPrivate
CodeGenerationValueAccessibilityProtected
CodeGenerationValueAccessibilityPublic
CodeGeneratorOptions
CodeGenNamespaceCannotBeDetermined
CodeGenSourceFilePathIsInvalid
CodeGenSourceFilePathIsNotAFile
CodeMemberField
CodeMemberMethod
CodeMemberProperty
CodeMethodReferenceExpression
CodeMethodReturnStatement
CodeNamespace
CodeNamespaceCollection
CodeObjectCreateExpression
CodeParameterDeclarationExpression
CodeParameterDeclarationExpressionCollection
CodePrimitiveExpression
CodePropertyReferenceExpression
CodePropertySetValueReferenceExpression
CodeRegion region = new CodeRegion(this);
CodeSnippetCompileUnit
CodeStatement
CodeStatementCollection
CodeThisReferenceExpression
CodeThrowExceptionStatement
CodeTypeDeclaration
CodeTypeDeclarationCollection
CodeTypeMember
CodeTypeMemberCollection
CodeTypeOfExpression
CodeTypeReference
CodeTypeReferenceCollection
CodeTypeReferenceExpression
CodeTypeReferenceOptions
CodeVariableDeclarationStatement
CodeVariableReferenceExpression
codex
codices
coitus
collapsedAssociationSet
CollapsedEntityAssociationSet
CollapsedEntityAssociationSets
Collation
CollectAllFkProperties
collection
Collection(
Collection({0})
CollectionKind
collectionKind
CollectionType
ColumnFacetValueOutOfRange
columnName
ColumnName
columns
Combine
CombineErrorMessage
CommandBehavior
commando
commandos
CommandText
comment
commentCollection
commentedOutItems
CommentEmitter
commentLines
Comments
commonsense
commonsenses
CompanyName
CompareExchange
CompareTo
comparison
compendia
compendium
CompilationRelaxationsAttribute
CompileAssemblyFromSource
CompilerError
CompilerErrorCollection
CompilerGeneratedAttribute
CompilerParameters
compilerProvider
CompilerResults
Complex Properties
ComplexObject
ComplexPropertyInitializedNameFromPropName
complexType
ComplexType
ComplexTypeBaseClassType
ComplexTypeEmitter
ComplexTypeMapping
ComplexTypes
Component
compromise
compromises
ComputeForType
ComputeFromString
ComputeFromStringGeneric
ComputeHash
ComputeNullableForType
ComVisibleAttribute
Concat
ConceptualSchemaDefinitionVersion3
conceptualSchemaNode
concourse
concourses
ConcurrencyMode
Condition
connection
connectionString
consensus
consensuses
consortia
consortium
const string XMLCOMMENT_START = "///";
Const XMLCOMMENT_START As String = "'''"
constraint
constraint0
constraint1
ConstructorComments
Constructors
Container
container
Container
CONTAINER_SUFFIX
Contains
ContainsKey
ContainsTableWithoutKey
Content
Context
context
Contexts
contralti
contralto
contretemps
Convert
ConvertDBNull
Converter
ConvertToEdmSchemaError
ConvertToVersion
CopyFile
corpora
corps
corpus
cortex
cortices
cotton
Could not find file '{0}'.
courthouse
courthouses
crania
cranium
Create
Create a new {0} object.
CreateAndAddGetViewAtMethod
CreateAssociationEnd
CreateAssociationEndMember
CreateAssociationSet
CreateAssociationType
CreateAssociationTypes
CreateCodeGeneratorType
CreateCommand
CreateCommandDefinition
CreateComparer
CreateConnection
CreateConstructorForViewStoringType
CreateConstructors
CreateContextPartialMethods
CreateCSharpCodeGeneratorV2
CreateCSharpCodeGeneratorV3
CreateDbObjectKey
CreateEdmFunction
CreateEdmFunctions
CreateEdmItemCollection
CreateEdmProperties
CreateEdmStructuralObjectRef
CreateElementEmitter
CreateEmbeddedResource
CreateEmitter
CreateEndMultiplicityOverride
CreateEntitySet
CreateEntitySetAddObjectProperty
CreateEntitySetField
CreateEntitySetProperty
CreateEntityType
CreateErrorForException
CreateFilteredCommand
CreateFullName
CreateFunctionArgument
CreateFunctionImportParameter
CreateFunctionImportStructuralTypeReaderMethod
CreateFunctionParameter
CreateInstance
CreateMemento
CreateMetadataHashAlgorithm
CreateMetadataPropertyFromOtherNamespaceXmlArtifact
CreateMetadataWorkspace
CreateModelAssociationSet
CreateModelAssociationSetEnd
CreateModelAssociationType
CreateModelComplexTypeForTvfResult
CreateModelEntitySet
CreateModelEntityType
CreateModelName
CreateModelNavigationProperties
CreateModelNavigationProperty
CreateModelProperty
CreateQuery
CreateReader
CreateReferentialConstraint
CreateService
CreateSizedStringBuilder
CreateSourceEdmSchemaNotValidError
CreateStorageMappingItemCollection
CreateStoreItemCollection
CreateStoreSchemaConnection
CreateStringTypeUsage
CreateTableEntityTypes
CreateTableTypes
CreateTvfReturnRowType
CreateTvfReturnRowTypes
createType
CreateTypeForStoringViews
CreateValidEcmaName
CreateValidNamespaceName
CreateValildModelNamespaceName
CreateVBCodeGeneratorV2
CreateVBCodeGeneratorV3
CreateViewEntityTypes
CreateViewReturnMethod
crescendi
crescendo
crises
crisis
criteria
criterion
csdlNamespaceName
CSharpCodeProvider
CSharpTemplateCodeGenResourceV2
CSharpTemplateCodeGenResourceV3
CSharpTemplateCodeGenTypeName
CSharpTemplateCodeGenV3TypeName
CSMarkClassAsStatic
CSMarkMethodAsPartial
CSMarkOverrideMethodAsSealed
CSMarkPropertyGetAsInternal
CSMarkPropertyGetAsPrivate
CSMarkPropertyGetAsProtected
CSMarkPropertyGetAsPublic
CSMarkPropertySetAsInternal
CSMarkPropertySetAsPrivate
CSMarkPropertySetAsProtected
CSMarkPropertySetAsPublic
cSpaceProperty
CThe provider returned schema mapping information that is not valid.
CtorSummaryComment
culture
CultureInfo
Currently Running Template
curricula
curriculum
curse
curses
customise
customises
cXh^!yV
D=xz#
DATA_TYPE
DataColumn
DataColumnCollection
DataRow
DataRowBuilder
DataRowCollection
DataRowExtensions
dataSpace
DataTableExtensions
DataType
dataType
DateTimeKind
DateTimePrecision
DATETIMEPRECISION
datum
DbCommand
DbCommandDefinition
DbCommandTree
DbConnection
DbDataReader
DbExpression
DbExpressionBinding
DbExpressionBuilder
DbNewInstanceExpression
DbObjectType
dbObjectType
DbParameter
DbParameterCollection
dbpi&
DbProjectExpression
DbPropertyExpression
DbProviderFactories
DbProviderFactory
DbProviderManifest
DbProviderServices
DbProviderServices://{0}/{1}
DbProviderServicesInformationLocationPath
DbQueryCommandTree
DbScanExpression
DbType
DbVariableReferenceExpression
debris
DebuggableAttribute
DebuggerDisplayAttribute
DebuggerHiddenAttribute
DebuggerNonUserCodeAttribute
DebuggerStepThroughAttribute
DebuggingModes
DEFAULT_NAMESPACE_NAME
DefaultDllImportSearchPathsAttribute
defaultErrorCode
DefaultMemberAttribute
DefaultTargetVersionTooLow
DefaultValue
DefineMetadata()
DefineMetadata();
DefiningQuery
definingSet
deleteAction
deleteBehavior
deleteBehaviorOverride
demise
demises
Dependent
Deprecated Method for adding a new object to the {0} EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
Deprecated Method for adding a new object to the {0} EntitySet. Consider using the .Add method of the associated ObjectSet(Of T) property instead.
description
desiderata
desideratum
DesignerSerializationVisibility
DesignXmlConstants
DetachFromParent
DetachFromParentMethodName
DetermineParameterType
diabetes
diagnoses
diagnosis
dIBVQ
dicta
dictionary
Dictionary`2
dictum
Dim code As New CodeGenerationTools(Me) With {.FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, .CamelCaseFields = userSettings.CamelCaseFields}
Dim ef As New MetadataTools(Me)
Dim loader As New MetadataLoader(Me)
Dim namespaceName As String = GetNamespaceName(code)
Dim region As New CodeRegion(Me)
Dim userSettings As UserSettings =
diocese
dioceses
diploma
diplomata
DirectoryNotFound
DirectoryNotFoundException
DisallowReturnTypeChange
discourse
discourses
disease
diseases
Dispose
DisposeXmlReaders
ditto
dittos
djinn
dkr /
DllImportSearchPath
docComment
documentation
DoesTypeReserveMemberName
DoesWordContainSuffix
DoFixUpsForCS
DoFixUpsForVB
DoGenerateStoreMetadata
dogma
dogmata
Double
drama
dramata
DuplicateClassName
DuplicateEntityContainerName
DuplicateEntryInUserDictionary
dynamo
dynamos
e]h%)
e_.,>
E=Ohpw~
E0C1)0'
E5of-
eaves
edema
edemata
EDesignRes
EDesignResCategoryAttribute
EDesignResDescriptionAttribute
EDesignUtil
EDM Relationship Metadata
Edm_EntityMappingGeneratedViews
EdmAnnotationNamespace
EdmCodeGenFixup-
edmCollection
EdmComplexPropertyAttribute
EdmComplexTypeAttribute
EdmEntityContainerName
EdmEntityTypeAttribute
EdmError
EdmFunctionPayload
EdmItemCollection
EdmMember
edmNamespace
EdmRelationshipAttribute
EdmRelationshipNavigationPropertyAttribute
EdmReservedNamespace
EdmScalarPropertyAttribute
EdmSchemaError
EdmSchemaErrorSeverity
EdmSchemaFileNotFound
EdmSchemaNotValid
EdmToObjectNamespaceMap
edmType
edmVersion
edmxInputStream
EdmxNamespaceUriV1
EdmxNamespaceUriV2
EdmxNamespaceUriV3
EdmxRootElementName
EFNamespaceSet
efreet
efreeti
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_08-31-2010.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicCodSigPCA2011_2011-07-08.crt0
either
eland
electrophoreses
electrophoresis
element
elementName
elementType
elves
embryo
embryos
EmitApiClass
EmitComments
EmitComplexTypePropertySetStatements
EmitCustomAttributes
EmitEnumMemberExpression
EmitExpressionDoesNotEqualNull
EmitExpressionEqualsNull
EmitFactoryMethod
EmitField
EmitGeneratedCodeAttribute
EmitGetMethod
EmitKnownTypeAttributes
EmitNavigationProperty
EmitNavigationPropertyAttributes
EmitOtherDocumentationComments
EmitParamComments
EmitProperties
EmitProperty
EmitPropertyAttributes
EmitPropertyDeclaration
EmitPropertyGetter
EmitPropertyGetterBody
EmitPropertyOnChangePartialMethods
EmitPropertySetter
EmitPropertySetterBody
EmitScalarTypePropertySetStatements
EmitSchemaTypeAttribute
EmitSimpleAttribute
EmitSummaryComments
emitter
EmitterCreators
EmitTypeAttributes
EmitXmlComments
emporia
emporium
Empty
EmptyCtorSummaryComment
EmptyEnumerable`1
enconia
enconium
End Class
End Function
End Get
End If
End Interface
End Namespace
End Property
End Set
End Structure
End Sub
EndClass
EndInvoke
endMember
EndMethod
endMultiplicityOverride
endometrioses
endometriosis
endonuclease
endonucleases
EndProperty
EndPropertyGetter
EndPropertySetter
EndsWith
enema
enemata
EnglishPluralizationService
enigma
enigmata
enterprise
enterprises
Entities
ENTITY_CONTAINER_NAME_SUFFIX
EntityClient_DoesNotImplementIServiceProvider
EntityClient_InvalidStoreProvider
EntityClient_ReturnedNullOnProviderMethod
EntityCodeGenerator
EntityCodeGenTargetTooLow
EntityCollection
EntityCommand
EntityConnection
EntityContainer
EntityContainerEmitter
EntityContainerLookup
EntityContainerMapping
entityContainerName
EntityCreationStatus
EntityDataReader
EntityDesignerBuildProvider
EntityDesignerUtils
EntityDesignPluralizationHandler
entityFrameworkVersion
EntityFrameworkVersions
EntityFrameworkVersionsUtil
EntityGetContextPropertyName
Entityize
EntityKeyProperty
EntityModelBuildProvider
EntityModelGeneratorSchemaNotLoaded
EntityModelSchemaGenerator
EntityObject
EntityParameter
EntityParameterCollection
EntityReference
EntitySet
entitySet
EntitySet
entitySetBase
EntitySetClassName
EntitySetExistsWithDifferentCase
EntitySetMapping
EntityStoreGeneratorSchemaNotLoaded
EntityStoreSchemaFilterEffect
EntityStoreSchemaFilterEntry
EntityStoreSchemaFilterObjectTypes
EntityStoreSchemaGenerator
EntityStoreSchemaGeneratorDatabaseSchemaLoader
EntityStoreSchemaGeneratorNameAttributeName
EntityStoreSchemaGeneratorNamespace
EntityStoreSchemaGeneratorSchemaAttributeName
EntityStoreSchemaGeneratorTypeAttributeName
EntityType
entityType
EntityType
EntityType '{0}' has '{1}' accessibility and EntitySet '{2}' has a get property with '{3}' accessibility. The get property of the EntitySet must not have less restrictive access than the containing EntityType has.
EntityTypeAndSetAccessibilityConflict
EntityTypeBase
EntityTypeBaseClassType
EntityTypeEmitter
EntityTypeMapping
EntityTypeToSet
EntityUtil
EntityViewGenerationConstants
EntityViewGenerator
entry
Entry
Enumerable
EnumerableRowCollection`1
Enumerator
Enums
en-US
Environment
ephemerides
ephemeris
epitomise
epitomises
EqualityComparer`1
Equals
errata
erratum
error
errorCode
ERRORCODE_MAPPINGALLQUERYVIEWATCOMPILETIME
errorMessage
Errors
Errors Found During Generation:
ErrorsLookup
escapeForXml
ESystem.Data.Entity.Design.EntityViewGenerator+<SplitViewStrings>d__28
EThe table '{0}' is referenced by a relationship, but cannot be found.
Evaluate
eventArgs
EventInfo
eventReturnedBaseType
everybody
everyone
everything
Except
exception
excise
excises
Exclude
excludedColumns
ExcludedColumnWasAKeyColumn
ExcludedColumnWasAKeyColumnEntityIsInvalid
ExcludedColumnWasAKeyColumnEntityIsReadOnly
excludedForTarget
ExecuteFunction
ExecuteReader
Exists
ExistsInFirst
ExistsInSecond
expertise
expertises
expression
ExtensionAttribute
ExtensionCheck
extentFullName
ExtractConceptualMappingAndStorageNodes
extrema
extremum
F[it}
facet
facetName
factory
Factory Method
FactoryMethodSummaryComment
FactoryParamCommentGeneral
false
farmhouse
farmhouses
FgaZB
fiasco
fiascos
FieldDirection
FieldInfo
FieldNameFromPropName
fieldType
FileAccess
FileDescription
FileMode
FileNotFoundException
FileShare
FileStream
FileVersion
filterAliases
Filters
filters
FindAllInvalidCollapsedAssociationCandidates
FindEntry
first
FirstOrDefault
firstToSecondDictionary
firstValue
FixMethod
FixParameterName
FixUpClassDecl
FixUpCollection
FixUpGetter
FixupKeylessEntitySets
FixUpMethodDecl
fixups
FixUpSetter
FixUpType
FixupViewEntitySetDefiningQuery
FK_CATALOG
FK_COLUMN
FK_SCHEMA
FK_TABLE
FkCatalog
FkColumn
fkColumn
fkEnd
fkEntityType
FkSchema
FkTable
FlagsAttribute
flounder
Flush
focus
footloose
footlooses
foramen
foramina
ForceViewGeneration
Foreign key constraint '{0}' has been omitted from the storage model. Column '{1}' of table '{2}' is a foreign key participating in multiple relationships. A one-to-one Entity Model will not validate since data inconsistency is possible.
Format
format
FormatInvariant
formula
formulae
forum
FQAdoEntityClientName
FQAdoFrameworkDataClassesName
FQAdoFrameworkMetadataEdmName
FQAdoFrameworkName
FQMetaDataWorkspaceTypeName
fqName
franchise
franchises
freebie
freebies
Friend
fromEnd
FromRole
FThe additional get statement supplied for property '{0}' is not valid.
FThe additional Set statement supplied for property '{0}' is not valid.
FThe GlobalItem of type '{0}' has no model generation patterns defined.
FullName
Func`1
Func`2
Func`3
Function
function
Function Imports
FunctionDetailAlias
FunctionDetailsReader
FunctionDetailsReaderV1
FunctionDetailsReaderV3
functionImport
FunctionImport
FunctionImportMapping
FunctionImportMappingComposable
FunctionImportName
functionImportName
functionKey
FunctionName
FunctionOrderByClause
FunctionReturnTableDetailAlias
FunctionReturnTableDetailSql
fungi
fungus
fuses
g_mV3
gallows
galvanise
galvanises
gases
gatehouse
gatehouses
geese
generalissimo
generalissimos
GenerateAndStoreViews
GenerateCodeCommon
GenerateCodeFor1_1Schema
GenerateCodeFromCompileUnit
GenerateCSharpCode
GeneratedFactoryMethodNameConflict
GenerateDictionaryForEntitySetNameAndView
GeneratedNavigationPropertyNameConflict
GeneratedPropertyAccessibilityConflict
generatedPropertyName
generatedViews
GenerateEntitySetViews
GenerateHashForAllExtentViewsContent
GenerateVBCode
Generation date: {1}
generic
genie
genies
genii
genius
get_Abstract
get_AdditionalAttributes
get_AdditionalGetStatements
get_AdditionalInterfaces
get_AdditionalMembers
get_AdditionalSetStatements
get_AggregateAttribute
get_Arguments
get_Assembly
get_AssemblyCustomAttributes
get_AssociationEndMembers
get_AssociationSetEnds
get_AssociationSets
get_AttributeEmitter
get_Attributes
get_BackingFieldName
get_BaseConstructorArgs
get_BaseEntitySets
get_BaseType
get_BaseTypes
get_BuiltInAttribute
get_BuiltInTypeKind
get_ByteArray
get_Catalog
get_CatalogColumn
get_Chars
get_Class
get_ClassFixUps
get_ClrEquivalentType
get_ClrType
get_CodeDomProvider
get_CodeGenSourceFilePathIsNotAFile
get_Column
get_ColumnCount
get_ColumnName
get_ColumnNameColumn
get_Columns
get_CommandText
get_CommandTextAttribute
get_Comments
get_CompiledAssembly
get_CompileUnit
get_ComplexPropertyInitializedFieldName
get_ComplexPropertyInitializedFieldRef
get_ComplexTypeBaseClass
get_ConstructorComments
get_CorrespondingAssociationEndMember
get_Count
get_Culture
get_Current
get_CurrentCulture
get_CurrentManagedThreadId
get_CustomAttributes
get_DataSpace
get_DataType
get_DataTypeColumn
get_DateTime
get_DateTimeOffset
get_DateTimePrecision
get_DateTimePrecisionColumn
get_DeclaringType
get_Default
get_DefaultValue
get_DefaultValueFacet
get_DefiningQuery
get_DeleteBehavior
get_Description
get_DisplayName
get_Documentation
get_DocumentElement
get_EdmEntityContainer
get_EdmItemCollection
get_EdmNamespaces
get_EdmProviderManifest
get_EdmSchemaNotValid
get_EdmToObjectNamespaceMap
get_EdmType
get_EdmVersion
get_EdmVersion1_1
get_Effect
get_ElementType
get_EntityCodeGenTargetTooLow
get_EntityConnection
get_EntityContainer
get_EntityModelGeneratorSchemaNotLoaded
get_EntityPropertyName
get_EntitySet
get_EntityStoreGeneratorSchemaNotLoaded
get_EntityTypeBaseClass
get_EOF
get_ErrorCode
get_ErrorNumber
get_Errors
get_ErrorText
get_FacetName
get_Facets
get_FieldName
get_FieldRef
get_FileExtension
get_FileName
get_FirstToSecondDictionary
get_FixUps
get_FKCatalog
get_FKCatalogColumn
get_FKColumn
get_FKColumnColumn
get_FKSchema
get_FKSchemaColumn
get_FKTable
get_FKTableColumn
get_FromEndMember
get_FromProperties
get_FromRole
get_FullName
get_FunctionDetailSql
get_FunctionImports
get_GenerateForeignKeyProperties
get_Generator
get_GetStatements
get_GetViewAtMethodComments
get_Groups
get_Guid
get_HasErrors
get_HasValue
get_HidesBaseClassProperty
get_Identity
get_IEntityWithRelationshipsTypeBaseClass
get_InnerConnection
get_InnerException
get_Instance
get_InvariantCulture
get_IsAssembly
get_IsBuiltIn
get_IsClass
get_IsComposable
get_IsComposableAttribute
get_IsComposite
get_IsConstant
get_IsEmpty
get_IsForeignKey
get_IsFromProviderManifest
get_IsFunctionImport
get_IsIdentity
get_IsIdentityColumn
get_IsIsAggregate
get_IsKeyProperty
get_IsLanguageCaseSensitive
get_IsNiladic
get_IsNullable
get_IsNullableColumn
get_IsParameterModeNull
get_IsParameterNameNull
get_IsParameterTypeNull
get_IsPrimaryKey
get_IsPrimaryKeyColumn
get_IsPrivate
get_IsRequired
get_IsServerGenerated
get_IsServerGeneratedColumn
get_IsSpecialName
get_IsTvf
get_IsUserSuppliedTextWriter
get_IsValueType
get_IsVirtualProperty
get_IsWarning
get_Item
get_Item1
get_Item2
get_Key
get_KeyMembers
get_Keys
get_Language
get_LanguageAppropriateStringComparer
get_LanguageOption
get_LanguageOptions
get_Length
get_Line
get_LineNumber
get_LinePosition
get_LocalName
get_Location
get_LongDescription
get_Major
get_MappingVersion
get_MaximumLength
get_MaximumLengthColumn
get_MaxValue
get_MeetsRequirementsForCollapsableAssociation
get_Members
get_Message
get_MetadataItemErrorsFoundDuringGeneration
get_MetadataProperties
get_Method
get_Minor
get_MinValue
get_MissingDocumentationNoName
get_Mode
get_ModelAssociationSet
get_Name
get_Namespace
get_NamespaceName
get_Namespaces
get_NamespaceURI
get_NameTable
get_NavigationProperties
get_NewLine
get_NiladicFunctionAttribute
get_NodeType
get_NonNullable
get_Now
get_Nullable
get_NullExpression
get_NullFacetValues
get_ObjectContext
get_ObjectType
get_Offset
get_Ordinal
get_OrdinalColumn
get_OrdinalIgnoreCase
get_ParameterName
get_Parameters
get_ParameterType
get_ParameterTypeSemanticsAttribute
get_ParentAssociationSet
get_PKCatalog
get_PKCatalogColumn
get_PKColumn
get_PKColumnColumn
get_PKSchema
get_PKSchemaColumn
get_PKTable
get_PKTableColumn
get_PluralizationService
get_Precision
get_PrecisionColumn
get_PrimitiveTypeKind
get_ProcedureName
get_ProcParameterMode
get_Properties
get_Property
get_PropertyClassName
get_PropertyFQName
get_PropertyKind
get_PropertyName
get_PropertySource
get_PropertyType
get_ProviderInvariantName
get_ProviderSchemaErrors
get_RealErrorsExist
get_ReferencedAssemblies
get_ReferentialConstraints
get_RelationshipEndMembers
get_RelationshipId
get_RelationshipIdColumn
get_RelationshipIsCascadeDelete
get_RelationshipIsCascadeDeleteColumn
get_RelationshipMultiplicity
get_RelationshipName
get_RelationshipNameColumn
get_RelationshipType
get_Resources
get_ReturnParameter
get_ReturnType
get_Rows
get_Scale
get_ScaleColumn
get_Schema
get_SchemaColumn
get_SchemaTypes
get_SecondToFirstDictionary
get_Service
get_SetStatements
get_Severity
get_SingleStoreEntityContainerExpected
get_SourceCsdlPath
get_SourceEdmNamespaceName
get_SourceObjectNamespaceName
get_Statements
get_StorageEntityContainer
get_StoreConnection
get_StoreFunctionNameAttribute
get_StoreItemCollection
get_StoreNamespace
get_StoreProviderFactory
get_StoreSchemaModelVersion
get_String
get_Success
get_Summary
get_Table
get_TableName
get_TableNameColumn
get_TargetEntityFrameworkVersionToNewForEntityClassGenerator
get_TargetFilePath
get_TargetFramework
get_TempDir
get_Template_CommentNoDocumentation
get_Template_CurrentlyRunningTemplate
get_Template_GeneratedCodeCommentLine1
get_Template_GeneratedCodeCommentLine2
get_Template_GeneratedCodeCommentLine3
get_Template_RegionAddToMethods
get_Template_RegionComplexProperties
get_Template_RegionComplexTypes
get_Template_RegionConstructors
get_Template_RegionContexts
get_Template_RegionEntities
get_Template_RegionEnumTypes
get_Template_RegionFactoryMethod
get_Template_RegionFunctionImports
get_Template_RegionNavigationProperties
get_Template_RegionObjectSetProperties
get_Template_RegionPartialMethods
get_Template_RegionPrimitiveProperties
get_Template_RegionRelationships
get_Template_RegionSimpleProperties
get_Template_ReplaceVsItemTemplateToken
get_Template_UnsupportedSchema
get_ThisRef
get_Ticks
get_TimeSpan
get_ToEndMember
get_ToProperties
get_ToRole
get_TrueStatements
get_TwoLetterISOLanguageName
get_Type
get_TypeArguments
get_TypeAttributes
get_TypeComments
get_TypeReference
get_Types
get_TypeSource
get_TypeUsage
get_UnableToGenerateForeignKeyPropertiesForV1
get_UsingStandardBaseClass
get_UTF8
get_Value
get_Values
get_Variable
get_Version
get_VirtualPath
GetAccessibilityCsdlStringFromMemberAttribute
GetAccessibilityRank
GetAccessibilityValue
GetAddMethod
GetAllEntities
GetAppendViewStringsExpressions
GetAssociatedFacetDescriptions
GetAssociatedFkColumn
GetAssociationSetEnd
GetAssociationSetEndForForeignKeyTable
GetAttributeValueString
GetBaseType
GetBuiltInType
GetCodeAccessibilityMemberAttribute
GetCodeAccessibilityTypeAttribute
GetCodeExpressionFromBinary
GetCodeExpressionFromDateTimeDefaultValue
GetCodeExpressionFromDateTimeOffsetDefaultValue
GetCodeExpressionFromGuid
GetCodeExpressionFromTimeSpanDefaultValue
GetCollectionKind
GetCollectionType
GetCollectionTypeReference
GetCollectionTypeReferenceForBagSemantics
GetCollectionTypeReferenceForListSemantics
getColumnName
GetConceptualSchemaDefinition
GetConstraints
GetCqtView
GetCSDeclType
GetDeclaredOnlyMembers
GetDefaultValue
GetDefaultValueExpression
GetDirectSubTypes
GetDocumentation
GetEdmPrimitiveType
GetEdmSchemaNamespace
GetEdmSchemaXsdResourceName
GetEdmType
GetEdmVersion
GetElementLocationInfo
getElementType
GetEndTypeCodeExpression
GetEntityFrameworkVersion
GetEntitySet
GetEntitySetName
GetEntitySetPropertyAccessibility
GetEntitySetViews
GetEntityType
GetEntityTypeAccessibility
GetEntityTypeName
GetEnumerator
GetEnumValue
GetExecutingAssembly
GetExtentFullName
GetFactory
GetFileName
GetFirstValue
GetFormattedLines
GetFromAssociationSetEnd
GetFullName
GetFullyQualifiedCodeGenerationAttributeName
GetFullyQualifiedPropertyName
GetFullyQualifiedTypeReference
GetFunctionImportAccessibility
GetGetMethod
GetGetterAccessibility
GetHashCode
GetInformation
GetItems
GetKey
GetLeastPossibleQualifiedTypeReference
GetLoader
GetLocalizedString
GetManifestResourceStream
GetMappingClosureHash
GetMappingSchemaNamespace
GetMappingSchemaXsdResourceName
GetMembers
GetMessagesFromEntireExceptionChain
GetMinimumTargetFrameworkVersion
GetModelType
GetModelTypeUsage
GetMostQualifiedTableName
GetMultiplicityCodeExpression
GetName
GetNavigationPropertyName
GetObject
GetOrCreateTextWriter
GetPaths
GetPrimitiveTypes
GetProperties
GetProperty
GetProviderFactory
GetProviderManifest
GetProviderManifestToken
GetProviderSchemaMetadataWorkspace
GetProviderServices
GetReaders
GetReferenceType
GetReferentialConstraint
GetRelatedCollection
GetRelatedReference
GetRemoveMethod
GetResourceNameForVirtualPath
GetResultFlags
GetReturnType
GetReturnTypeFromFunctionImport
GetRowType
GetScalarFunctionTypeUsage
GetSchemaElement
GetSchemaNamespace
GetSchemaXsd
GetSecondValue
GetService
GetSetMethod
GetSetterAccessibility
GetSourceNameFromObjectType
GetSourceTypes
GetStoreAssociationSetEnd
GetStoreSchemaNamespace
GetStoreSchemaXsdResourceName
GetString
GetStringBuilder
GetSuffixWord
GetTempFileName
GetTempPath
GetterAccess
GetType
GetTypeAccessibilityValue
GetTypeFromHandle
GetTypeName
GetValidValue
GetValidValueMethodName
GetValueOrDefault
GetValues
GetVBStatementType
GetView
GetViewAt
GetViewAtMethodComments
GetViewAtMethodName
GetViewsAndCodeDomProvider
GetViewStringBuilderVariable
GetViewStringsAppendToStringBuilder
GetViewsWithErrors
GetWriter
GetXmlMultiplicity
ghetto
ghettos
gj6^<
GKIrWKY'
glasshouse
glasshouses
goose
gooses
goyim
graffiti
grandiose
grandioses
greenhouse
greenhouses
Group
GroupCollection
guano
guanos
gumma
gummata
-gXZA
gymnasia
gymnasium
h]b*m
H0F0D
HandleValidationErrors
HasDefault
HasErrorSeverityErrors
HashOverAllExtentViews
HashOverMappingClosure
HashSet`1
hasNamespace
HasQueryView
HasQueryViewForSetMap
HasValue
hd6e"
headquarters
herpes
herself
hiatus
hidesBaseProperty
high-jinks
himself
hippopotami
hippopotamus
hOF;O
homework
honoraria
honorarium
house
houses
http://microsoft.com0
http://schemas.microsoft.com/ado/2006/04/codegeneration:
http://schemas.microsoft.com/ado/2006/04/edm
http://schemas.microsoft.com/ado/2006/04/edm/ssdl
http://schemas.microsoft.com/ado/2007/06/edmx
http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator
http://schemas.microsoft.com/ado/2008/09/edm
http://schemas.microsoft.com/ado/2008/09/mapping/cs
http://schemas.microsoft.com/ado/2008/10/edmx
http://schemas.microsoft.com/ado/2009/02/edm/annotation
http://schemas.microsoft.com/ado/2009/02/edm/annotation:LazyLoadingEnabled
http://schemas.microsoft.com/ado/2009/02/edm/annotation:StoreGeneratedPattern
http://schemas.microsoft.com/ado/2009/02/edm/ssdl
http://schemas.microsoft.com/ado/2009/11/edm
http://schemas.microsoft.com/ado/2009/11/edm/ssdl
http://schemas.microsoft.com/ado/2009/11/edmx
http://schemas.microsoft.com/ado/2009/11/mapping/cs
hydra
hydrae
hyperbata
hyperbaton
hyperbola
hyperbolae
hypotenuse
hypotenuses
hypotheses
hypothesis
I0G0E
IAsyncResult
ICollection`1
IComparer`1
ICustomPluralizationMapping
identifier
IDictionary`2
IDisposable
IEntityWithRelationships
IEntityWithRelationshipsTypeBaseClassName
IEnumerable
IEnumerable`1
IEnumerable<EdmProperty> GetProperties(StructuralType type)
IEnumerable<T> GetSourceSchemaTypes<T>() where T : GlobalItem
IEnumerator
IEnumerator`1
IEqualityComparer`1
IEquatable`1
If Errors.HasErrors
if(Errors.HasErrors)
IFormatProvider
Ihttp://crl.microsoft.com/pki/crl/products/MicRooCerAut2011_2011_03_22.crl0^
IList`1
impetus
ImportNode
Imports Microsoft.VisualBasic
Imports System
Imports System.CodeDom
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Data.Entity.Design
Imports System.Data.Mapping
Imports System.Data.Metadata.Edm
Imports System.Data.Objects
Imports System.Data.Objects.DataClasses
Imports System.Globalization
Imports System.IO
Imports System.Linq
Imports System.Reflection
Imports System.Text
Imports System.Xml
Imports System.Xml.Linq
impulse
impulses
IncludeFieldInFactoryMethod
IncompatibleSettingForCaseSensitiveOption
IncreaseCapacity
incubi
incubus
IndentedTextWriter
index
IndexOfAny
IndexOfKeyword
IndexOutOfRangeException
indices
IndividualViewComments
InferKeyColumns
inferno
infernos
information
InitClass
Initial value of {0}.
Initialize
Initialize a new {0} object.
InitializeArray
Initialized
InitializeReader
InitializeRelatedCollection
InitializeRelatedReference
InitializeTypeReservedNames
InlineObjectCollection
inner
innerException
innerType
innings
INOUT
input
Insert
InsertBefore
insertText
Int32
Int64
intercourse
intercourses
Interlocked
Internal
internal
InternalDataCollectionBase
InternalGenerateCode
InternalGenerateMetadata
InternalGenerateViews
InternalGetHashCode
InternalName
InternalPluralize
InternalSingularize
InternalWriteModelSchema
InternalWriteStorageMapping
interregna
interregnum
Intersect
intersperse
intersperses
IntializeMethod
InvalidAttributeSuppliedForProperty
InvalidAttributeSuppliedForType
InvalidCastException
InvalidEntityContainerNameArgument
InvalidGetStatementSuppliedForProperty
InvalidInterfaceSuppliedForType
InvalidKeyTypeFound
InvalidMemberSuppliedForType
InvalidNamespaceNameArgument
InvalidNonStoreEntityContainer
InvalidOperation
InvalidOperationException
InvalidSchemaEncountered
InvalidSetStatementSuppliedForProperty
InvalidStoreEntityContainer
InvalidStringArgument
InvalidTypeForPrimaryKey
InvalidTypes
IOException
IOrderedEnumerable`1
IReadOnlyCollection`1
IReadOnlyDictionary`2
IReadOnlyList`1
irides
IS_IDENTITY
IS_NULLABLE
IS_PRIMARYKEY
IS_SERVERGENERATED
IsAlphabets
IsAssignableFrom
IsAssociationPartOfCandidateCollapsedAssociation
IsAtLeastOneColumnFKInBothAssociations
IsAtLeastOneColumnOfBothDependentRelationshipColumnSetsNonNullable
IsCapitalized
IsCascadeDelete
IsCatalogNull
IsCatchableExceptionType
ISchemaElementLookUpTable`1
IsClassWanted
IsCollectionType
IsComplexType
IsComposable
IsCSClassDefinition
IsDataTypeNull
IsDateTimePrecisionNull
IsDBNull
IsEntityDependentSideOfBothAssociations
IsEntitySet
IsEnumerationType
ISet`1
IsFKCatalogNull
IsFKColumnNull
IsFkPartiallyContainedInPK
IsFKSchemaNull
IsFKTableNull
isGetter
IsIdentity
IsIsIdentityNull
IsIsServerGeneratedNull
IsLanguageSupported
IsLeftMoreAccessableThanRight
IsLetter
IsLetterOrDigit
IsMatch
IsMaximumLengthNull
IsNameAlreadyAMemberName
IsNominalType
IsNoOpWord
IsNull
IsNullable
IsNullOrEmpty
IsNullOrEmptyOrWhiteSpace
IsOrdinalNull
IsPKCatalogNull
IsPKColumnNull
IsPKSchemaNull
IsPKTableNull
IsPlural
IsPrecisionNull
IsPrimaryKey
IsPrimitiveType
IsReference
IsRelationshipNameNull
IsScaleNull
IsSchemaNull
IsServerGenerated
IsSingular
IsSpecialFacet
IsStoreType
IsSystemNamespace
IsUnboundedFacetValue
IsUninflective
IsUpper
IsValidKeyType
IsValidSchema
IsValidVersion
isVirtual
IsWhiteSpace
itemCollection
ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray())
ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray());
ItemExistsWithDifferentCase
itemIdentity
itemName
ItemToErrorsMap
IteratorStateMachineAttribute
iThe culture '{0}' is not supported.   Pluralization is currently only supported for the English language.
IThe namespaceName parameter '{0}' contains characters that are not valid.
itself
jackanapes
jumbo
jumbos
KeyCollection
KeyValuePair`2
keyword
kIx:T
KThe return data type of property '{0}' on the type '{1}' cannot be changed.
kV2Er
L&*H$_Z
L0J0H
lacuna
lacunae
languageOption
larynges
larynx
LastIndexOf
Latest
latex
latices
LazyLoadingEnabled
LazyTextWriterCreator
LeadingBlanks
Legal_policy_statement
Legal_Policy_Statement
LegalCopyright
lemma
lemmata
length
lenses
lettuce
LF%V6
license
licenses
lighthouse
lighthouses
LineIsVBBeginClassMethodProperty
LineIsVBBeginSetterGetter
lineNumber
linePosition
lingo
lingos
List`1
lives
LoadDataTable
loaders
LoadFunctionDetails
LoadFunctionReturnTableDetails
LoadMethodSessionState
LoadNameLookupWithUsedMemberNames
LoadRelationships
LoadTableDetails
LoadViewDetails
LongDescription
lookups
louse
lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet
LThe StoreItemCollection collection must contain exactly one EntityContainer.
lumbago
lumbagos
lumen
lumina
lustra
lustrum
lymphoma
lymphomata
lynxes
m_languageOption
m_type
M0K0I
mackerel
magma
magmata
magneto
magnetos
MakeGenericType
manifesto
manifestos
MapFunctions
Mapping
mappingCollection
MappingFragment
MappingLookups
MappingModelBuildProvider
mappingNode
MappingType
MarkAbstractMethodAsPartial
MAX_LENGTH
maxExpectedVersion
maxima
maximum
MaximumLength
MaxLength
MAXONELINELENGTH
mayonnaise
mayonnaises
mcpi&
Me.Write("                Return StructuralObject.GetValidValue(")
Me.Write("            ")
Me.Write("            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write("            If (")
Me.Write("            If (Not StructuralObject.BinaryEquals(")
Me.Write("            Return ")
Me.Write("        ")
Me.Write("        Dim ")
Me.Write("        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write("        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write("        MyBase.ContextOptions.LazyLoadingEnabled = ")
Me.Write("        Return ")
Me.Write(" <> Value) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write(" = ")
Me.Write(" = GetValidValue(")
Me.Write(" = New ")
Me.Write(" = New ObjectParameter(""")
Me.Write(" = SetValidValue(")
Me.Write(" = StructuralObject.SetValidValue(value")
Me.Write(" = StructuralObject.VerifyComplexObjectIsNotNull(")
Me.Write(" = True"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanged(""")
Me.Write(" = True"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Return ")
Me.Write(" As ")
Me.Write(" as ")
Me.Write(" As ")
Me.Write(" As Boolean"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(" As ObjectParameter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        If (")
Me.Write(" Property ")
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(""")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write(""")")
Me.Write(""", ")
Me.Write(""", False, ")
Me.Write(""", GetType(")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanged(""")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Dim ")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' </summary>")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ''' ")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmComplexPropertyAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DesignerSerializationVisibility(Desig"& _ 
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <EdmScalarPropertyAttribute(EntityKeyProperty:=")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Public Shared Function ")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write("(")
Me.Write("() As ")
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Property"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private ")
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write("(value As ")
Me.Write("(value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanging(""")
Me.Write(") As ")
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ReportPropertyChanged(""")
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Private Partial Sub ")
Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write("))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write(")>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    <DataMemberAttribute()>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
Me.Write(", """)
Me.Write(", IsNullable:=")
Me.Write(", Value)) Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write(", value, """)
Me.Write(".")
Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write("Get"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            ")
Me.Write("Set"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
Me.Write("StructuralObject.SetValidValue(")
Me.Write("value")
Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(complexProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(primitiveProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(simpleProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(BeginCastToEnumType(simpleProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(BeginCastToUnderlyingType(simpleProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(primitiveProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangedMethodName(simpleProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(primitiveProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(ChangingMethodName(simpleProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(primitiveProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(simpleProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(primitiveProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(simpleProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(complexProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(simpleProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(complexProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(primitiveProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(simpleProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((primitiveProperty)))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((simpleProperty)))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(complexProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(complexProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(primitiveProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(simpleProperty))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(primitiveProperty.DefaultValue))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(simpleProperty.DefaultValue))))
Me.Write(Me.ToStringHelper.ToStringWithCulture(complexProperty.Name))
Me.Write(Me.ToStringHelper.ToStringWithCulture(EndCastToEnumType(simpleProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(EndCastToUnderlyingType(simpleProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(If(parameter.IsNullableOfT, parameter.FunctionParameterName + ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")))
Me.Write(Me.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(instanceName))
Me.Write(Me.ToStringHelper.ToStringWithCulture(isLazyLoading.ToString().ToLowerInvariant()))
Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complexProperty, 1)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(primitiveProperty, 1)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(simpleProperty, 1)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(methodName))
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(primitiveProperty, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(simpleProperty, code)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName))
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName))
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName))
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.ParameterName))
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName))
Me.Write(Me.ToStringHelper.ToStringWithCulture(parameter.Source.Name))
Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(Function(p) New Tuple(Of String, String)(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(primitiveProperty.Name))
Me.Write(Me.ToStringHelper.ToStringWithCulture(simpleProperty.Name))
Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_FactoryMethodComment"), structuralType.Name)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_FactoryMethodComment"), structuralType.Name)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(String.Join(", ", parameters.Select(Function(p) p.ParameterName & " As " & p.ParameterType).ToArray())))
Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(complexProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(primitiveProperty)))
Me.Write(Me.ToStringHelper.ToStringWithCulture(SummaryComment(simpleProperty)))
measles
media
medico
medicos
medium
medusa
medusae
melisma
melismata
member
MemberAttributes
MemberInfo
memberProperty
members
MembersToCommaSeparatedString
memento
MementoV1
MementoV3
Memoizer`2
memoranda
memorandum
MemoryStream
memos
menopause
menopauses
merchandise
merchandises
message
MetadataArtifactLoader
MetadataArtifactLoaderComposite
MetadataArtifactLoaderXmlReaderWrapper
MetadataArtifactProcessing
metadataArtifactProcessingValue
MetadataException
MetadataExtensionMethods
MetadataHelper
MetadataItem
MetadataItemCollectionFactory
MetadataItemEmitter
MetadataItemErrorsFoundDuringGeneration
MetadataItemSerializer
MetadataLoader loader = new MetadataLoader(this);
MetadataMappingHasherVisitor
MetadataProperty
MetadataTools ef = new MetadataTools(this);
MetadataUtil
metadataWorkspace
metamorphose
metamorphoses
metamorphosis
MethodAccess
MethodBase
MethodInfo
methodName
miasma
miasmata
Microsoft
Microsoft Code Signing PCA
Microsoft Code Signing PCA 2011
Microsoft Code Signing PCA 20110
Microsoft Code Signing PCA0
Microsoft Corporation
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1!0
Microsoft Corporation1#0!
Microsoft Corporation1&0$
Microsoft Corporation1(0&
Microsoft Corporation1200
Microsoft Time-Stamp PCA
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp PCA0
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft.CSharp
Microsoft.VisualBasic
microsoft1-0+
millenia
millenium
millet
minima
minimum
MissingComplexTypeDocumentation
MissingDocumentation
MissingDocumentationNoName
MissingEntity
MissingGenerationPatternForType
MissingPropertyDocumentation
MissingTvfReturnTable
misuse
misuses
model
Model
modelAssociation
ModelBuilderErrorCode
modelContainer
modelEntityContainerName
ModelFunction
ModelGeneration_UnGeneratableType
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath)
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath);
modelType
molasses
momenta
momentum
money
moneys
mongoose
mongooses
MOPR1'0%
mouse
MoveNext
movie
movies
mscoree.dll
mscorlib
mThe data type of the column '{0}' is currently not supported so the column '{0}' in table '{1}' was excluded.
MulticastDelegate
Multiplicity
multiplicity
multiplicityOverride
multiplicitySet
mumps
murex
murices
muses
MustOverride Sub
mutton
myself
mythoi
mythos
N   Manual changes to this file will be overwritten if the code is regenerated.
N=|)H
N0L0J
name=
names
Namespace
namespace TemplateCodeGenerators
Namespace TemplateCodeGenerators
namespace TemplateCodeGenerators
Namespace TemplateCodeGenerators
NAMESPACE_NAME_SUFFIX
NamespaceComments
NamespaceEmitter
NamespaceName
namespaceName
namespaceToWrite
Navigation Properties
NavigationProperty
navigationProperty
NavigationPropertyEmitter
nCipher DSE ESN:B1B7-F67F-FEC21%0#
nCipher DSE ESN:C0F4-3086-DEF81%0#
nCipher NTS ESN:57F6-C1E0-554C1+0)
nebula
nebulae
NestedStoreObjectCollection
neuroses
neurosis
NeutralResourcesLanguageAttribute
NewContextClassName
NewGuid
newModelEntityContainerName
NewRow
NewRowFromBuilder
newType
newWord
nexus
NiladicFunction
nimbi
nimbus
nives
No Conceptual Schema node to embed as a resource
No Mapping node to embed as a resource
No Storage Schema node to embed as a resource
nobody
nodeName
noise
noises
NonSerializableType
NoPrimaryKeyDefined
Normal
NormalizeForVB
NoSpecificTypeSentinal
NOT (
nothing
NotImplemented
NotImplementedException
NotOverridable
NotSupportedException
noumena
noumenon
novae
nucleoli
nucleolus
Nullable
Nullable`1
NullAdditionalSchema
NullReferenceException
NullReferenceType
nullValue
nurse
nurses
O0M0K
oases
oasis
object
ObjectContext
ObjectEqualityComparer`1
objectNamespace
ObjectParameter
ObjectQuery
ObjectResult
ObjectResultClassName
ObjectSet Properties
octavo
octavos
octopus
octopuses
oedema
oedemata
offset
offspring
OfType
oIoX]i*
oK0D$"<
olves
OnChangedPartialMethodName
OnChangingPartialMethodName
OnContextCreated
OnContextCreatedCodeMethodInvokeExpression
OnDelete
oneself
oneselves
OneToOneAssociationFound
OneToOneMappingSerializer
op_Equality
op_GreaterThan
op_GreaterThanOrEqual
op_Inequality
op_LessThan
op_LessThanOrEqual
OpenFile
OperationAction
operationAction
operationOnWord
optima
optimum
oq=VV
OrderBy
orderByClause
OrderByDescending
orderByFunc
Ordinal
ORDINAL
Ordinal
organa
organon
-Original file name: {0}
OriginalFilename
osteoporoses
osteoporosis
OThe member '{0}' on the type '{1}' conflicts with the generated factory method.
other
Other
others
ourselves
OutOfMemoryException
OutOfMemoryType
outputFileName
outputPath
outputWriter
OutputXmlElementToStream
override
Overrides
p*2~5
p*r 5
p*r^4
p*rc=
PADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDING
PadLeft
PADPADP
parabola
parabolae
paralyses
paralysis
PARAM_DIRECTION_INDEX
PARAM_NAME_INDEX
PARAM_TYPE_INDEX
ParamArrayAttribute
Parameter
parameter
ParameterDirectionNotValid
ParameterModifier
parameterName
parameters
ParameterTypeSemantics
paramName
paraphrase
paraphrases
parentheses
parenthesis
parentIdentity
parentModelAssociationSet
ParseAndValidate
partial
Partial Methods
Partial Private
pathogeneses
pathogenesis
penthouse
penthouses
people
perihelia
perihelion
peristalses
peristalsis
peroxidase
peroxidases
person
phalanx
phalanxes
pharynx
pharynxes
phase
phases
phenomena
phenomenon
phosphatase
phosphatases
photo
photos
photosyntheses
photosynthesis
phyla
phylum
pillowcase
pillowcases
pincers
PK_CATALOG
PK_COLUMN
PK_SCHEMA
PK_TABLE
PkCatalog
PkColumn
pkColumn
PkColumn
pkEnd
pkEntityType
pKeys
PkSchema
PkTable
playhouse
playhouses
Please overwrite the replacement token '$edmxInputFile$' with the actual name of the .edmx file you would like to generate from.
plexus
pliers
plural
PluralizationServiceUtil
pneumonoultramicroscopicsilicovolcanoconiosis
poise
poises
police
polyhedra
polyhedron
pontifex
pontifices
powerhouse
powerhouses
Precision
prefixWord
PreprocessTemplateCompilationError
PreprocessTemplateTransformationError
PrimaryKeyCannotBeForeignKey
primaryKeys
Primitive Properties
primitiveType
princesse
princesses
Principal
Private
private
Private _EsqlParameterName As String
Private _ExecuteParameterName As String
Private _FunctionParameterName As String
Private _FunctionParameterType As String
Private _IsNullableOfT As Boolean
Private _LocalVariableName As String
Private _NeedsLocalVariable As Boolean
Private _RawClrTypeName As String
Private _RawFunctionParameterName As String
Private _Source As FunctionParameter
private bool VerifyTypeUniqueness(IEnumerable<string> types)
Private Class FactoryMethodParameter
Private Function BaseTypeName(ByVal entity As EntityType, ByVal code As CodeGenerationTools) As String
Private Function BeginCastToEnumType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
Private Function BeginCastToUnderlyingType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
Private Function ChangedMethodName(ByVal member As EdmMember) As String
Private Function ChangingMethodName(ByVal member As EdmMember) As String
Private Function EndCastToEnumType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
Private Function EndCastToUnderlyingType(ByVal typeUsage As TypeUsage, ByVal code As CodeGenerationTools) As String
Private Function EndMultiplicity(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
Private Function EndName(ByVal association As AssociationType, ByVal index As Integer) As String
Private Function EscapeEndTypeName(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
Private Function GetGlobalItemName(item As GlobalItem) As String
Private Function GetObjectNamespace(ByVal csdlNamespaceName As String) As String
Private Function GetProperties(ByVal type As StructuralType) As IEnumerable(Of EdmProperty)
Private Function GetSourceSchemaTypes(Of T As GlobalItem)() As IEnumerable(Of T)
Private Function IncludePropertyInFactoryMethod(ByVal factoryType As StructuralType, ByVal edmProperty As EdmProperty) As Boolean
Private Function InitializedTrackingField(ByVal edmProperty As EdmProperty, ByVal code As CodeGenerationTools) As String
Private Function LongDescriptionCommentElement(ByVal item As MetadataItem, ByVal indentLevel As Integer) As String
Private Function MultiSchemaEscape(ByVal type As EdmType, ByVal code As CodeGenerationTools) As String
Private Function MultiSchemaEscape(ByVal type As StructuralType, ByVal code As CodeGenerationTools) As String
Private Function MultiSchemaEscape(ByVal usage As TypeUsage, ByVal code As CodeGenerationTools) As String
Private Function NewModifier(ByVal edmFunction As EdmFunction) As String
Private Function NewModifier(ByVal edmProperty As EdmProperty) As String
Private Function NewModifier(ByVal entitySet As EntitySet) As String
Private Function NewModifier(ByVal navigationProperty As NavigationProperty) As String
Private Function NewModifier(ByVal type As Type, ByVal memberName As String) As String
Private Function OptionalNullableParameterForSetValidValue(ByVal member As EdmMember, ByVal code As CodeGenerationTools) As String
Private Function ParameterComments(ByVal parameters As IEnumerable(Of Tuple(Of String, String)), ByVal indentLevel As Integer) As String
Private Function PrefixLinesOfMultilineComment(ByVal prefix As String, ByVal comment As String) As String
Private Function SummaryComment(ByVal item As MetadataItem) As String
Private Function XmlEntityize(ByVal text As String) As String
Private NotInheritable Class UniqueIdentifierService
Private Property DefaultSummaryComment() As String
Private Shared Function FixParameterName(ByVal name As String, ByVal code As CodeGenerationTools) As String
Private Shared Function HasBaseMemberWithMatchingName(ByVal type As Type, ByVal memberName As String) As Boolean
Private Shared Function IsVisibleMember(ByVal memberInfo As MemberInfo) As Boolean
Private Shared Function IsVisibleMethod(ByVal methodBase As MethodBase) As Boolean
private static string GetResourceString(string resourceName)
Private Sub DefineMetadata()
Private Sub UpdateObjectNamespaceMap(objectNamespace As String)
Private Sub VerifyCaseInsensitiveEntitySetUniqueness(entitySets As IEnumerable(Of EntitySet))
Private Sub VerifyCaseInsensitiveMemberUniqueness(members As IEnumerable(Of EdmMember))
Private Sub VerifyCaseInsensitiveTypeUniqueness()
Private Sub VerifyCaseInsensitiveUniqueness(Of T As MetadataItem)(items As IEnumerable(Of T), getIdentity As Func(Of T, String), formatMessage As Func(Of T, String) )
Private Sub VerifyEntityTypeAndSetAccessibilityCompatability(ByVal entitySet As EntitySet)
private void DefineMetadata()
private void VerifyEntityTypeAndSetAccessibilityCompatability(EntitySet set)
private void VerifyTypeUniqueness()
PrivateMemberPrefix
PrivateMemberPrefixId
PROC_CATALOG_INDEX
PROC_ISAGGREGATE_INDEX
PROC_ISBUILTIN_INDEX
PROC_ISCOMPOSABLE_INDEX
PROC_ISNILADIC_INDEX
PROC_ISTVF_INDEX
PROC_NAME_INDEX
PROC_RET_TYPE_INDEX
PROC_SCHEMA_INDEX
proceedings
ProductName
ProductVersion
PROFILE_DATA
prognoses
prognosis
Project
prolegomena
prolegomenon
promise
promises
properties
Property
Property '{0}' has '{1}' Get property and '{2}' Set property accessibility specified. {1} and {2} modifiers cannot be combined within a single Property.
propertyAccessibility
propertyDecl
PropertyEmitterBase
PropertyExistsWithDifferentCase
propertyFqName
PropertyGeneratedEventArgs
PropertyGeneratedEventHandler
PropertyInfo
PropertyInfoField
PropertyInfoProperty
propertyName
PropertyRef
propertyReturnType
propertyType
PropertyTypeReferences
propName
prose
proses
prospectus
Protected
protected
Protected
protected string GetGlobalItemName(GlobalItem item)
Protected Sub VerifyGetterAndSetterAccessibilityCompatability(ByVal member As EdmMember)
protected void VerifyGetterAndSetterAccessibilityCompatability(EdmMember member)
Provider
providerConnection
providerFacetDescription
ProviderFactoryReturnedNullFactory
ProviderIncompatible
ProviderIncompatibleException
providerInvariantName
ProviderManifestToken
ProviderSchemaErrors
providerServices
psychoanalyses
psychoanalysis
psychoses
psychosis
pThe {0} '{1}' differs only in case from an existing {0}, and is not compatible with the current language option.
PThe model metadata has not been generated yet. Call GenerateModelMetadata first.
PThe store metadata has not been generated yet. Call GenerateStoreMetadata first.
Public
public
Public
public abstract
Public Class Accessibility
public class CodeGenerationTools
Public Class CodeGenerationTools
Public Class CodeRegion
public class CodeRegion
Public Class CodeRegion
Public Class DynamicHost
public class DynamicHost : IDynamicHost
Public Class DynamicTextTransformation
public class DynamicTextTransformation
Public Class DynamicTextTransformation
Public Class EntityFrameworkTemplateFileManager
public class EntityFrameworkTemplateFileManager
Public Class EntityFrameworkTemplateFileManager
public class EntityFrameworkTemplateFileManager
Public Class FunctionImportParameter
public class FunctionImportParameter
Public Class FunctionImportParameter
public class FunctionImportParameter
Public Class MetadataLoader
public class MetadataLoader
Public Class MetadataTools
public class MetadataTools
Public Class MetadataTools
public class MetadataTools
Public Class NullHost
public class NullHost : IDynamicHost
public Dictionary<string, string> _edmToObjectNamespaceMap = new Dictionary<string, string>();
public Dictionary<string, string> EdmToObjectNamespaceMap
public Double SourceEdmVersion
public EdmItemCollection ItemCollection{ get; set; }
Public Function GetAllDeclaredMembers(structural As StructuralType) As IEnumerable(Of EdmMember)
public IEnumerable<string> ReferenceCsdlPaths{ get; set; }
Public Interface IDynamicHost
public interface IDynamicHost
Public Interface IDynamicHost
Public MustOverride
Public NotInheritable Class MetadataConstants
public Nullable<bool> CreateContextAddToMethods{ get; set; }
Public Shared TemplateMetadata As New Dictionary(Of String, String)()
public static class Accessibility
public static class MetadataConstants
public static Dictionary<string, string> TemplateMetadata = new Dictionary<string, string>();
public string ModelNamespace{ get; set; }
public string SourceCsdlPath{ get; set; }
public struct SchemaConstants
Public Structure SchemaConstants
purchase
purchases
purse
purses
Q   Manual changes to this file may cause unexpected behavior in your application.
QEX82q'
QualificationCharacter
quanta
quantum
quarto
quartos
queryTypes
r.FromTable
r.ToTable
r:xcf.
R[!`}
r~akow
R0P0N
rabies
racecourse
racecourses
racehorse
racehorses
radii
radius
RaisePropertyGeneratedEvent
RaiseTypeGeneratedEvent
ReadAllText
ReadByte
readers
ReadLine
ReadOnlyCollection`1
ReadOnlyEntities
ReadOnlyMetadataCollection`1
ReadToEnd
recourse
recourses
Redmond1
refconst
Reference
ReferenceCsdlPaths
referenceMethod
referenceProperty
ReferentialConstraint
ReflectionAdapter
RefType
refuse
refuses
Regex
RegexOptions
RegisterItemCollection
RegisterUsedIdentifier
Relationship
RELATIONSHIP_ID
RELATIONSHIP_IsCascadeDelete
RELATIONSHIP_NAME
RelationshipDetailFromTableAlias
RelationshipDetails
RelationshipDetailsCollection
RelationshipDetailSql
RelationshipDetailsRow
RelationshipDetailToTableAlias
RelationshipEndMember
RelationshipEndTypeLookup
RelationshipId
RelationshipManager
relationshipMultiplicity
RelationshipMultiplicity
RelationshipName
RelationshipSpansSchemas
release
releases
Remove
remove_OnPropertyGenerated
remove_OnTypeGenerated
RemoveXmlCommentCharacters
Replace
replaced
ReplaceFirst
ReportPropertyChanged
ReportPropertyChangedMethodName
ReportPropertyChanging
ReportPropertyChangingMethodName
RequiresModelReferentialConstraint
ReservedNamespace
Resize
ResourceManager
resourceName
result
ResultMapping
results
return view for {0}
ReturnParameters
ReturnType
rhino
rhinos
right
roses
rostra
rostrum
roundhouse
roundhouses
rowType
RowType
RuntimeCompatibilityAttribute
RuntimeFieldHandle
RuntimeHelpers
RuntimeTypeHandle
runtimeVersion
s_defaultDelimiter
S0Q0O
salmon
sarcoma
sarcomata
SatelliteContractVersionAttribute
SaveAssociationForCollapsedAssociationCandidate
SaveXmlReaderToFile
scabies
ScalarProperty
Scale
SCALE
Scale
schema
Schema
SchemaDataModelOption
schemaErrors
SchemaManager
SchemaName
schemaNamespace
schemata
SchemaType
SchemaTypeEmitter
SchemaVersionHigherThanTargetVersion
scissors
scleroses
sclerosis
scope
sea-bass
sealed
sealed class UniqueIdentifierService
SearcherGetContextPropertyName
searchText
second
secondValue
SecurityError
SecurityException
SecurityRulesAttribute
SecurityRuleSet
SecurityTransparentAttribute
SecurityType
SeekOrigin
segment
Select
SelectMany
SelectNodes
SelectSingleNode
sender
separator
seraph
seraphim
Serialization_UnknownGlobalItem
serializationInfo
SerializationInfo
series
service
session
set_Attributes
set_BaseType
set_BlankLinesBetweenMembers
set_BracingStyle
set_Catalog
set_Class
set_ColumnName
set_CommandText
set_CommandTimeout
set_CommandType
set_CompilerOptions
set_ConformanceLevel
set_ConnectionString
set_Culture
set_DataType
set_DateTimePrecision
set_DefiningQuery
set_DeleteBehavior
set_DescriptionValue
set_EdmToObjectNamespaceMap
set_Encoding
set_ErrorText
set_FileName
set_FirstToSecondDictionary
set_FKCatalog
set_FKColumn
set_FKSchema
set_FKTable
set_FromEndMember
set_GenerateExecutable
set_GenerateForeignKeyProperties
set_GenerateInMemory
set_Generator
set_HasGet
set_HasSet
set_Indent
set_InitExpression
set_IsIdentity
set_IsNullable
set_IsPartial
set_IsPrimaryKey
set_IsServerGenerated
set_IsWarning
set_Item
set_Language
set_LanguageOption
set_MaximumLength
set_Method
set_MethodName
set_ModelAssociationSet
set_Name
set_OmitXmlDeclaration
set_Ordinal
set_ParameterName
set_PKCatalog
set_PKColumn
set_PKSchema
set_PKTable
set_PluralizationService
set_Precision
set_Property
set_ReferenceCsdlPaths
set_RelationshipId
set_RelationshipIsCascadeDelete
set_RelationshipName
set_RelationshipType
set_ReturnType
set_Scale
set_Schema
set_SecondToFirstDictionary
set_Service
set_SourceCsdlPath
set_TableName
set_TargetObject
set_ToEndMember
set_Type
set_TypeAttributes
set_Value
set_VerbatimOrder
Set`1
setAccess
SetCapacity
SetReadOnly
SetterAccess
SetTypeVisibility
SetupEmbeddedResource
SetupFields
SetValidValue
SetValidValueMethodName
SetValue
severity
shambles
SharedForeignKey
shears
sheep
shingles
ShouldEmitFunctionImport
ShouldReserveName
silex
silices
silos
Simple Properties
simplex
simplices
Single
SingleStoreEntityContainerExpected
singular
sinus
SkipFacet
SkipVerificationInFullTrust
slaughterhouse
slaughterhouses
SoapIgnoreAttribute
soliloquies
soliloquy
somata
somebody
someone
something
soprani
soprano
SourceCsdlPath
sourceEdmSchema
sourceEdmSchemaFilePath
sourceEdmSchemaPath
sourceEdmSchemaXmlReader
sourceLoader
sourceLocation
SourceSchemaIsInvalid
sourceWriter
Space
species
SpecifyKind
specimen
specimens
spectra
spectrum
specula
speculum
sphinx
sphinxes
Split
SplitIntoLines
SplitName
SplitViewStrings
SqlClientFactory
SqlProviderServices
Stack`1
StackOverflowException
StackOverflowType
stadia
stadium
staircase
staircases
stamen
stamina
StartsWith
statements
static
static 
static bool HasBaseMemberWithMatchingName(Type type, string memberName)
static bool IsVisibleMember(MemberInfo memberInfo)
static bool IsVisibleMethod(MethodBase methodBase)
static string FixParameterName(string name, CodeGenerationTools code)
static System.Resources.ResourceManager _resourceManager;
static System.Resources.ResourceManager ResourceManager
status
steeplechase
steeplechases
stereo
stereos
SThe '{0}' DbProviderFactory returned a null value from the CreateConnection method.
SThe return data type of property '{0}' on the type '{1}' cannot be changed to null.
stigma
stigmata
stimuli
stimulus
stoma
stomata
StonglyTypedAccessToNullValue
StorageEntityContainer
storageEntityContainerMapping
StorageEntityContainerMapping
StorageMappingItemCollection
StorageModelBuildProvider
storageSchemaNode
store
storeAssociation
StoreAssociationEndMemberToModelAssociationEndMember
storeAssociationSet
storeAssociationSetEnd
StoreAssociationSetEndToModelAssociationSetEnd
StoreAssociationSetToModelAssociationSet
storeAssociationType
StoreAssociationTypeToModelAssociationType
storeCollection
storeConstraint
storeContainer
StoreEdmPropertyToModelEdmProperty
storeEnd
storeEndMember
storeEntityContainer
StoreEntityContainerName
StoreEntitySet
StoreEntitySetToModelEntitySet
storeEntityType
StoreEntityTypeToModelEntityType
storeFunction
StoreFunctionName
StoreFunctionToFunctionImport
StoreGeneratedPattern
StoreGeneratedPatternFacet
storehouse
storehouses
StoreItemCollection
storeItemCollection
storeKeyProperty
storeName
storeNamespaceName
storeParameter
storeProperty
StoreSchemaDefinition
StoreSchemaDefinitionVersion3
StoreSchemaMapping
StoreSchemaMappingVersion3
storeTableName
storeTypeUsage
strata
stratum
stream
StreamingContext
streamingContext
StreamReader
StreamWriter
streetwise
streetwises
string BaseTypeName(EntityType entity, CodeGenerationTools code)
string CastToEnumType(TypeUsage typeUsage, CodeGenerationTools code)
string CastToUnderlyingType(TypeUsage typeUsage, CodeGenerationTools code)
string ChangedMethodName(EdmMember member)
string ChangingMethodName(EdmMember member)
string DefaultSummaryComment{ get; set; }
string EndMultiplicity(AssociationType association, int index, CodeGenerationTools code)
string EndName(AssociationType association, int index)
string EscapeEndTypeName(AssociationType association, int index, CodeGenerationTools code)
string GetNamespaceName(CodeGenerationTools code)
string GetObjectNamespace(string csdlNamespaceName)
string InitializedTrackingField(EdmProperty property, CodeGenerationTools code)
string LongDescriptionCommentElement(MetadataItem item, int indentLevel)
string MultiSchemaEscape(EdmType type, CodeGenerationTools code)
string MultiSchemaEscape(StructuralType type, CodeGenerationTools code)
string MultiSchemaEscape(TypeUsage usage, CodeGenerationTools code)
string namespaceName = GetNamespaceName(code);
string NewModifier(EdmFunction edmFunction)
string NewModifier(EdmProperty property)
string NewModifier(EntitySet set)
string NewModifier(NavigationProperty navigationProperty)
string NewModifier(Type type, string memberName)
string OptionalNullableParameterForSetValidValue(EdmMember member, CodeGenerationTools code)
string ParameterComments(IEnumerable<Tuple<string, string>> parameters, int indentLevel)
string PrefixLinesOfMultilineComment(string prefix, string comment)
string SummaryComment(MetadataItem item)
string XmlEntityize(string text)
StringBidirectionalDictionary
stringBuilder
StringCollection
StringComparison
StringFileInfo
StringHashBuilder
stringToAppend
StringUtil
stringWriter
StringWriter
StrongTyping
StrongTypingException
StructuralObject
structuralType
StructuralType
StructuredProperty
StructuredType
StructuredTypeEmitter
studio
studios
styli
stylo
stylos
stylus
Substring
succubi
succubus
suffixes
suffixWord
suitcase
suitcases
summary
summaryComments
SummaryEndElement
SummaryStartElement
summerhouse
summerhouses
supervise
supervises
SuppressFinalize
surprise
surprises
swine
symbioses
symbiosis
SynchronizedList
synopses
synopsis
syntheses
synthesis
System
System.CodeDom
System.CodeDom.Compiler
System.CodeDom.Compiler.GeneratedCode
System.Collections
System.Collections.Generic
System.Collections.Generic.IEnumerable<System.CodeDom.CodeMethodInvokeExpression>.GetEnumerator
System.Collections.Generic.IEnumerable<System.Data.Metadata.Edm.EdmSchemaError>.GetEnumerator
System.Collections.Generic.IEnumerable<System.Data.Metadata.Edm.GlobalItem>.GetEnumerator
System.Collections.Generic.IEnumerable<System.String>.GetEnumerator
System.Collections.Generic.IEnumerator<System.CodeDom.CodeMethodInvokeExpression>.Current
System.Collections.Generic.IEnumerator<System.CodeDom.CodeMethodInvokeExpression>.get_Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.EdmSchemaError>.Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.EdmSchemaError>.get_Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.GlobalItem>.Current
System.Collections.Generic.IEnumerator<System.Data.Metadata.Edm.GlobalItem>.get_Current
System.Collections.Generic.IEnumerator<System.String>.Current
System.Collections.Generic.IEnumerator<System.String>.get_Current
System.Collections.IEnumerable.GetEnumerator
System.Collections.IEnumerator.Current
System.Collections.IEnumerator.get_Current
System.Collections.IEnumerator.Reset
System.Collections.ObjectModel
System.Collections.Specialized
System.ComponentModel
System.ComponentModel.DesignerSerializationVisibility
System.Core
System.Data
System.Data.Common
System.Data.Common.CommandTrees
System.Data.Common.CommandTrees.ExpressionBuilder
System.Data.Common.Utils
System.Data.DataSetExtensions
System.Data.Entity
System.Data.Entity.Design
System.Data.Entity.Design.AspNet
System.Data.Entity.Design.Common
System.Data.Entity.Design.dll
System.Data.Entity.Design.EntityClassGenerator
System.Data.Entity.Design.pdb
System.Data.Entity.Design.PluralizationServices
System.Data.Entity.Design.resources
System.Data.Entity.Design.SsdlGenerator
System.Data.EntityClient
System.Data.EntityClient.
System.Data.EntityModel
System.Data.EntityModel.Emitters
System.Data.EntityModel.SchemaObjectModel
System.Data.Mapping
System.Data.Mapping.EntityViewContainer
System.Data.Mapping.EntityViewGenerationAttribute
System.Data.Metadata.Edm
System.Data.Metadata.Edm.
System.Data.Metadata.Edm.MetadataWorkspace
System.Data.Objects
System.Data.Objects.
System.Data.Objects.DataClasses
System.Data.Objects.DataClasses.
System.Data.Objects.DataClasses.EdmSchemaAttribute
System.Data.Objects.ELinq
System.Data.SqlClient
System.Diagnostics
System.Globalization
System.IDisposable.Dispose
System.IO
System.Linq
System.Reflection
System.Resources
System.Runtime.CompilerServices
System.Runtime.InteropServices
System.Runtime.Serialization
System.Runtime.Serialization.DataContractAttribute
System.Runtime.Serialization.DataMemberAttribute
System.Runtime.Serialization.KnownTypeAttribute
System.Runtime.Versioning
System.Security
System.Security.Cryptography
System.Serializable
System.Text
System.Text.RegularExpressions
System.Threading
System.Web
System.Web.Compilation
System.Web.Hosting
System.Xml
System.Xml.Linq
System.Xml.Serialization
System.Xml.Serialization.SoapElement
System.Xml.Serialization.XmlElement
SZArrayHelper
SZGenericArrayEnumerator`1
T5fgr|
Table
TableDetails
TableDetailsCollection
TableDetailsRow
tableDetailsRows
tableKey
TableName
tableName
TableName
TableReferencedByAssociationWasNotFound
TableReferencedByTvfWasNotFound
Tables
Target
target
targetEntityFrameworkVersion
TargetEntityFrameworkVersionToNewForEntityClassGenerator
targetFrameworkVersion
TargetInvocationException
targetLocation
targetPath
targetRelationshipEnd
TargetVersionNotSupported
TargetVersionSchemaVersionMismatch
tease
teases
teeth
TempFileCollection
tempi
Template_CaseInsensitiveEntitySetConflict
Template_CaseInsensitiveMemberConflict
Template_CaseInsensitiveTypeConflict
Template_CommentFactoryMethodParam
Template_CommentNoDocumentation
Template_ConflictingGeneratedNavPropName
Template_ContextCommonCtorComment
Template_ContextDefaultCtorComment
Template_CurrentlyRunningTemplate
Template_DuplicateTopLevelType
Template_FactoryMethodComment
Template_FactoryMethodNameConflict
Template_GenCommentAddToMethodCs
Template_GenCommentAddToMethodVb
Template_GeneratedCodeCommentLine1
Template_GeneratedCodeCommentLine2
Template_GeneratedCodeCommentLine3
Template_RegionAddToMethods
Template_RegionComplexProperties
Template_RegionComplexTypes
Template_RegionConstructors
Template_RegionContexts
Template_RegionEntities
Template_RegionEnumTypes
Template_RegionFactoryMethod
Template_RegionFunctionImports
Template_RegionNavigationProperties
Template_RegionObjectSetProperties
Template_RegionPartialMethods
Template_RegionPrimitiveProperties
Template_RegionRelationships
Template_RegionSimpleProperties
Template_ReplaceVsItemTemplateToken
Template_UnsupportedSchema
TemplateCodeGenerators.CSharpCodeGenTemplate
TemplateCodeGenerators.CSharpCodeGenTemplate.cs
TemplateCodeGenerators.CSharpCodeGenTemplateV5.0.cs
TemplateCodeGenerators.CSharpCodeGenTemplateV50
TemplateCodeGenerators.VBCodeGenTemplate
TemplateCodeGenerators.VBCodeGenTemplate.vb
TemplateCodeGenerators.VBCodeGenTemplateV5.0.vb
TemplateCodeGenerators.VBCodeGenTemplateV50
tempo
tempSchemaPath
TerminalErrorException
TextReader
textWriter
TFirst
The {0} '{1}' has the same name as the {2} '{1}'. Duplicate names are not allowed. You must change the name of either the {0} or the {2}.
The association between '{0}' and '{1}' will not be created because the key column '{2}' was not found to be part of the table definition (see previous warnings).
The column '{0}' on the table/view '{1}' was excluded, and is a key column.  The remaining key(s) were used and table/view has been created as read-only.
The column '{0}' on the table/view '{1}' was excluded, and is a key column.  The table/view has been excluded.  Please fix the entity in the schema file, and uncomment.
The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
The data type '{0}' is currently not supported for the target .NET Framework version; the column '{2}' in table '{1}' was excluded.
The data type '{0}' is not supported for the target .NET Framework version. The column '{2}' in the table '{1}' was excluded from the model. To use the data type '{0}', target the .NET Framework 4.5 or higher.
The default target Entity Framework version requires the edmx schema version {0} or lower. The specified schema is version {1}. To avoid this warning specify the target Entity Framework version explicitly. You can do this by using the EdmGen.exe command-line tool with the targetVersion option, or by including the targetEntityFrameworkVersion parameter when calling the GenerateCode method.
The EntityClassGenerator is only for use with EntityFrameworkVersions.Version1 and the schemas provided have newer versions of the Model schema.  Consider using EntityCodeGenerator or a template.
The EntityCodeGenerator is not for targeting EntityFrameworkVersions.Version1.  Consider using EntityClassGenerator or a template.
The EntitySet '{0}.{1}' differs only in case from an existing EntitySet, and is not compatible with the current language option.
The EntitySetMapping in EntityContainerMapping for entity container '{0}' contains a query view. Query views are not allowed in compile time view generation, so the view for this EntityContainerMapping will not be generated.
The facet '{0}' with a value '{1}' is outside the range {2}-{3} specified by the facet description.  The column '{4}' in the table '{5}' was excluded.
The function '{0}' has a parameter '{1}' at parameter index {2} that has a data type '{3}' which is currently not supported for the target .NET Framework version. The function was excluded.
The function '{0}' has a parameter '{1}' that has a parameter direction value '{2}', which is not valid. Please use 'IN', 'OUT', or 'INOUT'.
The function '{0}' has a return data type '{1}' that is currently not supported for the target .NET Framework version. The function was excluded.
The function '{0}' has the parameter '{1}' at the parameter index {2} that has the data type '{3}' which is not supported for the target .NET Framework version. The function was excluded from the model. To use the data type '{0}', target the .NET Framework 4.5 or higher.
The function '{0}' returns the data type '{1}' that is not supported for the target .NET Framework version. The function was excluded from the model. To use the data type '{0}', target the .NET Framework 4.5 or higher.
The input file appears to be using a schema version not supported by this template. This may lead to compile errors. Please use 'Add New Generated Item' to add an updated template.
The NavigationProperty '{0}' on the type '{1}' is the source of a generated property '{2}' which conflicts with a member of the same name.
The relationship '{0}' has columns that are not part of the key of the table on the primary side of the relationship. The relationship was excluded.
The relationship '{0}' uses the set of foreign keys '{1}' that are partially contained in the set of primary keys '{2}' of the table '{3}'.  The set of foreign keys must be fully contained in the set of primary keys, or fully not contained in the set of primary keys to be mapped to a model.
The return table of the function '{0}' is not defined. Either all columns have been excluded or the table has no columns. The function has been excluded. To use the function, you will need to review your schema, specify the return type of the function, and uncomment it.
The store provider factory type '{0}' does not implement the IServiceProvider interface. Use a store provider that implements this interface.
The table/view '{0}' does not have a primary key defined and no valid primary key could be inferred. This table/view has been excluded. To use the entity, you will need to review your schema, add the correct keys, and uncomment it.
The table/view '{0}' does not have a primary key defined. The key has been inferred and the definition was created as a read-only table/view.
The table/view '{0}' has column '{1}' defined as a primary key, but the column type '{2}' is not a valid type for a key in the EDM. An attempt will be made to define the table/view as a read-only table/view.
The Type '{0}' is not unique.  This may be caused by the types only differing in case which is not compatible with the current language option.
The type name '{0}' is used for both an EntityContainer and a type.  Duplicates are not allowed, please change one of the names.
their
theirs
ThenBy
these
theses
thesis
this.Write("            ");
this.Write("            {\r\n");
this.Write("            }\r\n");
this.Write("            if (!StructuralObject.BinaryEquals(");
this.Write("            if (");
this.Write("            return ");
this.Write("            return StructuralObject.GetValidValue(");
this.Write("        ");
this.Write("        }\r\n        ");
this.Write("        }\r\n    }\r\n    private ");
this.Write("        ObjectParameter ");
this.Write("        return ");
this.Write("        this.ContextOptions.LazyLoadingEnabled = ");
this.Write(" != value)\r\n");
this.Write(" ");
this.Write(" = ");
this.Write(" = GetValidValue(");
this.Write(" = new ");
this.Write(" = new ObjectParameter(\"");
this.Write(" = SetValidValue(");
this.Write(" = StructuralObject.SetValidValue(value");
this.Write(" = StructuralObject.VerifyComplexObjectIsNotNull(");
this.Write(" = true;\r\n            ReportPropertyChanged(\"");
this.Write(" = true;\r\n            return ");
this.Write(" value);\r\n    partial void ");
this.Write("(");
this.Write("();\r\n        }\r\n    }\r\n    private ");
this.Write("();\r\n");
this.Write("(value);\r\n            ReportPropertyChanging(\"");
this.Write("));\r\n        }\r\n\r\n");
this.Write(");\r\n            ");
this.Write(");\r\n            ReportPropertyChanged(\"");
this.Write(");\r\n        }\r\n        else\r\n        {\r\n            ");
this.Write(");\r\n");
this.Write(")\r\n        {\r\n            ");
this.Write(")\r\n    {\r\n        ");
this.Write(")]\r\n    [DataMemberAttribute()]\r\n    ");
this.Write(", \"");
this.Write(", IsNullable=");
this.Write(", value))\r\n");
this.Write(", value, \"");
this.Write(".");
this.Write(";\r\n        }\r\n        ");
this.Write(";\r\n        if (");
this.Write(";\r\n    }\r\n");
this.Write(";\r\n    partial void ");
this.Write(";\r\n    private bool ");
this.Write(";\r\n");
this.Write("\");\r\n            ");
this.Write("\");\r\n            ReportPropertyChanged(\"");
this.Write("\");\r\n");
this.Write("\", ");
this.Write("\", false, ");
this.Write("\", typeof(");
this.Write("\r\n    /// </summary>");
this.Write("\r\n    /// <summary>\r\n    /// ");
this.Write("\r\n    [EdmComplexPropertyAttribute()]\r\n    [DesignerSerializationVisibility(Desig" +
this.Write("\r\n    [EdmScalarPropertyAttribute(EntityKeyProperty=");
this.Write("\r\n    {\r\n        ");
this.Write("\r\n    public static ");
this.Write("get\r\n        {\r\n            ");
this.Write("get\r\n        {\r\n");
this.Write("set\r\n        {\r\n            ");
this.Write("set\r\n        {\r\n");
this.Write("StructuralObject.SetValidValue(");
this.Write("value");
this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(complexProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(primitiveProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(Accessibility.ForProperty(simpleProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(CastToEnumType(simpleProperty.TypeUsage, code)));
this.Write(this.ToStringHelper.ToStringWithCulture(CastToUnderlyingType(simpleProperty.TypeUsage, code)));
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(complexProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(primitiveProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(ChangedMethodName(simpleProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(complexProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(primitiveProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(ChangingMethodName(simpleProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(primitiveProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsKey(simpleProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(primitiveProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.CreateLiteral(ef.IsNullable(simpleProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(complexProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(parameter.Source)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(primitiveProperty.TypeUsage)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(simpleProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.Escape(structuralType)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(complexProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(primitiveProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.FieldName(simpleProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(complexProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(primitiveProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForGetter(simpleProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((primitiveProperty)))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter((simpleProperty)))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(Accessibility.ForSetter(complexProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(complexProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(primitiveProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.SpaceAfter(NewModifier(simpleProperty))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(primitiveProperty.DefaultValue))));
this.Write(this.ToStringHelper.ToStringWithCulture(code.StringBefore(" = ", code.CreateLiteral(simpleProperty.DefaultValue))));
this.Write(this.ToStringHelper.ToStringWithCulture(complexProperty.Name));
this.Write(this.ToStringHelper.ToStringWithCulture(InitializedTrackingField(complexProperty, code)));
this.Write(this.ToStringHelper.ToStringWithCulture(instanceName));
this.Write(this.ToStringHelper.ToStringWithCulture(isLazyLoading.ToString().ToLowerInvariant()));
this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(complexProperty, 1)));
this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(primitiveProperty, 1)));
this.Write(this.ToStringHelper.ToStringWithCulture(LongDescriptionCommentElement(simpleProperty, 1)));
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(complexProperty.TypeUsage, code)));
this.Write(this.ToStringHelper.ToStringWithCulture(MultiSchemaEscape(simpleProperty.TypeUsage, code)));
this.Write(this.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(primitiveProperty, code)));
this.Write(this.ToStringHelper.ToStringWithCulture(OptionalNullableParameterForSetValidValue(simpleProperty, code)));
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.EsqlParameterName));
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.FunctionParameterName));
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"));
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.LocalVariableName));
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ParameterName));
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.RawClrTypeName));
this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Source.Name));
this.Write(this.ToStringHelper.ToStringWithCulture(ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)));
this.Write(this.ToStringHelper.ToStringWithCulture(primitiveProperty.Name));
this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_FactoryMethodComment"), structuralType.Name)));
this.Write(this.ToStringHelper.ToStringWithCulture(String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_FactoryMethodComment"), structuralType.Name)));
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", parameters.Select(p => p.ParameterType + " " + p.ParameterName).ToArray())));
this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(complexProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(primitiveProperty)));
this.Write(this.ToStringHelper.ToStringWithCulture(SummaryComment(simpleProperty)));
those
ThreadAbortException
ThreadAbortType
thromboses
thrombosis
ThrowOnAnyNonWarningErrors
ThrowOnError
ToAppRelative
ToArray
tobacco
ToCharArray
ToDictionary
toEnd
ToList
ToLower
ToLowerInvariant
tooth
ToPropertyHasNonNullableColumn
ToRole
torus
ToSeparatedStringPrivate
toSort
ToString
toType
ToUpperInvariant
toxoplasmoses
toxoplasmosis
Tp*V!
trace
traces
traffic
TransformText
TranslateFacetNameToAttributeName
Translation
transpose
transposes
trapezia
trapezium
trauma
traumata
trices
trilby
trilbys
TrimEnd
trout
TryAddNameToCache
TryGetAdjustedName
TryGetEdmxVersion
TryGetEndEntities
TryGetEntity
TryGetFunctionImportMapping
TryGetItem
TryGetObjectNamespace
TryGetParameterMode
TryGetPrimitiveTypeKind
TryGetReservedName
TryGetSchemaVersion
TryGetStorePrimitiveType
TryGetTvfReturnType
TryGetValue
TryInflectOnSuffixInWord
TryParse
TrySplitExtendedMetadataPropertyName
TSecond
TThe modelEntityContainerName parameter '{0}' contains characters that are not valid.
tuberculoses
tuberculosis
Tuple
Tuple`2
turquoise
turquoises
tvfReturnType
TypeAccess
typeAccess
TypeComments
typeDecl
typeDeclaration
TypeGeneratedEventArgs
TypeGeneratedEventHandler
TypeHelpers
TypeName
typeName
typeParameter
types
TypeSystem
typeUsage
TypeValueTables
TypeValueViews
u,X)p
U0S0Q
ultimata
ultimatum
umbilici
umbilicus
Unable to generate function import parameter name for the parameter '{0}' of the store function '{1}'. The store function will be ignored and the function import will not be generated.
UnableToGenerateForeignKeyPropertiesForV1
UnableToGenerateFunctionImportParameterName
UnauthorizedAccessException
UniqueIdentifierService
uniqueIdentifierService
universe
universes
Unknown
UnknownError
UnmappedFunctionImport
unqualifiedName
UnsupportedDataType
UnsupportedDataTypeForTarget
UnsupportedDataTypeUnknownType
UnsupportedDbRelationship
UnsupportedForeignKeyPattern
UnsupportedForeinKeyPattern
UnsupportedFunctionParameterDataType
UnsupportedFunctionParameterDataTypeForTarget
UnsupportedFunctionReturnDataType
UnsupportedFunctionReturnDataTypeForTarget
UnsupportedLocaleForPluralizationServices
UnsupportedModelGenerationConcept
UnsupportedQueryViewInEntityContainerMapping
UnsupportedType
UpdateMemberFieldsAfterDeserialization
UpdateObjectNamespaceMap(namespaceName)
UpdateObjectNamespaceMap(namespaceName);
urn:schemas-microsoft-com:windows:storage:mapping:CS
usage
usedEndMemberNames
usedEndNames
UsedEntityContainerItemNames
usedFallback
UsedGlobalModelTypeNames
usedMemberNames
usedNames
usedParameterNames
usedPropertyNames
UsedTypeNames
UserSettings userSettings =
UseStrongSpatialTypes
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System;
uteri
uterus
V=System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
v1Namespaces
v2Namespaces
v3Namespaces
v4.0.30319
vacua
vacuum
ValidateActualVersionAgainstTarget
ValidateFunctionView
ValidateNamespace
ValidVersions
Value
value
value__
ValueCollection
ValuePropertyName
valve
valves
VarFileInfo
vases
VBCodeProvider
VBMarkMethodAsPartial
VBMarkOverrideMethodAsSealed
VBMarkPropertyGetAsInternal
VBMarkPropertyGetAsPrivate
VBMarkPropertyGetAsProtected
VBMarkPropertyGetAsPublic
VBMarkPropertySetAsInternal
VBMarkPropertySetAsPrivate
VBMarkPropertySetAsProtected
VBMarkPropertySetAsPublic
vbpi&
VBTemplateCodeGenResourceV2
VBTemplateCodeGenResourceV3
VBTemplateCodeGenTypeName
VBTemplateCodeGenV3TypeName
Vcpi&
velum
venison
VerifyComplexObjectIsNotNull
VerifyComplexObjectIsNotNullName
VerifyEntityTypeAndSetAccessibilityCompatability
VerifyGetterAndSetterAccessibilityCompatability
VerifyLanguageCaseSensitiveCompatibilityForEntitySet
VerifyLanguageCaseSensitiveCompatibilityForProperty
VerifyLanguageCaseSensitiveCompatibilityForType
Version1
Version2
vertebra
vertebrae
vertex
vertices
ViewCount
ViewCountPropertyName
ViewDetailAlias
ViewDetailSql
ViewGenerationCustomAttributeName
ViewGenerationTypeNamePrefix
Views
ViewsForBaseEntitySets
viewStorageTypeName
viewString
viewText
virtualPath
VirtualPathProvider
VirtualPathUtility
viscera
viscus
Vk&2}
void ApplyUserSettings(UserSettings userSettings)
void UpdateObjectNamespaceMap(string objectNamespace)
vortex
vortices
VS_VERSION_INFO
w(it}
Wapi&
warehouse
warehouses
Washington1
watercourse
watercourses
whatever
Where
WHERE
Where
which
whichever
whiting
whoever
whomever
whose
whoses
WHYHgH
wildebeest
wives
workhorse
workhorses
workhouse
workhouses
workspace
WqVNHE
WrapNonExceptionThrows
WriteAssociationSetElement
WriteAssociationSetEndElement
WriteAssociationSetMappingElement
WriteAssociationTypeElement
WriteAttributeString
WriteByte
WriteComment
WriteComplexTypeElement
WriteConditionElement
WriteEndElement
WriteEndPropertyElement
WriteEntityContainerElement
WriteEntityContainerMappingElement
WriteEntitySetElement
WriteEntitySetMappingElement
WriteEntityTypeElement
WriteEntityTypeMappingElement
WriteErrorsComment
WriteExtendedPropertyAttributes
WriteFunctionElement
WriteFunctionImportMappingElement
WriteFunctionParameterElement
WriteLine
WriteMappingFragmentElement
WriteMappingStartElement
WriteNavigationPropertyElement
WriteNode
WriteOperationActionElement
WritePropertyElement
WritePropertyTypeFacets
writer
WriteReferentialConstraintElement
WriteReferentialConstraintRoleElement
WriteRelationshipEndElement
WriteRowTypeElement
WriteScalarPropertyElement
WriteSchemaElement
WriteStartElement
WriteStoreSchema
WriteString
WriteTo
WriteTypeElement
WriteXml
wThe target Entity Framework version requires the edmx schema version {0} or lower. The specified schema is version {1}.
X%Y'Z'['\,],^,_,`,a.b1c1d1e1f1g1h1i3j3k3l6m6n9o:p;q;r;s;t;uBvBwDxDyEzK{c|c}x
XElement
XmlAttribute
XmlAttributeCollection
XmlDocument
xmlElement
XmlElement
XmlException
XmlIgnoreAttribute
XmlNamedNodeMap
XmlNamespaceManager
xmlNamespaceName
xmlNamespaceUri
XmlNameTable
XmlNode
XmlNodeList
XmlNodeType
xmlns
xmlPrefixToNamespaces
XmlReader
xmlReaders
XmlSchemaResource
XmlWriter
XmlWriterSettings
XSystem.Data.Entity.Design.EntityViewGenerator+<GetViewStringsAppendToStringBuilder>d__29
yours
yourself
z.9Wv
zInitializes a new {0} object using the connection string found in the '{1}' section of the application configuration file.
zThe Member '{0}.{1}' differs only in case from an existing Member, and is not compatible with the current language option.
zThe property '{0}' differs only in case from an existing property, and is not compatible with the current language option.
