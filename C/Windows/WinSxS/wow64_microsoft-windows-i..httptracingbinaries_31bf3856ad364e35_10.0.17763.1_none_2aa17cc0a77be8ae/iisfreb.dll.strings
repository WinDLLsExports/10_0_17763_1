     
        
         
          
            
              
                
                 
                    
                      
                        
                                
                                                    <xsl:with-param name="Duration" select="$Duration"/>
                                                    <xsl:with-param name="SectionName" select="'section_modtrace'"/>
                                                </xsl:call-template>
                                                <xsl:call-template name="EventName">
                                                <xsl:value-of select="./ev:EventData/ev:Data[@Name='Uri']"/>
                                                <xsl:with-param name="Duration" select="$Duration"/>
                                                <xsl:with-param name="SectionName" select="'section_aspx'"/>
                                                allspans[ci].innerHTML = '&nbsp;&nbsp;&nbsp;';
                                            </td>
                                            </xsl:call-template>
                                            <td>
                                            <td><a><xsl:attribute name="href">javascript:findInDetail('<xsl:value-of select="position()"/>');</xsl:attribute> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'view trace'"/></xsl:call-template></a></td>
                                            <td><xsl:value-of select="position()"/>.</td>
                                            <xsl:attribute name="id">section_modtrace_<xsl:value-of select="position()"/></xsl:attribute>
                                            <xsl:call-template name="EventName">
                                            <xsl:value-of select="./ev:EventData/ev:Data[@Name='Uri']"/>
                                            <xsl:with-param name="Duration" select="$Duration"/>
                                            <xsl:with-param name="SectionName" select="'section_auth'"/>
                                            span = defaultCell.firstChild.childNodes[ci];
                                            span.innerHTML = '&darr;';
                                            span.setAttribute('sortdir','down');
                                        //initTable(thisTbl.id);
                                        {
                                        }
                                        </td>
                                        </tr>
                                        </xsl:call-template>
                                        <td>
                                        <td><a><xsl:attribute name="href">javascript:findInDetail('<xsl:value-of select="position()"/>');</xsl:attribute> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'view trace'"/></xsl:call-template></a></td>
                                        <td><xsl:value-of select="position()"/>.</td>
                                        <tr>
                                        <xsl:attribute name="id">section_aspx_<xsl:value-of select="position()"/></xsl:attribute>
                                        <xsl:call-template name="EventName">
                                        <xsl:variable name="Duration"><xsl:apply-templates select="." mode="CalculateDuration"/></xsl:variable>
                                        <xsl:with-param name="DetailsDisplayMode" select="hidden"/>
                                        <xsl:with-param name="Duration" select="$Duration"/>
                                        <xsl:with-param name="Position" select="position()"/>
                                        <xsl:with-param name="SectionName" select="'section_filters'"/>
                                        <xsl:with-param name="SectionName" select="'section_notifications'"/>
                                        if (defaultCell.firstChild.childNodes[ci].tagName && defaultCell.firstChild.childNodes[ci].tagName.toLowerCase() == 'span') 
                                        if (getParent(allspans[ci],"table") == getParent(lnk,"table")) { // in the same table as us?
                                        ts_makeSortable(thisTbl);
                                      <xsl:with-param name="TextValue" select="'CollapseAll'"/>
                                     <xsl:value-of select="$EntryFriendlyValue"/>
                                     <xsl:value-of select="$EntryValue"/>
                                     <xsl:with-param name="TextValue" select="'ExpandAll'"/>
                                    // Mark default sorted column in table with down arrow symbol
                                    {
                                    }
                                    <!--<xsl:value-of select="./ev:EventData/ev:Data[@Name='Notification']/@Description"/>-->
                                    </td>
                                    </tr>
                                    </xsl:apply-templates>
                                    </xsl:call-template>
                                    </xsl:call-template>', '
                                    </xsl:call-template>', 'section_auth');
                                    </xsl:if>
                                    <td>
                                    <td><a><xsl:attribute name="href">javascript:findInDetail('<xsl:value-of select="position()"/>');</xsl:attribute> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'view trace'"/></xsl:call-template></a></td>
                                    <td><xsl:value-of select="position()"/>.</td>
                                    <tr>
                                    <xsl:apply-templates select="./following-sibling::*[1]" mode="EventName">
                                    <xsl:attribute name="class">alt</xsl:attribute>
                                    <xsl:attribute name="id">section_auth_<xsl:value-of select="position()"/></xsl:attribute>
                                    <xsl:call-template name="EventName">
                                    <xsl:call-template name="Text">
                                    <xsl:if test="starts-with(./ev:RenderingInfo/ev:Opcode, 'AspNetModuleDiag')=1">
                                    <xsl:value-of select="$Duration"/>
                                    <xsl:value-of select="$EntryName"/>
                                    <xsl:value-of select="./ev:EventData/ev:Data[@Name='FilterName']"/>
                                    <xsl:value-of select="./ev:EventData/ev:Data[@Name='ModuleName']"/>
                                    <xsl:value-of select="./ev:RenderingInfo/freb:Description[@Data='Notification']"/>
                                    <xsl:variable name="Duration"><xsl:apply-templates select="." mode="CalculateDuration"/></xsl:variable>
                                    cell.innerHTML = '<a href="#" class="sortheader" '+ 
                                    defaultCell = cell;
                                    defaultIndex = i;
                                    for (var ci=0;ci<defaultCell.firstChild.childNodes.length;ci++) 
                                    'onclick="ts_resortTable(this, '+i+');return false;" alt="Sort By This Column">' + 
                                    txt+'<span class="sortarrow" sortdir="down">&nbsp;</span></a>';
                                    txt+'<span class="sortarrow">&nbsp;</span></a>';
                                    var span;
                                   </xsl:if>
                                   <xsl:if test="$EntryFriendlyValue" >
                                   <xsl:if test="not($EntryFriendlyValue)">
                                 </td>
                                 <td class="event-data">
                                /*cell.innerHTML = '<a href="#" class="sortheader" '+ 
                                // BDG: Added default sort direction: desc class for descending.
                                {
                                }
                                </td>
                                </th>
                                </tr>
                                </xsl:for-each>
                                </xsl:if>
                                <td class="col-duration">
                                <td>
                                <td><a><xsl:attribute name="href">javascript:findInDetail('<xsl:value-of select="position()"/>');</xsl:attribute> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'view trace'"/></xsl:call-template></a></td>
                                <td><xsl:value-of select="position()"/>.</td>
                                <th>
                                <tr>
                                <tr><td colspan="4" align="center"><span class="no-data">No Data Exists For The Requested Report</span></td></tr>
                                <xsl:attribute name="id">section_filters_<xsl:value-of select="position()"/></xsl:attribute>
                                <xsl:attribute name="id">section_notifications_<xsl:value-of select="position()"/></xsl:attribute>
                                <xsl:for-each select="./failedRequest/ev:Event">
                                <xsl:if test="./ev:RenderingInfo/ev:Opcode = 'AspNetPageTraceWarnEvent' or ./ev:RenderingInfo/ev:Opcode = 'AspNetPageTraceWriteEvent'">
                                <xsl:if test="position() mod 2 = 1">
                                <xsl:variable name="Duration"><xsl:apply-templates select="." mode="CalculateDuration"/></xsl:variable>
                                <xsl:when test="./ev:System/ev:Level = 1"><span class="severity-critical"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CriticalError'"/></xsl:call-template></span></xsl:when>
                                <xsl:when test="./ev:System/ev:Level = 2"><span class="severity-error"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Error'"/></xsl:call-template></span></xsl:when>
                                <xsl:when test="./ev:System/ev:Level = 3"><span class="severity-warning"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Warning'"/></xsl:call-template></span></xsl:when>
                                <xsl:with-param name="DisplaySeverity" select="'0'"/>
                                <xsl:with-param name="Duration" select="$Duration"/>
                                <xsl:with-param name="SectionName" select="'section_errors'"/>
                                ARROW = '&darr;';
                                ARROW = '&uarr;';
                                break;
                                dt1 = aa.substr(6,4)+aa.substr(3,2)+aa.substr(0,2);
                                dt1 = yr+aa.substr(3,2)+aa.substr(0,2);
                                dt2 = bb.substr(6,4)+bb.substr(3,2)+bb.substr(0,2);
                                dt2 = yr+bb.substr(3,2)+bb.substr(0,2);
                                else
                                if ( (' '+cell.className+' ').indexOf("defaultsort") != -1 )
                                if ( (' '+cell.className+' ').indexOf("desc") != -1 )
                                if (!r[1]) r[1] = "";
                                if (((' '+thisTbl.className+' ').indexOf("sortable") != -1) && (thisTbl.id)) {
                                if (allspans[ci].className == 'sortarrow') {
                                if (lnk.childNodes[ci].tagName && lnk.childNodes[ci].tagName.toLowerCase() == 'span') span = lnk.childNodes[ci];
                                if (o.id) Fat.fade_element(o.id,null,null,"#"+r[1]);
                                if (parseInt(yr) < 50) { yr = '20'+yr; } else { yr = '19'+yr; }
                                newRows.reverse();
                                newRows[i].className = ""
                                newRows[i].className = "alt";
                                'onclick="ts_resortTable(this, '+i+');return false;" alt="Sort By This Column">' + 
                                span.setAttribute('sortdir','down');
                                span.setAttribute('sortdir','up');
                                str += cs[i].nodeValue;
                                str += ts_getInnerText(cs[i]);
                                thisTbl = tbls[ti];
                                txt+'<span class="sortarrow">&nbsp;</span></a>';*/
                                var cell = firstRow.cells[i];
                                var firstRow = table.rows[0];
                                var txt = ts_getInnerText(cell);
                                yr = aa.substr(6,2);
                                yr = bb.substr(6,2);
                               </tr>
                             </a></li>
                            {
                            }
                            </tr>
                            </xsl:call-template>
                            </xsl:choose>
                            </xsl:for-each>
                            </xsl:if>
                            </xsl:otherwise>
                            </xsl:when>
                            <tr>
                            <tr><td colspan="4" align="center"><span class="no-data"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No Data Exists'"/></xsl:call-template></span></td></tr>
                            <xsl:call-template name="EventName">
                            <xsl:choose>
                            <xsl:for-each select="./failedRequest/ev:Event">
                            <xsl:if test="starts-with(./ev:RenderingInfo/ev:Opcode, 'AUTH_')=1 or starts-with(./ev:RenderingInfo/ev:Opcode, 'SECURITY_')=1 or starts-with(./ev:RenderingInfo/ev:Opcode, 'FILTER_AUTHENTICATION_')=1 or starts-with(./ev:RenderingInfo/ev:Opcode, 'FILTER_AUTH_')=1 or starts-with(./ev:RenderingInfo/ev:Opcode, 'FILTER_ACCESS_DENIED_')=1 or starts-with(./ev:RenderingInfo/ev:Opcode, 'RoleManager')=1">
                            <xsl:otherwise>
                            <xsl:value-of select="./ev:EventData/ev:Data[@Name='ModuleName']"/>
                            <xsl:variable name="Duration"><xsl:apply-templates select="." mode="CalculateDuration"/></xsl:variable>
                            <xsl:when test="count(./failedRequest/ev:Event/ev:RenderingInfo[starts-with(ev:Opcode, 'AspNetModuleDiag')=1]) = 0">
                            b = Math.floor(bf * ((frames-frame)/frames) + bt * (frame/frames));
                            case 1: //ELEMENT_NODE
                            case 3:    //TEXT_NODE
                            currentTabElement.className = "";
                            currentViewElement.style.display = 'none';
                            delay = interval * frame; 
                            else
                            expandButton.innerHTML = "<span class='expand-collapse'>+</span>" + expandAllText;
                            expandButton.innerHTML = "<span class='expand-collapse'>-</span>" + collapseAllText;
                            frame++;
                            g = Math.floor(gf * ((frames-frame)/frames) + gt * (frame/frames));
                            h = this.make_hex(r,g,b);
                            if ( i % 2 == 0 )
                            if ((c != "" && c != "transparent") || o.tagName == "BODY") { break; }
                            if (o.currentStyle) c = o.currentStyle.backgroundColor;
                            if (r)
                            if (window.getComputedStyle) c = window.getComputedStyle(o,null).getPropertyValue("background-color");
                            o = o.parentNode;
                            r = Math.floor(rf * ((frames-frame)/frames) + rt * (frame/frames));
                            requestDetailsElement.style.display = 'block';
                            requestDetailsElement.style.display = 'none';
                            requestDetailsTab.className = "";
                            requestDetailsTab.className = "active";
                            requestSummary.style.display = 'block';
                            requestSummary.style.display = 'none';
                            return 1;
                            return -1;
                            setTimeout("Fat.set_bgcolor('"+id+"','"+h+"')", delay);
                            sortfn = ts_sort_date;
                            sortfn = ts_sort_numeric;
                            toggleDiv(indexElements[i].id, expand);
                            var c;
                            var o = a[i];
                            var r = /fade-?(\w{3,6})?/.exec(o.className);
                         <li><a href="javascript:setView('section_aspx', 'viewAsp');" id="viewAsp" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ASPPageTrace'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_auth', 'viewAuth');" id="viewAuth" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'AuthenticationAuthorization'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_compact', 'viewCompact');" id="viewCompact" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CompactView'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_detail', 'viewDetails');" id="requestDetails" class="parent-tab-highlight"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'RequestDetails'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_detail', 'viewDetails');" id="viewDetails" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CompleteRequestTrace'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_errors', 'viewErrors');" id="viewErrors" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'RequestSummary'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_fastcgi', 'viewfastcgi');" id="viewfastcgi" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'fastcgi'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_filters', 'viewModules');" id="viewModules" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'FilterNotifications'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_modtrace', 'viewModTrace');" id="viewModTrace" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CustomModuleTrace'"/></xsl:call-template></a></li>
                         <li><a href="javascript:setView('section_notifications', 'viewNotifications');" id="viewNotifications" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ModuleNotifications'"/></xsl:call-template><br />
                         <li><a href="javascript:setView('section_perf', 'viewPerf');" id="viewPerf" ><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'PerformanceView'"/></xsl:call-template></a></li>
                        //    ts_resortTable(defaultCell.firstChild, defaultIndex);
                        // BDG: Set the 'alt' class.
                        // Delete any other arrows there may be showing
                        // do sortbottom rows only
                        // don't do sortbottom rows
                        // Find all tables with class sortable and make them sortable
                        // get the span
                        // If sorting happens here, page load time goes up.
                        // ts_makeSortable gets called on page load, so don't sort tables here.
                        // We appendChild rows that already exist to the tbody, so it moves them rather than creating new ones
                        // We have a first row: assume it's the header, and make its contents clickable links
                        // Work out a type for the column
                        // y2k notes: two digit years less than 50 are treated as 20XX, greater than 50 are treated as 19XX
                        //alert("boo: " + window.document.getElementById('defaultsortme'));
                        //if ( defaultCell)
                        //if (isNaN(aa)) aa = 0;
                        //if (isNaN(bb)) bb = -1;
                        //toggleDiv("section_generalinformation", false);
                        //toggleDiv("section_generalinformation", true);
                        //ts_resortTable(window.document.getElementById('defaultsortme'), '0'), 
                        {
                        }
                        } else {
                        <!--display the value from the EventData/Data only if theer is no freb:Description available (that would be a friendlier rendering of information)-->
                        </td>
                        </xsl:choose>
                        </xsl:for-each>
                        </xsl:if>
                        </xsl:otherwise>
                        </xsl:when>
                        <div class="duration" ><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></div>
                        <div class="duration"><span class="duration-value"><xsl:value-of select="$Duration"/><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>ms</span></div>
                        <td>
                        <td><a><xsl:attribute name="href">javascript:findInDetail('<xsl:value-of select="position()"/>');</xsl:attribute> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'view trace'"/></xsl:call-template></a></td>
                        <td><xsl:value-of select="position()"/>.</td>
                        <th class="col-actions"><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></th>
                        <th class="col-duration" title="Time elapsed from the previous event"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Duration'"/></xsl:call-template> (ms)</th>
                        <th class="col-event"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Event'"/></xsl:call-template></th>
                        <th class="col-filter-module"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Filter Name'"/></xsl:call-template></th>
                        <th class="col-filter-module"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Module'"/></xsl:call-template></th>
                        <th class="col-filter-notification"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Notification'"/></xsl:call-template></th>
                        <th class="col-notification"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Event'"/></xsl:call-template></th>
                        <th class="col-uri"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Uri'"/></xsl:call-template></th>
                        <th class="defaultsort col-number"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No'"/></xsl:call-template></th>
                        <tr><td colspan="4"><span class="no-data"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No Data Exists'"/></xsl:call-template></span></td></tr>
                        <xsl:attribute name="id">section_errors_<xsl:value-of select="position()"/></xsl:attribute>
                        <xsl:choose>
                        <xsl:for-each select="./failedRequest/ev:Event">
                        <xsl:if test="count(./ev:EventData/ev:Data[@Name='FilterName']) &gt; 0 and ./following-sibling::*[1]/ev:System/ev:Level = 4 ">
                        <xsl:if test="count(./ev:EventData/ev:Data[@Name='ModuleName'])=1 and contains(./ev:RenderingInfo/ev:Opcode, '_START')=1">
                        <xsl:otherwise>
                        <xsl:when test="$EntryName != 'ContextId'">
                        <xsl:when test="count(./failedRequest/ev:Event/ev:RenderingInfo[ev:Opcode='AspNetPageTraceWarnEvent' or ev:Opcode='AspNetPageTraceWriteEvent']) = 0">
                        <xsl:with-param name="Duration" select="$Duration"/>
                        <xsl:with-param name="SectionName" select="'section_fastcgi'"/>
                        aa = parseFloat(ts_getInnerText(a.cells[SORT_COLUMN_INDEX]));
                        aa = ts_getInnerText(a.cells[SORT_COLUMN_INDEX]).toLowerCase();
                        aa = ts_getInnerText(a.cells[SORT_COLUMN_INDEX]);
                        alert("Handler could not be removed");
                        alert("loc: " + window.location);
                        alert("sn: " + sn + ", tn: " + tn);
                        b = b.toString(16); if (b.length == 1) b = '0' + b;
                        bb = parseFloat(ts_getInnerText(b.cells[SORT_COLUMN_INDEX])); 
                        bb = ts_getInnerText(b.cells[SORT_COLUMN_INDEX]).toLowerCase();
                        bb = ts_getInnerText(b.cells[SORT_COLUMN_INDEX]);
                        break;
                        currentTabElement = window.document.getElementById(currentTabId);
                        currentViewElement = window.document.getElementById(currentView);
                        d.style.display = 'block';
                        d.style.display = 'none';
                        elm.addEventListener(evType, fn, useCapture);
                        else
                        else if  (itm.match(/^[\d\.]+$/) || itm == "<!--EmptyNumber-->" ) {
                        else if (itm.match(/^\d\d[\/-]\d\d[\/-]\d\d$/)) {
                        else if (itm.match(/^\d\d[\/-]\d\d[\/-]\d\d\d\d$/)) {
                        expand = (d.style.display == 'block'?false:true);
                        expand = false;
                        expand = false; // default state is now expand
                        expand = true;
                        for ( i = 0; i < newRows.length; i++ )
                        for (i=0;i<newRows.length;i++) { if (!newRows[i].className || (newRows[i].className && (newRows[i].className.indexOf('sortbottom') == -1))) table.tBodies[0].appendChild(newRows[i]);}
                        for (i=0;i<newRows.length;i++) { if (newRows[i].className && (newRows[i].className.indexOf('sortbottom') != -1)) table.tBodies[0].appendChild(newRows[i]);}
                        for (i=0;i<table.rows[0].length;i++) { firstRow[i] = table.rows[0][i]; }
                        for (j=1;j<table.rows.length;j++) { newRows[j-1] = table.rows[j]; }
                        for (ti=0;ti<tbls.length;ti++) {
                        for (var ci=0;ci<allspans.length;ci++) {
                        for (var ci=0;ci<lnk.childNodes.length;ci++) {
                        for (var i = 0; i < a.length; i++) 
                        for (var i=0;i<firstRow.cells.length;i++) {
                        g = g.toString(16); if (g.length == 1) g = '0' + g;
                        i.innerHTML = "-";
                        i.innerHTML = "+";
                        if ( currentTabElement )
                        if ( currentViewElement )
                        if ( expand == true )
                        if ( indexElements[i].id && indexElements[i].id.indexOf(sectionId) >= 0 )
                        if ( requestDetailsElement )
                        if ( requestDetailsTab )
                        if ( requestSummary )
                        if (!document.getElementsByTagName) return;
                        if (!duration) duration = 3000;
                        if (!firstRow) return;
                        if (!fps) fps = 30;
                        if (!from || from=="#") from = "#FFFF33";
                        if (!to) to = this.get_bgcolor(id);
                        if (aa.length == 10) {
                        if (aa<bb) return -1;
                        if (aa==bb) return 0;
                        if (bb.length == 10) {
                        if (c == undefined || c == "" || c == "transparent") c = "#FFFFFF";
                        if (dt1<dt2) return -1;
                        if (dt1==dt2) return 0;
                        if (from.length < 7) from += from.substr(1,3);
                        if (isNaN(aa))
                        if (isNaN(bb))
                        if (rgb) c = this.make_hex(parseInt(rgb[1]),parseInt(rgb[2]),parseInt(rgb[3]));
                        if (span.getAttribute("sortdir") == 'down') {
                        if (table.className.indexOf("col-number") != -1) {
                        if (table.rows && table.rows.length > 0) {
                        if (table.rows.length <= 1) return;
                        if (to.length < 7) to += to.substr(1,3);
                        indexElements = window.document.getElementsByTagName("fieldset");
                        indexElements = window.document.getElementsByTagName("tr");
                        newRows.sort(sortfn);
                        o.style.backgroundColor = c;
                        r = r.toString(16); if (r.length == 1) r = '0' + r;
                        return "#" + r + g + b;
                        return 1;
                        return aa-bb;
                        return c;
                        return el;
                        return getParent(el.parentNode, pTagName);
                        return r;
                        return true;
                        return;
                        selectedViewElement.style.display = 'block';
                        setTimeout("Fat.set_bgcolor('"+id+"','"+to+"')", delay);
                        setView(sn, tn);
                        SORT_COLUMN_INDEX = column;
                        sortfn = ts_sort_caseinsensitive;
                        span.innerHTML = ARROW;
                        switch (cs[i].nodeType) {
                        tbls = document.getElementsByTagName("table");
                        var a = document.getElementsByTagName("*");
                        var allspans = document.getElementsByTagName("span");
                        var bf = parseInt(from.substr(5,2),16);
                        var bt = parseInt(to.substr(5,2),16);
                        var column = clid || td.cellIndex;
                        var defaultCell = null
                        var defaultIndex = null;
                        var delay = interval;
                        var firstRow = new Array();
                        var frame = 0;
                        var frames = Math.round(fps * (duration / 1000));
                        var gf = parseInt(from.substr(3,2),16);
                        var gt = parseInt(to.substr(3,2),16);
                        var interval = duration / frames;
                        var itm = ts_getInnerText(table.rows[1].cells[column]);
                        var newRows = new Array();
                        var nv = window.location.search.split('&');
                        var o = document.getElementById(id);
                        var r = elm.attachEvent("on"+evType, fn);
                        var r,g,b,h;
                        var rf = parseInt(from.substr(1,2),16);
                        var rgb = c.match(/rgb\s*\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)/);
                        var rt = parseInt(to.substr(1,2),16);
                        var sn = nv[0].split('=')[1];
                        var span;
                        var spantext = ts_getInnerText(span);
                        var table = getParent(td,'TABLE');
                        var td = lnk.parentNode;
                        var tn = nv[1].split('=')[1];
                        while (frame < frames)
                        while(o)
                        window.location.replace(window.location + "?sectionName=" + lastSectionName + "&tabName=" + lastTabName);
                      </xsl:call-template>
                      <xsl:call-template name="EventName">
                     </ul>
                     <tr><td colspan="4"><span class="no-data"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No Data Exists'"/></xsl:call-template></span></td></tr>
                     <ul>
                     <xsl:call-template name="ASPX"/>
                     <xsl:call-template name="Authentication"/>
                     <xsl:call-template name="CompactViewTemplate"/>
                     <xsl:call-template name="CompleteRequestTrace"/>
                     <xsl:call-template name="ErrorsAndWarnings"/>
                     <xsl:call-template name="fastcgi"/>
                     <xsl:call-template name="Filters"/>
                     <xsl:call-template name="ManagedModules"/>
                     <xsl:call-template name="Notifications"/>
                     <xsl:call-template name="Performance" />
                    /*alert("search: " + window.location.search);
                    // Change the report to "All Events"
                    // Determine the current state.
                    // Get the value of the radioReportOptions radio.
                    // Hide the current view.
                    // If there is a section that needs to be viewed, show it.
                    // Navigate to the indexNumber anchor.
                    // Show the selected view.
                    //Fat.fade_element(id, fps, duration, from, to)                                                         
                    //var rg = window.document.getElementsByName("radioView");
                    {
                    }
                    } else {
                    } else if (elm.attachEvent){
                    },
                    </tbody>
                    </td>
                    </tr>
                    </xsl:choose>
                    </xsl:for-each>
                    </xsl:otherwise>
                    </xsl:when>
                    <span id="section_filters_button"><span class="expand-collapse">-</span><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template></span>
                    <td>
                    <td><a><xsl:attribute name="href">javascript:findInDetail('<xsl:value-of select="position()"/>');</xsl:attribute><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'view trace'"/></xsl:call-template></a></td>
                    <td><xsl:value-of select="./failedRequest/@activityId" /></td>
                    <td><xsl:value-of select="./failedRequest/@appPoolId" /></td>
                    <td><xsl:value-of select="./failedRequest/@authenticationType" /></td>
                    <td><xsl:value-of select="./failedRequest/@failureReason" /></td>
                    <td><xsl:value-of select="./failedRequest/@processId" /></td>
                    <td><xsl:value-of select="./failedRequest/@siteId" /></td>
                    <td><xsl:value-of select="./failedRequest/@statusCode" /></td>
                    <td><xsl:value-of select="./failedRequest/@timeTaken" /> msec</td>
                    <td><xsl:value-of select="./failedRequest/@tokenUserName" /></td>
                    <td><xsl:value-of select="./failedRequest/@triggerStatusCode" /></td>
                    <td><xsl:value-of select="./failedRequest/@url" /></td>
                    <td><xsl:value-of select="position()"/>.</td>
                    <th class="col-severity"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Severity'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Activity ID'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'App Pool'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Authentication'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'FailureReason'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'FinalStatus'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Process'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Site'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'TimeTaken'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'TriggerStatus'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Url'"/></xsl:call-template></th>
                    <th><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'User from token'"/></xsl:call-template></th>
                    <tr>
                    <xsl:attribute name="href">javascript:toggleAll('<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ExpandAll'"/></xsl:call-template>', '<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template>', 'section_filters');</xsl:attribute>
                    <xsl:attribute name="id">section_fastcgi_<xsl:value-of select="position()"/></xsl:attribute>
                    <xsl:attribute name="name">detail_<xsl:value-of select="position()"/></xsl:attribute>
                    <xsl:choose>
                    <xsl:for-each select="./failedRequest/ev:Event">
                    <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes"><![CDATA[<!--EmptyNumber-->]]></xsl:text>
                    <xsl:value-of select="$Duration"/>
                    <xsl:value-of select="position()"/>.
                    <xsl:when test="$Duration != 'NO_END' and $Duration != 'NO_DURATION'">
                    <xsl:when test="count(./failedRequest/ev:Event/ev:RenderingInfo[starts-with(ev:Opcode, 'AUTH_')=1 or starts-with(ev:Opcode, 'SECURITY_')=1 or starts-with(ev:Opcode, 'FILTER_AUTHENTICATION_')=1 or starts-with(ev:Opcode, 'FILTER_AUTH_')=1 or starts-with(ev:Opcode, 'FILTER_ACCESS_DENIED_')=1 or starts-with(ev:Opcode, 'RoleManager')=1 ]) = 0">
                    <xsl:with-param name="DisplayInformation" select="1"/>
                    <xsl:with-param name="DisplaySeverity" select="0"/>
                    <xsl:with-param name="Duration" select="$Duration"/>
                    <xsl:with-param name="SectionName" select="'section_detail'"/>
                    <xsl:with-param name="TextValue" select="'view trace'"/>
                    alert("test2");*/
                    case "section_compact":
                    case "section_detail":
                    case "section_errors":
                    currentSectionName = divId;
                    currentTabId = tabId;
                    currentTabName = tabId;
                    currentView = divId;
                    else
                    else if ( currentState == false )
                    else if (el.nodeType == 1 && el.tagName.toLowerCase() == pTagName.toLowerCase())    // Gecko bug, supposed to be uppercase
                    eval("currentState = window." + sectionId + "_expand;");
                    eval("window." + sectionId + "_expand = " + expand + ";");
                    expandAll(expandAllText, collapseAllText, sectionId, expand);
                    fade_all : function ()
                    fade_element : function (id, fps, duration, from, to) 
                    Fat.fade_element('section_detail_' + indexNumber, null, null, '#ffff66', '#ffffff' );
                    for ( var i = 0; i < indexElements.length; i++)
                    for (var i = 0; i < l; i++) {
                    get_bgcolor : function (id)
                    if ( currentState == null )
                    if ( currentView != null && currentTabId != null )
                    if ( expand )
                    if ( expandButton && expandButton.innerHTML)
                    if ( lastSectionName != null )
                    if ( sectionId == "section_detail" )
                    if ( selectedViewElement )
                    if ( window.location.search.indexOf("sectionName", 0) >= 0 )
                    if (el == null) return null;
                    if (el.innerText) return el.innerText;    //Not needed but it is faster
                    if (elm.addEventListener){
                    if (typeof el == "string") return el;
                    if (typeof el == "undefined") { return el };
                    if( expand == null || typeof(expand) == 'undefined' )
                    javascript:findInDetail('<xsl:value-of select="position()"/>');
                    lastSectionName = currentSectionName;
                    lastTabName = currentTabName;
                    make_hex : function (r,g,b) 
                    return str;
                    selectedTabElement = window.document.getElementById(tabId);
                    selectedTabElement.className = "active";
                    selectedViewElement = window.document.getElementById(divId);
                    set_bgcolor : function (id, c)
                    setView('section_detail', 'viewDetails');
                    setView('section_errors','viewErrors');
                    switch( divId )
                    var cs = el.childNodes;
                    var currentState = null;
                    var currentTabElement = null;
                    var currentViewElement = null;
                    var d = window.document.getElementById(divId + '_details');
                    var expand = true;
                    var expandButton = window.document.getElementById(sectionId + "_button");
                    var i = window.document.getElementById(divId + '_button');
                    var indexElements = null;
                    var l = cs.length;
                    var requestDetailsElement = window.document.getElementById('sub_menu_container');
                    var requestDetailsTab = window.document.getElementById('requestDetails');
                    var requestSummary = window.document.getElementById('section_generalinformation');
                    var selectedTabElement = null;
                    var selectedViewElement = null;
                    var str = "";
                    window.location.replace("#detail_" + indexNumber);
                   </xsl:otherwise>
                  </tr>
                  </xsl:attribute>
                  </xsl:call-template>
                  </xsl:otherwise>
                  </xsl:when>
                  <a><xsl:attribute name="href">
                  <td colspan="4"><span><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No Errors or Warnings'"/></xsl:call-template></span></td>
                  <tr>
                  <xsl:attribute name="href">
                  <xsl:call-template name="Text">
                  <xsl:choose>
                  <xsl:otherwise>
                  <xsl:value-of select="./failedRequest/@url"/></xsl:attribute><xsl:value-of select="./failedRequest/@url"/></a></h1>
                  <xsl:variable name="Duration"><xsl:apply-templates select="." mode="CalculateDuration"/></xsl:variable>
                  <xsl:variable name="EntryFriendlyValue" select="../../ev:RenderingInfo/freb:Description[@Data=$EntryName]" />
                  <xsl:variable name="EntryName" select="./@Name"/>
                  <xsl:variable name="EntryValue" select="."/>
                  <xsl:when test="$Duration != 'NO_DURATION' and $Duration != 'NO_END'">
                  <xsl:when test="count(./ev:EventData/ev:Data[@Name='FilterName']) = 0">
                  <xsl:with-param name="Duration" select="$Duration"/>
                 </div>
                 </xsl:choose>
                 <div class="content-container">
                 <div id="menu_container">
                 <div id="sub_menu_container" >
                 <xsl:call-template name="GeneralInformation"/>
                 <xsl:choose>
                /*  FADE METHODS */
                /*function backCheck(e)
                // addEvent and removeEvent
                // By Scott Andrew
                // cross-browser event handling for IE5+,  NS6 and Mozilla
                // Sort Table
                //addEvent(window, "unload", backCheck);
                {
                {   
                }
                } 
                }*/
                <!-- ASP Page Traces-->
                <!-- Authentication -->
                <!-- Complete Request Trace -->
                <!-- Custom Module Traces-->
                <!-- Errors and Warnings -->
                <!-- FastCGI Module -->
                <!-- Filters -->
                <!-- Notifications-->
                <!-- Performance -->
                <![CDATA[<!-- saved from url=(0014)about:internet -->]]>
                </a>
                </tbody>
                </thead>
                </tr>
                </xsl:call-template>
                </xsl:choose>
                </xsl:for-each>
                </xsl:if>
                <a>
                <h1>Request Diagnostics for <xsl:value-of select="./failedRequest/@verb"/> <xsl:text xml:space="preserve"> </xsl:text>
                <legend> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ASPPageTraceHeading'"/></xsl:call-template> </legend>
                <legend> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CustomModuleTracesHeading'"/></xsl:call-template> </legend>
                <legend> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Filters'"/></xsl:call-template> </legend>
                <legend> <xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ModuleNotificationsHeading'"/></xsl:call-template> </legend>
                <tbody>
                <td colspan="4"><span><a href="javascript:setView('section_detail', 'viewDetails');" id="requestDetails" class="parent-tab-highlight"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'SeeAllRequestDetails'"/></xsl:call-template></a></span></td>
                <thead>
                <tr class="alt">
                <tr>
                <xsl:attribute name="id">section_detail_<xsl:value-of select="position()"/></xsl:attribute>
                <xsl:call-template name="EventName">
                <xsl:call-template name="Severity">
                <xsl:call-template name="Severity"><xsl:with-param name="DisplayInformational" select="1"/><xsl:with-param name="Duration" select="$Duration"/></xsl:call-template>
                <xsl:choose>
                <xsl:for-each select="./ev:EventData/ev:Data">
                <xsl:if test="ev:System/ev:Level='1' or ev:System/ev:Level='2' or ev:System/ev:Level='3'">
                <xsl:if test="starts-with(./ev:RenderingInfo/ev:Opcode, 'FASTCGI_')=1 ">
                <xsl:text disable-output-escaping="yes">&lt;/fieldset&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes">&lt;fieldset&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
                <xsl:value-of select="./ev:RenderingInfo/ev:Opcode"/>
                <xsl:variable name="Duration"><xsl:apply-templates select="." mode="CalculateDuration"/></xsl:variable>
                <xsl:when test="$TextValue='Activity ID'">Activity ID</xsl:when>
                <xsl:when test="$TextValue='App Pool'">App Pool</xsl:when>
                <xsl:when test="$TextValue='ASPPageTrace'">ASP.Net<br />Page Traces</xsl:when>
                <xsl:when test="$TextValue='ASPPageTraceHeading'">ASP.Net Page Traces</xsl:when>
                <xsl:when test="$TextValue='Authentication'">Authentication</xsl:when>
                <xsl:when test="$TextValue='AuthenticationandAuthorization'">Authentication &amp; Authorization</xsl:when>
                <xsl:when test="$TextValue='AuthenticationAuthorization'">Authentication<br />Authorization</xsl:when>
                <xsl:when test="$TextValue='CollapseAll'">Collapse</xsl:when>
                <xsl:when test="$TextValue='CompactView'">Compact<br />View</xsl:when>
                <xsl:when test="$TextValue='CompleteRequestTrace'">Complete<br />Request Trace</xsl:when>
                <xsl:when test="$TextValue='CompleteRequestTraceHeading'">Complete Request Trace</xsl:when>
                <xsl:when test="$TextValue='CriticalError'">Critical Error</xsl:when>
                <xsl:when test="$TextValue='CustomModuleTrace'">Custom<br />Module Traces</xsl:when>
                <xsl:when test="$TextValue='CustomModuleTracesHeading'">Custom Module Traces</xsl:when>
                <xsl:when test="$TextValue='Duration'">Duration</xsl:when>
                <xsl:when test="$TextValue='Error'">Error</xsl:when>
                <xsl:when test="$TextValue='ErrorsandWarnings'">Errors &amp; Warnings</xsl:when>
                <xsl:when test="$TextValue='Event'">Event</xsl:when>
                <xsl:when test="$TextValue='ExpandAll'">Expand</xsl:when>
                <xsl:when test="$TextValue='FailedToComplete'">Failed To Complete</xsl:when>
                <xsl:when test="$TextValue='FailureReason'">Failure Reason</xsl:when>
                <xsl:when test="$TextValue='fastcgi'">FastCGI<br />Module</xsl:when>
                <xsl:when test="$TextValue='fastcgiHeading'">FastCGI Module</xsl:when>
                <xsl:when test="$TextValue='Filter Name'">Filter Name</xsl:when>
                <xsl:when test="$TextValue='FilterNotifications'">Filter <br />Notifications</xsl:when>
                <xsl:when test="$TextValue='Filters'">Filters</xsl:when>
                <xsl:when test="$TextValue='FinalStatus'">Final Status</xsl:when>
                <xsl:when test="$TextValue='Informational'">Informational</xsl:when>
                <xsl:when test="$TextValue='Module Name'">Module Name</xsl:when>
                <xsl:when test="$TextValue='Module'">Module</xsl:when>
                <xsl:when test="$TextValue='ModuleNotifications'">Module<br />Notifications</xsl:when>
                <xsl:when test="$TextValue='ModuleNotificationsHeading'">Module Notifications</xsl:when>
                <xsl:when test="$TextValue='No Data Exists'">No Data Exists For The Requested Report</xsl:when>
                <xsl:when test="$TextValue='No Errors or Warnings'">No Errors or Warnings were found</xsl:when>
                <xsl:when test="$TextValue='No'">No.</xsl:when>
                <xsl:when test="$TextValue='Notification'">Notification</xsl:when>
                <xsl:when test="$TextValue='PerformanceView'">Performance<br />View</xsl:when>
                <xsl:when test="$TextValue='PerformanceViewHeading'">Performance View</xsl:when>
                <xsl:when test="$TextValue='Process'">Process</xsl:when>
                <xsl:when test="$TextValue='RequestDetails'">Request<br />Details</xsl:when>
                <xsl:when test="$TextValue='RequestSummary'">Request Summary</xsl:when>
                <xsl:when test="$TextValue='RequestSummary'">Request<br />Summary</xsl:when>
                <xsl:when test="$TextValue='SeeAllRequestDetails'"> See all events for the request</xsl:when>
                <xsl:when test="$TextValue='Severity'">Severity</xsl:when>
                <xsl:when test="$TextValue='Site'">Site</xsl:when>
                <xsl:when test="$TextValue='TimeTaken'">Time Taken</xsl:when>
                <xsl:when test="$TextValue='TriggerStatus'">Trigger Status</xsl:when>
                <xsl:when test="$TextValue='Uri'">Uri</xsl:when>
                <xsl:when test="$TextValue='Url'">Url</xsl:when>
                <xsl:when test="$TextValue='User from token'">User from token</xsl:when>
                <xsl:when test="$TextValue='Verbose'">Verbose</xsl:when>
                <xsl:when test="$TextValue='view trace'">view trace</xsl:when>
                <xsl:when test="$TextValue='Warning'">Warning</xsl:when>
                addEvent(window, "load", sortables_init);
                function addEvent(elm, evType, fn, useCapture)
                function expandAll(expandAllText, collapseAllText, sectionId, expand)
                function findInDetail(indexNumber)
                function getParent(el, pTagName) {
                function load()
                function setView(divId, tabId)
                function sortables_init() {
                function toggleAll(expandAllText, collapseAllText, sectionId)
                function toggleDiv(divId, expand)
                function ts_getInnerText(el) {
                function ts_makeSortable(table) {
                function ts_resortTable(lnk,clid) {
                function ts_sort_caseinsensitive(a,b) {
                function ts_sort_date(a,b) {
                function ts_sort_default(a,b) {
                function ts_sort_numeric(a,b) { 
                section_perf_<xsl:value-of select="position()"/>
                var currentSectionName = null;
                var currentTabId = null;
                var currentTabName = null;
                var currentView = null;
                var Fat = {
                var lastSectionName = null;
                var lastTabName = null;
                var SORT_COLUMN_INDEX;
                var styles = new Object();
               <xsl:apply-templates select="." mode="CalculateDuration"/>
               <xsl:text disable-output-escaping="yes"><![CDATA[
               <xsl:when test="function-available('jsext:datediff')">
               >
               activityId="
               appPoolId="
               authenticationType="
               authenticationType="NOT_AVAILABLE"
               failureReason="
               processId="
               remoteUserName="
               siteId="
               statusCode="
               timeTaken="
               tokenUserName="
               triggerStatusCode="
               userName="
               verb="
               xmlns:freb="http://schemas.microsoft.com/win/2006/06/iis/freb"
              <!--p> STATUS_CODE <xsl:value-of select="./failedRequest/@statusCode"/>, <xsl:value-of select="./failedRequest/@timeTaken"/> ms, <xsl:value-of select="./failedRequest/@verb"/> (<xsl:value-of select="jsext:formatDate(string(./failedRequest/ev:Event/ev:System/ev:TimeCreated[1]/@SystemTime))"/>)</p-->
              </td>
              </tr>
              </xsl:attribute>
              </xsl:for-each>
              </xsl:when>
              <td class="col-duration">
              <td>
              <td><xsl:value-of select="position()"/>.</td>
              <tr>
              <tr><td colspan="4"><span class="no-data"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No Data Exists'"/></xsl:call-template></span></td></tr>
              <xsl:attribute name="id">
              <xsl:choose>
              <xsl:for-each select="./failedRequest/ev:Event">
              <xsl:otherwise>
              <xsl:when test="count(./failedRequest/ev:Event/ev:System[ev:Level='1' or ev:Level='2' or ev:Level='3'])=0">
              <xsl:with-param name="TextValue" select="'CriticalError'"/>
              <xsl:with-param name="TextValue" select="'Error'"/>
              <xsl:with-param name="TextValue" select="'Warning'"/>
            ]]>
            </div>
            </fieldset>
            </h2>
            </table>
            </tbody>
            </tr>
            </xsl:call-template>
            </xsl:choose>
            </xsl:for-each>
            </xsl:if>
            </xsl:otherwise>
            </xsl:text>
            </xsl:variable>
            </xsl:when>
            <div id="header">
            <fieldset class="no-border">
            <h2>
            <legend> <a href="javascript:toggleDiv('section_generalinformation');"><span id="section_generalinformation_button" class="expand-collapse">-</span>Request Summary</a></legend>
            <span class="expand-collapse">-</span>
            <style type="text/css">            
            <table class="request-summary column-1" cellspacing="0" cellpadding="0" border="0">
            <table class="request-summary column-2" border="0" cellpadding="0" cellspacing="0">
            <table id="section_aspx_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
            <table id="section_filters_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
            <table id="section_modtrace_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
            <table id="section_notifications_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
            <tbody>
            <th class="col-actions"><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></th>
            <th class="col-event"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Event'"/></xsl:call-template></th>
            <th class="defaultsort col-number"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No'"/></xsl:call-template></th>
            <title><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'RequestDiagnostics'"/></xsl:call-template><xsl:value-of select="./failedRequest/@url"/>, STATUS_CODE <xsl:value-of select="./failedRequest/@statusCode"/>, <xsl:value-of select="./failedRequest/@timeTaken"/> ms, <xsl:value-of select="./failedRequest/@verb"/> </title>
            <tr>
            <xsl:call-template name="Text">
            <xsl:choose>
            <xsl:for-each select="./failedRequest/ev:Event">
            <xsl:if test="substring(./ev:RenderingInfo/ev:Opcode,string-length(./ev:RenderingInfo/ev:Opcode)- string-length('_END')+1) = '_END'">
            <xsl:if test="substring(./ev:RenderingInfo/ev:Opcode,string-length(./ev:RenderingInfo/ev:Opcode)- string-length('_START')+1) = '_START' and $Duration != 'NO_END' and $Duration != 'NO_DURATION'">
            <xsl:otherwise>
            <xsl:text disable-output-escaping="yes">
            <xsl:variable name="Duration">
            <xsl:when test="./ev:System/ev:Level = 1"><div class="severity-critical"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CriticalError'"/></xsl:call-template></div></xsl:when>
            <xsl:when test="./ev:System/ev:Level = 2"><div class="severity-error"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Error'"/></xsl:call-template></div></xsl:when>
            <xsl:when test="./ev:System/ev:Level = 3"><div class="severity-warning"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Warning'"/></xsl:call-template></div></xsl:when>
            <xsl:when test="./ev:System/ev:Level = 4 and $DisplayInformational=1"><div class="severity-informational"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Informational'"/></xsl:call-template></div></xsl:when>
            <xsl:when test="./ev:System/ev:Level = 5 and $DisplayInformational=1"><div class="severity-verbose"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Verbose'"/></xsl:call-template></div></xsl:when>
            <xsl:when test="count(./failedRequest/ev:Event/ev:RenderingInfo[starts-with(ev:Opcode, 'FASTCGI_')=1 ]) = 0">
            <xsl:with-param name="Event" select="."/>
            <xsl:with-param name="Position" select="position()"/>
            <xsl:with-param name="TextValue" select="'CollapseAll'"/>
            dateObj.setDate(match[3]);
            dateObj.setFullYear(match[1]);
            dateObj.setHours(match[4]);
            dateObj.setMilliseconds(match[7]);
            dateObj.setMinutes(match[5]);
            dateObj.setMonth(match[2]);
            dateObj.setSeconds(match[6]);
            If this is a *_START node and has no corresponding *_END node, return NO_END
            javascript:toggleAll('<xsl:call-template name="Text">
            Otherwise, return the time difference between the previous and current event's timestamp in miliseconds.-->
          <!--setting ClassMode to block will make it visible by default-->
          </span>
          </tr>
          </xsl:attribute>
          </xsl:call-template>
          </xsl:choose>
          </xsl:otherwise>
          </xsl:when>
          <br/>
          <span class="severity-critical">
          <span class="severity-error">
          <span class="severity-warning">
          <span id="section_auth_button">
          <th class="col-actions"><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></th>
          <th class="col-duration" title="Time elapsed from the previous event"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Duration'"/></xsl:call-template> (ms)</th>
          <th class="col-event"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Event'"/></xsl:call-template></th>
          <th class="col-name"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'Module Name'"/></xsl:call-template></th>
          <th class="defaultsort col-number"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'No'"/></xsl:call-template></th>
          <tr>
          <xsl:apply-templates select="." mode="CalculateDuration"/>
          <xsl:attribute name="href">
          <xsl:call-template name="ProcessEvent">
          <xsl:choose>
          <xsl:value-of select="$Event/ev:RenderingInfo/ev:Opcode"/>
          <xsl:when test="$Duration != 'NO_DURATION' and $Duration != 'NO_END'">
          <xsl:with-param name="DisplayMode" select="block"/>
          <xsl:with-param name="IdName" select="section_compact_minimal_mode"/>
          <xsl:with-param name="TextValue" select="'AuthenticationandAuthorization'"/>
         <!--if not able to calculate the difference because of missing jsext:datediff, then simply return empty string -->
         <xsl:attribute name="class"><xsl:value-of select="block"/></xsl:attribute>
         <xsl:attribute name="class">hidden</xsl:attribute>
         <xsl:attribute name="id"><xsl:value-of select="section_compact_minimal_view"/></xsl:attribute>
         <xsl:attribute name="id">section_compact</xsl:attribute>
        {
        }    
        <!-- Filter for events containing _START -->
        </a>
        </body>
        </div>
        </fieldset>
        </h2>
        </head>
        </table>
        </tbody>
        </thead>
        </tr>
        </xsl:call-template>
        </xsl:choose>
        </xsl:for-each>
        </xsl:otherwise>
        </xsl:variable>
        </xsl:when>
        <a>
        <body class="iistraceinfo" onload="load();">
        <br/>
        <div class="expand-collapse-all">
        <div class="expand-collapse-all"> <a ><xsl:attribute name="href">javascript:toggleAll('<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ExpandAll'"/></xsl:call-template>', '<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template>', 'section_aspx');</xsl:attribute><span id="section_aspx_button"><span class="expand-collapse">-</span><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template></span></a></div>
        <div class="expand-collapse-all"> <a ><xsl:attribute name="href">javascript:toggleAll('<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ExpandAll'"/></xsl:call-template>', '<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template>', 'section_modtrace');</xsl:attribute><span id="section_modtrace_button"><span class="expand-collapse">-</span><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template></span></a></div>
        <div class="expand-collapse-all"><a><xsl:attribute name="href">javascript:toggleAll('<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ExpandAll'"/></xsl:call-template>', '<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template>', 'section_detail');</xsl:attribute><span id="section_detail_button"><span class="expand-collapse">-</span><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template></span></a></div>
        <div class="expand-collapse-all"><a><xsl:attribute name="href">javascript:toggleAll('<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ExpandAll'"/></xsl:call-template>', '<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template>', 'section_notifications');</xsl:attribute><span id="section_notifications_button"><span class="expand-collapse">-</span><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template></span></a></div>
        <div id="section_generalinformation_details">
        <fieldset>
        <h2>
        <head>
        <legend><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'fastcgiHeading'"/></xsl:call-template></legend>
        <span class="expand-collapse"><xsl:attribute name="id"><xsl:value-of select="$SectionName"/>_<xsl:value-of select="$Position"/>_button</xsl:attribute>-</span>
        <tbody>
        <thead>
        <tr class="subhead" align="Left"><th width="32px">No.</th><th width="250px">EventName</th><th>Details</th><th width="100px" title="Timestamp in GMT (low resolution timer)">Time</th></tr>       
        <tr>
        <xsl:attribute name="class"><xsl:value-of select="$DisplayMode"/></xsl:attribute>
        <xsl:attribute name="href">javascript:toggleDiv('<xsl:value-of select="$SectionName"/>_<xsl:value-of select="$Position"/>');</xsl:attribute>
        <xsl:attribute name="id"><xsl:value-of select="$SectionName"/>_<xsl:value-of select="$Position"/>_details</xsl:attribute>
        <xsl:call-template name="Severity"><xsl:with-param name="Duration" select="$Duration"/></xsl:call-template>
        <xsl:call-template name="Text">
        <xsl:choose>
        <xsl:for-each select="./failedRequest/ev:Event">
        <xsl:for-each select="/failedRequest/ev:Event">
        <xsl:otherwise>
        <xsl:param name="DisplayInformational" select="0"/>
        <xsl:param name="Duration"/>
        <xsl:value-of select="$Event/ev:RenderingInfo/ev:Opcode"/> 
        <xsl:value-of select="$friendly"/>
        <xsl:value-of select="./ev:RenderingInfo/ev:Opcode"/>
        <xsl:value-of select="jsext:datediff(string(preceding-sibling::ev:Event[1]/ev:System/ev:TimeCreated/@SystemTime),string($startTime))"/>    
        <xsl:variable name="Duration">
        <xsl:when test="$language = '1033'">
        <xsl:when test="./ev:System/ev:Level = 1">
        <xsl:when test="./ev:System/ev:Level = 2">
        <xsl:with-param name="DisplayMode" select="$DetailsDisplayMode"/>
        <xsl:with-param name="Position" select="$Position"/>
        <xsl:with-param name="SectionName" select="$SectionName"/>
        if ( match != null && match.length > 0 )
        return dateObj.getTime();
        return endDate - startDate;
        return strDate;
        strDate = date.getFullYear() + "-" + date.getMonth() + "-" + date.getDate();
        strDate = strDate + ", " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds() + ":" + date.getMilliseconds();
        var date = new Date(convertXMLDate(d));
        var dateObj = new Date();
        var datepat = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).(\d{3})Z$/;
        var endDate = convertXMLDate(e);
        var match = datepat.exec(d);
        var startDate = convertXMLDate(s);
        var strDate = new String();
       </table>    
       <legend> <a href="javascript:toggleDiv('section_errors');"><span id="section_errors_button" class="expand-collapse">-</span>Errors &amp; Warnings</a></legend>
       <table cellspacing="0" cellpadding="0" border="1" style="width:100%;border-collapse:collapse;table-layout:fixed;">
       <xsl:otherwise>
       <xsl:when test="function-available('jsext:datediff')">
      </div>
      </h2>
      </legend>
      </table>
      </thead>
      </xsl:choose>
      </xsl:for-each>
      </xsl:otherwise>
      </xsl:when>
      <div class="expand-collapse-all">
      <h2>
      <legend class="no-expand-all"><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'PerformanceViewHeading'"/></xsl:call-template></legend>
      <legend>
      <legend><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CompleteRequestTraceHeading'"/></xsl:call-template></legend>
      <table id="section_fastcgi_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
      <thead>
      <xsl:for-each select="./failedRequest/ev:Event">
      <xsl:otherwise>
      <xsl:when test="string(preceding-sibling::ev:Event[1]/ev:System/ev:TimeCreated/@SystemTime) = ''">
     <!-- jsext:datediff presence is s trigger for complex tracing report -->
     <!--provide simple report - the compact view which doesn't need any scripts -->
     </span>
     </xsl:call-template>
     </xsl:if>"<xsl:if test="not(position()=last())">, </xsl:if>
     <div class="content-container">
     <span class="iistraceinfo">
     <xsl:call-template name="CompactViewTemplate">
     <xsl:call-template name="ErrorsAndWarnings"/>
     <xsl:call-template name="GeneralInformation"/>
     <xsl:choose>
     <xsl:if test="not(string-length($friendly)=0)">
     <xsl:text></xsl:text>    
     <xsl:value-of select="@Name"/>
     <xsl:value-of select="@Name"/>="<xsl:if test="string-length($friendly)=0"><xsl:value-of select="."/></xsl:if>
     <xsl:when test="./ev:System/ev:Level = 3">
    /*background-color:#5A7FA5;*/
    _height:24px;
    _height:35px;
    _height:44px;
    _margin-top:0px; /* IE 6 will read this only */
    {
    }
    }   
    <!-- Get the start time from the start event (this event) -->
    <![CDATA[
    </a><!--xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text-->
    </div>
    </fieldset>
    </h2>
    </html>
    </table>
    </xsl:call-template>
    </xsl:choose>
    </xsl:if>
    </xsl:template>
    <a>
    <div class="expand-collapse-all"> <a ><xsl:attribute name="href">javascript:toggleAll('<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'ExpandAll'"/></xsl:call-template>', '<xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template>', 'section_fastcgi');</xsl:attribute><span id="section_fastcgi_button"><span class="expand-collapse">-</span><xsl:call-template name="Text"><xsl:with-param name="TextValue" select="'CollapseAll'"/></xsl:call-template></span></a></div>
    <div id="section_aspx" class="hidden">
    <div id="section_auth" class="hidden">
    <div id="section_detail" class="hidden">
    <div id="section_errors" class="summary-container hidden">
    <div id="section_errors_details">
    <div id="section_filters" class="hidden">
    <div id="section_generalinformation" class="summary-container">
    <div id="section_modtrace" class="hidden">
    <div id="section_notifications" class="hidden">
    <div id="section_perf" class="hidden">
    <div>
    <fieldset>
    <h2>
    <html>
    <table cellspacing="0" cellpadding="0" border="0" width="100%">
    <table id="section_auth_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
    <table id="section_errors_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
    <table id="section_perf_table" class="sortable" cellspacing="0" cellpadding="0" border="0" width="100%">
    <xsl:attribute name="class">alt</xsl:attribute> 
    <xsl:call-template name="EventDetail">
    <xsl:choose>
    <xsl:if test="$DisplaySeverity=1">
    <xsl:number value="position()" format="1."/>
    <xsl:param name="DetailsDisplayMode" select="block"/>
    <xsl:param name="DisplayInformation" select="0"/>
    <xsl:param name="DisplayMode" select="hidden"/>
    <xsl:param name="DisplaySeverity" select="1"/>
    <xsl:param name="Duration">NO_DURATION</xsl:param>
    <xsl:param name="Position" select="position()"/>
    <xsl:param name="SectionName"/>
    <xsl:param name="TextValue"/>
    <xsl:template match="/">
    <xsl:template name="Severity">
    <xsl:value-of select="parent::*/parent::*/ev:RenderingInfo/freb:Description[@Data=$name]"/>
    <xsl:variable name="startTime" select="./ev:System/ev:TimeCreated/@SystemTime"/>
    background:#990000;
    background:#B3CAD9;
    background:#E4FAC8;
    background:#E7ECF0;
    background:#FFE4CC;
    background:#FFF;
    background:#FFFFCC;
    background-color:#5C81A7;
    background-color:#5C87B2;
    background-color:#B3CAD9;
    background-color:#F8F8F8;
    background-color:#F8F8F8; 
    background-color:#FFF;
    background-color:transparent;
    background-color:white;
    background-color:white; /*just changed*/
    background-color:Yellow;
    border: none;
    border:1px dotted #224870;
    border:1px solid #CD8282;
    border:3px solid #990000;
    border-bottom:1px dotted #C1CFDD;
    border-bottom:1px solid #969696;
    border-left:1px solid #224870;
    border-left:1px solid #EDEDED;
    border-radius: 5px;
    border-right:1px solid #969696;
    border-top:1px dotted #4A6C8E;
    border-top:1px solid #224870;
    border-top:1px solid #EDEDED;
    border-top:none;
    color:#000;
    color:#007EFF;
    color:#333333;
    color:#808080;
    color:#919191;
    color:#990000;
    color:#B0B0B0;
    color:#BB7700;
    color:#F1F7FC;
    color:#FFF;
    color:#fff;
    color:#FFF;
    color:#FFF; 
    color:#FFFFFF;
    display:block;
    display:block; 
    display:inline;
    display:none 
    float:left;
    float:right;
    font-family:"Courier New", Courier, monospace;
    font-family:"trebuchet MS", Verdana, sans-serif;
    font-family:Verdana, Arial, Helvetica, sans-serif;
    font-size:.7em;
    font-size:.9em;
    font-size:.9em; 
    font-size:1.1em;
    font-size:1.2em;
    font-size:1em;
    font-style:italic;
    font-weight:bold;
    font-weight:bold; 
    font-weight:normal;
    font-weight:normal; 
    function convertXMLDate(d)
    function datediff(s, e)
    function formatDate(d)
    HEADER
    HEADINGS
    HTML TAGS
    left:20px;
    line-height:1.1em;
    LINKS
    list-style:none;
    margin:0 0 0 0;
    margin:0 0 0 -12px;
    margin:0 0 5px 0;
    margin:0;
    margin:0px 0 5px 0;
    margin:-10px 0 5px 0;
    margin:10px 0;
    margin:15px;
    margin:1px 0 1px 0;
    margin:4px 0 0 12px;
    margin:8px 0 0 1%;
    margin:8px 0 4px 0;
    margin:8px;
    margin-bottom:0px;
    margin-bottom:-17px;
    margin-left:0;
    margin-left:25px;
    margin-top:4px;
    MENU
    min-height:24px;
    min-height:35px;
    min-height:44px;
    MISC STYLES
    -moz-border-radius: 5px;
    NESTED TABLES
    padding:0 0 1px 0;
    padding:0 10px;
    padding:0 6px 0 0;
    padding:0;
    padding:10px 20px 10px 9.5em;
    padding:1px 2px;
    padding:1px 5px 0 0;
    padding:1px; 
    padding:2 0px 1px 1px;
    padding:2px 0px 1px 10px;
    padding:2px 15px 4px 10px;
    padding:3px 12px 3px 10px;
    padding:3px 6px;
    padding:4px 15px 4px 10px;
    padding:4px 2px;
    padding:5px 10px 4px 10px;
    padding:5px;
    padding:6px 2% 6px 3%;
    padding:8px 0 0 2%;
    padding-bottom:17px; 
    padding-bottom:3px;
    padding-bottom:5px;
    padding-right:8px;
    padding-top:7px; 
    position:absolute;
    position:relative;
    SEVERITY
    SORTABLE TABLES
    SUB MENU SPECIFIC STYLES
    TABLES
    text-align:center;
    text-align:left;
    text-align:right;
    text-decoration:none;
    text-decoration:none; 
    text-decoration:underline;
    text-decoration:underline; 
    text-transform:uppercase;
    top:1px;
    top:2px;
    top:5px;
    vertical-align:top;
    white-space:nowrap;
    white-space:pre;
    white-space:pre-wrap;
    width:11em;
    width:28%;
    width:30%;
    width:35%;
    width:35px;
    width:40%;
    width:43%;
    width:48%;
    width:55%;
    width:65px;
    width:6em;
    width:70px;
    width:90%; 
    width:95%;
    width:98%;
    word-break:break-all;
    word-wrap:break-word;
    z-index:100;
   </div>
   </xsl:otherwise>
   </xsl:when>
   <div> 
   <Keyword>
   <td><xsl:apply-templates select="$Event/ev:EventData/ev:Data"/></td>
   <xsl:otherwise/>
   <xsl:param name="DisplayMode" select="hidden"/>
   <xsl:param name="IdName" select="section_compact"/>
   <xsl:when test="position() mod 2 = 1">
  </div>
  </Keywords>
  </td>
  </xsl:choose>
  </xsl:otherwise>
  <Computer>
  <Correlation ActivityID="
  <Data Name="
  <div id="section_fastcgi" class="hidden">
  <EventGuid>
  <EventID>0</EventID>
  <Execution ProcessID="
  <freb:Description Data="
  <Keywords>
  <Level>
  <Opcode>
  <Provider Name="
  <td>
  <td><xsl:value-of select="substring($Event/ev:System/ev:TimeCreated/@SystemTime,12,12)"/></td>
  <TimeCreated SystemTime="
  <Version>
  <xsl:choose> 
  <xsl:otherwise>
 </EventData>
 </ExtendedTracingInfo>
 </RenderingInfo>
 </script>
 </System>
 </tr>
 </xsl:choose>
 </xsl:if>
 </xsl:param>
 </xsl:text>
 <EventData>
 <ExtendedTracingInfo xmlns="http://schemas.microsoft.com/win/2004/08/events/trace">
 <RenderingInfo Culture="
 <System>
 <tr>
 <xsl:if test="not($name='ContextId') and not($name='ConnID') and not($name='Context ID')">
 <xsl:param name="Event"/>
 <xsl:param name="friendly">
 <xsl:param name="name">
 <xsl:param name="Position"/>
 but did not override the method in its CGlobalModule implementation.  Please check the method signature to make sure it matches the corresponding method.
 but did not override the method in its CHttpModule implementation.  Please check the method signature to make sure it matches the corresponding method.
 Microsoft Corporation. All rights reserved.
!This program cannot be run in DOS mode.
" Guid="
" RelatedActivityID="
" ThreadID="
#0,050{0
#header { 
#header a {
#header p {
#menu_container a#viewErrors:link,
#menu_container a#viewErrors:visited,
#menu_container a.active:link,
#menu_container a.active:visited,
#menu_container a:hover,
#menu_container a:link,
#menu_container a:visited,
#menu_container li,
#menu_container ul,
#menu_container,
#sub_menu_container { 
#sub_menu_container a#viewDetails:link,
#sub_menu_container a#viewDetails:visited {
#sub_menu_container a.active:link,
#sub_menu_container a.active:visited {
#sub_menu_container a.active:visited,
#sub_menu_container a.parent-tab-highlight:link,
#sub_menu_container a.parent-tab-highlight:visited {
#sub_menu_container a:hover {
#sub_menu_container a:link,
#sub_menu_container a:visited {
#sub_menu_container li {
#sub_menu_container ul {
%04.4d-%02.2d-%02.2dT%02.2d:%02.2d:%02.2d.%03.3dZ
%0B0Q0`0m0t0
*/    position:relative;    
.00cfg
.content-container {
.CRT$XCA
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.data
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.duration {
.duration-value {
.edata
.expand-collapse {
.expand-collapse-all {
.gfids
.giats
.highlight {
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.no-border {
.no-data {
.pre-event-data {
.rdata
.rdata$brc
.rdata$sxdata
.rdata$zzzdbg
.request-summary td,
.request-summary th {
.request-summary tr.alt td, 
.request-summary tr.alt th { 
.rsrc
.rsrc$01
.rsrc$02
.severity-critical {
.severity-critical,
.severity-error {
.severity-error,
.severity-failed {
.severity-failed,
.severity-informational {
.severity-informational,
.severity-verbose {
.severity-warning {
.severity-warning,
.small { 
.summary-container fieldset {
.summary-container h2 {
.summary-container legend {
.summary-container,
.text
.text$mn
.tinylink {
.xdata$x
/*    progid:DXImageTransform.Microsoft.Gradient(gradientType=0,startColorStr=#AABDD0,endColorStr=#125295);
/* columns */
/* NESTED TABLE CELLS */
/* NESTED TABLE CELLS in ALT PARENT ROWS */
/* NESTED TABLE TH HEADERS */
/* REQUEST SUMMARY TABLE */
/* SOME HAVE THICK BORDERS SO WE RE-STYLE THEM */
/* STYLES WHEN INSIDE A TABLE COLUMN */
/* STYLES WHEN INSIDE THE COMPLETE TRACE*/
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
:!:+:1:7:
:":':-:3:A:G:L:R:W:]:c:q:w:|:
:&;L;
:):u:e;
:+:\:~:
:0:7:=:K:X:`:n:
:K:t:
:System\CurrentControlSet\Services\W3SVC\Parameters\iisfreb
;";,;A;b;
;"<@<o<~<
;#;1;7;<;B;G;M;S;a;g;l;r;w;};
;2<:<B<|<
;d;y;
;F s-
;K<T<Z<d<j<p<
?"?U?r?
?#?{?
?*?6?I?c?k?u?
?*?Q?X?z?
??0CLKRHashTable@@QAE@PBDP6G?BKPBX@ZP6GKK@ZP6G_NKK@ZP6GX1H@ZNKK_N@Z
??0CReaderWriterLock3@@QAE@XZ
??0EVENT_LOG@@QAE@PBG@Z
??0LANG_STRING@@QAE@XZ
??0STRA@@QAE@PADK@Z
??0STRU@@QAE@PAGK@Z
??0STRU@@QAE@XZ
??1BUFFER@@QAE@XZ
??1CLKRHashTable@@QAE@XZ
??1CReaderWriterLock3@@QAE@XZ
??1STRA@@QAE@XZ
??1STRU@@QAE@XZ
?5?z?
?Append@STRU@@QAEJABV1@@Z
?Append@STRU@@QAEJPBG@Z
?Append@STRU@@QAEJPBGK@Z
?Copy@STRU@@QAEJPBG@Z
?Copy@STRU@@QAEJPBGK@Z
?CopyWToUTF8Unescaped@STRA@@QAEJPBGK@Z
?DeleteIf@CLKRHashTable@@QAEKP6G?AW4LK_PREDICATE@@PBXPAX@Z1@Z
?FindKey@CLKRHashTable@@QBE?AW4LK_RETCODE@@KPAPBX@Z
?GetString@LANG_STRING@@QAEJPBDKIPAPBGPAK@Z
?Initialize@LANG_STRING@@QAEJPAUHINSTANCE__@@K@Z
?InsertRecord@CLKRHashTable@@QAE?AW4LK_RETCODE@@PBX_N@Z
?LogEvent@EVENT_LOG@@QAEXKGQAPBGK@Z
?Resize@BUFFER@@QAE_NK@Z
?Resize@STRU@@QAEJK@Z
?SetLen@STRU@@QAE_NK@Z
?SyncWithBuffer@STRU@@QAEXXZ
?Terminate@LANG_STRING@@QAEJXZ
?WriteLock@CReaderWriterLock3@@QAEXXZ
?WriteUnlock@CReaderWriterLock3@@QAEXXZ
@.didat
@.reloc
@9y,t
]]></xsl:text>
_amsg_exit
_callnewh
_except_handler4_common
_initterm
_purecall
_snprintf_s
_ultow
_vsnwprintf
_wcsicmp
_wcsnicmp
_wcsupr
_XcptFilter
`.data
}     
~(9~,t
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
< <,<2<<<B<H<^<s<{<
< =h=x=
<!-- If this is not a *_START node, return NO_DURATION    
<!-- saved from url=(0014)about:internet -->
<!<'<,<2<7<=<C<Q<W<\<b<g<m<s<
<!=;=X=l=v=
<!--In: A node list starting with the start tag.-->
<%<M<o<
</Computer>
</Data>
</Event>
</EventGuid>
</failedRequest>
</freb:Description>
</Keyword>
</Keywords>
</Level>
</msxsl:script>
</Opcode>
</style>
</Version>
</xsl:choose>
</xsl:stylesheet>
</xsl:template>
</xsl:template>    
<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type='text/xsl' href='freb.xsl'?>
<<=C=O=V=\=
<2<B<O<X<c<j<|<
<D<Q<\<}<
<Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
<failedRequest url="
<msxsl:script language="javascript" implements-prefix="jsext" >
<O=n=
<script type="text/javascript">
<xsl:output method="html" media-type="text/html" omit-xml-declaration="yes" doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:freb="http://schemas.microsoft.com/win/2006/06/iis/freb" xmlns:ev="http://schemas.microsoft.com/win/2004/08/events/event" xmlns="http://www.w3.org/1999/xhtml" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:jsext="urn:schemas-microsoft-com:jsext" > 
<xsl:template  name="ErrorsAndWarnings">
<xsl:template match="ev:Data">
<xsl:template match="ev:Event" mode="CalculateDuration">
<xsl:template name="ASPX">
<xsl:template name="Authentication">
<xsl:template name="CompactViewTemplate">
<xsl:template name="CompleteRequestTrace">
<xsl:template name="EventDetail">
<xsl:template name="EventName" match="ev:Event" mode="EventName">
<xsl:template name="fastcgi">
<xsl:template name="Filters">
<xsl:template name="GeneralInformation">
<xsl:template name="ManagedModules">
<xsl:template name="Notifications">
<xsl:template name="Performance">
<xsl:template name="ProcessEvent">
<xsl:template name="Text">
<xsl:text disable-output-escaping="yes"><![CDATA[
<xsl:text>0</xsl:text>
<xsl:variable name="language" select="'1033'"/>
="=(=.=^=}=
="='=-=3=A=G=L=R=W=]=c=q=w=|=
=%=/=N=X=
='=7===H=N=Z=j=s=
> >->2><>B>H>_>
>#>1>7><>B>G>M>S>a>g>l>r>w>}>
>&>/><>B>H>N>T>
>&>0>O>U>i>o>u>{>
>:>U>p>
>6>D>Z>o>{>
>6>T>r>
>C?W?h?
>m>s>
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0!1W1
0%020=0_0p0z0
0&101j1
0(040S0]0|0
0.060A0I0f0
000004B0
0123456789ABCDEF
041:1o1
0D0Q0W0a0g0m0
0j1p1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1
1"121L1V1
1&11171H1S1Y1^1d1
1)1H1R1q1{1
1*161B1N1T1k1x1
1;2I2d2r2
1=%d%c2=%d
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
172A2g2{2
181D1J133o3
2%3>3R3_3
2>2`2{2
2-2<2b2
222A2L2Y2r2
3"4>4
3%3+383Q3f3{3
3&333?3P3]3i3z3
3'3-323<3]3e3u3}3
373P3d3
3L3s3
4"454m4}4
4&4A4\4w4
4)555
4'4@4S4^4}4
4-4C4Y4l4
474Z4
4a4n4
5#6-646E6R6b6
5&5,525y5
5)5<5X5k5
5,5h5
5?5W5x5
5+5I5^5j5v5
5'5-575=5C5q5
565[5o5
6!6C6T6j6{6
6#6-6:6i6z6
6$6*606e6
6@7\7
6+696K6T6Y6c6i6o6
616I6_6r6}6
6-6D6a6|6
7!7:7F7h7
7!7H7X7]7
7$7*7^7
7$7f7
7(8;8T8g8q8
7)7A7Y7g7
8 8&8,8Z8q8
8&808T8
8*8Q8o8y8
86:O:c:
878>8D8M8Z8z8
8B8T8
9"9'9-939p9
9.9L9l9
9/9^9l9
9>9K9X9o9|9
9H@tC
9P9W9l9s9
9Q9i9n9x9~9
9t$$t
9Y9w9
a .expand-collapse {
a:hover { 
a:link, a:visited { 
anonymous
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-libraryloader-l1-2-1.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-localization-l1-2-2.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-synch-l1-2-1.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
areas
Attempt to delete obsolete FREB log file failed
berf9w
body.iistraceinfo { 
building the full file name for deletion failed
CGlobalModule::OnSuspendProcess
CHttpModule::OnAcquireRequestState
CHttpModule::OnAsyncCompletion
CHttpModule::OnAuthenticateRequest
CHttpModule::OnAuthorizeRequest
CHttpModule::OnBeginRequest
CHttpModule::OnCustomRequestNotification
CHttpModule::OnEndRequest
CHttpModule::OnExecuteRequestHandler
CHttpModule::OnLogRequest
CHttpModule::OnMapPath
CHttpModule::OnMapRequestHandler
CHttpModule::OnPostAcquireRequestState
CHttpModule::OnPostAuthenticateRequest
CHttpModule::OnPostAuthorizeRequest
CHttpModule::OnPostBeginRequest
CHttpModule::OnPostEndRequest
CHttpModule::OnPostExecuteRequestHandler
CHttpModule::OnPostLogRequest
CHttpModule::OnPostMapRequestHandler
CHttpModule::OnPostPreExecuteRequestHandler
CHttpModule::OnPostReleaseRequestState
CHttpModule::OnPostResolveRequestCache
CHttpModule::OnPostUpdateRequestCache
CHttpModule::OnPreExecuteRequestHandler
CHttpModule::OnReadEntity
CHttpModule::OnReleaseRequestState
CHttpModule::OnResolveRequestCache
CHttpModule::OnSendResponse
CHttpModule::OnUpdateRequestCache
CloseHandle
CLSIDFromString
color:black;
CompanyName
ContextId
ConvertToXmlEscapedStringQuickly
ConvertToXmlEscapedStringQuicklyA
CreateDirectoryW
CreateEventW
CreateFileW
CreateProcessW
CreateThread
CreateTimerQueueTimer
CUSTOM_ACTION_FAILED
CUSTOM_ACTION_TRIGGER_LIMIT_EXCEEDED
customActionExe
customActionParams
customActionsEnabled
customActionTriggerLimit
D$$PWWWWWW
DebugBreak
DelayLoadFailureHook
DeleteCriticalSection
DeleteFileW
DeleteTimerQueueTimer
directory
div.buffer {
div.hidden { 
div.outer { 
enabled
EnterCriticalSection
ErrorCode
EVENT_VERBOSITY_LEVEL
Failed requests event buffering module
Failed to allocate memory to lookup list of FREB log files to be deleted
Failed to build the full file name for deletion
Failed to build the pattern string for the FindFirstFileW()
Failed to build the pattern string for the FindFirstFileW() 
failed to call DeleteTimerQueueEx(): hr=0x%x
Failed to create FREB log directory %S
Failed to create FREB XSL file
Failed to create/open FREB log file %S
Failed to handle trace event (freb request context initialize) hr=0x%x
Failed to handle trace event (GetParsedMetadata()) hr=0x%x
Failed to initialize freb configuration
Failed to initialize freb configuration for trace provider definitions
Failed to open FREB log file %S
Failed to process GUID (%S)
Failed to recognize trace provider:"%S" and/or trace areas:"%S"
Failed to retrieve trace event hr=0x%x
Failed to serialize all trace events
Failed to translate areas (%S)
Failed to write all the data to FREB log file
Failed to write freb log file
Failed to write to FREB log file
failureDefinitions
false
fieldset {
fieldset div.severity-critical,
fieldset div.severity-error {
fieldset div.severity-error,
fieldset div.severity-failed,
fieldset div.severity-informational,
fieldset div.severity-verbose  {
fieldset div.severity-warning {
fieldset div.severity-warning,
fieldset fieldset {
fieldset fieldset table th{  
fieldset fieldset table tr.alt td, 
fieldset fieldset table tr.alt th { 
FileDescription
FileTimeToSystemTime
FileVersion
FindClose
FindFirstFileW
FindFirstFileW() failed
FindNextFileW
FindNextFileW() failed
FindResourceW
-FJRich
FormatMessageW
fr%06u.xml
fr*.xml
Freb detected response status:%d, substatus:%d
FREB FindNextFileW() failed
freb.xsl
Freb: add event to log file:%S
Freb: attempt to buffer event:%S
Freb: attempt to create directory %S
Freb: enable tracing for the current request -provider:%s, area:%d, verbosity:%d
Freb: Log file %S closed for writing (freb events are persisted now)
Freb: Log file %S opened for writing
Freb: There are buffered events present but FREB is currently not able to write out data becausescavenging of files doesn't work log
Freb: timeout limit reached. All events buffered so far will be written to a log file
FREB_LOG_FILE_MANAGER::GetLogFileHandle
FREB_LOG_FILE_MANAGER::OpenFile
FREB_LOG_FILE_MANAGER::UpdateNextLogFileSequenceNumber
FREB_LOG_FILE_MANAGER::WriteLogFile
FREB_LOG_NT_EVENT_TABLE
FREB_META_STORED_CONTEXT::Initialize
FREB_META_STORED_CONTEXT::InitializeTraceProviderDefinitions
FREB_REQUEST_CONTEXT::BufferTraceEventInMemory
FREB_REQUEST_CONTEXT::DoExpiredAction
FREB_REQUEST_CONTEXT::MatchFailureDefinitionsStatusCode
FREB_REQUEST_CONTEXT::SetFrebTraceConfigForRequest
FREB_REQUEST_CONTEXT::WriteTraceEventsToFile
FREB_SITE_META_STORED_CONTEXT::DeleteFrebLogFile
FREB_SITE_META_STORED_CONTEXT::ScavengeFrebLogFiles
FREB_TIMEOUT_MONITOR_LIST::~FREB_TIMEOUT_MONITOR_LIST
FREB_XML_SERIALIZER::SerializeTraceEvent
FREB_XSL_FILE
FreeLibrary
GetComputerNameW
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetExitCodeProcess
GetLastError
GetProcessHeap
GetProcessId
GetSystemDefaultLocaleName
GetSystemTime
GetSystemTimeAsFileTime
GetThreadId
GetTickCount
GetUserNameExW
h1 { 
h2 { 
HandleGlTraceEvent
HandleRootRqBeginRequest
HeapAlloc
HeapFree
HeapReAlloc
HostableWebCore
IIS_EnableFailedRequestLog
iisfreb
iisfreb.dll
iisfreb.pdb
IISGetPlatformType
IISInitializeCriticalSection
iisres.dll
iisutil.dll
ImpersonateLoggedOnUser
InitializeCriticalSectionAndSpinCount
Internal Server Error
InternalName
Internet Information Services
IsStringEqualOrdinalIgnoreCase
iswspace
j [j,Y
j*Yf9
j.Yf;
j-Xf;
K0W0c0k0u0~0
L$(j/^f90t
L$(VP
L$0j@P
L$Tf9tH
L$XVP
Last write time is not available. File system may not support that
LeaveCriticalSection
LegalCopyright
legend {
legend.no-expand-all {
LoadLibraryExW
LoadResource
LockResource
LOG_FILE_MAX_SIZE_TRUNCATE
MACHINE/WEBROOT/APPHOST
MACHINE/WEBROOT/APPHOST/
MakePathCanonicalizationProof
malloc
maxLogFiles
maxLogFileSizeKB
memcpy
memset
Microsoft Corporation
msvcrt.dll
N*:!L
NOT_AVAILABLE
ntdll.dll
OpenThreadToken
OriginalFilename
OutputDebugStringA
p,h8.
PPCSP
ProductName
ProductVersion
provider
PROVIDER_DEFINITIONS_STORED_ENTRY::InitializeInstance
PROVIDER_DEFINITIONS_STORED_ENTRY::TranslateAreasToDword
PROVIDER_DEFINITIONS_STORED_LIST::TranslateProviderNameAndAreas
PuCreateDebugPrintsObject
PuDbgPrint
PuDbgPrintError
PuDeleteDebugPrintsObject
PuLoadDebugFlagsFromRegStr
QQPh l
QQSV3
QQSVW
QQSVWh
QSVj 3
QueryPerformanceCounter
RegisterModule
ResolveDelayLoadedAPI
RevertToSelf
RtlExpandEnvironmentStrings
SERVER_VARIABLE
servercommon\inetsrv\iis\iisrearc\iis70\freb\freb_log_file_manager.cxx
servercommon\inetsrv\iis\iisrearc\iis70\freb\freb_meta_context.cxx
servercommon\inetsrv\iis\iisrearc\iis70\freb\freb_module.cxx
servercommon\inetsrv\iis\iisrearc\iis70\freb\freb_request_context.cxx
servercommon\inetsrv\iis\iisrearc\iis70\freb\freb_site_meta_context.cxx
servercommon\inetsrv\iis\iisrearc\iis70\freb\freb_timeout_monitor.hxx
servercommon\inetsrv\iis\iisrearc\iis70\freb\freb_xml_serializer.cxx
servercommon\inetsrv\iis\iisrearc\iis70\freb\provider_definitions_stored_list.cxx
SetEvent
SetThreadToken
SetTraceConfiguration() failed
SetUnhandledExceptionFilter
SizeofResource
Sleep
sortfn =ts_sort_numeric;
span.iistraceinfo { background-color:white; color:black;font-size:1em; word-wrap: break-word; }
span.iistraceinfo a:hover { color:darkblue;text-decoration:none; }
span.iistraceinfo table { font-size:1em; cellspacing:0; cellpadding:0; margin-bottom:25; width:95%;}
span.iistraceinfo table td { padding-right:20 }
span.iistraceinfo td { padding:0,30,0,3;white-space:pre;word-wrap: break-word;white-space: pre-wrap;}
span.iistraceinfo th { padding:0,3,0,3 }
span.iistraceinfo tr.alt { background-color:F8F8F8; color:black }
span.iistraceinfo tr.subhead { background-color:cccccc;}
SspiCli.dll
STATUS_CODE
statusCodes
StringFileInfo
system.webServer/tracing/traceFailedRequests
system.webServer/tracing/traceProviderDefinitions
SystemTimeToFileTime
t Wh<"
t"Vh`7
t$h('
t$h`.
t$hx*
t$ShP
t%Vh\+
t?h -
t^h /
t<9H\t7
table {
table table th,
table table tr td,
table table tr th,
table table tr.alt td,
table table tr.alt th { 
table tr.alt table tr td,
table tr.alt table tr th,
table tr.alt table tr.alt td,
table tr.alt table tr.alt th { 
table tr.alt td, 
table tr.alt th { 
table.column-1 {
table.column-2 {
table.column-2 th {
table.request-summary {
table.sortable a.sortheader { 
table.sortable span.sortarrow { 
td .severity-critical,
td .severity-error,
td .severity-failed,
td .severity-informational,
td .severity-verbose {
td .severity-warning,
td.col-actions,
td.col-duration,
td.col-event,
td.col-filter-module,
td.col-name,
td.col-notification,
td.col-number,
td.col-severity,
td.col-uri,
td.col-view,
td.event-data {
td.event-name {
tdhD*
TerminateProcess
th { 
th.col-actions {
th.col-duration {
th.col-event {
th.col-filter-module {
th.col-name {
th.col-notification {
th.col-number {
th.col-severity {
th.col-uri {
th.col-view {
thead th {
This module subscribed to event 
TIME_TAKEN
timeTaken
tKj@j
towupper
traceAllAfterTimeout
traceAreas
traceFailedRequestsLogging
Translation
u#9K u
Unable to Create Debug Print Object 
UnhandledExceptionFilter
UNKNOWN
value
VarFileInfo
verbosity
VS_VERSION_INFO
w(9w$t 
W3SVC
W3SVC-WP
WaitForMultipleObjects
WaitForSingleObject
wcscpy_s
wcstoul
WriteFile
x<hx(
x5SSSh
x6F;u
xGh$4
xoh$4
Y__^[
