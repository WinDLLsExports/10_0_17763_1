     
                        "__tag": true,
                        "key": "availabilityId",
                        "key": "devOfferId",
                        "key": "parentProductId",
                        "key": "productId",
                        "key": "skuId",
                        "type": "string"
                    "__tag": true,
                    "availabilityId": {
                    "devOfferId": {
                    "key": "deviceFamily",
                    "key": "deviceMoid",
                    "key": "deviceOemid",
                    "key": "deviceScmid",
                    "key": "languages",
                    "key": "market",
                    "productId": {
                    "quantity": "1",
                    "skuId": {
                    "type": "string"
                    }
                    },
                "__tag": true,
                "client": "UniversalStoreInApp",
                "defaultValue": 25
                "deviceFamily": {
                "deviceMoId": {
                "deviceOemId": {
                "deviceScmId": {
                "isOptional": true
                "key": "AppServiceName",
                "key": "bidRequest",
                "key": "consumableProductId",
                "key": "continuationToken",
                "key": "customDeveloperString",
                "key": "data",
                "key": "deviceFamily",
                "key": "DeviceId",
                "key": "deviceMoid",
                "key": "deviceOemid",
                "key": "deviceScmid",
                "key": "entitlementFilters",
                "key": "includeRelationship",
                "key": "locale",
                "key": "market",
                "key": "maxPageSize",
                "key": "Offer",
                "key": "optionalData",
                "key": "orderId",
                "key": "parameters",
                "key": "parentProductId",
                "key": "PFN",
                "key": "ProductId",
                "key": "productSkuIds",
                "key": "publisherUserId",
                "key": "quantity",
                "key": "relatedProductIds",
                "key": "serviceTicket",
                "key": "SkuId",
                "key": "StoreId",
                "key": "trackingId",
                "key": "type",
                "languages": {
                "market": {
                "type": "array",
                "type": "beneficiaryArray"
                "type": "goldenBeneficiary",
                "type": "goldenBeneficiaryArray"
                "type": "number",
                "type": "object"
                "type": "string"
                "type": "string",
                {
                }
                },
            "alwaysEnforceDoublePurchasePolicy": true
            "applicationId": {
            "AppServiceName": {
            "beneficiaries": {
            "beneficiary": {
            "bidRequest": {
            "clientContext": {
            "continuationToken": {
            "customDeveloperString": {
            "data": {
            "deviceFamily": {
            "DeviceId": {
            "deviceMoid": {
            "deviceOemid": {
            "deviceScmid": {
            "enforceSellableBy": true,
            "entitlementFilters": {
            "includeRelationship": {
            "items": [
            "language": {
            "locale": {
            "market": {
            "maxPageSize": {
            "ModalFlow": "redeem",
            "ModalFlow": "smartInstall",
            "ModalFlow": "writeRatingsAndReview",
            "Offer": {
            "OptionalData": {
            "orderId": {
            "orderState": "Purchased",
            "parameters": {
            "ParentProductId": {
            "parentProductId": {
            "PFN": {
            "productId": {
            "ProductId": {
            "productSkuIds": [
            "productSkuIds": {
            "publisherUserId": {
            "relatedProductIds": {
            "removeQuantity": {
            "serviceTicket": {
            "SkuId": {
            "StoreId": {
            "storeSdkAttributes": {
            "trackingId": {
            "type": {
            "validityType": "Valid",
            ]
            ],
            }
            },
        "__COMMENT__": "#0 - Get Parent Product",
        "__COMMENT__": "#0 purchase StoreID with extended response",
        "__COMMENT__": "#1 - Get User Collection for Parent Product",
        "__COMMENT__": "#1 invoke background task",
        "__COMMENT__": "#10 StoreList Query",
        "__COMMENT__": "#11 Search for products by query",
        "__COMMENT__": "#12 Given a set of product IDs, return the average ratings and counts",
        "__COMMENT__": "#13 ContentId/KeyId lookup by ProductId for ParentProduct",
        "__COMMENT__": "#14 ContentId/KeyId lookup by ProductId NO ParentProduct",
        "__COMMENT__": "#15 Invoke In App Redeem using Purchase Flow",
        "__COMMENT__": "#16 Invoke In App Rating & Review using Purchase Flow",
        "__COMMENT__": "#17 StoreList Query with previewStore",
        "__COMMENT__": "#18 Given a set of product IDs, return the average ratings and counts (previewStore)",
        "__COMMENT__": "#19 Ad SDK to get Mixer Ad data for Inline Purchase experience",
        "__COMMENT__": "#2 - Get User Collection for Products",
        "__COMMENT__": "#2 TVOD",
        "__COMMENT__": "#20 Get list of PTI devices for a user",
        "__COMMENT__": "#21 Push product to device",
        "__COMMENT__": "#22 AAD token based monetization apis - RS4+ Only",
        "__COMMENT__": "#23 SFDS Suggestion Service - RS5+ Only",
        "__COMMENT__": "#24 Invoking PurchaseApp (SXH) for the Smart Install scenario - RS5+ Only",
        "__COMMENT__": "#3 - Get Products, No Parent (No license needed)",
        "__COMMENT__": "#3 purchase StoreID with force retail sandbox without license refresh",
        "__COMMENT__": "#4 - Get Products From Parent (Must have a valid license)",
        "__COMMENT__": "#4 Force license refresh for all online running licenses",
        "__COMMENT__": "#5 - Get User Collection for Parent Product by Family",
        "__COMMENT__": "#5 Acquire a device license - RS2+ Only",
        "__COMMENT__": "#6 - Consume Consumable",
        "__COMMENT__": "#6 Acquire a license token -  RS2+ Version",
        "__COMMENT__": "#7 - Get Customer Purchase Id",
        "__COMMENT__": "#7 Device token based monetization apis - RS2+ Only",
        "__COMMENT__": "#8 - Get Customer Collections Id",
        "__COMMENT__": "#8 Store User token based monetization apis",
        "__COMMENT__": "#9 - Get Products by Family from Parent",
        "__COMMENT__": "#9 Lookup ProductId from PackageFamilyName",
        "__COMMENT__": "Get campaign ID for device (RS4+)",
        "__COMMENT__": "Get campaign ID for user or device (RS5+)",
        "__COMMENT__": "Get Microsoft Accrued for device (RS4+)",
        "__COMMENT__": "Get Microsoft Accrued for user or device (RS5+)",
        "AnonymousRequest": true,
        "AuthType": 1,
        "AuthType": 2,
        "AuthType": 4
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyBufferMaxSize": 20000,
        "BodyBufferMaxSize": 300,
        "BodyTemplate": {
        "DoPost": true,
        "FallbackToDeviceAuth": true
        "ForceRetailSandbox": true,
        "Height": 384
        "Height": 560
        "Index": 0,
        "Index": 1,
        "Index": 10,
        "Index": 11,
        "Index": 12,
        "Index": 13,
        "Index": 14,
        "Index": 15,
        "Index": 16,
        "Index": 17,
        "Index": 18,
        "Index": 19,
        "Index": 2,
        "Index": 20,
        "Index": 21,
        "Index": 22,
        "Index": 23,
        "Index": 24,
        "Index": 25,
        "Index": 26,
        "Index": 27,
        "Index": 28,
        "Index": 3,
        "Index": 4,
        "Index": 5,
        "Index": 6,
        "Index": 7,
        "Index": 8,
        "Index": 9,
        "InvokePurchaseFlow": true,
        "OmitAuthTokenPrefix": true
        "RefreshLicenses": true
        "RefreshLicenses": true,
        "RequiresCapability": "previewStore",
        "RequiresCapability": "storeAppInstallation",
        "RequiresCapability": "xboxXDK",
        "RequireValidLicense": false
        "RequireValidLicense": false,
        "URI": "https://adbroker.mp.dse.microsoft.com/v1/adbroker/srtb2",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/consume",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "URI": "https://collections.mp.microsoft.com/v7.0/beneficiaries/me/keys",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/{parentProductId}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/lookup{market:market}{languages:languages}{packageFamilyName:value}&fieldsTemplate=empty&alternateid=PackageFamilyName",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products/lookup{parentProductId:value}{market:market}{languages:languages}{itemCount:$top}{skipCount:$skip}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK&actionFilter=Purchase&alternateId=SellableBy",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "URI": "https://licensing.mp.microsoft.com/v8.0/licenseToken",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/aad",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/device",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/user",
        "URI": "https://pti.store.microsoft.com/v1/pti/devices{market:market}{languages:languages}{productId:productId}{skuId:skuId}",
        "URI": "https://pti.store.microsoft.com/v1/pti/push{market:market}",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/keys",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/orders",
        "URI": "https://sfdataservice.microsoft.com/smartinstall/v1.0/suggestions/suggest",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}{displayMode:displayMode}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}{displayMode:displayMode}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/search{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{query:query}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}&parentProductId=",
        "URIBufferMaxSize": 1024,
        "UseAuthIfAvailable": true
        "UseBackgroundTask": true,
        "UserTokenTypes": 3,
        "Width": 456,
        "Width": 640,
        }
        },
      %02u skuType = %s, productId = %s, title = %s, customDeveloperData = %s, price = %s%s (%s), extendedData = %s, description = %s
      <no sku data>
    "LinkUriFormat": "https://www.microsoft.com/store/{idType}/{id}",
    "MDCollections": "https://collections.mp.microsoft.com/",
    "MDDisplayCatalog": "https://displaycatalog.mp.microsoft.com/",
    "MDGetAppReceiptsDesktop": "https://licensingwindows.mp.microsoft.com/Licensing/License/AcquireReceipt/6.2/0?productId={productId}&receiptType={receiptType}",
    "MDGetAppReceiptsMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/appreceipts?os=8.10.12400.0&cc={cc}&lang={lang}&parentProductId={parentProductId}&installedPublisherId={installedPublisherId}",
    "MDGetOneProductReceiptMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/receipts?os=8.10.12400.0&cc={cc}&lang={lang}&parentProductId={parentProductId}&featureName={featureName}&installedPublisherId={installedPublisherId}",
    "MDPurchase": "https://purchase.mp.microsoft.com"
    "OneStoreAuthenticationDomain": "www.microsoft.com",
    "smartInstall": {
    "writeRatingsAndReview": {
    %02u inAppOfferToken = %s, transId = %s, offerId = %s
    %02u offerToken = %s, productId = %s, name = %s, price = %s%s (%s), type = %u, isOnSale = %hs, tag = %s
    %02u productId = %s, offerId = %s, productType = %u, skuId = %s, isTrial = %hs, catalogId = %s, expires %u/%u/%u
    {
    }
    },
    <empty list>
  %02u inAppOfferToken = %s, productId = %s, transId = %s, offerId = %s
  %02u inAppOfferToken = %s, productId = %s, type = %u, price = %s, name = %s
  <empty list>
  <missing list>
  AppId: %s, Name: %s
  Description: %s%hs
  ExpirationDateTime: %u/%u/%u %02u:%02u:%02u
  InAppOfferArray: %hs
  IsActive: %hs, IsTrial: %hs, App type: %u, Listner count: %u
  IsOnSale: false
  IsOnSale: TRUE, Sale End Date: %u/%u/%u %02u:%02u:%02u
  IsUAP: %hs, Market: %s, Locale: %s, Age Rating: %u
  LicenseInstance: %hs
  LicenseManager: %hs
  Price: %s, Base Price: %s, Currency Symbol: %s, Currenty Code: %s
  Ticks until next check: %u
  UnfulfilledList: %hs
 !"#$%&'()*+,-./0123
 8 ^ 
 A^_^
 A^_^[]
 A^_^][
 A^A\_
 A^A\_^]
 A^A]A\_^[]
 A__^
 A_A^_
 A_A^_^]
 A_A^A\
 A_A^A\_^
 A_A^A\_^[]
 A_A^A\_^][
 A_A^A]A\_
 A_A^A]A\_^]
 H3E H3E
 http://www.microsoft.com/windows0
 IAsyncAction
 info
 LcI L
 Microsoft Corporation. All rights reserved.
 Operating System
 R"x"
 WARN
 Windows
!(storeId && packageFamilyName)
!*WPq
!\$(%
!\$(H
!\$(I
!^ B!h!$
!_hInternet
!_pszServer
!|$(3
!|$pL
!af]D`
!L$0H
!L$4A
!m_userObject || IsUMgrGetConstrainedUserTokenPresent()
!storeProductId.IsValid() && "Shouldn't be a storeId yet in this scenario"
!t$8H
!This program cannot be run in DOS mode.
"Microsoft Time Source Master Clock0
"Microsoft Window
"qG9_
"uuk1
"z}!M
"zB_Wc
####-##-##T##:##:##S
##:##
#6#\#
#Vx"&6
$\getnextusercollection.cpp
$`2X`F
$HoL~F
$kb{r
$Microsoft Ireland Operations Limited1
$Microsoft Ireland Operations Limited1&0$
$Microsoft Root Certificate Authority0
$r%_iLM
$Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,0>::DoWorkStub
% moa
%*%P%v%
%\=ybLy6
%>4.}
%04u-%02u-%02u%s%02u:%02u:%02u%s
%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
%eRWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAppLicense *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAppLicense *>,0>::DoWorkStub
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%d)\%hs!%p: 
%localappdata%\Microsoft\Windows\WER\ReportArchive
%localappdata%\Microsoft\Windows\WER\ReportQueue
%localappdata%\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalState\store.etl
%s%02d:%02d:%09.6f
%s%d.%02d:%02d:%09.6f
%s%hs:%ws
%s-%s-%d-%s
%s:%s
%s:%s:%s
%windir%\Logs\dosvc
%windir%\Logs\WindowsUpdate
%windir%\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\logs
%windir%\SoftwareDistribution\ReportingEvents.log
%ws&$skip=%u
-&.L.~.
&_*q<|
&FCr}
&OL0O
&platformDependencyName=Windows.Universal
&platformDependencyName=Windows.Windows8x
&platformDependencyName=Windows.WindowsPhone8x
(((HRESULT)(hr)) < 0)
(((HRESULT)(spAsyncInfo->get_ErrorCode((&(__hr))))) >= 0)
(((HRESULT)(spAsyncInfo->get_Status(&status))) >= 0)
((wcschr(pszUriBase, L'{')) == 0) && "On this overload, the uri base must be *clean*; no parameters allowed"
(_^][
(|$0I
(|$PI
(0x%08x)
(A_A^A]A\_^[]
(A_A^A]A\_^][
(caller: %p) 
(D$ H
(D$0H
(invalid)
(PeOC
(QD)Qj
(t$@H
(t$@L
(t$`L
(t$0H
(t$pH
(t$PH
(t$pH
(t$PL
(v"0g
)D$@H
)D$0f
)D$0H
)D$Pf
)Microsoft Root Certificate Authority 20100
)t$@L
)t$PE
)t$pH
*"4I/
*.etl
*s%rBW
,_01#
,a$Cs
,inmFMnjTKKPzkdih8VTJiYJiV6JhQ7dQDZ7sYIbvj14=0Z
../Z/
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.data
.data$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.orpc
.pcQhhA{
.pdata
.rdata
.rdata$brc
.rdata$T$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.report.wer.txt
.rsrc
.rsrc$01
.rsrc$02
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata
/"0N0z0
//ServiceEnvironment/Authentication
//ServiceEnvironment/StoreSDK
/Aip2Mw=
/R$\_%J
/R8vJ
/Z*Px
/Z/y<
/Z-[E
/Z{I<
/Z}7F
-/Z3l
/Z7i*
/Z8@b
/ZeOC
/ZhM{
/ZsOg
/ZsOg<
/ZUo~9@D
/ZW^6
/ZxqL
:(QD)u'
:.:T:z:
:/UJZ
::)NMu(
::WindowsDuplicateString(_availabilityId.Get(), pValue)
::WindowsDuplicateString(_campaignId.Get(), pValue)
::WindowsDuplicateString(_Caption.Get(), pValue)
::WindowsDuplicateString(_currencyCode.Get(), pValue)
::WindowsDuplicateString(_customDeveloperData.Get(), pValue)
::WindowsDuplicateString(_description.Get(), pValue)
::WindowsDuplicateString(_devOfferId.Get(), pValue)
::WindowsDuplicateString(_extendedJsonData.Get(), pValue)
::WindowsDuplicateString(_formattedBasePrice.Get(), pValue)
::WindowsDuplicateString(_formattedPrice.Get(), pValue)
::WindowsDuplicateString(_formattedRecurrencePrice.Get(), pValue)
::WindowsDuplicateString(_fulfillmentType.Get(), pValue)
::WindowsDuplicateString(_inAppOfferToken.Get(), pValue)
::WindowsDuplicateString(_language.Get(), pValue)
::WindowsDuplicateString(_name.Get(), pValue)
::WindowsDuplicateString(_packageFamilyName.Get(), value)
::WindowsDuplicateString(_productId.Get(), pValue)
::WindowsDuplicateString(_productKind.Get(), pValue)
::WindowsDuplicateString(_Purpose.Get(), pValue)
::WindowsDuplicateString(_response.Get(), value)
::WindowsDuplicateString(_skuId.Get(), pValue)
::WindowsDuplicateString(_storeId.Get(), pValue)
::WindowsDuplicateString(_title.Get(), pValue)
::WindowsDuplicateString(_trialUniqueId.Get(), pValue)
:@8y]tCH
:@8y=tCH
:0t4D
:sOg<u+
:Uo~9u(
;\$0r
;](t/
;|$@r
;}@sq
;3RQs
;t$@sdL
??_V@YAXPEAX@Z
?\reportconsumablefulfillmentoperationserver.cpp
?456789:;<=
?http://crl.microsoft.com/pki/crl/products/microsoftrootcert.crl0T
@#8X2
@.data
@.didat
@.reloc
@8imu'
@8imu>
@8iMu>
@8imu>
@8t$Xt.L
@8u u.
@8u(u
@A^^]
@A^_]
@A^_^
@A^_^[]
@A^A\_
@A_A\_^]
@A_A^]
@A_A^_
@A_A^_^]
@A_A^A\
@A_A^A\_^[]
@A_A^A\_^][
@A_A^A]_^
@A_A^A]_^[]
@A_A^A]A\_^]
@eFu!
@pD;h
@SUVWATAUAVAWH
@SUVWATAVAWH
@SUVWAVAWH
@SUVWAVH
@SUVWH
@SVWH
@USVWATAUAVAWH
@USVWATAVAWH
@USVWAUAVAWH
@USVWAVAWH
@USVWAVH
@USVWH
@USWATAUAVAWH
@USWAVAWH
@USWH
@UVAVH
@UVWAVAWH
[%hs(%hs)]
[%hs]
[[g/`
[CV:%2]
[r)r;@
\$ E3
\$ UH
\$ UVWATAUAVAWH
\$ UVWAVAWH
\$ UVWH
\$ WH
\$(E3
\$@H;M
\$`H;
\$`H9]
\$0D!0
\$HE3
\$HH9Y8
\$HH9YX
\$pH;
\$xD8l$p
\$xD9m
\$xH;
\\?\T:\Windows\System32\LogFiles\DOSvc
\\?\T:\Windows\System32\Logfiles\WMI\RtBackup\StoreOperational.etl
\_)Wt
\appinfo.cpp
\apppurchaseoperationserver.cpp
\backgroundtaskoperation.cpp
\catalogserviceproxy.cpp
\clientprocessutils.cpp
\collectionsserviceproxy.cpp
\currentappserver.cpp
\CurrentAppServer.h
\external\inc\eratitleinfo.h
\getappandsupplementalstorepackageupdatesoperation.cpp
\getnextstorelistingforassociatedproducts.cpp
\getunfulfilledconsumablesoperationserver.cpp
\K_{B<
\licenseinformationserver.cpp
\licensesatisfactioninfo.cpp
\licensesatisfactionresult.cpp
\listinginformationserver.cpp
\loadlistingoperationserver.cpp
\log.cpp
\messagedialoghelper.cpp
\priceformat.cpp
\productidcache.cpp
\productlicensemap.cpp
\productlicenseserver.cpp
\productlistingserver.cpp
\productpurchasedisplaypropertiesserver.cpp
\productpurchaseoperationserver.cpp
\productreceiptretrievaloperationserver.cpp
\purchaseeventargsredstone.cpp
\purchaseoperation.cpp
\purchaseresultsserver.cpp
\purchasestahelper.cpp
\purchasestahelper.h
\receipthelpers.cpp
\receiptretrievaloperationserver.cpp
\requestproductpurchasebyskuidoperationserver.cpp
\requestproductpurchasewithdisplaypropertiesoperationserver.cpp
\requestproductpurchasewithresultsoperationserver.cpp
\rpchelpers.cpp
\storecommerceserver.cpp
\storeconfigurationserver.cpp
\StoreContentIdKeyIdItem.h
\StoreContentIdKeyIdResponse.h
\storecontextserver.cpp
\storehardwaremanufacturerinfoserver.cpp
\StorePackageLicenseWnfWatcher.h
\storepackageupdate.cpp
\storepreviewproductinfoserver.cpp
\storepreviewpurchaseresultsserver.cpp
\storepreviewserver.cpp
\storepreviewskuinfoserver.cpp
\storequeueitem.cpp
\tokenbrokercomponentuilauncher.cpp
\unfulfilledconsumableserver.cpp
\urihelper.cpp
\winrtapi.cpp
\winstoreauth.cpp
\winstoreauthstatics.cpp
\wscollector.cpp
];k?s
]@H9^8t?H
-][K+
]HD9x
]hH!|$ L
]HH!|$ L
]HH!l$ L
]HI9^Xt?H
]XD9e@t
^HL!l$ L
__C_specific_handler
__CxxFrameHandler3
__dllonexit
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIAsyncOperation_1___FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIAsyncOperation_1___FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CFulfillmentResult
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionResult
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CListingInformation
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewPurchaseResults
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CPurchaseResults
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreAcquireLicenseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreAppLicense
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreCanAcquireLicenseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreConsumableResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductPagedQueryResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductQueryResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStorePurchaseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreRateAndReviewResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreSendRequestResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreUninstallStorePackageResult
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CFulfillmentResult
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionResult
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CListingInformation
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewPurchaseResults
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CPurchaseResults
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreAcquireLicenseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreAppLicense
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreCanAcquireLicenseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreConsumableResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductPagedQueryResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductQueryResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStorePurchaseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreRateAndReviewResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreSendRequestResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreUninstallStorePackageResult
__FIAsyncOperationProgressHandler_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIAsyncOperationWithProgress_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1___FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIIterable_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIIterable_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIIterable_1_Windows__CServices__CStore__CStoreAvailability
__FIIterable_1_Windows__CServices__CStore__CStoreCollectionData
__FIIterable_1_Windows__CServices__CStore__CStoreImage
__FIIterable_1_Windows__CServices__CStore__CStoreLicense
__FIIterable_1_Windows__CServices__CStore__CStorePackageUpdate
__FIIterable_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1_Windows__CServices__CStore__CStoreProduct
__FIIterable_1_Windows__CServices__CStore__CStoreQueueItem
__FIIterable_1_Windows__CServices__CStore__CStoreSku
__FIIterable_1_Windows__CServices__CStore__CStoreVideo
__FIIterator_1___FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIIterator_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIIterator_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIIterator_1_Windows__CServices__CStore__CStoreAvailability
__FIIterator_1_Windows__CServices__CStore__CStoreCollectionData
__FIIterator_1_Windows__CServices__CStore__CStoreImage
__FIIterator_1_Windows__CServices__CStore__CStoreLicense
__FIIterator_1_Windows__CServices__CStore__CStorePackageUpdate
__FIIterator_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterator_1_Windows__CServices__CStore__CStoreProduct
__FIIterator_1_Windows__CServices__CStore__CStoreQueueItem
__FIIterator_1_Windows__CServices__CStore__CStoreSku
__FIIterator_1_Windows__CServices__CStore__CStoreVideo
__FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIMap_2_HSTRING_EventRegistrationToken
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIMap_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIMap_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIMap_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIMap_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIMapView_2_HSTRING_EventRegistrationToken
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIMapView_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreContext_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStorePackageLicense_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreQueueItem_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreQueueItem_Windows__CServices__CStore__CStoreQueueItemCompletedEventArgs
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIVector_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIVector_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIVector_1_Windows__CServices__CStore__CStoreAvailability
__FIVector_1_Windows__CServices__CStore__CStoreCollectionData
__FIVector_1_Windows__CServices__CStore__CStoreImage
__FIVector_1_Windows__CServices__CStore__CStoreLicense
__FIVector_1_Windows__CServices__CStore__CStorePackageUpdate
__FIVector_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIVector_1_Windows__CServices__CStore__CStoreProduct
__FIVector_1_Windows__CServices__CStore__CStoreQueueItem
__FIVector_1_Windows__CServices__CStore__CStoreSku
__FIVector_1_Windows__CServices__CStore__CStoreVideo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIVectorView_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIVectorView_1_Windows__CServices__CStore__CStoreAvailability
__FIVectorView_1_Windows__CServices__CStore__CStoreCollectionData
__FIVectorView_1_Windows__CServices__CStore__CStoreImage
__FIVectorView_1_Windows__CServices__CStore__CStoreLicense
__FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIVectorView_1_Windows__CServices__CStore__CStoreProduct
__FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIVectorView_1_Windows__CServices__CStore__CStoreSku
__FIVectorView_1_Windows__CServices__CStore__CStoreVideo
__tag
__TlgCV__
__x_Windows_CApplicationModel_CStore_CICurrentApp
__x_Windows_CApplicationModel_CStore_CICurrentApp2Statics
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulator
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorStaticsWithFiltering
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorWithCampaignId
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorWithConsumables
__x_Windows_CApplicationModel_CStore_CICurrentAppStaticsWithFiltering
__x_Windows_CApplicationModel_CStore_CICurrentAppWithCampaignId
__x_Windows_CApplicationModel_CStore_CICurrentAppWithConsumables
__x_Windows_CApplicationModel_CStore_CILicenseChangedEventHandler
__x_Windows_CApplicationModel_CStore_CILicenseInformation
__x_Windows_CApplicationModel_CStore_CIListingInformation
__x_Windows_CApplicationModel_CStore_CIListingInformation2
__x_Windows_CApplicationModel_CStore_CInternal_CIAuthenticationExtension
__x_Windows_CApplicationModel_CStore_CInternal_CIConsumableProduct
__x_Windows_CApplicationModel_CStore_CInternal_CILicenseInformationPrivate
__x_Windows_CApplicationModel_CStore_CInternal_CILicenseInformationPrivateWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIMessageDialogHelper
__x_Windows_CApplicationModel_CStore_CInternal_CIMessageDialogHelper2
__x_Windows_CApplicationModel_CStore_CInternal_CIProductLicensePrivate
__x_Windows_CApplicationModel_CStore_CInternal_CIProductLicensePrivateWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIProductListingPrivate
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerce
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerce2
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommercePreview
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceSimulator
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceSimulatorWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CITestingFrameworkState
__x_Windows_CApplicationModel_CStore_CInternal_CITestingFrameworkStateChangedEventHandler
__x_Windows_CApplicationModel_CStore_CIProductLicense
__x_Windows_CApplicationModel_CStore_CIProductLicenseWithFulfillment
__x_Windows_CApplicationModel_CStore_CIProductListing
__x_Windows_CApplicationModel_CStore_CIProductListing2
__x_Windows_CApplicationModel_CStore_CIProductListingWithConsumables
__x_Windows_CApplicationModel_CStore_CIProductListingWithMetadata
__x_Windows_CApplicationModel_CStore_CIProductPurchaseDisplayProperties
__x_Windows_CApplicationModel_CStore_CIProductPurchaseDisplayPropertiesFactory
__x_Windows_CApplicationModel_CStore_CIPurchaseResults
__x_Windows_CApplicationModel_CStore_CIUnfulfilledConsumable
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseManagerStatics
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseManagerStatics2
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseSatisfactionInfo
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseSatisfactionResult
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics2
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics3
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics4
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics5
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreHardwareManufacturerInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreview
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewProductInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewPurchaseResults
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewSkuInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIWebAuthenticationCoreManagerHelper
__x_Windows_CServices_CStore_CInternal_CIGetNextStoreProductOperation
__x_Windows_CServices_CStore_CInternal_CIStoreContentIdKeyIdItem
__x_Windows_CServices_CStore_CInternal_CIStoreContentIdKeyIdResponse
__x_Windows_CServices_CStore_CInternal_CIStoreContextCallerData
__x_Windows_CServices_CStore_CInternal_CIStoreContextLicensesChangedCallback
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer2
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer3
__x_Windows_CServices_CStore_CInternal_CIStorePackageLicenseLostCallback
__x_Windows_CServices_CStore_CInternal_CIStorePackageUpdatePrivate
__x_Windows_CServices_CStore_CIStoreAcquireLicenseResult
__x_Windows_CServices_CStore_CIStoreAppLicense
__x_Windows_CServices_CStore_CIStoreAppLicense2
__x_Windows_CServices_CStore_CIStoreAvailability
__x_Windows_CServices_CStore_CIStoreCanAcquireLicenseResult
__x_Windows_CServices_CStore_CIStoreCollectionData
__x_Windows_CServices_CStore_CIStoreConsumableResult
__x_Windows_CServices_CStore_CIStoreContext
__x_Windows_CServices_CStore_CIStoreContext2
__x_Windows_CServices_CStore_CIStoreContext3
__x_Windows_CServices_CStore_CIStoreContext4
__x_Windows_CServices_CStore_CIStoreContextStatics
__x_Windows_CServices_CStore_CIStoreImage
__x_Windows_CServices_CStore_CIStoreLicense
__x_Windows_CServices_CStore_CIStorePackageInstallOptions
__x_Windows_CServices_CStore_CIStorePackageLicense
__x_Windows_CServices_CStore_CIStorePackageUpdate
__x_Windows_CServices_CStore_CIStorePackageUpdateResult
__x_Windows_CServices_CStore_CIStorePackageUpdateResult2
__x_Windows_CServices_CStore_CIStorePrice
__x_Windows_CServices_CStore_CIStoreProduct
__x_Windows_CServices_CStore_CIStoreProductOptions
__x_Windows_CServices_CStore_CIStoreProductPagedQueryResult
__x_Windows_CServices_CStore_CIStoreProductQueryResult
__x_Windows_CServices_CStore_CIStoreProductResult
__x_Windows_CServices_CStore_CIStorePurchaseProperties
__x_Windows_CServices_CStore_CIStorePurchasePropertiesFactory
__x_Windows_CServices_CStore_CIStorePurchaseResult
__x_Windows_CServices_CStore_CIStoreQueueItem
__x_Windows_CServices_CStore_CIStoreQueueItem2
__x_Windows_CServices_CStore_CIStoreQueueItemCompletedEventArgs
__x_Windows_CServices_CStore_CIStoreQueueItemStatus
__x_Windows_CServices_CStore_CIStoreRateAndReviewResult
__x_Windows_CServices_CStore_CIStoreRequestHelperStatics
__x_Windows_CServices_CStore_CIStoreSendRequestResult
__x_Windows_CServices_CStore_CIStoreSendRequestResult2
__x_Windows_CServices_CStore_CIStoreSku
__x_Windows_CServices_CStore_CIStoreSubscriptionInfo
__x_Windows_CServices_CStore_CIStoreUninstallStorePackageResult
__x_Windows_CServices_CStore_CIStoreVideo
_9@Qsvc
_amsg_exit
_AppendToDataBuffer failed
_AreAllDownloadsComplete
_availabilities->GetView(ppValue)
_BuildBeneficiaryArrayJSON
_BuildBeneficiaryJSON
_BuildGoldenBeneficiaryArrayJSON
_BuildGoldenBeneficiaryJSON
_callnewh
_CheckOptionalPackageIsValid
_ConstructRequestBody
_contentIds->GetView(value)
_ConvertAppInstallState
_ConvertStoreQueueState
_CreateConnectionAndSendRequest(pszServerName, pszUrl, fUseSecure, fUsePut ? L"PUT" : L"POST", _GetStreamSize(pUploadDataStream), port, 0, fUseAuthentication)
_DownloadData()
_errno
_extendedJsonData.Set(value)
_FilterProductsJson
_fInitialized
_GetProxyInfoForUrl(pszServerName, pszUrl, fUseSecure, &pszProxyList, &pszProxyByPass, &dwAccessType)
_hCancelInternal
_HL!t$(L
_hRequest
_hRequest == 0
_hRequest == hRequest
_images->GetView(ppValue)
_initterm
_IsNetworkMetered
_items->GetView(value)
_itow_s
_keyIds->GetView(value)
_keywords->GetView(ppValue)
_licenseLostEvent.Add(pHandler, pToken)
_licenseLostEvent.Remove(token)
_lock
_m,MJ
_mapView.CopyTo(ppValue)
_modalManager != nullptr
_name.Set(name)
_name.Set(value)
_onexit
_ParseGetProductsByKinds
_ParseLicenseInstance( spLicenseInstance, isActive, isTrial, isTrialOwnedByThisUser, trialUniqueId.GetAddressOf(), isDiscLicense, expirationDate, trialTimeRemaining, package)
_pConnection == nullptr
_pPackage.CopyTo(ppPackage)
_pPackage->get_Id(packageId.GetAddressOf())
_pPackageLicense.CopyTo(ppValue)
_productId.CopyTo(value)
_productStoreId.Set(productStoreId)
_purchaseStatus == ProductPurchaseStatus_NotPurchased
_purecall
_ReceiveResponse failed
_request.CopyTo(json)
_response.CopyTo(json)
_response.Set(json)
_s/Z{I<
_SendJsonToURLWithHttpClientForStringResponse
_set_errno
_SetProxyForCurrentRequest(pszCurrProxy, pszProxyBypass, dwAccessType)
_ShouldFilterByRelationship
_skus->GetView(ppValue)
_spPreviewImage.CopyTo(ppValue)
_spStoreContextServer.As(&result)
_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForProducts, _spCV, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
_transactionId.IsValid()
_unlock
_videos->GetView(ppValue)
_vsnprintf
_vsnwprintf
_WaitForLastAsyncCompletion failed
_wcsdup
_wcsicmp
_wcstoi64
_wcsupr
_WinStoreSDK_Receipt_Cache
_wtof
_wtoi
_wtol
_XcptFilter
` UAVAWH
`.rdata
`/ZQl
`A^_]
`A^_^[]
`A_A\_^]
`A_A^_^]
`A_A^A]A\_^]
`A9~0t3
`Ge`@N
`Lcu`H
{ ATAVAWH
{ AVH
{"status": "aborted"}
{;e<3
{268761a2-03f3-40df-8a8b-c3db24145b6b}
{client}
{d6d5a677-0872-4ab0-9442-bb792fce85c5}
{featureName}
{idType}
{installedPublisherId}
{lang}
{languages}
{market}
{marketCode}
{parentProductId}
{platformDependencyNameParam}
{productId}
{receiptType}
|$ 0t
|$ AVH
|$ UATAUAVAWH
|$ UAVAWH
|$ UH
|$(A^
|$(E3
|$@E3
|$0A^A]
|$0E3
|$8E3
|$hH;D$pu
|$hH;E
|$HH9
|$PD9l$@
|$pH;
|$PHc
|$xH;
|hK,_
}~Ru(
}xH;E
~!_^yg
~/ZxqL
~HD+x
~v})(\
~xLx_
+!]8L
+0k'K
+6+\+
+R75E
+t3Q/
+VAf0
+X+C 
<??YzU
<^IQM
<=;He(t[
-<-b-
<F.uWA
<R`zOH
<unknown>
<vZuN
=1}V:
=AWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct HSTRING__ *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct HSTRING__ *>,0>::DoWorkStub
=i:u(
=loh;=
=sIyh
>http://www.microsoft.com/pki/certs/MicCodSigPCA_08-31-2010.crt0
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
>J [ 
>r!W`
0*1V1$
040904B0
0A^_]
0A^_^
0A^_^[]
0A^A]A\
0A_A^_
0A_A^_[]
0A_A^_^]
0A_A^A\
0A_A^A\_]
0A_A^A\_^
0A_A^A\_^[]
0A_A^A]
0A_A^A]_^
0A_A^A]_^[]
0A_A^A]A\]
0A_A^A]A\_
0A_A^A]A\_^]
0G#4G
0xABBACAB
1(0&0
1/0-0
1/Zfj
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
100701213655Z
100706204017Z
100831221932Z
180712200751Z
180712201119Z
180823202619Z
180823202650Z
190726201119Z0t1
190808200751Z0t1
191123202619Z0
191123202650Z0
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
2?mO:
200831222932Z0y1
20180914213558Z
20180915012842.859Z0
20180915012843.942Z0
20180915063442Z
20180915213558Z0w0=
20180916063442Z0w0=
229803+4379510
23/;C
230865+4409830
250701214655Z0|1
250706205017Z0~1
3{ChkAlloc(m_spStoreCommerceFactory)
3B3h3
3I{7-U
3L9t$hu&
3SVmn
3SVu!
3Vc6kM)
4&5R5~5
4]<[:
4>4v4
414!g
4es`O
4g[S:+
4ljW!
4-Ru,
4-RZKD[
5a{?"W
6(6N6
6(8N8z8
6'?='Z
6a0m}
7f8u+
7L9t$xu
7WZ{.
7Z>@B1
8(;]op
8*4on
8\!,u
8\$PH
8^4HC
8_^[]
8{u)f
8{u*f
89:u!
8A_A^_^[]
8A_A^A]A\_^][
8H!(H
8http://www.microsoft.com/pki/certs/MicrosoftRootCert.crt0
8L$PH
8Y@u@H
8Y8uBH
8YAuBH
8YHu@H
8YHuBH
8YMu5
8YQu@H
8YQu|
8YQuBH
8YXuBH
9.u&H
9\$`u
9\$0v-
9\$hw
9|$pu 
9~0u&H
90v&H
9G uGH
9M4t[A
9M4tmA
9MTt[A
9N4t<
9N4tIA
9N4tJ
9N4tKA
9NTt<
9NTtIA
9NTtJ
9O$tE
9O4t<
9O4t2
9O4t3
9O4t3A
9O4t6
9ODtE
9OTt<
9OTt2
9OTt6
9rPtP
9u(v'
9u(v)H
9u`vEH
9uHv'
9w0t-H
A 9A$r 
A!4$I
A(;A,H
A(A;@
A(t&H
A,9A(
A;_(r
A^_^[]
A^A]A\_]
A_A]A\_]
A_A^]
A_A^_
A_A^_^[]
A_A^_^]
A_A^_^][
A_A^A\^]
A_A^A\_]
A_A^A\_^
A_A^A\_^[]
A_A^A\_^][
A_A^A]
A_A^A]_]
A_A^A]_^
A_A^A]_^[]
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_[]
A_A^A]A\_^[]
A_A^A]A\_^]
A_A^A]A\_^][
a0H9Yp
A8~`u
A9,$u
a9|$P
A9}0t H
A9}0tTE
A9~0t.H
A94$u
A9u0t?
A9u0t-H
A9uPt?
A9uPt-H
A9wHvdI
A9wPu!E
AADAuthority
AADResource
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
aborted
AC;pz
Accept:application/json
AcquiredDate
AcquireSRWLockExclusive
AcquireSRWLockShared
actionFilter
actionFilters
Actions
ActivateInstance(RuntimeClassAppInstallManager.Get(), &_appInstallManager)
activatibleClassId
Added header %s
AddFileToCab
Adding calling package = %s for productId = %s
Adding optional package = %s
Add-On Product Infos (CV = %hs):
AddOnKeyword
addOnParent
AHA;@
AL9AH
AllocateAndInitializeSid
AllowImpersonation
AlreadyPurchased
AlternateIds
AlwaysPromptBeforePurchase
AnonymousRequest
ApiInvoked
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-heap-obsolete-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-localization-l2-1-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-base-l1-2-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
api-ms-win-shcore-stream-winrt-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
ApiSetQueryApiSetPresence
AppDownloadLimit
Application
application/json
AppServiceName
AppServiceResponseStatus
args->SetMemInfo(experienceToken, modalManager)
array
Assert
Assert (%s): %s
assertVersion
AsyncActionCompletedHandler
AsyncOperationCompletedHandler`1
AsyncOperationCompletedHandler`1<Boolean>
AsyncOperationCompletedHandler`1<String>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
AsyncOperationCompletedHandler`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
AsyncOperationCompletedHandler`1<Windows.UI.Popups.IUICommand>
AsyncOperationProgressHandler`2
AsyncOperationProgressHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
AsyncOperationWithProgressCompletedHandler`2
AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
ATAVAWH
Attached event handler for item %s
Attempting to set the install order to: %hs
authority
Authorization
authTicket.IsValid()
AuthToken
AuthType
Availabilities
AvailabilityId
AW+Gd
b/+6(
b;7`(
b7@FHr
Bearer 
BeginOperation
beneficiaries
beneficiary
beneficiaryArray
BigId
BigIds
Bo7Nz
BodyBufferMaxSize
BodyForcePrompt
BodyPromptSettings
BodyTemplate
Build Name
BuildStoreInAppInfo
BuildStoreInAppSkuInfo
BundledSkus
BX9A4t
Bx9ATt
C:\data\systemdata\etw\StoreOperational.etl
c3=vM
C3R/Z
CABINET
Cabinet.dll
CallContext:[%hs] 
CampaignId
campaignId
Canceling redirect for 0x%08x
CapabilityCheck
Caption
Catalog failure looking for BigCatId.
CatalogServiceProxyV6::AddOnsIterator::GetNext
CatalogServiceProxyV6::AddOnsIterator::GetNextBatch
CatalogServiceProxyV6::AddOnsIterator::Initialize
CatalogServiceProxyV6::GetB2BKey
CatalogServiceProxyV6::GetCustomerCollectionsId
CatalogServiceProxyV6::GetCustomerPurchaseId
CatalogServiceProxyV6::GetProduct
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullName
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType
cbStatus >= sizeof(DWORD)
cbStatus >= sizeof(WINHTTP_ASYNC_RESULT)
cchRemaining < urlLength && "We should have copied *something*"
CClientSTAHelper::AppPurchase
CClientSTAHelper::DoWork
CClientSTAHelper::GetAddOnProduct
CClientSTAHelper::GetBigCatIds
CClientSTAHelper::ProductPurchase
CClientSTAHelper::ProductPurchaseViaInAppOfferToken
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithDisplayData
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithResults
CHANh
CheckTokenMembershipEx
ChkAlloc(_releaseLicenseTimer)
ChkAlloc(_results)
ChkAlloc(_spCV)
ChkAlloc(_spInAppOffers)
ChkAlloc(cv.Get())
ChkAlloc(hashMap)
ChkAlloc(licenseBuffer)
ChkAlloc(m_timer)
ChkAlloc(pwszUppercaseRegion)
ChkAlloc(spbResponseData)
ChkAlloc(spInAppOffer)
ChkAlloc(spInAppOffer->pInAppSkuList)
ChkAlloc(spInAppSkuInfo)
ChkAlloc(spListingInformation)
ChkAlloc(spManufacturerInfo)
ChkAlloc(spNewProductLicense)
ChkAlloc(spOperation)
ChkAlloc(spProductInfo)
ChkAlloc(spProductLicense)
ChkAlloc(spPurchaseResults)
ChkAlloc(spReceiptData)
ChkAlloc(spRequestProductPurchaseWithDisplayPropertiesInfo)
ChkAlloc(spSkuInfo = Make<StorePreviewSkuInfoServer>())
ChkAlloc(spStoreAppInfo)
ChkAlloc(spStoreAppInfo->pInAppOfferList)
ChkAlloc(spszDestBuffer = new WCHAR[cchDestBuffer])
ChkAlloc(spszFormattedPrice)
ChkAlloc(spUnfulfilledConsumable)
ChkAlloc(tag)
ChkAlloc(tokenUser)
ChkArg(_messageDialogHelper)
ChkArg(action)
ChkArg(appId)
ChkArg(authResponse)
ChkArg(balanceRemaining)
ChkArg(cchFolder)
ChkArg(ContentIdentifiers)
ChkArg(context)
ChkArg(getAppReceiptOperation)
ChkArg(getCollectionsIdOperation)
ChkArg(getProductReceiptOperation)
ChkArg(getPurchaseIdOperation)
ChkArg(hstrUri)
ChkArg(items)
ChkArg(keywords)
ChkArg(lpszURL)
ChkArg(operation)
ChkArg(package)
ChkArg(pAppId)
ChkArg(pAppInfo)
ChkArg(pAppInformation)
ChkArg(pcbResponseData)
ChkArg(pCoreWindow)
ChkArg(pCustomerCollectionsId)
ChkArg(pCustomerPurchaseId)
ChkArg(pFulfillmentResult)
ChkArg(pHandler)
ChkArg(pHresult)
ChkArg(phWndCurrent)
ChkArg(pInAppInformation)
ChkArg(pInAppOffer)
ChkArg(pInAppSkuInformation)
ChkArg(pLinkUri)
ChkArg(pMandatory)
ChkArg(pOptionalPackage)
ChkArg(ppAppLicense)
ChkArg(ppAppReceiptOperation)
ChkArg(ppbResponseData)
ChkArg(ppData)
ChkArg(ppGetCollectionsIdOperation)
ChkArg(ppGetPurchaseIdOperation)
ChkArg(ppGetUnfulfilledConsumablesOperation)
ChkArg(ppLinkUri)
ChkArg(ppListingInformation)
ChkArg(ppLoadAddOnProductInfosOperation)
ChkArg(ppLoadListingOperation)
ChkArg(ppOperation)
ChkArg(ppPackage)
ChkArg(ppProductReceiptOperation)
ChkArg(ppPurchaseResults)
ChkArg(ppQueueItems)
ChkArg(ppReportConsumableFulfillmentOperation)
ChkArg(ppRequestAppPurchaseOperation)
ChkArg(ppRequestProductPurchaseOperation)
ChkArg(ppRequestProductPurchaseWithResultsOperation)
ChkArg(ppRequestPurchaseBySkuIdOperation)
ChkArg(ppResults)
ChkArg(pProductPurchaseStatus)
ChkArg(ppStoreContext)
ChkArg(ppStoreProductQueryResult)
ChkArg(ppStoreProductResult)
ChkArg(ppszUri)
ChkArg(ppUpdateList)
ChkArg(ppUpdateStatuses)
ChkArg(ppUri)
ChkArg(ppValue)
ChkArg(pReceipt)
ChkArg(pResult)
ChkArg(pResults)
ChkArg(productIds)
ChkArg(productKinds)
ChkArg(productStoreId)
ChkArg(pStorePackageUpdateResult)
ChkArg(pStorePackageUpdates)
ChkArg(pszBuffer)
ChkArg(pToken)
ChkArg(publisherUserId)
ChkArg(pUnfulfilledList)
ChkArg(pUpdateState)
ChkArg(pUser)
ChkArg(pValue)
ChkArg(result)
ChkArg(results)
ChkArg(serviceTicket)
ChkArg(spJsonArray)
ChkArg(status)
ChkArg(storeId || packageFamilyName)
ChkArg(storeIds)
ChkArg(storePurchaseProperties)
ChkArg(trackingId)
ChkArg(transactionId)
ChkArg(uri < UriHelper::UriMax)
ChkArg(uri < UriHelperV7::UriMax)
ChkArg(uri >= 0)
ChkArg(user)
ChkArg(value)
ChkBool(!!cHasCurrent, ((HRESULT)0x80070057L))
ChkBool(!_hstrUri.IsValid(), HRESULT_FROM_WIN32(1247L))
ChkBool(!hasEmbeddedNull, ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(productId.Get()), ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(storeId), ((HRESULT)0x80070057L))
ChkBool((_productStoreId.IsValid() || ClientProcessUtils::IsDataMartApplication()), ((HRESULT)0x803F6107L))
ChkBool((nullptr != *ppProduct), ((HRESULT)0x803F6102L))
ChkBool((nullptr != productId), ((HRESULT)0x803F6103L))
ChkBool((quantity > 0), ((HRESULT)0x80070057L))
ChkBool(*entry != nullptr, HRESULT_FROM_WIN32(1168L))
ChkBool(*last == ':', ((HRESULT)0x80070057L))
ChkBool(_hstrUri.IsValid(), HRESULT_FROM_WIN32(1003L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6108L))
ChkBool(_spNextQueryOperation != nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x803F6107L))
ChkBool(_storeContext == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(asterisk == nullptr, ((HRESULT)0x80070057L))
ChkBool(callingProcessId == hwndProcessId, ((HRESULT)0x80070005L))
ChkBool(cchCurrency != 0, LR2HR(GetLastError()))
ChkBool(colon == nullptr, ((HRESULT)0x80070057L))
ChkBool(commandId == OkCommandId, ((HRESULT)0x80004004L))
ChkBool(error == 0L, ((HRESULT)0x80004005L))
ChkBool(filterCount < 2, ((HRESULT)0x80070057L))
ChkBool(filterSize < 2, ((HRESULT)0x80070057L))
ChkBool(found, ((HRESULT)0x80070005L))
ChkBool(found, ((HRESULT)0x80070057L))
ChkBool(hasCurrent, ((HRESULT)0x80070057L))
ChkBool(hstrProductId.IsValid() && hstrSkuId.IsValid() && hstrAvailabilityId.IsValid(), (_apiType == ClientApiType_AppPurchase) ? ((HRESULT)0x803F6101L) : ((HRESULT)0x803F6102L))
ChkBool(hwnd != 0, HRESULT_FROM_WIN32(1168L))
ChkBool(itemCount != 0, ((HRESULT)0x803F6107L))
ChkBool(last == pchEnd, ((HRESULT)0x80070057L))
ChkBool(length >= (count * 2), ((HRESULT)0x80070057L))
ChkBool(LoadStringW(g_hinst, uId, szUnformattedString, (sizeof(*RtlpNumberOf(szUnformattedString)))), HRESULT_FROM_WIN32(GetLastError()))
ChkBool(maxItemsToRetrieve > 0, ((HRESULT)0x80070057L))
ChkBool(nullptr != _storeContext, ((HRESULT)0x803F6107L))
ChkBool(packageCount > 0, ((HRESULT)0x80004005L))
ChkBool(packageFamilyName.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(packageFamilyNameToUninstall.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(pCallerData != nullptr, ((HRESULT)0x803F610BL))
ChkBool(pCallerData != nullptr, HRESULT_FROM_WIN32(1400L))
ChkBool(pCommand != nullptr, ((HRESULT)0x80004004L))
ChkBool(pProductIdCache != nullptr, ((HRESULT)0x803F6107L))
ChkBool(productCount > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(productId.IsValid(), ((HRESULT)0x80070057L))
ChkBool(productKind.IsValid(), HRESULT_FROM_WIN32(1168L))
ChkBool(productsLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(provider == AccountProviderType::MSA, ((HRESULT)0x8000FFFFL))
ChkBool(pszCloseBrace != 0, ((HRESULT)0x80004005L))
ChkBool(size <= 3, ((HRESULT)0x80070057L))
ChkBool(size == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult > 0, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInfoServer != nullptr, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInstance != nullptr, ((HRESULT)0x803F6107L))
ChkBool(StringHelpers::AreEqualCaseInsensitive(productKind.Get(), ConsumableKind.Get()) || StringHelpers::AreEqualCaseInsensitive(productKind.Get(), UnmanagedConsumableKind.Get()), HRESULT_FROM_WIN32(1168L))
ChkBool(tagComponentsSize != 0, ((HRESULT)0x80070057L))
ChkBool(tagComponentsSize <= 3, ((HRESULT)0x80070057L))
ChkBool(ticketCount == 1, ((HRESULT)0x803F6107L))
ChkBool(uReceiptNodeChildrenLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(uReceiptNodesLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(wuResults != nullptr, ((HRESULT)0x80004003L))
ChkHr(((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(25)<<16) | ((unsigned long)(httpRequest.GetRequestStatusCode()))) ))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, _WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, OnEventCallback, nullptr , nullptr )) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_subscription, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, initialChangeStamp, OnEventCallback, reinterpret_cast<PVOID>(this), nullptr , 0 , 0x00000004UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, _WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &m_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT)0x8000000BL))
ChkHr(((HRESULT)0x80004001L))
ChkHr(((HRESULT)0x80004005L))
ChkHr(((HRESULT)0x80070005L))
ChkHr(((HRESULT)0x8007000EL))
ChkHr(((HRESULT)0x80070057L))
ChkHr(((HRESULT)0x80190194L))
ChkHr(((HRESULT)0x80270254L))
ChkHr(((HRESULT)0x803F6101L))
ChkHr(((HRESULT)0x803F6103L))
ChkHr(((HRESULT)0x803F6107L))
ChkHr(((HRESULT)0x803F6108L))
ChkHr(((HRESULT)0x803F6109L))
ChkHr(((HRESULT)0x803F610BL))
ChkHr(((HRESULT)0x803F610CL))
ChkHr(((HRESULT)0x803F610DL))
ChkHr(((HRESULT)0x803F610EL))
ChkHr(((HRESULT)0x83750007L))
ChkHr((AgileHashMap<HSTRING, IStorePackageLicenseLostCallback*>::Make(&_pOptionalPfnToCallbackMap)))
ChkHr((AgileHashMap<HSTRING, ProductListing*,StringUpperCaseHash, StringCaseInsensitiveEquals>::Make(&_spInAppOffers)))
ChkHr((hrGetProduct == ((HRESULT)0x80190194L)) ? ((HRESULT)0x803F6101L) : hrGetProduct)
ChkHr((MakeAndInitialize<LicenseInformationServer, LicenseInformationServer>(spLicenseInformationServerSingleton.GetAddressOf())))
ChkHr((static_cast<HRESULT>(__hr)))
ChkHr(::ActivateInstance( StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions).Get(), &modalExperienceOptions))
ChkHr(::ParseReceiptResponse(pbResponse, cbResponse, &tmpReceiptData, &cbReceiptData))
ChkHr(::WindowsDuplicateString(_collectionsId.Get(), pCustomerCollectionsId))
ChkHr(::WindowsDuplicateString(_extendedJsonData.Get(), pValue))
ChkHr(::WindowsDuplicateString(_purchaseId.Get(), pCustomerPurchaseId))
ChkHr(::WindowsDuplicateString(_skuStoreId.Get(), pValue))
ChkHr(::WindowsDuplicateString(_storeId.Get(), pValue))
ChkHr(::WindowsDuplicateString(productId, storeId))
ChkHr(::WindowsDuplicateString(productIdSkuId.Get(), storeId))
ChkHr(::WindowsDuplicateString(publisherUserId, &publisherUserIdCopy))
ChkHr(::WindowsDuplicateString(serviceTicket, &serviceTicketCopy))
ChkHr(::WindowsStringHasEmbeddedNull(inputString, &hasEmbeddedNull))
ChkHr(::WindowsSubstringWithSpecifiedLength( str, count, length - (count * 2), resultString))
ChkHr(::WindowsTrimStringEnd(trimmedStart.Get(), Space.Get(), trimmedString.GetAddressOf()))
ChkHr(::WindowsTrimStringStart(timeSpanString, Space.Get(), trimmedStart.GetAddressOf()))
ChkHr(__winrt_hr__)
ChkHr(_addOnLicenses->get_Size(&count))
ChkHr(_addOnLicenses->GetAt(i, license.GetAddressOf()))
ChkHr(_appInstallItem.As(&item2))
ChkHr(_appInstallItem->add_Completed(completedHandler.Get(), &_completedToken))
ChkHr(_appInstallItem->add_StatusChanged(statusChangedHandler.Get(), &_statusChangedToken))
ChkHr(_appInstallItem->get_InstallType(&installType))
ChkHr(_appInstallItem->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(_appInstallItem->get_PackageFamilyName(value))
ChkHr(_appInstallItem->get_ProductId(value))
ChkHr(_appInstallItem->GetCurrentStatus(&appInstallStatus))
ChkHr(_appInstallItem->GetCurrentStatus(&status))
ChkHr(_appName.Set(appName))
ChkHr(_AttachAllEventHandlers(_queueItems.Get()))
ChkHr(_availabilities.As(&inspectableProducts))
ChkHr(_availabilities->First(&availabilityIter))
ChkHr(_availabilities->First(&iter))
ChkHr(_availabilities->get_Size(&size))
ChkHr(_availabilities->GetAt(index, &currentAvailability))
ChkHr(_availabilities->RemoveAt(bestIndex))
ChkHr(_bigIds->First(&spIter))
ChkHr(_bigIds->get_Size(&size))
ChkHr(_BuildBeneficiaryArrayJSON(user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonBeneficiaries))
ChkHr(_BuildBeneficiaryJSON( tickets[index].m_providerType, tickets[index].m_ticket.Get(), tickets[index].m_webAccountId.Get(), jsonBeneficiary))
ChkHr(_BuildBeneficiaryJSON(providerType, authTicket.Get(), DefaultWebAccountIdString.Get(), jsonBeneficiary))
ChkHr(_BuildGoldenBeneficiaryArrayJSON(user, jsonBeneficiaries))
ChkHr(_BuildGoldenBeneficiaryJSON(user, beneficiary))
ChkHr(_BuildGoldenBeneficiaryJSON(user, jsonBeneficiary))
ChkHr(_BuildModalExperienceOptions(modalExperienceOptions, _size))
ChkHr(_bundledSkuIds->GetView(ppValue))
ChkHr(_cachedLicenseJson.CopyTo(result))
ChkHr(_ChangeStatusStringToEnumValue())
ChkHr(_CheckOptionalPackageIsValid(optionalPackageName, _user))
ChkHr(_CheckOptionalPackageIsValid(packageIdentifier, _user))
ChkHr(_ClearEventHandler(item))
ChkHr(_ClearEventHandler(item.Get()))
ChkHr(_collectionData.CopyTo(ppValue))
ChkHr(_collectionData->First(&iter))
ChkHr(_completedEvent.Add(handler, token))
ChkHr(_completedEvent.InvokeAll(this, args.Get()))
ChkHr(_completedEvent.Remove(token))
ChkHr(_ConstructRequestBody( jsonBody, _user, static_cast<WinStoreAuth::AccountProviderType>(requestParams.userTokenTypes), userAuthPromptType, hwnd, requestParams.forceRetailSandbox, jsonInternalParameters))
ChkHr(_ConstructRequestBody(childObject, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_ConstructRequestBody(jsonElement, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_contextString.CopyTo(value))
ChkHr(_continuationToken.Set(continuationToken))
ChkHr(_ConvertAppInstallState(appInstallState, isStaged, isDownloaded, &state, &extendedState))
ChkHr(_ConvertDuration(_billingPeriodUnitType.Get(), _billingPeriod, &_billingPeriodUnit))
ChkHr(_ConvertDuration(_trialPeriodUnitType.Get(), _trialPeriod, &_trialPeriodUnit))
ChkHr(_ConvertStoreQueueState(extendedState, &packageStatus.PackageUpdateState))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, &_spPurchaseResults))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, transactionId, receipt.Get(), &_spPurchaseResults))
ChkHr(_CreateUnfulfilledConsumable( inAppOfferTokenString.Get(), transactionId, offerIdString.Get(), &consumable))
ChkHr(_currentBatch->GetObjectAt(_currentItemIndex, ppJsonIAP))
ChkHr(_cv.Set(cv))
ChkHr(_data->get_Size(&dataSize))
ChkHr(_data->GetAt(index, data.GetAddressOf()))
ChkHr(_extendedJsonData.Set(extendedJsonData))
ChkHr(_FillTheRequestWithRequiredParameters())
ChkHr(_FilterProductsJson(productJsonString, CatalogRelationshipType::AddOnParent, _productStoreId.Get()))
ChkHr(_FilterProductsJson(productJsonString, relationshipFilter, _productStoreId.Get()))
ChkHr(_FindUriWithIndex(requestIndex, spJsonUriArray, entry))
ChkHr(_GetCurrencyFormatter(currencyCode, userLocale.Get(), region, &spNumberFormatter))
ChkHr(_GetPackageLocalAppDataPath(szPackageFamilyName, pszFolder, cchFolder))
ChkHr(_GetRawStringFromOS(uri, data.GetAddressOf()))
ChkHr(_hresultOfOperation)
ChkHr(_hstrCurrencyCode.CopyTo(pValue))
ChkHr(_hstrCurrencyCode.Set(pAppInfo->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppOffer->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppSkuInformation->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrentMarket.CopyTo(pValue))
ChkHr(_hstrCurrentMarket.Set(pAppInfo->Market))
ChkHr(_hstrCustomDeveloperData.CopyTo(pValue))
ChkHr(_hstrDescription.CopyTo(hstrValue))
ChkHr(_hstrDescription.CopyTo(pValue))
ChkHr(_hstrDescription.Set(hstrValue))
ChkHr(_hstrDescription.Set(pAppInfo->Description))
ChkHr(_hstrDescription.Set(pInAppInformation->Description))
ChkHr(_hstrDescription.Set(pInAppOffer->Description))
ChkHr(_hstrDescription.Set(pInAppSkuInformation->Description))
ChkHr(_hstrDevOfferId.Set(devOfferId))
ChkHr(_hstrExtendedData.CopyTo(pValue))
ChkHr(_hstrFormattedBasePrice.CopyTo(pValue))
ChkHr(_hstrFormattedListPrice.CopyTo(pValue))
ChkHr(_hstrFormattedPrice.CopyTo(pValue))
ChkHr(_hstrHardwareManufacturerId.CopyTo(value))
ChkHr(_hstrHardwareManufacturerId.Set(value))
ChkHr(_hstrImageUri.Set(pInAppOffer->ImageUri))
ChkHr(_hstrInAppOfferToken.CopyTo(pValue))
ChkHr(_hstrInAppOfferToken.Set(inAppOfferToken))
ChkHr(_hstrInAppOfferToken.Set(pInAppOffer->InAppOfferToken))
ChkHr(_hstrLocale.Set(pAppInfo->Locale))
ChkHr(_hstrManufacturerName.CopyTo(value))
ChkHr(_hstrManufacturerName.Set(value))
ChkHr(_hstrModelName.CopyTo(value))
ChkHr(_hstrModelName.Set(value))
ChkHr(_hstrName.CopyTo(hstrValue))
ChkHr(_hstrName.CopyTo(pValue))
ChkHr(_hstrName.Set(hstrName))
ChkHr(_hstrName.Set(hstrValue))
ChkHr(_hstrName.Set(pAppInfo->Name))
ChkHr(_hstrName.Set(pInAppOffer->Name))
ChkHr(_hstrOfferId.CopyTo(hstrOfferId))
ChkHr(_hstrOfferId.CopyTo(offerId))
ChkHr(_hstrOfferId.Set(offerId))
ChkHr(_hstrProductId.CopyTo(hstrProductId))
ChkHr(_hstrProductId.CopyTo(pValue))
ChkHr(_hstrProductId.Set(pInAppInformation->InAppProductId))
ChkHr(_hstrProductId.Set(productId))
ChkHr(_hstrProductTag.CopyTo(pValue))
ChkHr(_hstrProductTag.Set(pInAppOffer->ProductTag))
ChkHr(_hstrProductType.CopyTo(pValue))
ChkHr(_hstrProductType.Set(L"Consumable"))
ChkHr(_hstrProductType.Set(L"Durable"))
ChkHr(_hstrProductType.Set(L"Unknown"))
ChkHr(_hstrReceipt.CopyTo(pValue))
ChkHr(_hstrReceiptXml.CopyTo(hstrReceiptXml))
ChkHr(_hstrReceiptXml.Set(receiptXml))
ChkHr(_hstrSkuId.CopyTo(pValue))
ChkHr(_hstrSkuId.Set(pInAppSkuInformation->SkuId))
ChkHr(_hstrSkuId.Set(skuId))
ChkHr(_hstrSkuType.CopyTo(pValue))
ChkHr(_hstrSkuType.Set(pInAppSkuInformation->SkuType))
ChkHr(_hstrStoreContentModifierId.CopyTo(value))
ChkHr(_hstrStoreContentModifierId.Set(value))
ChkHr(_hstrTitle.CopyTo(pValue))
ChkHr(_hstrTitle.Set(pInAppInformation->Name))
ChkHr(_hstrTitle.Set(pInAppSkuInformation->Title))
ChkHr(_inAppOfferToken.Set(inAppOfferToken))
ChkHr(_Initialize( packageFullName, "StoreContext.RequestDownloadAndInstallStorePackagesAsync", storeIds, nullptr , nullptr , true , true , false , pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, nullptr , nullptr , pStorePackageUpdates, install, shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, storeIds, storePackageInstallOptions, nullptr , true , shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_IsNetworkMetered(&onMeteredNetwork))
ChkHr(_jsonData.Set(jsonData))
ChkHr(_jsonRequest.Set(jsonRequest))
ChkHr(_jsonResponse.CopyTo(pValue))
ChkHr(_jsonResponse.Set(LR"({"status": "aborted"})"))
ChkHr(_keywords->Append(keyword.Get()))
ChkHr(_keywords->GetView(&spVectorView))
ChkHr(_licensableSku.Set(licensableSku))
ChkHr(_LoadLicenseJson(spLicenseInstance))
ChkHr(_MakeDefaultLicenseResponse(package))
ChkHr(_messageDialogFactory->CreateWithTitle(content.Get(), title.Get(), &spMessageDialog))
ChkHr(_messageDialogHelper.As(&messageDialogHelper))
ChkHr(_newOrder->Append(productId.Get()))
ChkHr(_offlineLicensesChangedEvent.Add(pHandler, pToken))
ChkHr(_offlineLicensesChangedEvent.Remove(token))
ChkHr(_optionalPackageLicenseWatcher.AddOptionalPackageToWatch(optionalPackageName, pOptionalPackageLicense))
ChkHr(_optionalPackageLicenseWatcher.Initialize())
ChkHr(_optionalPackageLicenseWatcher.RemoveOptionalPackageToWatch(optionalPackageName))
ChkHr(_package->get_Id(packageId.GetAddressOf()))
ChkHr(_packageFamilyName.Set(packageFamilyName))
ChkHr(_packageFamilyNameToUninstall.Set(packageFamilyNameToUninstall))
ChkHr(_packageFullName.Set(packageFullName))
ChkHr(_packageFullName.Set(PFN))
ChkHr(_packageIdentifier.Set(packageIdentifier))
ChkHr(_ParseGetProductsByKinds(hydrateResult.Get(), products.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(productJsonString.Get(), products.GetAddressOf()))
ChkHr(_PFN.Set(PFN))
ChkHr(_pOptionalPfnToCallbackMap->HasKey(optionalPackageFullName, &foundOptionalPackage))
ChkHr(_pOptionalPfnToCallbackMap->Insert(optionalPackageFullName, storePackageLicenseCallback, &replaced))
ChkHr(_pOptionalPfnToCallbackMap->Remove(optionalPackageFullName))
ChkHr(_pPackage->get_Id(packageId.GetAddressOf()))
ChkHr(_price.CopyTo(ppValue))
ChkHr(_productId.Set(productId))
ChkHr(_productId.Set(value))
ChkHr(_productIdTable->HasKey(inAppOfferToken, &hasKey))
ChkHr(_productIdTable->Insert(inAppOfferToken, productId, &dontCare))
ChkHr(_productKinds.As(&productKinds))
ChkHr(_products.As(&inspectableProducts))
ChkHr(_products->get_Size(&count))
ChkHr(_products->get_Size(&countOfProducts))
ChkHr(_products->GetAt(0, &_product))
ChkHr(_productStoreId.Set(productStoreId))
ChkHr(_pStoreContextServer.As(&storeContextServer2))
ChkHr(_publisherUserId.Set(publisherUserId))
ChkHr(_queueItems->get_Size(&size))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Canceled, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_OtherError, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Pending, false ))
ChkHr(_RefreshStatus(item, true ))
ChkHr(_RefreshStatus(item.Get(), raiseEvent))
ChkHr(_request.Set(jsonRequest))
ChkHr(_request->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync( cv, __FSTREXP __FUNCTION__  , storeIds, false, false, nullptr, operation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , pStoreIds, true , false , nullptr , ppOperation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , storeIds, true , false , storePackageInstallOptions, operation))
ChkHr(_RequestPurchase( pCallerData, nullptr, nullptr, body.Get(), cv.GetHStringReference().Get(), InvokedApi_SendStoreRequest.Get(), jsonResponse))
ChkHr(_response.Set(jsonInitialResponse))
ChkHr(_response.Set(response))
ChkHr(_results.CopyTo(ppResults))
ChkHr(_results.CopyTo(ppStoreProductQueryResult))
ChkHr(_RetrieveHWNDFromCallerData(pCallerData, &hwnd))
ChkHr(_serviceTicket.Set(serviceTicket))
ChkHr(_ShouldFilterByRelationship(product, relationshipType, parentProductId, &remove))
ChkHr(_skuId.CopyTo(pValue))
ChkHr(_skuId.Set(skuId))
ChkHr(_skus.As(&inspectableProducts))
ChkHr(_skus->First(&iter))
ChkHr(_skus->get_Size(&size))
ChkHr(_skus->GetAt(i, &sku))
ChkHr(_skus->GetAt(index, &currentSku))
ChkHr(_skus->RemoveAt(bestIndex))
ChkHr(_SortAvailabilities())
ChkHr(_SortSkus())
ChkHr(_spAppLicense.CopyTo(ppResults))
ChkHr(_spDisplayProperties->get_Name(nameOverride.GetAddressOf()))
ChkHr(_spInAppOffers->GetView(ppValue))
ChkHr(_spInAppOffers->Insert( pInAppOffer->InAppOfferToken, spProductListing.Get(), &replaced ))
ChkHr(_spLicenseInformationInternal.CopyTo(__uuidof(**(value)), IID_PPV_ARGS_Helper(value)))
ChkHr(_spLicenseInformationInternal->GetProductId(_appCatalogId.GetAddressOf()))
ChkHr(_spLicenseManager.As(&appLicenseManager2))
ChkHr(_spNextQueryOperation->GetNextAsync( productJson.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJsonString.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->HasMorePages(&hasMorePages))
ChkHr(_spNextQueryOperation->HasMorePages(hasMorePages))
ChkHr(_spStoreCommerceServer->GetExclusiveLockForProduct(productId.Get(), &pendingPurchaseOperationForProduct))
ChkHr(_spStoreContextServer->CaptureStoreContextCallerData(reinterpret_cast<UINT64>(hwnd), &callerData))
ChkHr(_spUnfulfilledList->GetView(pUnfulfilledList))
ChkHr(_statusChangedEvent.Add(handler, token))
ChkHr(_statusChangedEvent.InvokeAll(this, nullptr))
ChkHr(_statusChangedEvent.Remove(token))
ChkHr(_statusChangedTokenMap->get_Size(&size))
ChkHr(_statusChangedTokenMap->HasKey(packageFamilyName.Get(), &hasKey))
ChkHr(_statusChangedTokenMap->Insert(packageFamilyName.Get(), regToken, &replaced))
ChkHr(_statusChangedTokenMap->Lookup(packageFamilyName.Get(), &regToken))
ChkHr(_statusChangedTokenMap->Remove(packageFamilyName.Get()))
ChkHr(_storeContext->AssociateWithStoreContext(inspectableProducts))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(_storeId.Get(), ppOperation))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseWithPurchasePropertiesAsync(storeId.Get(), storePurchaseProperties, ppOperation))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsByFamilyFromParent, _spCV, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsNoParent, _spCV, jsonCatalogParameters.Get(), &statusCode, jsonCatalogString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForParentProductByFamily, _spCV, jsonCollectionsParameters.Get(), &statusCode, jsonCollectionsString.GetAddressOf()))
ChkHr(_storeId.Set(storeId))
ChkHr(_storeIds.As(&storeIds))
ChkHr(_storePackageUpdates.As(&updates))
ChkHr(_storeQueueItem->get_IsMandatory(&_mandatory))
ChkHr(_subscriptionInfo.CopyTo(ppValue))
ChkHr(_updateStatusMap->First(&iterator))
ChkHr(_updateStatusMap->Insert(packageFamilyName.Get(), newStatus, &replaced))
ChkHr(actionFilters->get_Size(&filterSize))
ChkHr(actionFilters->GetAt(0, actionFilter.GetAddressOf()))
ChkHr(ActivateInstance( HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &spPackageManager))
ChkHr(ActivateInstance(AppServiceConnectionRef.Get(), &pdConnection))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Xml_Dom_XmlDocument).Get(), &spXMLResponse))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Web_Http_Filters_HttpBaseProtocolFilter).Get(), &filter))
ChkHr(ActivateInstance(RuntimeClassAppInstallOptions.Get(), &appInstallOptions))
ChkHr(ActivateInstance(RuntimeClassWindowsManagementDeploymentPackageManager.Get(), &packageManager))
ChkHr(ActivateInstance(RuntimeClassWindowsXboxSystemInternalDeploymentAvailablePackageProvider.Get(), &packageProvider))
ChkHr(ActivateInstance(ValueSetRef.Get(), &message))
ChkHr(activationFactory.As(&uriFactory))
ChkHr(AddCommands(hr, spMessageDialog.Get()))
ChkHr(AddItem(inAppOfferToken.Get(), productId.Get()))
ChkHr(addOns.GetNext(&jsonIAP))
ChkHr(addOns.GetNext(&spProduct))
ChkHr(addOns.Initialize(_spStoreCommerceServer.Get(), _pCV))
ChkHr(addOns.Initialize(pStoreCommerceServer, pCV))
ChkHr(AgileVector<HSTRING>::Make(&_actionFilters))
ChkHr(AgileVector<HSTRING>::Make(&_keywords))
ChkHr(AgileVector<HSTRING>::Make(&_newOrder))
ChkHr(AgileVector<HSTRING>::Make(&contentIds))
ChkHr(AgileVector<HSTRING>::Make(&foundProductIds))
ChkHr(AgileVector<HSTRING>::Make(&keyIds))
ChkHr(AgileVector<HSTRING>::Make(&outputs))
ChkHr(AgileVector<HSTRING>::Make(&productIdsInAppInstallQueue))
ChkHr(AgileVector<HSTRING>::Make(&pVector))
ChkHr(AgileVector<StorePackageUpdate*>::Make(&updates))
ChkHr(AgileVector<StorePreviewProductInfo*>::Make(&spProductInfosList))
ChkHr(AgileVector<StorePreviewSkuInfo*>::Make(&spSkuInfoList))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queuedItemResults))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queueItems))
ChkHr(AllowImpersonation(appLicenseManager2.Get()))
ChkHr(AllowImpersonation(m_spLicenseManager.Get()))
ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf()))
ChkHr(alm->RefreshLicenses(refreshPolicy))
ChkHr(alternateIds->GetObjectAt(iId, &altId))
ChkHr(appInstallItem->get_ProductId(appInstallItemProductId.GetAddressOf()))
ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItems->get_Size(&size))
ChkHr(appInstallItems->GetAt(index, &item))
ChkHr(appInstallManager.As(&appInstallManager2))
ChkHr(appInstallManager.As(&appInstallManager5))
ChkHr(appInstallManager.As(&appInstallManagerInternal))
ChkHr(appInstallManager->get_AppInstallItems(&appInstallItems))
ChkHr(appInstallManager->get_AutoUpdateSetting(&autoUpdates))
ChkHr(appInstallManager5->SetQueueOrder(cvIn, productIds))
ChkHr(appInstallManager5->StartProductInstallWithOptionsForUserAsync( _user.Get(), productId.Get(), nullptr, nullptr, true, downloadOnAnyNetwork, cv.GetHStringReference().Get(), appInstallOptions.Get(), &asyncOp))
ChkHr(appInstallManagerInternal->GetAppInstallItemsForUser(_user.Get(), &appInstallItems))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), appInstallItemsOp.GetAddressOf()))
ChkHr(appInstallOptions->put_AllowForcedAppRestart(allowForcedAppRestart))
ChkHr(appInstallStatus.As(&appInstallStatus3))
ChkHr(appInstallStatus.As(&appInstallStatusInternal))
ChkHr(appInstallStatus->get_BytesDownloaded(&packageStatus.PackageBytesDownloaded))
ChkHr(appInstallStatus->get_DownloadSizeInBytes(&packageStatus.PackageDownloadSizeInBytes))
ChkHr(appInstallStatus->get_ErrorCode(&errorCode))
ChkHr(appInstallStatus->get_InstallState(&appInstallState))
ChkHr(appInstallStatus->get_PercentComplete(&percentComplete))
ChkHr(appInstallStatus3->get_IsStaged(&isStaged))
ChkHr(appInstallStatusInternal->get_IsDownloaded(&isDownloaded))
ChkHr(appLicenseManager2->GetOfflineLicenseForInstalledPackage( WindowsGetStringRawBuffer(packageFullName, nullptr), AppContentType::AppType_Unknown, license.GetAddressOf()))
ChkHr(appmodelPackages->Append(spAppmodelPackage.Get()))
ChkHr(appmodelPackages->Append(supplement.Get()))
ChkHr(appmodelPackages->get_Size(&packagesSize))
ChkHr(appmodelPackages->GetAt(packagesIndex, &package))
ChkHr(appmodelPackages->GetView(appModelPackagesVV.GetAddressOf()))
ChkHr(appProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(args->get_JsonResponse(jsonResponse.GetAddressOf()))
ChkHr(args->get_ResultCode(&hr))
ChkHr(args->RuntimeClassInitialize( jsonRequestString.Get(), jsonIntialResponse.Get(), _size))
ChkHr(arrAdditionalHeaders.Append(dhStr))
ChkHr(AsAgile(pMessageDialogHelper, &_messageDialogHelper))
ChkHr(AsAgile(productKinds, &_productKinds))
ChkHr(AsAgile(pStorePackageUpdates, &_storePackageUpdates))
ChkHr(AsAgile(spLicenseManager.Get(), &_spLicenseManager))
ChkHr(AsAgile(storeIds, &_storeIds))
ChkHr(AskWuWhichHardwareIsAvailable(guidArray, availableArray))
ChkHr(AsWeak(pStoreContext, &_wrStoreContext))
ChkHr(AsWeak(pStorePackageLicense, &_wrStorePackageLicense))
ChkHr(AsyncBase::CheckValidStateForResultsCall())
ChkHr(AuthenticationInternal::GetStorePrimaryAccountTicket( 0, AuthenticationEndpoint::OneStore, PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(availabilities->GetObjectAt(0, &availability))
ChkHr(availabilities->GetObjectAt(iAvailability, &availability))
ChkHr(availability.As(&availabilityPrivate))
ChkHr(availability->get_Price(ppValue))
ChkHr(availabilityIter->get_Current(&availability))
ChkHr(availabilityIter->get_HasCurrent(&hasCurrent))
ChkHr(availabilityIter->MoveNext(&hasCurrent))
ChkHr(availabilityPrivate->set_ProductIdSkuId(_productId.Get(), _skuId.Get()))
ChkHr(BackgroundPurchaseDialogTask(body.Get(), cv.GetHStringReference().Get(), jsonResponse))
ChkHr(basePrice->Stringify(&pricingInfo->BasePrice))
ChkHr(bestSku.As(&skuPrivate))
ChkHr(bigIds->Append(_productStoreId.Get()))
ChkHr(BlockOnCompletion(spAsyncOperation.Get(), COWAIT_WAITALL))
ChkHr(BlockOnCompletion(spPagedOperation.Get()))
ChkHr(BlockOnCompletionAndGetResults(appInstallItemsOp.Get(), &appInstallItems))
ChkHr(BlockOnCompletionAndGetResults(asyncOp.Get(), &installItemVector))
ChkHr(BlockOnCompletionAndGetResults(deploymentOperation.Get(), &deploymentResult))
ChkHr(BlockOnCompletionAndGetResults(messageDialogOperation.Get(), &command))
ChkHr(BlockOnCompletionAndGetResults(openOperation.Get(), &status))
ChkHr(BlockOnCompletionAndGetResults(operation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(readOperation.Get(), phstrContent))
ChkHr(BlockOnCompletionAndGetResults(requestOperation.Get(), &responseMessage))
ChkHr(BlockOnCompletionAndGetResults(sendMessageOperation.Get(), &response))
ChkHr(BuildKnownFeatureAndGuidArrays(systemFeatures, guidArray, knownFeaturesArray))
ChkHr(BuildStoreInAppSkuInfo(skuAvailability.Get(), &spInAppSkuInformation))
ChkHr(cacheStatics->GetPackageByFullName(packageFullNameToUninstall.Get(), internalPackage.GetAddressOf()))
ChkHr(callingPackage->get_Dependencies(dependencies.GetAddressOf()))
ChkHr(CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), &canSilentlyDownload))
ChkHr(CatalogServiceProxyV6::GetProduct( _inAppProductId.Get(), _pCV, &spProduct))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &product))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &spJsonObject))
ChkHr(CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType( _packageFullName.Get(), _appType, pCV, _appCatalogId.GetAddressOf()))
ChkHr(ChangeStatusStringToEnumValue())
ChkHr(ClientProcessUtils::CheckMultipleUserSupport(usedMultiUser))
ChkHr(ClientProcessUtils::GetAppContentTypeForInstalledPackage(_packageFullName.Get(), &_appType))
ChkHr(ClientProcessUtils::GetCallerTokenFromComCall(&hToken))
ChkHr(ClientProcessUtils::GetCallingAppName(appName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), callingPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), spAppmodelPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(user.Get(), &parentPackage))
ChkHr(ClientProcessUtils::GetCallingAppPackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(_packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppWindowHandle(&hwndOwner))
ChkHr(ClientProcessUtils::GetModalExperienceManager(&modalManager))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), sidString.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::IsCallerERA(&_isERA))
ChkHr(ClientProcessUtils::IsCallerERA(&isERA))
ChkHr(CMiscHelpers::ConvertTextBlob2WideChar(spbReceipt, cbReceipt, &shReceipt))
ChkHr(CMiscHelpers::StringToGuid(transactionIdString.GetRawBuffer(nullptr), &transactionId))
ChkHr(CMiscHelpers::StringToGuid(WindowsGetStringRawBuffer(pAppInfo->Id, nullptr), &_id))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&m_spLicenseManager)), IID_PPV_ARGS_Helper(&m_spLicenseManager)))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spLicenseManager)), IID_PPV_ARGS_Helper(&spLicenseManager)))
ChkHr(CoCreateInstance(__uuidof(ApplicationLicenseManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(alm.GetAddressOf())), IID_PPV_ARGS_Helper(alm.GetAddressOf())))
ChkHr(CoCreateInstance(__uuidof(InstallServiceUserBroker), nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&pinToHelper)), IID_PPV_ARGS_Helper(&pinToHelper)))
ChkHr(CoCreateInstance(__uuidof(PMSvc), nullptr, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(**(&enumMgr)), IID_PPV_ARGS_Helper(&enumMgr)))
ChkHr(CoCreateInstance(__uuidof(XboxDevelopmentPackageManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&packageManager)), IID_PPV_ARGS_Helper(&packageManager)))
ChkHr(CoCreateInstance(CLSID_HardwareCapability, nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spHardwareCapability)), IID_PPV_ARGS_Helper(&spHardwareCapability)))
ChkHr(CoCreateInstance(CLSID_SLSClient, nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&spSLSClient2)), IID_PPV_ARGS_Helper(&spSLSClient2)))
ChkHr(CoGetCallContext(__uuidof(**(&spCallingProcessInfo)), IID_PPV_ARGS_Helper(&spCallingProcessInfo)))
ChkHr(CoGetCallerTID(&_callerThreadId))
ChkHr(CoGetCallerTID(&callerThreadId))
ChkHr(CoImpersonateClient())
ChkHr(collectionData.As(&collectionDataPrivate))
ChkHr(collectionDataArray->GetObjectAt(collectionIndex, &collectionItem))
ChkHr(collectionDataPrivate->get_ProductId(productId.GetAddressOf()))
ChkHr(collectionDataPrivate->get_SkuId(skuId.GetAddressOf()))
ChkHr(CollectionsServiceProxyV6::ConsumeConsumable(itemProductId.Get(), itemTransactionId.Get(), cv.Get()))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(bigCatId, pCV, items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(GetAppCatalogId(cv.Get()), cv.Get(), items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(parentProductId, pCV, items))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAndWebAccountAsync(request, account, uiElement, asyncInfo))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAsync(request, uiElement, asyncInfo))
ChkHr(ComposeLegacyXboxContentIdFromInstalledContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), contentId.addressof()))
ChkHr(connectionProfile->GetConnectionCost(&cost))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, HStringReference(L"application/json").Get(), &requestContent))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, JsonMediaType.Get(), &requestContent))
ChkHr(contentId.CopyTo(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(ContentIdentifiers->First(&spContentIdsIter))
ChkHr(contentIdKeyIdItem->get_ContentIds(&contentIds))
ChkHr(contentIdKeyIdItem->get_KeyIds(&keyIds))
ChkHr(contentIdResponse->get_Items(&items))
ChkHr(contentIds->Append(contentId.Get()))
ChkHr(contentIds->Append(HStringReference(szGuid).Get()))
ChkHr(contentIds->Append(packageIdentifier))
ChkHr(contentIds->get_Size(&contentIdSize))
ChkHr(contentIds->get_Size(&contentIdsSize))
ChkHr(contentIds->get_Size(&contentSize))
ChkHr(contentIds->get_Size(&size))
ChkHr(contentIds->get_Size(&sizeOfContentIds))
ChkHr(contentIds->GetAt(contentIdIndex, contentId.GetAddressOf()))
ChkHr(contentIds->GetAt(i, contentId.GetAddressOf()))
ChkHr(contentIds->GetView(&contentIdsVectorView))
ChkHr(contentInfo->GetCatalogId(&storeIdFromLicense))
ChkHr(ConvertJsonObjectToPropertySet(jsonDataObj, message))
ChkHr(ConvertPropertySetToJsonObject(responseMessage, jsonOutput))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::AAD, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::MSA, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::AAD, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::MSA, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(CopyToNotNull(_productReceipt, pReceipt))
ChkHr(CopyToNotNull(_receipt, pReceipt))
ChkHr(CopyToNotNull(spLicenseInformationServerSingleton, value))
ChkHr(CopyToNotNull(spProductInfos, ppValue))
ChkHr(coreApp->get_MainView(coreAppView.GetAddressOf()))
ChkHr(coreAppView->get_CoreWindow(coreWindow.GetAddressOf()))
ChkHr(CoreQueryApplicationService(processId, __uuidof(ICoreApplication), __uuidof(**(&spCoreAppPrivate)), IID_PPV_ARGS_Helper(&spCoreAppPrivate)))
ChkHr(coreWindow.As(&coreWinInterop))
ChkHr(coreWindowStatic->GetForCurrentThread(coreWindow.GetAddressOf()))
ChkHr(coreWinInterop->get_WindowHandle(&hwnd))
ChkHr(cost->get_NetworkCostType(&costType))
ChkHr(cost->get_Roaming(&isRoaming))
ChkHr(CoSwitchCallContext(nullptr, &oldCtx))
ChkHr(CoSwitchCallContext(nullptr, &pOldCtx))
ChkHr(CoSwitchCallContext(pOldCtx, &pTmpCtx))
ChkHr(CreateCommand( 1020, Microsoft::WRL::Callback<Windows::UI::Popups::IUICommandInvokedHandler>( [](Windows::UI::Popups::IUICommand *) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IUriRuntimeClass> spUri; { { __hr = (IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\messagedialoghelper.cpp", 136, __FSTREXP __FUNCTION__  , "ChkHr(IAPUtils::CreateUri(HStringReference(L\"ms-windows-store://signin\").Get(), &spUri))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILauncherStatics> spLauncherStatics; { { __hr = (GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\messagedialoghelper.cpp", 136, __FSTREXP __FUNCTION__  , "ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IAsyncOperation<bool>> spAsyncOperation; { { __hr = (spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\messagedialoghelper.cpp", 136, __FSTREXP __FUNCTION__  , "ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }).Get(), &spCommand))
ChkHr(CreateCommand( 1022, nullptr, &spCommand))
ChkHr(CreateCommand( uLabelId, pHandler, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2002, OkCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2003, DenyCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateGetItemsRequest(authTicket.GetRawBuffer(nullptr), &request))
ChkHr(CreateGuid(&guidCorrelationId))
ChkHr(CreateGuid(&guidRequestId))
ChkHr(CreateHttpClient(&httpClient))
ChkHr(CreateListingInformation( _spStoreCommerceServer.Get(), cv.Get(), _hCancelEvent, _inAppOfferTokens.Get(), _keywords.Get(), &_spListingInformation))
ChkHr(CreateMessageDialogHelper(hwnd, dialogHelper))
ChkHr(CreateRandomAccessStreamOverStream(stream, BSOS_OPTIONS::BSOS_DEFAULT, __uuidof(**(&randAccStream)), IID_PPV_ARGS_Helper(&randAccStream)))
ChkHr(CreateStoreContextServer(pUser, _spStoreContextServer))
ChkHr(cryptoFactory->DecodeFromBase64String( encodedString, &spHashBuffer))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&_httpClient))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&httpClient))
ChkHr(currentAvailability.As(&currentAvailabilityPrivate))
ChkHr(currentAvailabilityPrivate->get_Rank(&currentRank))
ChkHr(CurrentEraTitleInfo::GetAppId(pfnBuff, pfnLength))
ChkHr(CurrentEraTitleInfo::GetProxyAppPid(&pid))
ChkHr(currentOperation->GetNextAsync(productJson, nextOperation))
ChkHr(currentOperation->GetNextAsync(productJsonResponse, nextOperation))
ChkHr(currentPair->get_Key(keyName.GetAddressOf()))
ChkHr(currentPair->get_Key(tag->destinationKey.GetAddressOf()))
ChkHr(currentPair->get_Value(jsonValue.GetAddressOf()))
ChkHr(currentPair->get_Value(value.GetAddressOf()))
ChkHr(currentSku.As(&currentSkuPrivate))
ChkHr(currentSkuPrivate->get_Rank(&currentRank))
ChkHr(customPolicyDecoded.Set(customPolicyEncoded))
ChkHr(CWSHttpHelper::AddTHAdditionalHeaders(arrRequestHeaders))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-CorrelationId", wszCorrelationId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-RequestId", wszRequestId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-CV", cv.GetUnicode()))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-SiteName", WindowsGetStringRawBuffer(authDomain, nullptr)))
ChkHr(data->pThis->GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))
ChkHr(dependencies.As(&dependenciesIteratable))
ChkHr(dependencies->get_Size(&size))
ChkHr(dependencies->GetAt(index, &package))
ChkHr(dependenciesIteratable->First(&dependenciesIterator))
ChkHr(dependenciesIterator->get_Current(&dependentPackage))
ChkHr(dependenciesIterator->get_HasCurrent(&hasCurrentDependencies))
ChkHr(dependenciesIterator->MoveNext(&hasCurrentDependencies))
ChkHr(dependentPackage.As(&dependentPackage4))
ChkHr(dependentPackage->get_Id(&dependentPackageId))
ChkHr(dependentPackage4->get_SignatureKind(&signatureKindDependent))
ChkHr(dependentPackageId->get_FullName(dependentPackageFullName.GetAddressOf()))
ChkHr(deploymentResult->get_ExtendedErrorCode(&deploymentResultCode))
ChkHr(deploymentResultCode)
ChkHr(dialogHelper->put_ContextString(packageDisplayName.Get()))
ChkHr(dialogHelper->ShowDialogWithResultsAsync( ((HRESULT)0x803F6209L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(displaySkuAvailabilities->GetObjectAt(0, &firstSkuAvail))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSku, &item))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSkuAvailability, &skuAvailability))
ChkHr(EnsureWindowFromCallingProcess(*phwndOwner))
ChkHr(enumMgr->get_ApplicationsInPackage(bstrPFN, &spAppEnum))
ChkHr(EventTokenHashMap::Make(&_statusChangedTokenMap))
ChkHr(extendedError)
ChkHr(factory->Create(filter.Get(), &httpClient))
ChkHr(FileTimeToString(strTime, 200, UINT64_TO_FILETIME(value.UniversalTime)))
ChkHr(filter.As(&filter2))
ChkHr(filter2->put_MaxVersion(Windows::Web::Http::HttpVersion_Http11))
ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))
ChkHr(FormatNameValuePairs(pszFinalUri, urlLength, pszInitialUri, nameValuePairs, cNameValuePairs, encodeParameters))
ChkHr(FormatNameValuePairs(pszRemaining, cchRemaining, pathFormat, nameValuePairs, cNameValuePairs, false))
ChkHr(FormatStrings(L"%1\n[CV:%2]", ppszFormattedString, pszMessage, WindowsGetStringRawBuffer(cv, nullptr)))
ChkHr(foundProductIds.As(&foundProductIdsIVector))
ChkHr(foundProductIds->Append(productId.Get()))
ChkHr(get_StoreId(storeId.GetAddressOf()))
ChkHr(GetActivationFactory( CryptographicBufferRuntimeClassName.Get(), &cryptoFactory))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_PackageResourceResolver).Get(), &spPackageResolverStatics))
ChkHr(GetActivationFactory( NetworkingConnectivityNetworkInformation.Get(), &netInfoStatics))
ChkHr(GetActivationFactory( StateRepositoryPackageClassId.Get(), &spPackageStatics))
ChkHr(GetActivationFactory( StateRepositoryUserClassId.Get(), &spUserStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_ApplicationModel_Core_CoreApplication).Get(), coreApp.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), &spJsonValueStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), spPropValueFactory.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_TargetDeviceFamily).Get(), &spTargetDeviceFamilyStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), &componentLauncher))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference).Get(), &spStreamReferenceStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpClient).Get(), &factory))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpMethod).Get(), &methodStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpRequestMessage).Get(), &requestFactory))
ChkHr(GetActivationFactory(PropertyValueRef.Get(), &propertyValueFactory))
ChkHr(GetActivationFactory(RuntimeClassWindowsXboxApplicationModelStateInternalStateHelperCache.Get(), cacheStatics.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(), &spGlobalizationPreferences))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), &spCoreWindowStatic))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), coreWindowStatic.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Popups_MessageDialog).Get(), &_messageDialogFactory))
ChkHr(GetActivationFactory(WindowsFoundationUri.Get(), &uriEscapeStatics))
ChkHr(GetAddOnProduct(&spProduct))
ChkHr(GetALM(alm.GetAddressOf()))
ChkHr(GetAppName(szArgument, (sizeof(*RtlpNumberOf(szArgument)))))
ChkHr(GetB2BKey(collectionKeysUri.Get(), serviceTicket, publisherUserId, pCV, collectionsId))
ChkHr(GetB2BKey(purchaseKeysUri.Get(), serviceTicket, publisherUserId, pCV, purchaseId))
ChkHr(GetBigCatIds(productId.GetAddressOf(), skuId.GetAddressOf(), availabilityId.GetAddressOf(), productType.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(fullName.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(GetCallingAppSupportsMultipleUser(&supportsMultipleUsers))
ChkHr(GetCallingProcessPackageFullName(&bstr))
ChkHr(GetContentId(szPackageFamilyName, cpt, &guidContentId))
ChkHr(GetContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), CPT_UNIVERSAL_APP, &guidContentId))
ChkHr(GetContentIdKeyIdsForProductIds( productIdsIter.Get(), cv.Get(), &contentIdResponse))
ChkHr(GetContentIdKeyIdsForProductIds(ids.Get(), cv.Get(), &response))
ChkHr(GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(GetCurrentStatus(&status))
ChkHr(GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetERAPackageFullNameByAumid(pfnBuff, wil::out_param(callerPackageFullName)))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( dblPrice, currencyCode, locale, region, formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( price, currencyCode, language.Get(), HStringReference((const WCHAR*)pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( priceValue, pStorePricingInfo->CurrencyCode, locale, HStringReference(pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetHardwareManufacturerInfoInternal(value))
ChkHr(GetHttpResponse( pHttpClient, hstrURL, verb, pCV, requestContent.Get(), pStatusCode, hstrResponse))
ChkHr(GetJsonFromURLWithHttpClient(httpClient.Get(), hstrURL, pCV, ppJsonObject))
ChkHr(GetNamedString(spJson, pszName, timeString.GetAddressOf()))
ChkHr(GetNextBatch())
ChkHr(GetPackageFamilyNameFromPackage(pOptionalPackage, packageFamilyName))
ChkHr(GetPackageFamilyNameFromToken(spProcessToken, &pkgFamilyNameSize, pkgFamilyName))
ChkHr(GetPhoneReceiptFilepath(geoId, language, eReceiptType, featureName, packageFullName, szCacheFileFullPath, (sizeof(*RtlpNumberOf(szCacheFileFullPath)))))
ChkHr(GetPriceInfo(product, &spInAppOffer->PricingInfo))
ChkHr(GetPriceInfo(product, &spStoreAppInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, &spInAppSkuInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, pricingInfo))
ChkHr(GetProducts(productKinds, storeIds.Get(), cv.GetHStringReference().Get(), productJson))
ChkHr(GetProductsByKinds( nullptr, ids.Get(), nullptr, cv.Get(), CatalogRelationshipType::All, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, productIdsInAppInstallQueue.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, spIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( productKinds.Get(), productIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::AddOnParent, productJsonString.GetAddressOf()))
ChkHr(GetProductsByKinds(productKinds, storeIds, nullptr, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetProductsByKinds(productKinds, storeIds, storeProductOptions, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetPublisherId(pStoreCommerceServer, pCV, hstrPublisherId.GetAddressOf()))
ChkHr(GetReceiptCacheFileName(geoId, language, eReceiptType, featureName, szCacheFileName, (sizeof(*RtlpNumberOf(szCacheFileName)))))
ChkHr(GetReceiptCacheFolder(packageFullName, pszCacheFilepath, cchCacheFilepath))
ChkHr(GetRequiredEkbFromContentId(contentId.get(), keyId.addressof()))
ChkHr(GetSidForUser(user, sidString.GetAddressOf()))
ChkHr(GetStoreCommerce(&spStoreCommerce))
ChkHr(GetStoreCommerce(&spStoreCommerceWithConsumables))
ChkHr(GetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetStringFromURLWithHttpClient(pHttpClient, hstrURL, pCV, nullptr, jsonString.GetAddressOf()))
ChkHr(GetText(hr, cv, content.GetAddressOf(), title.GetAddressOf()))
ChkHr(GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync( m_productId.Get(), pCV, nullptr, spUnfulfilledList.Get()))
ChkHr(GetUnfulfilledConsumablesSync( _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), _spStoreCommerceServer->GetProductIdCache(), _spUnfulfilledList.Get()))
ChkHr(GetWindowHandle(spCoreWindow.Get(), &hwnd))
ChkHr(GuidToStringWithoutBraces(&anid, szAnid))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szGuid))
ChkHr(GuidToStringWithoutBraces(&guidCorrelationId, wszCorrelationId))
ChkHr(GuidToStringWithoutBraces(&guidRequestId, wszRequestId))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), szProductIdGuid))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), wszAppId))
ChkHr(hashMap.As(&_productIdTable))
ChkHr(hashMap->GetView(&_addOnLicensesMap))
ChkHr(hashMap->GetView(ppMapView))
ChkHr(hashMap->Insert(skuStoreId.Get(), license.Get(), &replaced))
ChkHr(hashMap->Insert(storeId.Get(), product.Get(), &replaced))
ChkHr(headers.As(&headersMap))
ChkHr(headers->Append(HStringReference(L"MS-SiteName").Get(), authDomain))
ChkHr(headers->Append(HStringReference(L"X-WP-ANID").Get(), HStringReference(szAnid).Get()))
ChkHr(headers->get_UserAgent(&userAgent))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), formattedAuthToken.Get(), &succeeded))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), ticket, &succeeded))
ChkHr(headers->TryAppendWithoutValidation(HStringReference(L"Authorization").Get(), authTicket, &b))
ChkHr(headersMap->Insert(HStringReference(L"MS-CV").Get(), cv.GetHStringReference().Get(), &replaced))
ChkHr(hr)
ChkHr(hrAppContainer)
ChkHr(hrCallContext)
ChkHr(hrCommerceOp)
ChkHr(hrCopy)
ChkHr(hrEntry)
ChkHr(hresult)
ChkHr(HRESULT_FROM_RPC(hr))
ChkHr(HRESULT_FROM_RPC(OptionalPackageRundownNotification( rpcHandle, appPfn.GetRawBuffer(nullptr), sessionId, sidString.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(optionalPackageName, nullptr))))
ChkHr(HRESULT_FROM_RPC(RpcBindingFromStringBindingW(rpcStringBinding, &rpcHandle)))
ChkHr(HRESULT_FROM_RPC(RpcBindingSetAuthInfoExW( rpcHandle, nullptr, 6, 10, 0, 0, reinterpret_cast<RPC_SECURITY_QOS *>(&qos))))
ChkHr(HRESULT_FROM_WIN32(::RegGetValueW(hKey, nullptr, valueName, 0x00000002, nullptr, pszBuffer, &cbData)))
ChkHr(HRESULT_FROM_WIN32(::RegOpenKeyExW(root, subKey, 0, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))), &hKey)))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 11ul ), &value, sizeof(value))))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 1ul ), value, dwSize)))
ChkHr(HRESULT_FROM_WIN32(1168L))
ChkHr(HRESULT_FROM_WIN32(122L))
ChkHr(HRESULT_FROM_WIN32(1244L))
ChkHr(HRESULT_FROM_WIN32(13L))
ChkHr(HRESULT_FROM_WIN32(1400L))
ChkHr(HRESULT_FROM_WIN32(15861L))
ChkHr(HRESULT_FROM_WIN32(15862L))
ChkHr(HRESULT_FROM_WIN32(1630L))
ChkHr(HRESULT_FROM_WIN32(50L))
ChkHr(HRESULT_FROM_WIN32(5L))
ChkHr(HRESULT_FROM_WIN32(erf.erfOper))
ChkHr(HRESULT_FROM_WIN32(error))
ChkHr(HRESULT_FROM_WIN32(GetLastError()))
ChkHr(HRESULT_FROM_WIN32(rc))
ChkHr(HRESULT_FROM_WIN32(RtlNtStatusToDosError(status)))
ChkHr(hrFamilies)
ChkHr(hrFetch)
ChkHr(hrGetAllAccounts)
ChkHr(hrGetPackage)
ChkHr(hrGetPackageFamilyName)
ChkHr(hrGetString)
ChkHr(hrGoldenTicket)
ChkHr(hrHttp)
ChkHr(hrImpersonate)
ChkHr(hrInfo)
ChkHr(hrInfosIter)
ChkHr(hrInnerIter)
ChkHr(hrItemIter)
ChkHr(hrIter)
ChkHr(hrJoin)
ChkHr(hrJoinActionFilters)
ChkHr(hrJoinStoreIds)
ChkHr(hrKinds)
ChkHr(hrMake)
ChkHr(hrModalAsUser)
ChkHr(hrOp)
ChkHr(hrOperation)
ChkHr(hrPackage)
ChkHr(hrPost)
ChkHr(hrProductsIter)
ChkHr(hrRequest)
ChkHr(hstrContent.Set(pszContent))
ChkHr(hstrEntitlementId.Set(entitlementId))
ChkHr(hstrPreferredSkuId.Set(_inAppProductSkuId.Get()))
ChkHr(hstrProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(hstrTitle.Set(pszTitle))
ChkHr(httpClient->get_DefaultRequestHeaders(&headers))
ChkHr(httpRequest.Initialize (0))
ChkHr(httpRequest.SetAuthorizationHeader(authResponse))
ChkHr(httpRequest.UploadAndFetchResourceByUrl ( lpszURL, 0, 0, 1, 1 ))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, _productKinds.Get()))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds.Get()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), _availabilityId.Get(), _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _skuStoreId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( productId.Get(), skuId.Get(), nullptr, storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId(productId.Get(), skuId.Get(), availabilityId.Get(), storeId.GetAddressOf()))
ChkHr(IAPUtils::CheckProductKinds(productKinds))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( jsonCatalogString.Get(), jsonCollectionsString.Get(), productJsonResponse))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJson))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJsonResponse))
ChkHr(IAPUtils::ConstructSlsUri(requestParams.uriToFormat.Get(), requestParams.cchUriMax, jsonInternalParameters, uri.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(&httpClient))
ChkHr(IAPUtils::CreateHttpClient(httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( authToken.Get(), false, httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( ticket.Get(), false, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), false, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), true, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(ticket.Get(), true, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthIfAvailable(_user.Get(), &httpClient, requestParams.forceRetailSandbox))
ChkHr(IAPUtils::CreateUri(_hstrImageUri.Get(), &_spImageUri))
ChkHr(IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri))
ChkHr(IAPUtils::CreateUri(hstrLinkUri.Get(), ppLinkUri))
ChkHr(IAPUtils::CreateUri(hstrUri.Get(), &_uriRuntimeClass))
ChkHr(IAPUtils::CreateUri(uri.Get(), &_spUri))
ChkHr(IAPUtils::CreateUri(uriString.Get(), ppValue))
ChkHr(IAPUtils::GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(IAPUtils::GetDeviceContextString(deviceContextString.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceIds(moid, oemid, scmid))
ChkHr(IAPUtils::GetFormattedPrice(_basePrice, _currencyCode.Get(), _formattedBasePrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_listPrice, _currencyCode.Get(), _formattedPrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_recurrencePrice, _currencyCode.Get(), _formattedRecurrencePrice.GetAddressOf()))
ChkHr(IAPUtils::GetJsonFromURL(hstrUri.Get(), pCV, &jsonObject))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient( _httpClient.Get(), HStringReference(szNextUrl).Get(), _spCV, &jsonIAPs))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient(httpClient.Get(), hstrUri.Get(), pCV, spJsonObject.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(hstrLanguage.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(language.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(temp.GetAddressOf()))
ChkHr(IAPUtils::GetLanguages(&spLanguages))
ChkHr(IAPUtils::GetLanguagesString(languages.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrGeoId.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrMarket.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(market.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(temp.GetAddressOf()))
ChkHr(IAPUtils::GetTimeSpanDifference(dtTrialTimeRemaining, &trialTimeRemaining))
ChkHr(IAPUtils::GetTimeSpanDifference(expirationDate, &trialTimeRemaining))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&_isAppContainer))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&isAppContainer))
ChkHr(IAPUtils::ParseStoreId( productStoreId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(data->storeIdToRefresh.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(storeId.Get(), productId.GetAddressOf(), nullptr , nullptr ))
ChkHr(IAPUtils::SetDateTime(ftAddOnExpirationTime, &addOnExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &expirationDate))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftExpireTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftTrialTimeRemaining, &dtTrialTimeRemaining))
ChkHr(IAPUtils::SetMaxDateTime(&_expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&m_dtExpiration))
ChkHr(IAPUtils::TimeSpanToString(value, timeSpanString.GetAddressOf()))
ChkHr(ids->Append(productId.Get()))
ChkHr(images->GetObjectAt(iImage, &image))
ChkHr(impersonator.Impersonate())
ChkHr(inAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(inAppOfferTokens->GetAt(p, temp.GetAddressOf()))
ChkHr(info->get_IsSatisfied(&isSatisfied))
ChkHr(infos.As(&infosIterable))
ChkHr(infos->get_Size(&sizeResult))
ChkHr(infosIterable->First(&infosIterator))
ChkHr(infosIterator->get_Current(&keyValuePair))
ChkHr(infosIterator->get_HasCurrent(&hasCurrent))
ChkHr(Initialize())
ChkHr(InitializeIdsFromLicense())
ChkHr(initWithWindow->Initialize(_hwnd))
ChkHr(inspectable.As(&productPrivate))
ChkHr(installItemVector->get_Size(&installVectorSize))
ChkHr(installOptions->get_AllowForcedAppRestart(&allowForcedAppRestart))
ChkHr(installStatus->get_PackageInstallExtendedState(&entendedQueueState))
ChkHr(installStatus->get_PackageInstallExtendedState(&extendedState))
ChkHr(installStatus->get_PackageInstallState(&queueState))
ChkHr(installStatus->get_UpdateStatus(&newStatus))
ChkHr(internalPackage->get_DisplayName(displayName.GetAddressOf()))
ChkHr(IsCallerERA(&isERA))
ChkHr(IsStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId, *value))
ChkHr(IsStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId, *value))
ChkHr(it.As(&spWebTokenRequestResult))
ChkHr(item->add_StatusChanged( Microsoft::WRL::Callback<ITypedEventHandler<StoreQueueItem*, IInspectable*>>( this, &DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged).Get(), &regToken))
ChkHr(item->get_ContentIds(&contentIds))
ChkHr(item->get_KeyIds(&keyIds))
ChkHr(item->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(item->get_PackageFamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(item->get_ProductId(productId.GetAddressOf()))
ChkHr(item->GetCurrentStatus(installStatus.GetAddressOf()))
ChkHr(item->remove_StatusChanged(regToken))
ChkHr(item2->get_Mandatory(value))
ChkHr(Items.Append(item))
ChkHr(items->get_Size(&count))
ChkHr(items->get_Size(&itemCount))
ChkHr(items->get_Size(&size))
ChkHr(items->GetAt(0, &contentIdKeyIdItem))
ChkHr(items->GetAt(0, item.GetAddressOf()))
ChkHr(items->GetAt(i, inspectable.GetAddressOf()))
ChkHr(items->GetAt(index, &item))
ChkHr(items->GetAt(index, item.GetAddressOf()))
ChkHr(items->GetObjectAt(i, &item))
ChkHr(iter->get_Current(&availability))
ChkHr(iter->get_Current(&collectionData))
ChkHr(iter->get_Current(&item))
ChkHr(iter->get_Current(&sku))
ChkHr(iter->get_HasCurrent(&hasCurrent))
ChkHr(iter->MoveNext(&hasCurrent))
ChkHr(iterator->get_Current(&status))
ChkHr(iterator->get_HasCurrent(&hasCurrent))
ChkHr(iterator->MoveNext(&hasCurrent))
ChkHr(json.As(&jsonObjectIterable))
ChkHr(jsonArray->GetObjectAt(i, jsonElement.GetAddressOf()))
ChkHr(JsonHelpers::AppendObject(authTokensArray, jsonBeneficiary))
ChkHr(JsonHelpers::AppendObject(jsonBeneficiaries, beneficiary))
ChkHr(JsonHelpers::AppendObject(jsonProductSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(productSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(spBeneficiaryArray, spBeneficiary))
ChkHr(JsonHelpers::AppendString(jsonEntitlementFilters, entitlementFilter.Get()))
ChkHr(JsonHelpers::AppendString(productTypes, L"Application"))
ChkHr(JsonHelpers::AppendString(productTypes, L"UnmanagedConsumable"))
ChkHr(JsonHelpers::CreateJsonArray(&addOns))
ChkHr(JsonHelpers::CreateJsonArray(&authTokensArray))
ChkHr(JsonHelpers::CreateJsonArray(&jsonBeneficiaries))
ChkHr(JsonHelpers::CreateJsonArray(&jsonEntitlementFilters))
ChkHr(JsonHelpers::CreateJsonArray(&jsonProductSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&products))
ChkHr(JsonHelpers::CreateJsonArray(&productSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&productTypes))
ChkHr(JsonHelpers::CreateJsonArray(&spBeneficiaryArray))
ChkHr(JsonHelpers::CreateJsonObject(&_request))
ChkHr(JsonHelpers::CreateJsonObject(&_response))
ChkHr(JsonHelpers::CreateJsonObject(&beneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&includeRelationship))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCatalogParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCollectionsParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonInternalParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonOutput))
ChkHr(JsonHelpers::CreateJsonObject(&jsonParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonResultObject))
ChkHr(JsonHelpers::CreateJsonObject(&newResults))
ChkHr(JsonHelpers::CreateJsonObject(&package))
ChkHr(JsonHelpers::CreateJsonObject(&previewResultJson))
ChkHr(JsonHelpers::CreateJsonObject(&productSku))
ChkHr(JsonHelpers::CreateJsonObject(&request))
ChkHr(JsonHelpers::CreateJsonObject(&spBeneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&spRequest))
ChkHr(JsonHelpers::CreateJsonObject(&userAuth))
ChkHr(JsonHelpers::CreateJsonObject(jsonTemp.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(_currentBatch, &_currentBatchCount))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(alternateIds, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(availabilities, &countAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(collectionDataArray, &collectionSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &countSkuAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(images, &countImages))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(items, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonSKUAvailabilities, &cchSKUAvailablilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonUriArray, &countUris))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(localizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(marketProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productAddOns, &addOnSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(products, &productsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productsArray, &productSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(relatedProducts, &relatedProductsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(searchTitles, &countTitles))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuAvailabilities, &skuAvailabilitySize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuLocalizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spActions, &actionsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAlternateIds, &alternateIdsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAvailabilities, &availabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spDisplaySkuAvailabilities, &displaySkuAvailabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(storeProductArray, &productCount))
ChkHr(JsonHelpers::GetNamedArray(collectionData, L"items", &collectionDataArray))
ChkHr(JsonHelpers::GetNamedArray(customPolicyObject, L"packages", &packages))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &_currentBatch))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(item, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(jsonResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(marketProperty, L"RelatedProducts", &relatedProducts))
ChkHr(JsonHelpers::GetNamedArray(package, L"productAddOns", &productAddOns))
ChkHr(JsonHelpers::GetNamedArray(product, L"AlternateIds", &alternateIds))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &skuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"LocalizedProperties", &localizedProperties))
ChkHr(JsonHelpers::GetNamedArray(product, L"MarketProperties", &marketProperties))
ChkHr(JsonHelpers::GetNamedArray(productsResultObject, L"Products", &productsArray))
ChkHr(JsonHelpers::GetNamedArray(properties, L"Images", &images))
ChkHr(JsonHelpers::GetNamedArray(properties, L"SearchTitles", &searchTitles))
ChkHr(JsonHelpers::GetNamedArray(response, L"items", &items))
ChkHr(JsonHelpers::GetNamedArray(sku, L"LocalizedProperties", &skuLocalizedProperties))
ChkHr(JsonHelpers::GetNamedArray(skuAvailability, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(spAvailability, L"Actions", &spActions))
ChkHr(JsonHelpers::GetNamedArray(spDisplaySkuAvailability, L"Availabilities", &spAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spJson, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"AlternateIds", &spAlternateIds))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"DisplaySkuAvailabilities", &spDisplaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedDateTime(conditions, L"EndDate", &pricingInfo->SaleEndDate))
ChkHr(JsonHelpers::GetNamedInteger(customPolicyObject, L"version", &version))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", &totalResultCount))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", (int *)&count))
ChkHr(JsonHelpers::GetNamedInteger(marketProperty, L"MinimumUserAge", &rating))
ChkHr(JsonHelpers::GetNamedObject(availability, L"Properties", &availabilityProperties))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvail, L"Sku", &firstSkuAvailSku))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvailSku, L"Properties", &firstSkuAvailSkuProperties))
ChkHr(JsonHelpers::GetNamedObject(jsonIAPs, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplaySkuSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(orderManagementData, L"Price", &price))
ChkHr(JsonHelpers::GetNamedObject(productResult, L"Product", &product))
ChkHr(JsonHelpers::GetNamedObject(sku, L"Properties", &skuProperties))
ChkHr(JsonHelpers::GetNamedObject(skuAvailability, L"Sku", &sku))
ChkHr(JsonHelpers::GetNamedObject(skuProperties, L"LicensingData", &skuLicensingData))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"Conditions", &conditions))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"OrderManagementData", &orderManagementData))
ChkHr(JsonHelpers::GetNamedObject(spDisplaySkuAvailability, L"Sku", &spSku))
ChkHr(JsonHelpers::GetNamedObject(spJsonObject, L"Product", ppJsonObject))
ChkHr(JsonHelpers::GetNamedString(altId, L"IdType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(altId, L"Value", &spInAppOffer->InAppOfferToken))
ChkHr(JsonHelpers::GetNamedString(availability, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"productId", collectionProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"skuId", collectionSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatId))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatIdOut))
ChkHr(JsonHelpers::GetNamedString(firstSkuAvailSkuProperties, L"CustomDeveloperData", &spInAppOffer->ProductTag))
ChkHr(JsonHelpers::GetNamedString(image, L"ImagePurpose", purpose.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(image, L"Uri", &spInAppOffer->ImageUri))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferTokenString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", itemInAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", itemProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"skuType", skuType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", itemTransactionId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", transactionIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonDataObj, L"AppServiceName", appServiceName.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"AuthToken", authToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonResponse, L"key", result))
ChkHr(JsonHelpers::GetNamedString(package, L"skuId", _skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(pagingInfo, L"continuationToken", ContinuationToken))
ChkHr(JsonHelpers::GetNamedString(price, L"CurrencyCode", &pricingInfo->CurrencyCode))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", &spInAppOffer->InAppProductId))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", currentProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductType", productType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"productId", addOnProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"skuId", addOnSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spInAppOffer->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spStoreAppInfo->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spInAppOffer->Name))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spStoreAppInfo->Name))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelatedProductId", relatedProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelationshipType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(response, L"key", key))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", &spInAppSkuInfo->SkuId))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuType", &spInAppSkuInfo->SkuType))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuDescription", &spInAppSkuInfo->Description))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuTitle", &spInAppSkuInfo->Title))
ChkHr(JsonHelpers::GetNamedString(skuLicensingData, L"ProductId", &spInAppSkuInfo->ProductId))
ChkHr(JsonHelpers::GetNamedString(skuProperties, L"CustomDeveloperData", &spInAppSkuInfo->CustomDeveloperData))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"IdType", alternateIdType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"Value", alternateIdValue.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAvailability, L"AvailabilityId", hstrAvailabilityId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spJson, L"PreferredSkuId", preferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"PreferredSkuId", hstrPreferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductId", hstrProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductType", hstrProductType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spSku, L"SkuId", hstrSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleString", searchTitleString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleType", titleType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedValue(price, L"ListPrice", &listPrice))
ChkHr(JsonHelpers::GetNamedValue(price, L"MSRP", &basePrice))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), &spJsonUriArray))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), spJsonUriArray.ReleaseAndGetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(collectionsJson, nullptr), &collectionData))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(productsJson, nullptr), &productsResultObject))
ChkHr(JsonHelpers::ParseToJsonObject(_jsonRequest.GetRawBuffer(nullptr), jsonDataObj.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(customPolicyDecoded.GetRawBuffer(nullptr), &customPolicyObject))
ChkHr(JsonHelpers::ParseToJsonObject(jsonBodyString.GetRawBuffer(nullptr), &jsonResult))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponse.GetRawBuffer(nullptr), _response.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponseString.GetRawBuffer(nullptr), &jsonResponse))
ChkHr(JsonHelpers::ParseToJsonObject(modalFlowSizes.GetRawBuffer(nullptr), modalFlowJsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &productResult))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(results.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(tmp.GetRawBuffer(nullptr), _request.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(jsonDataString, nullptr), jsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(overrideJsonRequest, nullptr), &_request))
ChkHr(JsonHelpers::RemoveAt(products, static_cast<UINT32>(index)))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"entitlementFilters", jsonEntitlementFilters))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteArray))
ChkHr(JsonHelpers::SetNamedArray(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiaries))
ChkHr(JsonHelpers::SetNamedArray(newResults.Get(), L"Products", products))
ChkHr(JsonHelpers::SetNamedArray(package, L"productAddOns", addOns))
ChkHr(JsonHelpers::SetNamedArray(request, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(request, L"productTypes", productTypes))
ChkHr(JsonHelpers::SetNamedArray(spRequest, L"beneficiaries", spBeneficiaryArray))
ChkHr(JsonHelpers::SetNamedArray(userAuth, userSid.GetRawBuffer(nullptr), authTokensArray))
ChkHr(JsonHelpers::SetNamedBool(_request, L"HasPreviewCapability", hasPreviewCapability))
ChkHr(JsonHelpers::SetNamedBool(json, keyName.GetRawBuffer(nullptr), boolValue))
ChkHr(JsonHelpers::SetNamedBool(package, L"isActive", !!isActive))
ChkHr(JsonHelpers::SetNamedBool(package, L"isDiscLicense", isDiscLicense))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrial", !!isTrial))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrialOwnedByThisUser", isTrialOwnedByThisUser))
ChkHr(JsonHelpers::SetNamedBool(productAddOn, L"isActive", true))
ChkHr(JsonHelpers::SetNamedBool(spRequest, L"expandSatisfyingItems", false))
ChkHr(JsonHelpers::SetNamedDateTime(package, L"expiration", expirationDate))
ChkHr(JsonHelpers::SetNamedDateTime(productAddOn, L"expiration", addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedNumber(_response, L"error", hrPurchase))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), byteValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), doubleValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), floatValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(int64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(uint64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint32Value))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"maxPageSize", _maxItems))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"quantity", quantity))
ChkHr(JsonHelpers::SetNamedNumber(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteNumber))
ChkHr(JsonHelpers::SetNamedNumber(jsonOutput, L"AppServiceResponseStatus", responseStatus))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", 0))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", isInUserCollection ? 1 : 0))
ChkHr(JsonHelpers::SetNamedNumber(previewResultJson, L"licensableStatus", licenseQueryStatus))
ChkHr(JsonHelpers::SetNamedObject(jsonCollectionsParameters, L"includeRelationship", includeRelationship))
ChkHr(JsonHelpers::SetNamedObject(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteObject))
ChkHr(JsonHelpers::SetNamedObject(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(request, L"beneficiary", spBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(sku, L"CollectionData", collectionItem.Get()))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productIdsWithCommas", storeIdsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"CV", cv.GetUnicode()))
ChkHr(JsonHelpers::SetNamedString(_request, L"DeviceContext", deviceContextString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"InvokedApi", invokedApi))
ChkHr(JsonHelpers::SetNamedString(_request, L"Name", tmp.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"ParentProductId", WindowsGetStringRawBuffer(appProductId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"StoreId", storeProductId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"UserId", realId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"Version", hstrPurchaseAppAPIVersion.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"AlreadyPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NetworkError"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NotPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"ServerError"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Aad"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Msa"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityValue", ::WindowsGetStringRawBuffer(token, nullptr)))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"localTicketReference", ::WindowsGetStringRawBuffer(accountId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relatedProductId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relationshipType", SellableBy.Get()))
ChkHr(JsonHelpers::SetNamedString(json, keyName.GetRawBuffer(nullptr), stringValue.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"actionFilter", actionFilter.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", storeIdsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productKinds", productKindsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"itemCount", maxItemsAsHstring.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"skipCount", skipCountAsHString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"consumableProductId", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"continuationToken", _continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"trackingId", HStringReference(szTrackingId).Get()))
ChkHr(JsonHelpers::SetNamedString(jsonDataObj, L"CV", _cv.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteString.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceFamily", deviceFamily.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceMoid", moid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceOemid", oemid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceScmid", scmid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"languages", languages.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"locale", language.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"market", market.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _productStoreId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"PFN", _packageFullName.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"DevOfferId", _devOfferId.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"StoreId", storeId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"productId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"skuId", _skuId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"trialUniqueId", trialUniqueId.Get()))
ChkHr(JsonHelpers::SetNamedString(previewResultJson, L"licensableSku", licensableSku.Get()))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"AuthToken", HStringReference(L"").Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"continuationToken", continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"parentProductId", ParentProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productId", catalogProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productIds", productIdsString.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(request, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(request, L"transactionId", transactionId))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityType", L"msa"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", authTicket.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", MsaTicket))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"localTicketReference", L"0"))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"market", market.Get()))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"validityType", L"Valid"))
ChkHr(JsonHelpers::SetNamedTimeSpan(package, L"trialTimeRemaining", trialTimeRemaining))
ChkHr(JsonHelpers::Stringify(_jsonValue, _stringifiedValue.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequestString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonIntialResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(entry, entryJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonBody.Get(), body.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonOutput, _jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResult, jsonBodyString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResultObject, jsonResult))
ChkHr(JsonHelpers::Stringify(jsonTemp, overrideJsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(newResults, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(package, _cachedLicenseJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(pRequest, requestJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(previewResultJson, licenseSatisfactionResultJson))
ChkHr(JsonHelpers::Stringify(request, requestJson.GetAddressOf()))
ChkHr(jsonInput.As(&jsonObjectIterable))
ChkHr(jsonInput->SetNamedValue(jsonSubstitutionList->destinationKey.Get(), jsonSubstitutionList->defaultValue.Get()))
ChkHr(jsonLegacyWindowsPhoneLicensingData->GetNamedString(HStringReference(L"PublisherId").Get(), strPublisherId.GetAddressOf()))
ChkHr(jsonLicensingData->GetNamedObject(HStringReference(L"LegacyWindowsPhoneLicensingData").Get(), &jsonLegacyWindowsPhoneLicensingData))
ChkHr(jsonObjectIterable->First(&jsonObjectIterator))
ChkHr(jsonObjectIterator->get_Current(&currentPair))
ChkHr(jsonObjectIterator->get_HasCurrent(&hasCurrent))
ChkHr(jsonObjectIterator->MoveNext(&hasCurrent))
ChkHr(jsonObjectStatics->Parse(jsonString, &jsonObject))
ChkHr(jsonObjectStatics->Parse(jsonString.Get(), &jsonObject))
ChkHr(jsonObjectStatics->Parse(responseJsonString.Get(), &responseJson))
ChkHr(JsonParser::ParseJSONStringToObject( _jsonResponse, this, requestStoreRateAndReviewTable))
ChkHr(JsonParser::ParseJSONStringToObject( _response, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonCollectionsString, this, collectionQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonResponse, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, itemsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( licenseSatisfactionResult, this, previewLicenseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, &results, getProductsByKindsResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( scope, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( childObject, tag, responseTable))
ChkHr(JsonParser::ParseJSONToObject( entry, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AppLicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AvailabilityRootTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, DisplaySkuAvailabilitiesTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, imageTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, itemTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, LicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, OrderManagementDataTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, ProductTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, RecurrenceTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, videoTable))
ChkHr(jsonProperties->GetNamedObject(HStringReference(L"LicensingData").Get(), &jsonLicensingData))
ChkHr(jsonSKU->GetNamedObject(HStringReference(L"Properties").Get(), &jsonProperties))
ChkHr(jsonSKUAvailabilities->GetObjectAt(0, &jsonSKUAvailability))
ChkHr(jsonSKUAvailability->GetNamedObject(HStringReference(L"Sku").Get(), &jsonSKU))
ChkHr(jsonSubstitutionList->defaultValue->get_ValueType(&defaultValueType))
ChkHr(jsonSubstitutionList->defaultValue->Stringify(defaultValueString.GetAddressOf()))
ChkHr(jsonSubstitutionList->destinationKey.CopyTo(jsonSubstitutionList->sourceKey.GetAddressOf()))
ChkHr(jsonUriArray->GetObjectAt(index, &object))
ChkHr(jsonValue->get_ValueType(&jsonType))
ChkHr(jsonValue->get_ValueType(&type))
ChkHr(jsonValue->get_ValueType(&valueType))
ChkHr(jsonValue->GetArray(jsonArray.GetAddressOf()))
ChkHr(jsonValue->GetBoolean(&value))
ChkHr(jsonValue->GetNumber(&value))
ChkHr(jsonValue->GetObjectW(&childObject))
ChkHr(jsonValue->GetObjectW(jsonObject.GetAddressOf()))
ChkHr(jsonValue->GetString(value.GetAddressOf()))
ChkHr(jsonValue->Stringify(value.GetAddressOf()))
ChkHr(keyId.Set(contentId.Get()))
ChkHr(KeyIdentifiers->First(&spKeyIdsIter))
ChkHr(keyIds->Append(HStringReference(keyId.get()).Get()))
ChkHr(keyIds->Append(keyId.Get()))
ChkHr(keyIds->get_Size(&keyIdSize))
ChkHr(keyIds->get_Size(&keySize))
ChkHr(keyIds->GetAt(contentIdIndex, keyId.GetAddressOf()))
ChkHr(keyIds->GetAt(i, keyId.GetAddressOf()))
ChkHr(keyIds->GetView(&keyIdsVectorView))
ChkHr(keyValuePair->get_Value(&info))
ChkHr(keywords->get_Size(&cKeywords))
ChkHr(keywords->GetAt(k, filterKeyword.GetAddressOf()))
ChkHr(license->get_SkuStoreId(skuStoreId.GetAddressOf()))
ChkHr(license->GetContentInfo(__uuidof(**(contentInfo.GetAddressOf())), IID_PPV_ARGS_Helper(contentInfo.GetAddressOf())))
ChkHr(License->GetIsTrial(&isTrial))
ChkHr(License->GetLicenseGrantReason(&_grantReason))
ChkHr(licensedProducts.As(&products))
ChkHr(licensedProducts->Append(productId.Get()))
ChkHr(licensedProducts->get_Size(&size))
ChkHr(licenseInfo->get_IsTrial(&isTrial))
ChkHr(LicenseInformationServer::CreateInstance( _packageFullName.Get(), _appType, cv.Get(), &_spLicenseInformationInternal))
ChkHr(licenseManager->GetSatisfactionInfos( contentIds.Get(), keyIds.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), keyIdsVectorView.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), nullptr, &licenseSatisfactionResult))
ChkHr(LicenseParseReceiptResponse(spbReceiptResponse, cbReceiptResponse, &spbReceipt, &cbReceipt))
ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))
ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))
ChkHr(licenseSatisfactionInfoForAll->Clear())
ChkHr(licenseSatisfactionInfoForAll->GetView(&licenseSatisfactionInfoReadOnlyForAll))
ChkHr(licenseSatisfactionInfoForAll->Insert(contentId.Get(), leinfo.Get(), &replaced))
ChkHr(licenseSatisfactionResult.As(&licenseSatisfactionResultInternal))
ChkHr(licenseSatisfactionResult->get_ExtendedError(&extendedError))
ChkHr(licenseSatisfactionResult->get_LicenseSatisfactionInfos(&infos))
ChkHr(listPrice->Stringify(&pricingInfo->Price))
ChkHr(LoadFormattedString( uLabelId, nullptr, &pszContent))
ChkHr(LoadFormattedString( uTitleId, nullptr, &pszTitle, &szArgument))
ChkHr(LoadFormattedString(uContentId, cv, &pszContent, &szArgument, &szArgument2))
ChkHr(LocalAllocArray(cchBuffer, &pszBuffer))
ChkHr(LocalAllocBytes(cbData, &pszBuffer))
ChkHr(LocalAllocBytes(cbReceipt, &pbReceipt))
ChkHr(localizedProperties->GetObjectAt(0, &properties))
ChkHr(m_evtLicenseStatusChangedEvent.Add(pHandler, pCookie))
ChkHr(m_evtLicenseStatusChangedEvent.InvokeAll())
ChkHr(m_evtLicenseStatusChangedEvent.Remove(iCookie))
ChkHr(m_hstrProductId.CopyTo(pValue))
ChkHr(m_hstrProductId.Set(featureId))
ChkHr(m_hstrProductId.Set(pszProductId))
ChkHr(m_pProductLicenseMap.CopyTo(ppValue))
ChkHr(m_productId.Set(bigCatId))
ChkHr(m_spHashMap.As(&m_spIterable))
ChkHr(m_spHashMap->get_Size(pcItems))
ChkHr(m_spHashMap->GetView(&spHashView))
ChkHr(m_spHashMap->GetView(view))
ChkHr(m_spHashMap->HasKey(hstrKey, pfHasKey))
ChkHr(m_spHashMap->Insert(strProductId.Get(), spProductLicense.Get(), &replaced))
ChkHr(m_spIterable->First(ppIterator))
ChkHr(m_spPackageFullName.Set(packageFullName))
ChkHr(m_spStoreCommerce.As(spRef))
ChkHr(m_spStoreCommerceFactory->CreateStoreCommerceServer(&spStoreCommerce))
ChkHr(MakeAndInitialize<AcquireStoreLicenseForOptionalPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), pOptionalPackage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BackgroundTaskOperation>(&operation, jsonRequest, cv.GetHStringReference().Get()))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, storeProductOptions, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( operation, _packageFullName.Get(), pszOperationName, this, storeIds, storePackageInstallOptions, shouldPromptForConsent, totallySilent, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, false, false, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, false, true, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, this, _packageFullName.Get(), pStoreIds, cv.GetAnsi(), messageDialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<FindStoreProductForPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, package, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAppAndSupplementalStorePackageUpdatesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrieve, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), cv.GetAnsi(), productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, items, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, nullptr, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetConsumableBalanceRemainingOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerCollectionsIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerPurchaseIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetIsAnySkuInstalledOperation>( ppOperation, productStoreId, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &currentOperation, this, _productStoreId.Get(), productKinds, 0, maxItems, true, _user.Get(), cv.GetAnsi(), nullptr ))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _skipCount + _maxItems, _maxItems, _hasMorePages, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &currentOperation, this, _productStoreId.Get(), productKinds, nullptr, maxPageSize, _user.Get(), cv.GetAnsi(), nullptr))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _continuationToken.Get(), _maxItems, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetOfflineLicensesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreProductOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), storeIds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUnfulfilledConsumablesOperationServer>( &spCheckConsumables, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId)))
ChkHr(MakeAndInitialize<GetUserCollectionOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrievePerPage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), _szCV, productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<LicenseSatisfactionInfo>( &leinfo, license))
ChkHr(MakeAndInitialize<LicenseSatisfactionResult>( result, licenseSatisfactionInfoReadOnlyForAll, hrOperation, skuId ? HStringReference(skuId).Get() : nullptr))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&messageDialogHelper, appName.Get(), (HWND)0 ))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr , hwnd))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr, hwnd))
ChkHr(MakeAndInitialize<ProductIdCache>(&_spProductIdCache))
ChkHr(MakeAndInitialize<ProductReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId), productId ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _packageFullName.Get(), _productStoreId.Get(), storeId, storePurchaseProperties, overrideJsonRequest, _user.Get(), cv.GetHStringReference().Get(), hwnd, _hasPreviewCapability, invokedApi ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _PFN.Get(), appProductId.Get(), storeId.Get(), storePurchaseProperties.Get(), overrideJsonRequest.Get(), nullptr, cv.GetHStringReference().Get(), _parentHwnd, _hasPreviewCapability, InvokedApi_RequestPurchase.Get() ))
ChkHr(MakeAndInitialize<ReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId) ))
ChkHr(MakeAndInitialize<ReportConsumableFulfillmentOperationServer>( &spReportProdFulfillOp, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_fulfillRequestId), productId, transactionId ))
ChkHr(MakeAndInitialize<ReportConsumableOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, quantity, trackingId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestAppPurchaseOperationServer>( &spRequestAppPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestAppPurchaseId), fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseBySkuIdOperationServer>( &spRequestPurchaseBySkuIdOperation, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, skuId, hasPreviewCapability, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseOperationServer>( &spRequestProductPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseWithResultsOperationServer>( &spRequestProductPurchaseWithResultsInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, nullptr, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, storePurchaseProperties, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestStoreRateAndReviewOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreAcquireLicenseResult>( ppResults, _pStorePackageLicense.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreAppLicense>(&_spAppLicense,  spResults))
ChkHr(MakeAndInitialize<StoreCanAcquireLicenseResult>( ppResults, _licenseQueryStatus, _licensableSku.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, _trackingId, _consumableStatus, _balanceRemaining, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, GUID_NULL, _consumableStatus, _quantity, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreContentIdKeyIdResponse>(response, responseJson.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), nullptr, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), pUser, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContextCallerData>(ppCallerData, appWindowHandle))
ChkHr(MakeAndInitialize<StoreContextLicenseChangedCallback>(&_spLicenseChangedCallback, this))
ChkHr(MakeAndInitialize<StorePackageLicense>( &_pStorePackageLicense, _pOptionalPackage.Get(), _storeContext.Get() ))
ChkHr(MakeAndInitialize<StorePackageLicenseLostCallback>(&spStorePackageLicenseLostCallback, this))
ChkHr(MakeAndInitialize<StorePackageUpdate>(&storePackageUpdate, package.Get(), storeQueueItem.Get()))
ChkHr(MakeAndInitialize<StorePackageUpdateResult>( pStorePackageUpdateResult, _overallState, _updateStatuses.Get(), _queueItems.Get()))
ChkHr(MakeAndInitialize<StoreProduct>(&spStoreProduct,  storeProductJson))
ChkHr(MakeAndInitialize<StoreProductResult>( ppStoreProductResult, _products, _hResultOfOperation))
ChkHr(MakeAndInitialize<StoreProductResult>(ppResults, _products, _hresultOfOperation))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(&storePurchaseProperties, _nameOverride.Get()))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, name))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, nullptr))
ChkHr(MakeAndInitialize<StorePurchaseResult>(ppResults, _status, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreQueueItem>(&queueItem, installItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, appInstallItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, item.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItemCompletedEventArgs>(&args, status.Get()))
ChkHr(MakeAndInitialize<StoreQueueItemStatus>(&status, state, extendedState, packageStatus, errorCode))
ChkHr(MakeAndInitialize<StoreRateAndReviewResult>( ppResults, _status, _jsonResponse.Get(), _wasUpdated, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreRequestOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), requestKind, parametersAsJson, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreSendRequestResult>( ppResults, _jsonResponse.Get(), _hresultOfOperation, _statusCode))
ChkHr(MakeAndInitialize<StoreUninstallStorePackageResult>( &result, _resultCode, _resultStatus ))
ChkHr(MakeAndInitialize<UninstallStorePackageOperation>( operation, _packageFullName.Get(), function, storeId, packageFamilyName, shouldPrompt, dialogHelper.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<AddLicenseAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [licenseBuffer](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IDataReaderStatics> dataReaderFactory; { { __hr = (Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IDataReader> licenseReader; { { __hr = (dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; UINT32 licenseBufferLength; { { __hr = (licenseReader->get_UnconsumedBufferLength(&licenseBufferLength)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; SP_CPP_ARRAY<BYTE> licenseBuffer; licenseBuffer = new BYTE[licenseBufferLength]; { if (!(licenseBuffer)) { Windows::Foundation::Diagnostics::OriginateError(((HRESULT)0x8007000EL), nullptr); } { if (!(licenseBuffer)) { { __hr = (((HRESULT)0x8007000EL)); }; ; (void)TraceHR( "\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkAlloc(licenseBuffer)", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; }; { { __hr = (licenseReader->ReadBytes(licenseBufferLength, licenseBuffer)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILicenseInstance> licenseInstance; { { __hr = (alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L\"\", licenseInstance.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<CancelInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<PauseInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<RefreshLicensesAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [refreshPolicy](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (alm->RefreshLicenses(refreshPolicy)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(alm->RefreshLicenses(refreshPolicy))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<ResumeInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getCollectionsIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString collectionsId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerCollectionsId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), collectionsId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(collectionsId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerCollectionsIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getPurchaseIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString purchaseId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerPurchaseId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), purchaseId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(purchaseId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerPurchaseIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppOperation, BaseTrust, [spThisKeepAlive, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString campaignId; HRESULT hrOperation = CollectionsServiceProxyV6::GetCampaignId( spThisKeepAlive->GetAppCatalogId(cvExtend.Get()), cvExtend.Get(), campaignId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(campaignId.Get()); } Telemetry::EndOperation("CurrentApp.GetAppPurchaseCampaignIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppLoadAddOnProductInfosOperation, BaseTrust, [spThisKeepAlive, cv](CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>& result) mutable { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); ComPtr<IVectorView<StorePreviewProductInfo*>> spProductInfos; HRESULT hrOperation = spThisKeepAlive->LoadAddOnProductInfos(cvExtend.Get(), &spProductInfos); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(spProductInfos.Get()); } Telemetry::EndOperation("StorePreview.LoadAddOnProductInfosAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, spPotentialSystemFeatures, cv](CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>> & results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IVectorView<StoreSystemFeature>> resultsView; { { __hr = (FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storeconfigurationserver.cpp", 229, __FSTREXP __FUNCTION__  , "ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storeconfigurationserver.cpp", 229, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, options, cv](CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>& results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference> resultsView; { { __hr = (WSCollector::CollectStoreLog(options, resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storeconfigurationserver.cpp", 338, __FSTREXP __FUNCTION__  , "ChkHr(WSCollector::CollectStoreLog(options, resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "\\storeconfigurationserver.cpp", 338, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::GetStoreLogDataAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(marketProperties->GetObjectAt(0, &marketProperty))
ChkHr(memStatics->GetModalExperienceManager(modalExperienceManager))
ChkHr(message->put_Content(pRequestContent))
ChkHr(messageDialogHelper->ShowDialogWithResultsAsync( onMeteredNetwork ? ((HRESULT)0x803F6206L) : ((HRESULT)0x803F6203L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(methodStatics->get_Head(&method))
ChkHr(methodStatics->get_Options(&method))
ChkHr(methodStatics->get_Patch(&method))
ChkHr(modalExperienceOptions->put_AllowWin32Owner(true))
ChkHr(modalExperienceOptions->put_Centered(true))
ChkHr(modalExperienceOptions->put_ExperienceDefaultSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMaximumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMinimumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceTitle((nameOverride == nullptr ? HStringReference(L" ").Get() : nameOverride.Get())))
ChkHr(modalExperienceOptions->put_SuspendExemptionType(static_cast<UINT32>(PLM_TASKCOMPLETION_CATEGORY_FLAGS::PT_TC_NONE)))
ChkHr(moId.Set(szEncodedMoId))
ChkHr(nameOverride.Set(L""))
ChkHr(netInfoStatics->GetInternetConnectionProfile(&connectionProfile))
ChkHr(newOrder->First(&iter))
ChkHr(oemId.Set(szEncodedOemId))
ChkHr(optionalPackageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(optionalPackageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(outputBuffer.Preallocate(uriBufferMax, &pszDest))
ChkHr(outputBuffer.Promote(output.GetAddressOf()))
ChkHr(outputs->Append(inputString))
ChkHr(outputs->Append(output.Get()))
ChkHr(outputs->GetView(outputStrings))
ChkHr(outValue.Set(pszBuffer))
ChkHr(package.As(&package2))
ChkHr(package.As(&package4))
ChkHr(package->get_EffectiveSupportedUsers(&supportedUsers))
ChkHr(package->get_Id(&optionalPackageId))
ChkHr(package->get_Id(&packageId))
ChkHr(package->get_PackageType(&packageType))
ChkHr(package->get_TargetDeviceFamily(&foreignKey))
ChkHr(package->GetDisplayNameLocalized(appName))
ChkHr(package2->get_PackageFullName(packageFullNameToUninstall.GetAddressOf()))
ChkHr(package4->get_IsOptional(&isOptional))
ChkHr(package4->get_IsOptional(&isOptionalPackage))
ChkHr(package4->get_SignatureKind(&signatureKind))
ChkHr(packageFamilyName.Set(requestorFamilyName))
ChkHr(packageFamilyNameToUninstall.Set(packageFamilyName))
ChkHr(packageFullName.Set(bstr.Get()))
ChkHr(packageFullName.Set(requestorFullName))
ChkHr(packageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(packageId->get_FamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(packageId->get_FullName(optionalPfn.GetAddressOf()))
ChkHr(packageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(packageId->get_Name(packageName.GetAddressOf()))
ChkHr(packageManager->FindPackagesByUserSecurityIdPackageFamilyName(userSid.Get(), packageFamilyNameToUninstall.Get(), packages.GetAddressOf()))
ChkHr(packageManager->RemovePackageAsync(packageFullName.Get(), &deploymentOperation))
ChkHr(packageManager->UninstallPackage(packageFullNameToUninstall.GetRawBuffer(nullptr)))
ChkHr(packageProvider->FindAvailablePackage(packageFamilyNameToUninstall.Get(), AvailablePackageIdentityType_ContentId, &package))
ChkHr(packages->First(&packagesIterator))
ChkHr(packages->GetObjectAt(0, &package))
ChkHr(packagesIterator->get_Current(&package))
ChkHr(packagesIterator->get_HasCurrent(&hasCurrent))
ChkHr(packagesIterator->MoveNext(&hasCurrent))
ChkHr(pAppAddOn->GetExpireTime(&ftExpireTime))
ChkHr(pAppAddOn->GetProductId(&pszProductId))
ChkHr(pAppAddOn->GetProductType(&m_eAddOnType))
ChkHr(parentPackage->get_Dependencies(&dependencies))
ChkHr(pArgs->get_State(&state))
ChkHr(ParseJSONToObject( jsonObject, pObj, entry.pChildren))
ChkHr(ParseJSONToObject( jsonObject, pObj, table))
ChkHr(ParseSLSJson(onestoreClientData.GetRawBuffer(nullptr), UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), true))
ChkHr(ParseSLSJson(pszJson, UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), false))
ChkHr(ParseSLSJson(pszJson, UriHelperV7::s_rghstrUrisSLS, UriHelperV7::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelperV7::s_rghstrUrisSLS))), false))
ChkHr(ParseUriSubstitutionTag(tag.Get(), tagKey.GetAddressOf(), tagName.GetAddressOf(), tagMeta.GetAddressOf()))
ChkHr(PathCchAddExtension(pszCacheFileName, cchCacheFileName, L".dat"))
ChkHr(PathCchAppendEx(pszCacheFilepath, cchCacheFilepath, szCacheFileName, 0))
ChkHr(PathCchAppendEx(pszFolder, cchFolder, L"_WinStoreSDK_Receipt_Cache", 0))
ChkHr(pCallerData->QueryInterface(__uuidof(**(&spCallerDataPrivate)), IID_PPV_ARGS_Helper(&spCallerDataPrivate)))
ChkHr(pCommand->get_Id(&spPropertyValue))
ChkHr(pdConnection->OpenAsync(&openOperation))
ChkHr(pdConnection->put_AppServiceName(appServiceName.Get()))
ChkHr(pdConnection->put_PackageFamilyName(PurchaseDialogPFNRef.Get()))
ChkHr(pdConnection->SendMessageAsync(message.Get(), sendMessageOperation.GetAddressOf()))
ChkHr(pHttpClient->DeleteAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->get_DefaultRequestHeaders(&headers))
ChkHr(pHttpClient->GetAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->PostAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->PutAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->SendRequestAsync(message.Get(), &requestOperation))
ChkHr(pickle->SetBlanket( punk, 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 4, nullptr, EOAC_DEFAULT))
ChkHr(pInAppInfo->spKeywords->get_Size(&cInAppOfferListKeywords))
ChkHr(pInAppInfo->spKeywords->GetAt(i, inAppKeyword.GetAddressOf()))
ChkHr(pInAppOffer->spKeywords->get_Size(&cKeywords))
ChkHr(pInAppOffer->spKeywords->GetAt(i, keyword.GetAddressOf()))
ChkHr(pInAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(pinToHelper->PinToShell(WindowsGetStringRawBuffer(appPackageFamilyName, nullptr), 0x02000000u))
ChkHr(pKeywords->get_Size(&cKeywords))
ChkHr(pkIter->get_Current(requestedProductKind.GetAddressOf()))
ChkHr(pkIter->get_HasCurrent(&hasCurrent))
ChkHr(pkIter->MoveNext(&hasCurrent))
ChkHr(pLicenseInstance->GetIsActive(&isActive))
ChkHr(pMessageDialog->get_Commands(&spCommands))
ChkHr(pMessageDialogHelper->ShowDialogWithResultsAsync( message, nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spJsonValue.Get()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spValue.Get()))
ChkHr(pProductIdCache->AddItem( _inAppOfferToken.Get(), hstrProductId.Get()))
ChkHr(pProductIdCache->AddItem(inAppOfferTokenString.Get(), productIdString.Get()))
ChkHr(pProductIdCache->ProductIdFromInAppOfferToken( _inAppOfferToken.Get(), _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), productId.GetAddressOf()))
ChkHr(product->get_ProductKind(actualProductKind.GetAddressOf()))
ChkHr(product->get_StoreId(productId.GetAddressOf()))
ChkHr(product->get_StoreId(storeId.GetAddressOf()))
ChkHr(productAddOns->GetObjectAt(i, &productAddOn))
ChkHr(ProductIdFromInAppOfferTokenTable(inAppOfferToken, productId))
ChkHr(ProductIdHashMap::Make(&hashMap))
ChkHr(productIds.As(&productIdsIter))
ChkHr(productIds->Append(productId))
ChkHr(productIds->Append(productId.Get()))
ChkHr(productIdsInAppInstallQueue->Append(appInstallItemProductId.Get()))
ChkHr(productIdsInAppInstallQueue->get_Size(&size))
ChkHr(productJsonString.CopyTo(productJsonResponse))
ChkHr(productKindHashMap->HasKey(actualProductKind.Get(), &found))
ChkHr(productKindHashMap->Insert(requestedProductKind.Get(), true, &replaced))
ChkHr(productKinds->Append(ConsumableKind.Get()))
ChkHr(productKinds->Append(UnmanagedConsumableKind.Get()))
ChkHr(productKinds->First(&pkIter))
ChkHr(productKinds->First(&spIter))
ChkHr(ProductLicenseHashMap::Make(&m_spHashMap))
ChkHr(productPrivate->SetStoreContext(this))
ChkHr(products.As(&productsIVector))
ChkHr(products->get_Size(&count))
ChkHr(products->get_Size(&productCount))
ChkHr(products->get_Size(&productsLength))
ChkHr(products->GetAt(0, spStoreProduct.GetAddressOf()))
ChkHr(products->GetAt(i, product.GetAddressOf()))
ChkHr(products->GetObjectAt(0, &firstProduct))
ChkHr(products->GetObjectAt(static_cast<UINT32>(index), &product))
ChkHr(productsArray->GetObjectAt(productIndex, &product))
ChkHr(propertySet.As(&propertySetIterable))
ChkHr(propertySet.As(&propertySetMap))
ChkHr(propertySetIterable->First(&propertySetIterator))
ChkHr(propertySetIterator->get_Current(&currentPair))
ChkHr(propertySetIterator->get_HasCurrent(&hasCurrent))
ChkHr(propertySetIterator->MoveNext(&hasCurrent))
ChkHr(propertySetMap->Insert(keyName.Get(), propValue.Get(), &replaced))
ChkHr(propertyValueFactory->CreateBoolean(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateDouble(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateEmpty(propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateString(value.Get(), propValue.GetAddressOf()))
ChkHr(propValue->get_Type(&type))
ChkHr(propValue->GetBoolean(&boolValue))
ChkHr(propValue->GetDouble(&doubleValue))
ChkHr(propValue->GetInt16(&int16Value))
ChkHr(propValue->GetInt32(&int32Value))
ChkHr(propValue->GetInt64(&int64Value))
ChkHr(propValue->GetSingle(&floatValue))
ChkHr(propValue->GetString(stringValue.GetAddressOf()))
ChkHr(propValue->GetUInt16(&uint16Value))
ChkHr(propValue->GetUInt32(&uint32Value))
ChkHr(propValue->GetUInt64(&uint64Value))
ChkHr(propValue->GetUInt8(&byteValue))
ChkHr(pStorePackageUpdates->First(&updateIterator))
ChkHr(pStrings->First(spIter.GetAddressOf()))
ChkHr(pThis->_pOptionalPfnToCallbackMap->Lookup(HStringReference(pData->OptionalPackageFullName).Get(), callback.GetAddressOf()))
ChkHr(pUnfulfilledConsumable->get_ProductId(m_hstrProductId.GetAddressOf()))
ChkHr(pUnfulfilledList->Append(consumable.Get()))
ChkHr(pUnfulfilledList->get_Size(&size))
ChkHr(pUnfulfilledList->GetAt(lProduct, spUnfulfilledConsumable.GetAddressOf()))
ChkHr(pValue.As(&spJsonValue))
ChkHr(pVector.As(&pIVector))
ChkHr(pVector->Append(hstrCurrent.Get()))
ChkHr(quantityParts->get_Size(&partsSize))
ChkHr(quantityParts->GetAt(1, newQuantity.GetAddressOf()))
ChkHr(queuedItemResults->Append(storeQueueItem.Get()))
ChkHr(queuedItemResults->GetView(queuedItems))
ChkHr(queueItems->Append(queueItem.Get()))
ChkHr(queueItems->Append(storeQueueItem.Get()))
ChkHr(queueItems->GetView(&_spQueueItems))
ChkHr(queueItems->GetView(queuedItems))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_OneProduct, _inAppOfferToken.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _receipt.GetAddressOf()))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_OneProduct, _productId.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _productReceipt.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice( locale, market, &pInAppSkuInformation->PricingInfo, false , _hstrFormattedListPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(RefreshInternalState(false, pCV))
ChkHr(RefreshInternalState(true, pCV))
ChkHr(RefreshTableFromService(parentProductId, pCV))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"AppDownloadLimit", actualAppDownloadLimit))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMDiscoveryTTL", systemConfigurationExpiration.UniversalTime))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"UpdateDownloadLimit", actualUpdateDownloadLimit))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_CURRENTIDENTITY_REGISTRY_PATH, L"StoreAADAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_REGISTRY_PATH, L"PrimaryWebAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"Hardware", WindowsGetStringRawBuffer(catalogHardwareDescriptor, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"MOID", WindowsGetStringRawBuffer(mobileOperatorId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMID", WindowsGetStringRawBuffer(catalogHardwareManufacturerId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"SCMID", WindowsGetStringRawBuffer(catalogStoreContentModifierId, nullptr)))
ChkHr(relatedProducts->GetObjectAt(relatedIndex, &relatedProduct))
ChkHr(request->get_ClientId(clientId.GetAddressOf()))
ChkHr(request->get_Scope(scope.GetAddressOf()))
ChkHr(requestFactory->Create(method.Get(), uri.Get(), &message))
ChkHr(response->get_Items(&items))
ChkHr(response->get_Message(&responseMessage))
ChkHr(response->get_Status(&responseStatus))
ChkHr(responseContent->ReadAsStringAsync(&readOperation))
ChkHr(responseContent->TryComputeLength(&responseSizeBytes, &tryComputeLengthSucceeded))
ChkHr(responseMessage->EnsureSuccessStatusCode(&responseSuccess))
ChkHr(responseMessage->get_Content(&responseContent))
ChkHr(responseMessage->get_StatusCode(&httpStatusCode))
ChkHr(result.CopyTo(results))
ChkHr(result.Set(licenseSatisfactionResult.Get()))
ChkHr(ResultFromLastError())
ChkHr(results.Set(resultsView.Get()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::InternalStoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_MODAL_FLOW_SIZES", UriHelperV7::s_rghstrUris[UriHelperV7::ModalFlowSizes].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS", onestoreClientData.GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::StoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RoFileTimeToDateTime(fileTime, pDateTime))
ChkHr(RoFileTimeToDateTime(ftMaxDateTime, pDateTime))
ChkHr(RpcHelpers::GetRpcHandle(&rpcHandle))
ChkHr(scmId.Set(szEncodedScmId))
ChkHr(searchTitles->GetObjectAt(iTitle, &title))
ChkHr(SendStoreRequest( nullptr, _hasPreviewCapability ? 14 : 13, cv.GetHStringReference().Get(), requestJson.Get(), &status, responseJson.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerCollectionsId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerPurchaseId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetParentProduct, cv.Get(), nullptr, nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetProductsFromParent, cv.Get(), jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv.Get(), jsonCollectionsParameters.Get(), nullptr, jsonResult))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, uriId, cv, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( pCallerData, UriHelperV7::StoreEndpointExtensionUrls, requestKind, cv.Get(), jsonData.Get(), statusCode, jsonResponse))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetMaxDateTime(&maxDateTime))
ChkHr(SetMaxDateTime(pDateTime))
ChkHr(SetMobileOperatorConfigurationInternal(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes))
ChkHr(SetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetSystemConfigurationInternal(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(nullptr , value))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(user, value))
ChkHr(signInMgr->GetHandleForUser(_user.Get(), &userContextToken))
ChkHr(signInMgr->GetHandleForUser(user, &userContextToken))
ChkHr(sku.As(&skuPrivate))
ChkHr(sku->get_IsInUserCollection(&isInCollection))
ChkHr(sku->get_Price(ppValue))
ChkHr(skuAvailabilities->GetObjectAt(skuAvailabilityIndex, &skuAvailability))
ChkHr(skuLocalizedProperties->GetObjectAt(0, &skuFirstLocalizedProperties))
ChkHr(skuPrivate->get_FulfillmentType(fulfillmentType.GetAddressOf()))
ChkHr(skuPrivate->set_ProductId(_storeId.Get()))
ChkHr(sortedAvailabilities->Append(bestAvailability.Get()))
ChkHr(sortedSkus->Append(bestSku.Get()))
ChkHr(spActions->GetStringAt(k, action.GetAddressOf()))
ChkHr(spAlternateIds->GetObjectAt(i, &spAlternateId))
ChkHr(spAnalyticsInfo->get_VersionInfo(&spVersionInfo))
ChkHr(spAppAddOn->GetCatalogId(&licenseAddOnCatalogId))
ChkHr(spAppAddOn->GetExpireTime(&ftAddOnExpirationTime))
ChkHr(spAppAddOn->GetProductId(&pszProductId))
ChkHr(spAppAddOn->GetSKUId(&licenseAddOnSkuId))
ChkHr(spAppContentInfo->GetCatalogId(&bigCatId))
ChkHr(spAppContentInfo->GetCatalogId(&productStoreId))
ChkHr(spAppContentInfo->GetWindowsStoreAppId(&m_appId))
ChkHr(spAppEnum->get_Next(&spAppInfo))
ChkHr(spAppInfo->get_ProductID(appId))
ChkHr(spApplicationContentInfo->GetAddOnAtPosition(lProduct, spAppAddOn.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetAddOnCount(&nCount))
ChkHr(spApplicationContentInfo->GetCustomPolicy(&customPolicyLengthInBytes, reinterpret_cast<BYTE**>(&customPolicyEncoded)))
ChkHr(spApplicationContentInfo->GetEntitlementId(&entitlementId))
ChkHr(spApplicationContentInfo->GetTrialTimeRemaining(&ftTrialTimeRemaining))
ChkHr(spApplicationContentInfo->GetUserId(&lmUserId))
ChkHr(spAppmodelPackage->get_Dependencies(supplementalPackages.GetAddressOf()))
ChkHr(spAppmodelPackage->get_Id(&packageId))
ChkHr(spArray.As(&spJsonVector))
ChkHr(spAvailabilities->GetObjectAt(j, &spAvailability))
ChkHr(spBufferAsBytes->Buffer(reinterpret_cast<BYTE**>(&pDecodedBuffer)))
ChkHr(spCallerDataPrivate->GetAppWindowHandle(&appWindowHandle))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x0400), &spCallingProcessHandle))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x1000), &callingProcessHandle))
ChkHr(spCommand->put_Id(spPropertyValue.Get()))
ChkHr(spCommand->put_Invoked(pHandler))
ChkHr(spCommand->put_Label(HStringReference((const WCHAR*)pszContent).Get()))
ChkHr(spCommands->Append(spCommand.Get()))
ChkHr(spContentIdsIter->get_Current(contentId.GetAddressOf()))
ChkHr(spContentIdsIter->get_HasCurrent(&cHasCurrent))
ChkHr(spContentIdsIter->MoveNext(&cHasCurrent))
ChkHr(spCoreAppPrivate->GetAppDisplayName(appName.GetAddressOf()))
ChkHr(spCoreAppPrivate->GetWindowFromThreadId(callerThreadId, &spCoreWindow))
ChkHr(spCoreWindow.As(&spCoreWinInterop))
ChkHr(spCoreWindowStatic->GetForCurrentThread(&spCoreWindow))
ChkHr(spCoreWinInterop->get_WindowHandle(&hwnd))
ChkHr(spCoreWinInterop->get_WindowHandle(phWndCurrent))
ChkHr(spDisplayData->Initialize(hstrName))
ChkHr(spDisplayData->Initialize(nullptr))
ChkHr(spDisplaySkuAvailabilities->GetObjectAt(i, &spDisplaySkuAvailability))
ChkHr(spGlobalizationPreferences->get_Languages(ppLanguages))
ChkHr(spHardwareCapability->EvaluateHardwareCapabilities( GUID_WinStoreServiceID, arraySize, rawGuidArray, &wuResults, &hrOnlineCheck))
ChkHr(spHashBuffer.As(&spBufferAsBytes))
ChkHr(spHashBuffer->get_Length(&decodedBufferLength))
ChkHr(spHashView->Split(firstPartition, secondPartition))
ChkHr(spIds->Append(productId.Get()))
ChkHr(spIter->get_Current(hstrCurrent.GetAddressOf()))
ChkHr(spIter->get_Current(productKind.GetAddressOf()))
ChkHr(spIter->get_Current(storeId.GetAddressOf()))
ChkHr(spIter->get_Current(value.GetAddressOf()))
ChkHr(spIter->get_HasCurrent(&fHasCurrent))
ChkHr(spIter->get_HasCurrent(&hasCurrent))
ChkHr(spIter->MoveNext(&fHasCurrent))
ChkHr(spIter->MoveNext(&hasCurrent))
ChkHr(spIterator->get_Current(&feature))
ChkHr(spIterator->get_HasCurrent(&hasCurrent))
ChkHr(spIterator->MoveNext(&hasCurrent))
ChkHr(spJsonArray.As(&spJsonVector))
ChkHr(spJsonArrayStatics->Parse(HStringReference(pszJson).Get(), &spJsonArray))
ChkHr(spJsonObject.As(&spJsonValue))
ChkHr(spJsonObject->GetNamedArray(HStringReference(L"DisplaySkuAvailabilities").Get(), &jsonSKUAvailabilities))
ChkHr(spJsonObjectStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonValue->Stringify(hJsonString))
ChkHr(spJsonValueStatics->CreateBooleanValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateNullValue(&spValue))
ChkHr(spJsonValueStatics->CreateNumberValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference((const WCHAR*)strTime).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference(pszValue).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(hValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(timeSpanString.Get(), &spValue))
ChkHr(spJsonVector->Append(spJsonValue.Get()))
ChkHr(spJsonVector->Append(spValue.Get()))
ChkHr(spJsonVector->RemoveAt(index))
ChkHr(spKeyIdsIter->get_Current(keyId.GetAddressOf()))
ChkHr(spKeyIdsIter->get_HasCurrent(&eHasCurrent))
ChkHr(spKeyIdsIter->MoveNext(&eHasCurrent))
ChkHr(spLanguages->get_Size(&size))
ChkHr(spLanguages->GetAt(0, pLanguage))
ChkHr(spLanguages->GetAt(i, language.GetAddressOf()))
ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))
ChkHr(spLicenseInformationServerSingleton->Initialize(lpszPackageFullName, eAppType, pCV))
ChkHr(spLicenseInfoServer.As(&licenseInfo))
ChkHr(spLicenseInstance->GetContentInfo(__uuidof(**(&spAppContentInfo)), IID_PPV_ARGS_Helper(&spAppContentInfo)))
ChkHr(spLicenseInstance->GetExpirationDateTime(&ftExpirationTime))
ChkHr(spLicenseInstance->GetIsActive(&m_bActive))
ChkHr(spLicenseInstance->GetIsTrial(&isTrial))
ChkHr(spLicenseInstance->GetIsTrial(&m_bIsTrial))
ChkHr(spLicenseInstance->GetLicenseGrantReason(&grantReason))
ChkHr(spLicenseManager->EnsureLicenseForApplicationDeployment(contentId.GetRawBuffer(nullptr), keyId.GetRawBuffer(nullptr), nullptr))
ChkHr(spListingInformation->Initialize(spStoreAppInfo))
ChkHr(spManufacturerInfo->put_HardwareManufacturerId(buffer.Get()))
ChkHr(spManufacturerInfo->put_ManufacturerName(buffer.Get()))
ChkHr(spManufacturerInfo->put_ModelName(buffer.Get()))
ChkHr(spManufacturerInfo->put_StoreContentModifierId(buffer.Get()))
ChkHr(spMessageDialog.As(&initWithWindow))
ChkHr(spMessageDialog->ShowAsync(&spAsyncOperation))
ChkHr(spMessageDialog->ShowAsync(ppMessageDialogOperation))
ChkHr(spNewProductLicense->InitializeInvalid(hstrKey))
ChkHr(spNumberFormatter->FormatDouble(price, formattedPrice))
ChkHr(spOperation->BeginWork(1))
ChkHr(spPackageManager->FindPackageByPackageFullName(fullName.Get(), ppPackage))
ChkHr(spPackageManager->FindPackageByUserSecurityIdPackageFullName(sidString.Get(), fullName.Get(), ppPackage))
ChkHr(spPackageResolver->GetDisplayNameLocalized(appName.GetAddressOf()))
ChkHr(spPackageResolverStatics->Create(spPackage.Get(), &spPackageResolver))
ChkHr(spPackages->get_Size(&packageCount))
ChkHr(spPackages->GetAt(0, &spPackage))
ChkHr(spPackageStatics->ExistsByPackageFamilyName( packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->ExistsByUserAndPackageFamilyName( spUser.Get(), packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->FindByPackageFamilyNameAndPackageType( HStringReference(pkgFamilyName).Get(), PackageType_Main | PackageType_Xap, &spPackages))
ChkHr(spPackageStatics->GetByPackageFullName(packageFullName.Get(), package.GetAddressOf()))
ChkHr(spPagedOperation->GetResults( &hresult, &hasMoreResults, products, spNextQueryOperation))
ChkHr(spProductInfo->Initialize( spStoreAppInfo->Locale, spStoreAppInfo->Market, spStoreAppInfo, pInAppOffer))
ChkHr(spProductInfosList->Append(spProductInfo.Get()))
ChkHr(spProductInfosList->GetView(&spProductInfos))
ChkHr(spProductLicense->Initialize(spAppAddOn.Get()))
ChkHr(spProductLicense->Initialize(spUnfulfilledConsumable.Get()))
ChkHr(spProductLicenseMap->Initialize(spLicenseInstance.Get(), spUnfulfilledList.Get()))
ChkHr(spProductListing->Initialize(_hstrLocale.Get(), _hstrCurrentMarket.Get(), pAppInfo->IsUAP, pInAppOffer))
ChkHr(spPropertyValue->GetInt32(&commandId))
ChkHr(spPropValueFactory->CreateInt32(id, &spPropertyValue))
ChkHr(spPurchaseResults->Initialize( productPurchaseStatus, transactionId, pszReceipt, _hstrDevOfferId.Get()))
ChkHr(spPurchaseResults->Initialize(productPurchaseStatus, transactionId, pszReceipt, nullptr))
ChkHr(spPurchaseResults->Initialize(static_cast<StorePreviewProductPurchaseStatus>(productPurchaseStatus)))
ChkHr(spReceiptContent.As(&spXmlNodeSerializer))
ChkHr(spReceiptNode->get_ChildNodes(&spReceiptNodeChildren))
ChkHr(spReceiptNodeChildren->get_Length(&uReceiptNodeChildrenLength))
ChkHr(spReceiptNodeChildren->Item(0, &spReceiptContent))
ChkHr(spReceiptNodes->get_Length(&uReceiptNodesLength))
ChkHr(spReceiptNodes->Item(0, &spReceiptNode))
ChkHr(spRequestAppPurchaseInfo.As(&spAsyncInfo))
ChkHr(spRequestProductPurchaseWithDisplayPropertiesInfo->RuntimeClassInitialize( _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, devOfferId, pDisplayProperties, pMessageDialogHelper ))
ChkHr(spResults->GetNamedArray(HStringReference(L"Products").Get(), &storeProductArray))
ChkHr(spSkuInfo->Initialize( locale, market, pAppInformation, pInAppInformation, pInAppSku))
ChkHr(spSkuInfoList->Append(spSkuInfo.Get()))
ChkHr(spSkuInfoList->GetView(&_spSkuInfoList))
ChkHr(spSLSClient2->GetSLSDataChunk(GUID_StoreFrontServiceID, 0, L"//ServiceEnvironment/StoreSDK", &pszJson, &lastModified))
ChkHr(spStoreCommerce->GetAppId(&m_appID))
ChkHr(spStoreCommerce->GetAppPurchaseCampaignIdAsync(cv.GetHStringReference().Get(), ppOperation))
ChkHr(spStoreCommerce->GetAppReceiptAsync(cv.GetHStringReference().Get(), getAppReceiptOperation))
ChkHr(spStoreCommerce->GetCustomerCollectionsIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetCollectionsIdOperation))
ChkHr(spStoreCommerce->GetCustomerPurchaseIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetPurchaseIdOperation))
ChkHr(spStoreCommerce->GetLicenseInformation(ppAppLicense))
ChkHr(spStoreCommerce->GetLinkUri(hstrLinkUri.GetAddressOf()))
ChkHr(spStoreCommerce->GetProductReceiptAsync(productId, cv.GetHStringReference().Get(), getProductReceiptOperation))
ChkHr(spStoreCommerce->Initialize(cv.GetHStringReference().Get()))
ChkHr(spStoreCommerce->LoadAddOnProductInfosAsync(cv.GetHStringReference().Get(), ppLoadAddOnProductInfosOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( nullptr, keywords, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( productIds, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync(nullptr, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->RequestAppPurchaseAsync( includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestAppPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseAsync(productId, includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseByProductIdAndSkuIdAsync( productId, skuId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestPurchaseBySkuIdOperation))
ChkHr(spStoreCommerceWithConsumables->GetUnfulfilledConsumablesAsync( cv.GetHStringReference().Get(), ppGetUnfulfilledConsumablesOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentAsync( productId, transactionId, cv.GetHStringReference().Get(), ppReportConsumableFulfillmentOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentSync(productId, cv.GetHStringReference().Get()))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithDisplayPropertiesAsync( productId, devOfferId, displayProperties, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithResultsAsync( productId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseWithResultsOperation))
ChkHr(spStoreContext.As(&spStoreContextPrivate))
ChkHr(spStoreContextPrivate->SendStoreRequestAsync( requestKind, parametersAsJson, ppOperation))
ChkHr(spStoreContextServer.As(&spStoreContextServer3))
ChkHr(spStoreContextServer->GetAssociatedStoreQueueItems( cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer->GetProduct( cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(spStoreContextServer->GetStoreQueueItems( storeIds.Get(), cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer3->SetInstallOrderForAssociatedStoreQueueItems( cv.GetHStringReference().Get(), _newOrder.Get()))
ChkHr(spStoreProduct.As(&storeProductPrivate))
ChkHr(spStoreProduct->get_HasDigitalDownload(&hasDigitalDownload))
ChkHr(spStoreProduct->get_IsInUserCollection(&isInUserCollection))
ChkHr(spStoreProduct->get_ProductKind(productKind.GetAddressOf()))
ChkHr(spStreamReferenceStatics->CreateFromStream(randAccStream.Get(), result.GetAddressOf()))
ChkHr(spTargetDeviceFamily->get_Name(&targetPlatform))
ChkHr(spTargetDeviceFamilyStatics->Get(foreignKey, &spTargetDeviceFamily))
ChkHr(spThis->_appInstallItem.As(&appInstallItem2))
ChkHr(spThis->GetSatisfactionInfos(contentIdsVectorView.Get(), keyIdsVectorView.Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->get_ProductId(strProductId.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->Initialize(pszProductId, transactionId, pszDevOfferId))
ChkHr(spUserStatics->GetByUserSid(userSid.Get(), &spUser))
ChkHr(spValue.As(&spJsonValue))
ChkHr(spVectorView.As(&spIterable))
ChkHr(spVersionInfo->get_DeviceFamily(deviceFamily.GetAddressOf()))
ChkHr(spWebTokenRequestResults->get_Size(&resultsCount))
ChkHr(spWebTokenRequestResults->GetAt(0, it.GetAddressOf()))
ChkHr(spXmlDocumentIO->LoadXml(hResponse.Get()))
ChkHr(spXmlNodeSerializer->GetXml(hstrReceiptContent.GetAddressOf()))
ChkHr(spXMLResponse.As(&spXmlDocumentIO))
ChkHr(spXMLResponse->GetElementsByTagName(HStringReference(L"Receipt").Get(), &spReceiptNodes))
ChkHr(StartOperation(1))
ChkHr(StartOperation(asyncId))
ChkHr(StartOperation(iAsyncId))
ChkHr(status.As(&statusInternal))
ChkHr(status.CopyTo(result))
ChkHr(status->get_Value(&updateStatus))
ChkHr(statusInternal->get_IsDownloaded(value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(user, value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(nullptr , *value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(user, *value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(user, value))
ChkHr(storeContextServer->AcquireStoreLicenseForOptionalPackage( optionalPfn.Get(), spStorePackageLicenseLostCallback.Get(), &_valid))
ChkHr(storeContextServer->CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), value))
ChkHr(storeContextServer->DownloadStorePackages( storeIds.Get(), _storePackageInstallOptions.Get(), cv.GetHStringReference().Get(), _shouldPromptForConsent, _totallySilent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->DownloadStorePackageUpdates( updates.Get(), cv.GetHStringReference().Get(), _install, _shouldPromptForConsent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->FocusOnWindow((UINT64)hwnd))
ChkHr(storeContextServer->GetAppAndOptionalStorePackageUpdates(cv.GetHStringReference().Get(), &queuedItems))
ChkHr(storeContextServer->GetAssociatedStoreProducts( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJsonString.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->GetConsumableBalanceRemaining( _productId.Get(), cv.GetHStringReference().Get(), jsonString.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerCollectionsId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _collectionsId.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerPurchaseId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _purchaseId.GetAddressOf()))
ChkHr(storeContextServer->GetLinkUri(storeId.Get(), uriString.GetAddressOf()))
ChkHr(storeContextServer->GetOfflineLicenses( cv.GetHStringReference().Get(), results.GetAddressOf()))
ChkHr(storeContextServer->GetPreviewLicenseResultForPackage( _packageIdentifier.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeContextServer->GetProductForPackage( productKinds.Get(), packageFullName.Get(), cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(storeContextServer->GetProductsWithOptions( productKinds.Get(), storeIds.Get(), _storeProductOptions.Get(), cv.GetHStringReference().Get(), productJsonString.GetAddressOf()))
ChkHr(storeContextServer->GetUserCollection( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJson.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->Initialize(false, nullptr))
ChkHr(storeContextServer->Initialize(pUser != nullptr, _spLicenseChangedCallback.Get()))
ChkHr(storeContextServer->IsStoreProductInstalled( _productStoreId.Get(), cv.GetHStringReference().Get(), &_isInstalled))
ChkHr(storeContextServer->RequestPurchase( _storeContextCallerData.Get(), _storeId.Get(), _storePurchaseProperties.Get(), _jsonData.Get(), cv.GetHStringReference().Get(), _response.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), _requestKind, cv.GetHStringReference().Get(), _jsonData.Get(), &_statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), 16, cv.GetHStringReference().Get(), nullptr, &statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SetUser(pUser))
ChkHr(storeContextServer->UninstallStorePackage( _storeId.Get(), _packageFamilyNameToUninstall.Get(), cv.GetHStringReference().Get(), _shouldPrompt, _dialogHelper.Get(), &_resultStatus ))
ChkHr(storeContextServer2->GetPreviewLicenseResultForStoreId( _productStoreId.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeId.Set(L""))
ChkHr(storeIdComponents->get_Size(&size))
ChkHr(storeIdComponents->GetAt(0, pProductId))
ChkHr(storeIds->Append(HStringReference(storeIdFromLicense).Get()))
ChkHr(storeIds->Append(storeId.Get()))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( _spStoreCommerceServer.Get(), cv.Get(), 0, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( pStoreCommerceServer, pCV, hCancel, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( this, pCV, nullptr, &spStoreAppInfo))
ChkHr(StorePackageUpdateManagerUtils::StorePackageUpdateStatusLifetimeTraits::Construct(value, _status))
ChkHr(storePackageUpdateStatuses->Append(updateStatus))
ChkHr(storePackageUpdateStatuses->GetView(&_updateStatuses))
ChkHr(StorePackageUpdateStatusHashMap::Make(&_updateStatusMap))
ChkHr(StorePackageUpdateStatusVector::Make(&storePackageUpdateStatuses))
ChkHr(storeProductArray->GetObjectAt(0, storeProductJson.GetAddressOf()))
ChkHr(storeProductId.Set(storeId))
ChkHr(storeProductOptions->get_ActionFilters(&actionFilters))
ChkHr(StoreProductPagedQueryResult::BuildMap( products, productKinds, &_mapView))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(storePurchaseProperties->get_ExtendedJsonData(tmp.GetAddressOf()))
ChkHr(storePurchaseProperties->get_Name(tmp.GetAddressOf()))
ChkHr(storeQueueItem->get_ProductId(productId.GetAddressOf()))
ChkHr(storeQueueItem->GetCurrentStatus(&installStatus))
ChkHr(STRAPI_Create(pszBuffer, &dhStr))
ChkHr(strAuthTokenPrefixed.CopyTo(authToken.ReleaseAndGetAddressOf()))
ChkHr(stringBuffer.Preallocate(decodedBufferLength + 1, &pszDecodedString))
ChkHr(stringBuffer.Preallocate(urlLength, &pszFinalUri))
ChkHr(stringBuffer.Promote(result.GetAddressOf()))
ChkHr(StringCaseInsensitiveEquals()(StorePackageUpdateLeft.PackageFamilyName, StorePackageUpdateRight.PackageFamilyName, fEquals))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, L",", &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, pszLanguage, &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/consume"))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/query"))
ChkHr(StringCchCopyA(szDestFileNameA, (sizeof(*RtlpNumberOf(szDestFileNameA))), pszDest))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, escapedData.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, L"=", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, seenQuestionMark ? L"&" : L"?", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, tagName.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, L"/", &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, pszUriBase, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, WindowsGetStringRawBuffer(nameValuePairs[i].value, nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyNExW(pszRemaining, cchRemaining, pszFormatCursor, pszOpenBrace - pszFormatCursor, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyW(pszIdValue, cchIdValue, L"Public"))
ChkHr(StringCchCopyW(pszRemaining, cchRemaining, pszFormatCursor))
ChkHr(StringCchCopyW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), collectionsUriBase.GetRawBuffer(nullptr)))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%02d:%02d:%09.6f", isNegative ? L"-" : L"", hours, minutes, seconds))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%d.%02d:%02d:%09.6f", isNegative ? L"-" : L"", static_cast<int>(days), hours, minutes, seconds))
ChkHr(StringCchPrintfW( spszDestBuffer, cchDestBuffer, pszFormat, szEncodedMoId, szEncodedOemId, szEncodedScmId ))
ChkHr(StringCchPrintfW( szNextUrl, (sizeof(*RtlpNumberOf(szNextUrl))), _runningCount == 0 ? L"%ws" : L"%ws&$skip=%u", _hstrUri.GetRawBuffer(nullptr), _runningCount))
ChkHr(StringCchPrintfW(pszBuffer, cchBuffer, L"%s:%s", header, value))
ChkHr(StringCchPrintfW(szArgument, (sizeof(*RtlpNumberOf(szArgument))), L"0x%X", hr))
ChkHr(StringCchPrintfW(szSeedName, (sizeof(*RtlpNumberOf(szSeedName))), L"%s-%s-%d-%s", WindowsGetStringRawBuffer(geoId, nullptr), WindowsGetStringRawBuffer(language, nullptr), static_cast<UINT32>(eReceiptType), WindowsGetStringRawBuffer(featureName, nullptr)))
ChkHr(StringHelpers::DecodeBase64( HStringReference(customPolicyEncoded.GetPtr(), customPolicyLength).Get(), customPolicyDecoded.GetAddressOf()))
ChkHr(StringHelpers::Join( _productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds, false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds, false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds.Get(), false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join(_newOrder.Get(), false, productIdList.GetAddressOf()))
ChkHr(StringHelpers::Join(productIds, false, productIdsString.GetAddressOf()))
ChkHr(StringHelpers::SplitString(data.Get(), L":", quantityParts.GetAddressOf()))
ChkHr(StringHelpers::SplitString(rawInputTag.Get(), L":", &tagComponents))
ChkHr(StringHelpers::SplitString(storeId, g_pszStoreIdSeparator, &storeIdComponents))
ChkHr(StringHelpers::TrimEnds(inputTag, 1, rawInputTag.GetAddressOf()))
ChkHr(StringHelpers::TrimString(output.Get(), uriOutput))
ChkHr(StringHelpers::TrimString(result.Get(), hstrUri))
ChkHr(StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, 0))
ChkHr(strPrefixAuthToken.CopyTo(ticket.ReleaseAndGetAddressOf()))
ChkHr(strProductId.Set(pszProductId))
ChkHr(substituteValue->get_ValueType(&valueType))
ChkHr(substituteValue->GetArray(&substituteArray))
ChkHr(substituteValue->GetNumber(&substituteNumber))
ChkHr(substituteValue->GetObjectW(&substituteObject))
ChkHr(substituteValue->GetString(substituteString.GetAddressOf()))
ChkHr(supplement.As(&supplement4))
ChkHr(supplement->get_Id(packageId.ReleaseAndGetAddressOf()))
ChkHr(supplement4->get_IsOptional(&isOptional))
ChkHr(supplementalPackages->get_Size(&supplementalPackagesSize))
ChkHr(supplementalPackages->GetAt(i, supplement.GetAddressOf()))
ChkHr(supportedFeaturesVector->GetView(&resultsView))
ChkHr(systemFeatures->First(&spIterator))
ChkHr(tag.Set(pszOpenBrace, static_cast<UINT32>(pszCloseBrace - pszOpenBrace) + 1))
ChkHr(tagComponents->get_Size(&tagComponentsSize))
ChkHr(tagComponents->GetAt(0, outputKey))
ChkHr(tagComponents->GetAt(1, outputName))
ChkHr(tagComponents->GetAt(2, outputMeta))
ChkHr(temp.Set(InternalGetRuntimeClassName()))
ChkHr(temp.Set(pszUri))
ChkHr(temp.Set(shReceipt))
ChkHr(temp.Set(spszFormattedPrice))
ChkHr(temp.Set(wszAppId))
ChkHr(threadContext._devOfferId.Set(devOfferId))
ChkHr(threadContext._inAppOfferToken.Set(inAppOfferToken))
ChkHr(threadContext._inAppProductId.Set(productId))
ChkHr(threadContext._inAppProductSkuId.Set(skuId))
ChkHr(threadContext._nameOverride.Set(nameOverride))
ChkHr(threadContext._PFN.Set(PFN))
ChkHr(threadContext.DoWork())
ChkHr(TrimString(result.Get(), resultString))
ChkHr(ULongLongToUInt(::wcslen(customPolicyEncoded), &customPolicyLength))
ChkHr(ULongLongToUInt(::wcslen(lmUserId), &lmUserIdLength))
ChkHr(ULongMult(static_cast<DWORD>(wcslen(value)) + 1, sizeof(*value), &dwSize))
ChkHr(UMgrQueryUserToken(userContextToken, &userToken))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), true , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, true , operation))
ChkHr(UnpackHStringIIterable(inAppOfferTokens, &_inAppOfferTokens))
ChkHr(UnpackHStringIIterable(keywords, &_keywords))
ChkHr(update.As(&updatePrivate))
ChkHr(updateIterator->get_Current(&update))
ChkHr(updateIterator->get_HasCurrent(&hasCurrent))
ChkHr(updateIterator->MoveNext(&hasCurrent))
ChkHr(updatePrivate->get_StoreQueueItem(&storeQueueItem))
ChkHr(updates->Append(storePackageUpdate.Get()))
ChkHr(updates->First(&updateIterator))
ChkHr(updates->GetView(queuedItems))
ChkHr(uriEscapeStatics->EscapeComponent(substituteString.Get(), escapedData.GetAddressOf()))
ChkHr(uriFactory->CreateUri(hstrURL, &uri))
ChkHr(UriHelper::GetUri(UriHelper::LinkUriFormat, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), pLinkUri))
ChkHr(UriHelper::GetUri(UriHelper::MDCollections, collectionsUriBase.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsDesktop, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetOneProductReceiptMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::OneStoreAuthenticationDomain, hstrAuthDomain.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDCollections, HStringReference(L"v6.0/beneficiaries/me/keys").Get(), collectionKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDPurchase, HStringReference(L"v6.0/users/me/keys").Get(), purchaseKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetProductDetailsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchAddOnsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), _hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchProductsByPackageFamilyNamePath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchSkusByContentIdPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nameValuePairs, cNameValuePairs, false, hstrUri))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nullptr, 0, false, hstrUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszInitialUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszUriBase))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUris, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUrisSLS, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx( s_rghstrUris, uriBase, hstrPath, nameValuePairs, cNameValuePairs, hstrUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx(s_rghstrUris, uriBase, hstrPath, nullptr, 0, hstrUri))
ChkHr(UriHelperV7::GetIndexedEntry(slsUri, requestKind, entry.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::DeviceFamily, deviceFamily.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::ModalFlowSizes, modalFlowSizes.GetAddressOf()))
ChkHr(UrlEscapeW(idValueUnescaped.GetRawBuffer(nullptr), pszIdValue, &cchIdValue, 0))
ChkHr(userAuth->GetNamedArray(userSid.Get(), &jsonBeneficiaries))
ChkHr(UserAwareCallerIdentity::GetCallingProcessPackageFullName(packageFullName))
ChkHr(UserAwareCallerIdentity::GetCallingProcessUserContext(&userContextToken))
ChkHr(userLocale.Set(locale))
ChkHr(userLocale.Set(szUserLocale))
ChkHr(userMgr.As(&signInMgr))
ChkHr(UuidCreate(&anid))
ChkHr(UuidFromStringW((PWCHAR)_transactionId.GetRawBuffer(nullptr), _pTransactionId))
ChkHr(value.As(&propValue))
ChkHr(value->get_Value(&dwValue))
ChkHr(Vector<HSTRING>::Make(&_bigIds))
ChkHr(Vector<HSTRING>::Make(&_bundledSkuIds))
ChkHr(Vector<HSTRING>::Make(&_keywords))
ChkHr(Vector<HSTRING>::Make(&bigIds))
ChkHr(Vector<HSTRING>::Make(&contentIds))
ChkHr(Vector<HSTRING>::Make(&ids))
ChkHr(Vector<HSTRING>::Make(&keyIds))
ChkHr(Vector<HSTRING>::Make(&licensedProducts))
ChkHr(Vector<HSTRING>::Make(&productIds))
ChkHr(Vector<HSTRING>::Make(&productKinds))
ChkHr(Vector<HSTRING>::Make(&spIds))
ChkHr(Vector<HSTRING>::Make(&storeIds))
ChkHr(Vector<Package*>::Make(&appmodelPackages))
ChkHr(Vector<StoreAvailability*>::Make(&sortedAvailabilities))
ChkHr(Vector<StoreImage*>::Make(&_images))
ChkHr(Vector<StoreSku*>::Make(&sortedSkus))
ChkHr(Vector<StoreSystemFeature>::Make(&supportedFeaturesVector))
ChkHr(Vector<StoreVideo*>::Make(&_videos))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&m_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&spUnfulfilledList))
ChkHr(VerifyCapability(requestParams.requiredCapability.Get()))
ChkHr(VerifyCapability(StoreConfigurationCapability.Get()))
ChkHr(VerifyCapability(StoreLicenseManagement.Get()))
ChkHr(wil::com_weak_query_nothrow(this, &weakThis))
ChkHr(Windows::Foundation::ActivateInstance( HStringReference(RuntimeClass_Windows_UI_Popups_UICommand).Get(), &spCommand))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Foundation_Uri).Get(), &uriFactory))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Web_Http_HttpStringContent).Get(), &contentFactory))
ChkHr(Windows::Foundation::GetActivationFactory( Microsoft::WRL::Wrappers::HStringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager).Get(), &memStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(L"Windows.Foundation.Uri").Get(), &activationFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), &spJsonArrayStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &jsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_System_Profile_AnalyticsInfo).Get(), &spAnalyticsInfo))
ChkHr(Windows::Foundation::GetActivationFactory(UserManagerClassId.Get(), &userMgr))
ChkHr(WindowsCompareStringOrdinal(productId, _currentProductBeingPurchased.Get(), &comparisonResult))
ChkHr(WindowsConcatString( HStringReference(L"WLID1.0=").Get(), ticket, formattedAuthToken.GetAddressOf()))
ChkHr(WindowsConcatString( productId, StoreIdSeparator.Get(), productIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuId.Get(), StoreIdSeparator.Get(), productIdSkuIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuIdWithSeparator.Get(), availabilityId, storeId))
ChkHr(WindowsConcatString( productIdWithSeparator.Get(), skuId, productIdSkuId.GetAddressOf()))
ChkHr(WindowsConcatString(EntitlementFilterPrefix.Get(), productKind.Get(), entitlementFilter.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _hstrImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _ImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _VideoUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"WLID1.0=").Get(), authTicket, hstrAuthTicketWithPrefix.GetAddressOf()))
ChkHr(WindowsCreateString(pszResource, cch, jsonString))
ChkHr(WindowsCreateString(reinterpret_cast<PCWSTR>(pbReceipt), cbReceipt / 2, receipt))
ChkHr(WindowsCreateString(sidString, (UINT32)wcslen(sidString), sid))
ChkHr(WindowsCreateString(spszDestBuffer, (UINT32)wcslen(spszDestBuffer), pDeviceContext))
ChkHr(WindowsDuplicateString(_licensableSku.Get(), pValue))
ChkHr(WindowsPromoteStringBuffer(buffer, string))
ChkHr(WindowsSubstring(inputString, lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WindowsSubstringWithSpecifiedLength(hstrReceiptContent.Get(), 9, WindowsGetStringLen(hstrReceiptContent.Get()) - 12, receipt))
ChkHr(WindowsSubstringWithSpecifiedLength(inputString, lastDelimeterIndex, delimeterIndex - lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker( true, authToken.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), _user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar((WinStoreAuth::AccountProviderType)requestParams.authType, authToken.Get(), strAuthTokenPrefixed.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar(providerType, ticket.Get(), strPrefixAuthToken.GetAddressOf()))
ChkHr(WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser(_user.Get(), authType, hstrPurchaseAppPfn.Get(), userId.Get(), realId.GetAddressOf()))
ChkHr(WSCollector::CollectStoreLog(options, resultsView))
ChkReturn(((HRESULT)0x80040001L))
ChkReturn(((HRESULT)0x80040002L))
ChkReturn(((HRESULT)0x8007000EL))
ChkReturn(_productIdTable->Lookup(inAppOfferToken, productId))
ChkReturn(hr)
ChkReturn(HRESULT_FROM_WIN32(1168L))
ChkWin32(Expr)
CHttpConnection::_Initialize
CHttpConnection::Connect
CHttpConnectionCache::GetConnection
CHttpRequest response header: %s : %s
CHttpRequest::_AddDebugHeaderIfPresent
CHttpRequest::_AppendToDataBuffer
CHttpRequest::_CreateConnectionAndSendRequest
CHttpRequest::_DownloadData
CHttpRequest::_GetProxyInfoForUrl
CHttpRequest::_LocalAllocHeader
CHttpRequest::_ReceiveResponse
CHttpRequest::_SendRequestWithRetry
CHttpRequest::_SetProxyForCurrentRequest
CHttpRequest::_WaitForLastAsyncCompletion
CHttpRequest::_WinHttpCompletionCallback
CHttpRequest::~CHttpRequest
CHttpRequest::AbortRequest
CHttpRequest::AddRequestHeader
CHttpRequest::Initialize
CHttpRequest::s_WinHttpCompletionCallback
CHttpRequest::SetAuthorizationHeader
CHttpRequest::UploadAndFetchResource
CHttpRequest::UploadAndFetchResourceByUrl
CHttpSession::_Initialize
className
Cleared event hander for item %s
Client_ShowSkipForceAuthentication
ClientProcessUtils::CheckMultipleUserSupport
ClientProcessUtils::EnsureWindowFromCallingProcess
ClientProcessUtils::GetAppContentTypeForInstalledPackage
ClientProcessUtils::GetAppIdFromPacman
ClientProcessUtils::GetCallerTokenFromComCall
ClientProcessUtils::GetCallingAppName
ClientProcessUtils::GetCallingAppPackage
ClientProcessUtils::GetCallingAppPackage(_user.Get(), package.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFamilyName
ClientProcessUtils::GetCallingAppPackageFullName
ClientProcessUtils::GetCallingAppPackageFullName(_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFullName(m_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppSessionGuid
ClientProcessUtils::GetCallingAppSupportsMultipleUser
ClientProcessUtils::GetCallingAppWindowHandle
ClientProcessUtils::GetCallingAppWindowHandleFromThreadId
ClientProcessUtils::GetModalExperienceManager
ClientProcessUtils::GetSidForUser
ClientProcessUtils::GetWindowHandle
ClientProcessUtils::IsCallerERA
CloseHandle
CloseState
CloseThreadpoolTimer
cNameValuePairs >= 0
CoCreateFreeThreadedMarshaler
CoCreateInstance
CoGetApartmentType
CoGetCallContext
CoGetCallerTID
CoGetInterfaceAndReleaseStream
CoGetMalloc
CoImpersonateClient
CollectionData
CollectionsServiceProxyV6::ConsumeConsumable
CollectionsServiceProxyV6::GetCampaignId
CollectionsServiceProxyV6::GetUnfulfilledConsumables
CoMarshalInterface
combase.dll
CompanyName
CompareFileTime
CompareStringOrdinal
CompareStringW
ComposeLegacyXboxContentIdFromInstalledContentId
Conditions
ConstrainedImpersonateLoggedOnUser::GenerateImpersonationToken
Consumable
consumableProductId
consumers
ContentIds
continuationToken
Converted Store Queue State for Package %s - AppInstallState: %d and IsStaged: %s and IsDownloaded: %s to StoreQueueItemState: %d and StoreQueueItemExtendedState: %d
ConvertSidToStringSidW
CopySid
CoReleaseMarshalData
CoRevertToSelf
CoRevertToSelf()
CoSetProxyBlanket
CoSwitchCallContext
CoTaskMemAlloc
CoTaskMemFree
count
CoWaitForMultipleHandles
CreateDirectoryW
CreateEvent failed
CreateEventExW
CreateEventW
CreateFileA
CreateFileW
CreateGetItemsRequest
CreateListingInformation
CreateMutexExW
CreateRandomAccessStreamOverStream
CreateSemaphoreExW
CreateStreamOnHGlobal
CreateThreadpoolTimer
CryptAcquireContextW
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CRYPTSP.dll
CSP6Internal::CreateCatalogHttpClient
CStdStubBuffer_AddRef
CStdStubBuffer_Connect
CStdStubBuffer_CountRefs
CStdStubBuffer_DebugServerQueryInterface
CStdStubBuffer_DebugServerRelease
CStdStubBuffer_Disconnect
CStdStubBuffer_Invoke
CStdStubBuffer_IsIIDSupported
CStdStubBuffer_QueryInterface
CStdStubBuffer2_Connect
CStdStubBuffer2_CountRefs
CStdStubBuffer2_Disconnect
CStdStubBuffer2_QueryInterface
CurrencyCode
CurrencySymbol
CurrentApp.AppId
CurrentApp.GetAppPurchaseCampaignIdAsync
CurrentApp.GetAppReceiptAsync
CurrentApp.GetCustomerCollectionsIdAsync
CurrentApp.GetCustomerPurchaseIdAsync
CurrentApp.GetProductReceiptAsync
CurrentApp.GetUnfulfilledConsumablesAsync
CurrentApp.LicenseInformation
CurrentApp.LinkUri
CurrentApp.LoadListingInformationAsync
CurrentApp.ReportConsumableFulfillmentAsync
CurrentApp.ReportProductFulfillment
CurrentApp.RequestAppPurchaseAsync
CurrentApp.RequestProductPurchaseAsync
CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
CurrentApp.RequestProductPurchaseWithResultsAsync
CurrentEraTitleInfo::GetProxyAppPid
CustomDeveloperData
CWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::PurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::PurchaseResults *>,0>::DoWorkStub
CWSHttpHelper::AddTHAdditionalHeaders
CWSHttpHelper::AddTHAdditionalRequestHeader
CWSHttpHelper::FetchURL
D!l$pL
D!t$ E3
D$ E3
D$ fD
D$ I!/
d$(E3
D$(E3
d$(E3
D$(E3
d$(E3
D$@@8imu)
D$@E3
D$@f;
D$@H!t$PL
D$@H;
d$@M9
D$`D8u
D$`E3
D$`H;
d$`H;E
D$`L!|$`3
D$`L9o
D$0E3
d$0E3
D$0E3
D$0H;
D$0H+
D$0L;
D$8@8t$pu
D$8E3
d$8E3
D$8E3
d$8E3
D$8E3
D$8H!t$8H
D$Bf;
D$Df;
D$H@8u
D$HD8u
D$HE3
D$hE3
D$HE3
D$hE3
D$HE3
d$hH;D$xu
d$hH;E
D$hHc
D$hL9#u6
D$hL9m
D$PH;
d$pH;E
d$PL9e
D$X9F4
D$X9G4
D$xA;
D$XE3
D$xE3
D$XE3
D$XH9
D$xL9m
d/Zc1q
D;}(r
D;}`s
D;}Hr
D;A,sOA
D;d$h
D;e(r
D;eHr
D;F(r
D;G,s)H
D;GLs)H
D;l$l
D;u(r
D;uHr
D;uHs>
D@AFt
D8|$`H
D8}gL
D8}Hu
D8}wH
D8cPuDH
D8d$`t5I
D8d$`tXH
D8d$h
D8d$pt5H
D8d$Q
D8e`t
D8ePD
D8l$`
D8l$`t5H
D8l$p
D8l$x
D8l$xu-H
D8l$ytPH
D8mPt*H
D8mPu
D8mwt*H
D8o8t&H
D8t$0
D8t$pu*
D8ymuQ
D9 vBH
D9 vEH
D9}@|KH
D9}0t
D9}8u
D9}Ht$H
D9>v6
D90v(H
D98|ID9}xvCH
D9d$Hu
D9d$L
D9d$l
D9e8tRH
D9eou.
D9ePt
D9ewv|H
D9K(t
D9l$p
D9l$pu
D9mPvyI
D9mXu#H
D9t$ptReH
D9u@t
D9u0t'H
D9u0uTH
D9u8|KH
D9uH}
D9uHvzH
DataDownloaded callback failed
DebugBreak
DecodePointer
defaultValue
DelayLoadFailureHook
DeleteCriticalSection
DeleteFileA
DeleteFileW
Developer
DeviceContext
DeviceFamily
deviceFamily
deviceMoid
deviceOemid
deviceScmid
DevOfferId
devOfferId
DisableThreadLibraryCalls
DisplayProductSearchResult
DisplayRank
DisplaySkuAvailabilities
DisplaySkuSearchResult
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
DoDelete
DoHead
DoOptions
DoPatch
DoPost
DoPut
DPA_SortedInsertPtr failed on handle 0x%08x for %s:%d
DumpListingToDebugger
DuplicateTokenEx
Durable
Duration
dwContext != 0
DWordAdd(dwNeeded, 1, &cbSizeToAlloc)
e$Fv<
E(=csm
e/X4V
E;~(r
E;gHr
E_NOT_SET
E|@u(
E|eu+
E0D9 |=D9e(v7H
E8=csm
E8o`u$M
EH=csm
Eh=csm
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_08-31-2010.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
EJB:4
El/SU
EncodePointer
EndDate
EndOperation
EnterCriticalSection
Enterprise
entitlementFilters
entitlementId
Entry cannot have a Body Template: %s
Entry requires a Body Template: %s
en-US
eReceiptType
Error
ERROR
Error
error
Error
Error Code
ErrorCode
ErrorLocation
ErrorMessage
ErrorMethod
EtwEventEnabled
EtwEventRegister
EtwEventSetInformation
EtwEventUnregister
EtwEventWrite
EtwEventWriteTransfer
EventActivityIdControl
EventData
EventProviderEnabled
EventRegister
EventUnregister
EventWriteTransfer
EvtExportLog
EX;0r
EX;8r
EX=csm
Ex=csm
Ex9FTt_A
Ex9GTtkA
Exception
Exception Details
EXD;0r
ExD98
ExpandEnvironmentStringsA
expandSatisfyingItems
expiration
ExtendedData
ext-ms-onecore-appmodel-emclient-l1-1-0
ext-ms-onecore-appmodel-emclient-l1-1-0.dll
ext-ms-onecore-appmodel-pacmanclient-l1-1-0
ext-ms-win-core-licensemanager-l1-1-0
ext-ms-win-core-licensemanager-l1-1-0.dll
ext-ms-win-kernel32-package-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-3-0.dll
ext-ms-win-rtcore-ntuser-window-ext-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
f$Y{,S
f%Dhr
f;A$u
f;A.u
f;ubt
f9,Au
f9,Bu
f9,Gu
f9,Ju
f9,su
f9<Bu
f9<FtE
f9<Hu
fA9,@u
fA9<Au
fA9<Bu
fA9Z*v$A
Failed
Failed to convert systemtime to filetime
Failed to find substitute value with key %s and no default value provided.
Failed to find substitute value with key %s!
Failed to parse property '%s'
Failed to substitute value with key %s because we were given an invalid type!
FailFast
FallbackToDeviceAuth
false
false && "AppInstallItem returned an unexpected InstallType!"
false && "Store service returned an unexpected enum!"
Fc}_W/
FChkHr(HRESULT_FROM_RPC(RpcStringBindingComposeW(nullptr, reinterpret_cast<RPC_WSTR>(L"ncalrpc"), nullptr, nullptr, nullptr, &rpcStringBinding)))
fD;"t
fD;:t
fD;2t
fD;u"t
fD;u2t
fD9$Au
fD9$Hu
fD9$yu
fD9,Au
fD9,Bu
fD9,Cu
fD9,Nu
fD9,Pu
fD9|}
fD9<_u
fD9<Au
fD9<Bu
fD9<Hu
fD9<xu
fD90t
fD94Bu
fD94Fu
fD94Qu
fD98t
fD9l$@t
fD9lE
fE9$@u
fE9$wu
fE9,pu
Fext-ms-win-appmodel-state-ext-l1-2-0.dll
fF9$Ju
fG9$Hu
fhD+`
File Name
FileDescription
FileTimeToDosDateTime
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
FilterIAPs
FindClose
FindFirstFileA
FindFirstFileExA
FindNextFileA
FindResourceExW
FindWindowExW
Fj4b0
floor
FlushTrace for %s failed
FlushTraces
FlushTraceW
ForcePrompt
ForceRetailSandbox
FormatMessageW
FormatNameValuePairs
Found matching package for %s
Found update for package = %s
Foundation
FreeLibrary
FreeResource
FreeSid
Fsq^V
FulfillmentType
Function
FX9G$tEA
FX9G4
FX9G4t/
Fx9GDtEA
Fx9GTt/
G8I1o
get_AppId() invoked.
get_LicenseInformation() invoked.
get_LinkUri() invoked.
GetAppPurchaseCampaignIdAsync invoked.
GetAppReceiptAsync() invoked.
GetCallingProcessPackageFullName
GetContinuationToken
GetCurrencyFormatEx
GetCurrentPackageFullName
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetCustomerCollectionsIdAsync() invoked.
GetCustomerPurchaseIdAsync() invoked.
GetERAPackageFullNameByAumid
GetFileInformationByHandle
GetFileSize
GetForegroundWindow
GetFormattedPriceUsingCurrencyFormatter
GetGeoInfoW
GetHostInfoPointer
GetHttpResponse
GetLastError
GetLastError()
GetLengthSid
GetLocaleInfoEx
GetLocalTime
GetModuleFileNameA
GetModuleHandleExW
GetModuleHandleW
GetPackageFamilyNameFromToken
GetPackageFullName
GetPackageFullNameFromToken
GetPriceInfo
GetPriceInfoFromAvailability
GetProcAddress
GetProcessHeap
GetProcessId
GetProcessIdOfThread
GetProductReceiptAsync(%s) invoked.
GetRequiredEkbFromContentId
GetRestrictedErrorInfo
GetStateFolder
GetSystemTime
GetSystemTimeAsFileTime
GetTempFileNameA
GetTempPathA
GetTickCount
GetTickCount64
GetTokenInformation
GetUnfulfilledConsumablesAsync() invoked.
GetUserDefaultLocaleName
GetUserGeoID
GetVersionExA
GetWindowTextW
GetWindowThreadProcessId
gin.q
GlobalCollection
GlobalFree
Going to catalog again to find BigCatId: QueryCatalogForBigCatIdByPackageFullNameAndType
Going to catalog to find BigCatId: QueryCatalogForBigCatIdByPackageFullName
goldenBeneficiary
goldenBeneficiaryArray
Got event for item with Package Family Name %s after the events were unregistered.
GPD8m
GX9G4
h H;x
h VWAVH
H!\$ 
H!\$ E3
H!\$@
H!\$@H
H!\$`H
H!\$0H
H!\$0L
H!\$hH
H!\$P3
H!] H
H!]0I
H!]8H
H!_@3
H!_0H
H!_HH
H!_PH
H!_XH
H!{xH
H!|$@H
H!|$`L
H!|$hH
H!|$x
H!}@I
H!}8H
H!}HH
H!}PH
H!l$@
H!l$0H
H!s@H!sH@
H!s0H
H!s8H!s@@
H!sPH
H!sXH!s`@
H!t$ L
H!t$(D
H!t$0H
H!t$8H
H!t$pL
H!t$x
H!uX3
H!X H
H!X H!X(H
H!x(H
H!y A
H;.tHH
H;.tJH
H;]Xt
H;D$@t
H;D$@u
H;D$`t
H;D$`u
H;D$8u
H;D$ht
H;D$Ht
H;D$ht
H;D$Ht
H;D$ht
H;D$hu
H;D$pt
H;D$pu
H;D$Pu
H;D$pu
H;D$Pu
H;D$xt
H;D$Xt
H;D$xt
H;D$Xt
H;D$xt
H;D$Xu
H;D$xu
H;L$8
H;Q0s
H;S(v
H;w0t
H;wHtKH
H;wPtKH
H_^[]
H+D$`H
H0F0D
H9-$|
H9_Xt"
H9|$@u
H9|$P
H9}Pt4H
H9}PtIH
H9~0t:H
H9=[X
H9=D'
H9=P4
H95$ 
H951z
H95ie
H95t\
H97t(H
H9D$pt
H9l$Pu4
H9T$Xu
hA_A^_^[]
hA_A^A]A\_^[]
hA_A^A]A\_^][
Hardware
HasMorePages
HasPreviewCapability
HasTrial
HcL$ HcD$$H
Hct$<A
HeapAlloc
HeapFree
HeapReAlloc
Height
hModule != nullptr
Hq@J/
HRESULT_FROM_WIN32(1317L)
HResultOfOperation
hrInfo
HSTRING_UserFree
HSTRING_UserFree64
HSTRING_UserMarshal
HSTRING_UserMarshal64
HSTRING_UserSize
HSTRING_UserSize64
HSTRING_UserUnmarshal
HSTRING_UserUnmarshal64
HStringBufferWrapper::Promote
http%s://%s/%s
http:
https://
https://login.microsoft.com
https://login.windows.local
https://login.windows.net/common
https://onestore.microsoft.com
https://purchase.mp.microsoft.com
i(EDv
I_RpcBindingInqLocalClientPID
I0G0E
I0G1-0+
I3*bt
I9~Pt:H
I9>u!3
I9uxu
I'ae#
IAPReceiptType_App
IAPReceiptType_OneProduct
IAPUtils::BuildEntitlementFiltersJSON
IAPUtils::BuildStoreId
IAPUtils::CheckProductKinds
IAPUtils::CombineProductsAndCollectionsJson
IAPUtils::ConstructSlsUri
IAPUtils::CreateHttpClient
IAPUtils::CreateHttpClientWithAuthHeader
IAPUtils::CreateHttpClientWithAuthIfAvailable
IAPUtils::CreateUri
IAPUtils::GetDeviceContextId
IAPUtils::GetDeviceContextString
IAPUtils::GetDeviceIds
IAPUtils::GetFormattedPrice
IAPUtils::GetJsonFromURL
IAPUtils::GetJsonFromURLWithHttpClient
IAPUtils::GetLanguage
IAPUtils::GetLanguages
IAPUtils::GetLanguagesString
IAPUtils::GetTimeSpanDifference
IAPUtils::IsCallingProcessAppContainer
IAPUtils::ParseStoreId
IAPUtils::ParseTimeSpan
IAPUtils::ParseTimeSpan(timeString.Get(), &date)
IAPUtils::ParseUriSubstitutionTag
IAPUtils::PostJsonToURLWithHttpClient
IAPUtils::SetDateTime
IAPUtils::SetMaxDateTime
IAPUtils::TimeSpanToString
IAsyncOperation`1
IAsyncOperation`1<Boolean>
IAsyncOperation`1<String>
IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
IAsyncOperation`1<Windows.UI.Popups.IUICommand>
IAsyncOperationWithProgress`2
IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
identityType
identityValue
IdType
iertutil.dll
IIDFromString
imageName
ImagePurpose
Images
imageSize
ImpersonateLoggedOnUser
InAppOfferToken
inAppOfferToken
includeReceipt
includeRelationship
Index
InitialDuration
InitializeCriticalSection
InitializeCriticalSectionEx
InitializeSRWLock
InitOnceExecuteOnce
innererror
Installs to complete, continuing
InsufficientConsumeQuantity
internal\onecore\priv_sdk\inc\constrainedimpersonationutil.h
internal\onecoreshell\inc\asyncoperationhelper.h
internal\onecoreuapbase\inc\userawarecalleridentity.h
internal\sdk\inc\wil\com.h
internal\sdk\inc\wil\resource.h
InternalName
InternalStoreEndpointExtensionUrls
InvokedApi
InvokePurchaseFlow
iR{I<
isActive
IsDebuggerPresent
isDiscLicense
IsErrorPropagationEnabled
isOptional
IsRecurring
IsRpcServerCallOnLocalTransport
isTrial
IsTrial
isTrialOwnedByThisUser
itemCount
Items
items
IUnknown_AddRef_Proxy
IUnknown_QueryInterface_Proxy
IUnknown_Release_Proxy
j6`J%
JANu(
JGFY__x_Windows_CInternal_CStore_CIPurchaseEventArgsRedstone
JGFYW
Json document is missing a required field.
JSON_RESPONSE
JSON_RESPONSE(JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS+JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS4JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_MODAL_FLOW_SIZES
JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS
JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS
jsonArray->GetObjectAt(0, jsonElement.GetAddressOf())
jsonArray->GetObjectAt(i, jsonElement.GetAddressOf())
jsonArray->GetStringAt(i, text.GetAddressOf())
JsonHelpers::AppendObject
JsonHelpers::AppendString
JsonHelpers::GetArraySizeFromJsonArray
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count)
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &len)
JsonHelpers::GetNamedDateTime
JsonHelpers::ParseToJsonArray
JsonHelpers::ParseToJsonObject
JsonHelpers::RemoveAt
JsonHelpers::SetNamedArray
JsonHelpers::SetNamedBool
JsonHelpers::SetNamedDateTime
JsonHelpers::SetNamedNull
JsonHelpers::SetNamedNumber
JsonHelpers::SetNamedObject
JsonHelpers::SetNamedString
JsonHelpers::SetNamedTimeSpan
JsonHelpers::Stringify
JsonHelpers::Stringify(_response, jsonResponse)
JsonHelpers::Stringify(productsResultObject, pCombinedJson)
jsonRequest: %s
jsonResponse: %s
jsonValue->GetArray(jsonArray.GetAddressOf())
jsonValue->GetBoolean(&value)
jsonValue->GetNumber(&result)
jsonValue->GetNumber(&valueAsDouble)
jsonValue->GetObject(jsonObject.GetAddressOf())
jsonValue->GetString(string.GetAddressOf())
jsonValue->GetString(timeString.GetAddressOf())
JTk_S/
k VWAVH
K&H_.
k@g39-
K=Bj;X
K0;D$p@
K0H9{
k8;D$8
kBiu!
kernelbase.dll
keybd_event
KeyIds
keywords
Kmku(
KnILk
KuTZ3E
L!|$h3
L!|$hH
L!|$pH
L!|$xH
L!0L!p
L$ SH
L$ SUVWH
L$ SVWH
L$ USWH
L$ UWAVH
l$ VWATAVAWH
l$ VWAVH
l$ VWAWH
l$ WH
l$(E3
L$@E3
L$@H;
L$@H3
L$`9D$p
L$`9L$pt
L$`9L$Pu
L$`D;
L$`E3
L$`H!t$03
l$`H;D$hu
l$`H;E
L$`H3
L$`xTI
L$0A;
L$0E3
L$0H;
L$0H3
L$8!0
L$8D9L$8t
L$8E3
l$8E3
L$8E3
l$8E3
L$8E3
L$8H;
L$8tAH
L$hE3
L$HE3
L$hH3
L$HH3
L$hH3
L$HH3
L$hL9
l$hL9.
L$hx"H
l$j'$
L$P!]
L$P9L$Xu
L$pD8l$`
L$pE3
L$PE3
L$pE3
L$PfD
L$PH!\$xH
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
l$PL9m
l$PM9
L$XE3
L$xE3
L$XE3
L$xE3
L$XE3
L$xE3
L$XE3
L$xE3
L$XH3
L$XL+
l$yL9l$`
l&sz5
L/1u!
L;6tHH
l@k4@
'L9#u=H
L9%mC
L9{@u
L9{0t#H
L9|$@u
L9+u$H
L9>uSH
L90t#H
L9K@t
L9l$@tFH
L9l$`
L9l$h
L9l$ht 3
L9l$Pu,L
L9l$pu2A
L9motGH
L9mpu
L9oXu$
L9sHs@
L9uPt
L9yxtpH
Language
languages
latencyMs
LcA<E3
LCMapStringEx
LeaveCriticalSection
LegacyWindowsPhoneLicensingData
Legal_Policy_Statement
LegalCopyright
length >= (count * 2)
licensableSku
licensableStatus
License Info for app %s: (CV = %hs)
LicensingData
Line Number
LineNumber
LinkUriFormat
Listing Information (after filtering, CV = %hs):
ListPrice
LoadAddOnProductInfosAsync() invoked.
LoadListingInformationAsync() invoked.
LoadListingInformationByKeywordsAsync() invoked.
LoadListingInformationByProductIdsAsync() invoked.
LoadResource
LoadStringW
Local\SM0:%d:%d:%hs
LocalAlloc
locale
LocalFree
LocalizedProperties
localTicketReference
LockResource
LogHr
LogMessage
LogSimpleMessage
LzKA++
M@H9M
m_bInitialized
m_productId.CopyTo(productId)
M0H9M
M8D8}0
M9,$t
M9<$t%H
M9>u/
M9epu
Machine
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxCountPerPage, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxPageSize, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductQueryResult>( &_results, _products, productKinds.Get(), ChkGetHr())
MakeAndInitialize<T>(&image, DEBUG_PARSER_PARAMETERS_ARGS jsonElement)
MakeAndInitialize<T>(obj.GetAddressOf(), DEBUG_PARSER_PARAMETERS_ARGS jsonObject)
malloc
MapVirtualKeyW
market
MarketProperties
maxItemsToRetrieve
maxItemsToRetrievePerPage
maxPageSize
MBI_SSL
mbi_ssl
mbstowcs_s
MDCollections
MDDisplayCatalog
MDGetAppReceiptsDesktop
MDGetAppReceiptsMobile
MDGetOneProductReceiptMobile
MDPurchase
Member Name
memcmp
memcpy
memcpy_s
memmove
memmove_s
memset
Message
Messages
mf;w"
mgiM>
MHu H
MHxeL
Microsoft
Microsoft America Operations1&0$
Microsoft America Operations1'0%
Microsoft Code Signing PCA
Microsoft Code Signing PCA 2010
Microsoft Code Signing PCA 20100
Microsoft Code Signing PCA0
Microsoft Corporation
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1#0!
Microsoft Corporation1%0#
Microsoft Corporation1&0$
Microsoft Corporation1(0&
Microsoft Corporation1-0+
Microsoft Corporation1200
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft Store Runtime DLL
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp service
Microsoft Time-Stamp Service
Microsoft Time-Stamp service
Microsoft Time-Stamp Service0
Microsoft Time-Stamp service0
Microsoft.StorePurchaseApp_8wekyb3d8bbwe
Microsoft.StorePurchaseApp_8wekyb3d8bbwe!App
Microsoft.Windows.ApplicationModel.Store.Telemetry
microsoft1-0+
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-AppXDeploymentServer-Operational.evtx
Microsoft-Windows-Store/Operational
Microsoft-Windows-Store-Operational.evtx
Microsoft-Windows-TWinUI/Operational
Microsoft-Windows-TWinUI-Operational.evtx
Microsoft-Windows-WindowsUpdateClient/Operational
Microsoft-Windows-WindowsUpdateClient-Operational.evtx
minATL$__a
minATL$__m
minATL$__r
minATL$__z
MinimumUserAge
Minute
Mk,@(
mobilling.microsoft.com
MOBillingAuthenticationDomain
ModalFlow
ModalFlowSizes
modalManager->ShowForContractByAppID( hstrPurchaseAppUserModelId.Get(), StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), &experienceToken)
modalManagerAsUser->ShowForContractByAppIDAsUser( hstrPurchaseAppUserModelId.Get(), StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), userContextToken, &experienceToken)
Module Name
ModuleCollection
ModuleLoaded
moId=%s&oemId=%s&scmId=%s
Month
Moving %s to final state: %d
MSAHW1.0=
MS-CorrelationId
MS-CV
Msg:[%ws] 
MS-RequestId
MS-SiteName
msvcrt.dll
ms-windows-store://signin
MultiByteToWideChar
MYF{m
N=|)H
N0L0J
nameValuePairs || (cNameValuePairs == 0)
ncalrpc
nCipher NTS ESN:2665-4C3F-C5DE1+0)
NdrClientCall3
NdrCStdStubBuffer_Release
NdrCStdStubBuffer2_Release
NdrDllCanUnloadNow
NdrDllGetClassObject
NdrOleAllocate
NdrOleFree
NdrStubCall3
NdrStubForwardingFunction
networkError
NetworkError
neutral
NewQuantity
No contentInfo could be obtained from the preview license response.
No products found
No Sku Id could be obtained from the preview license response.
not set
NotPurchased
ntdll.dll
NtQueryInformationProcess
NtQueryWnfStateData
number
o\$PH
O0M0K
object
Oc7Wa
oD$ f
OEMDiscoveryTTL
OEMID
O-GAC
OJZu(
oK0D$"<
oL$0f
OLEAUT32.dll
OmitAuthTokenPrefix
onecore\shell\lib\calleridentity\calleridentity.cpp
onecoreuap\enduser\winstore\lib\httprequest.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\acquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBase.h
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBaseWithProgress.h
onecoreuap\enduser\winstore\licensing\winrt\lib\bulkhydrateoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\downloadandinstallstorepackagesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\findstoreproductforpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getassociatedstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getconsumablebalanceremainingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomercollectionsidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomerpurchaseidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getisanyskuinstalledoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getofflinelicensesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductspagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionpagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\iaputils.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\jsonhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\ParserJSON.h
onecoreuap\enduser\winstore\licensing\winrt\lib\purchasedisplayproperties.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\registryhelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\reportconsumableoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requestpurchaseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requeststorerateandreviewoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\sendstorerequestresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeapplicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeavailability.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecanacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecollectiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeconsumableresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecontext.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StoreContext.h
onecoreuap\enduser\winstore\licensing\winrt\lib\storeimage.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingpagedqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageinstalloptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackagelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageLicense.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageUpdateManagerUtils.h
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageupdateresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeprice.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproduct.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductoptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepurchaseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemcompletedeventargs.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemstatus.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerateandreviewresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequesthelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequestoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesku.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesubscriptiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeuninstallstorepackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storevideo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\stringhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StringHelpers.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StringifiedJsonValue.h
onecoreuap\enduser\Winstore\licensing\wsinc\WSErrorUtils.h
onecoreuap\enduser\Winstore\licensing\wsinc\WSHttpHelper.h
onecoreuap\shell\lib\activationevents\activatedeventargsbase.cpp
OneStoreAuthenticationDomain
OneStoreAuthenticationPolicy
OPCO 
OpenProcess
OpenProcessToken
OpenSemaphoreW
OpenStateExplicit
OpenThread
OpenThreadToken
OPTIONAL
options
Order
orderId
OrderManagementData
organizations
OriginalFilename
oT$@f
OutgoingServiceRequest
OutputDebugStringW
p AWH
p WATAUAVAWH
p WAVAWH
P/Z/y<
p>6vC"{
PA^_]
PA^_^
pA^_^
PA^_^
pA^_^
PA^_^[]
pA^_^[]
PA^_^[]
pA^_^[]
PA^_^[]
PA^A\_^]
PA_A^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^A\_^[]
pA_A^A\_^[]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
package.As(&package4)
package4->get_SignatureKind(&signatureKind)
PackageFamilyName
PackageFamilyNameFromFullName
packageFullName = %s, appType = %d, appId = %s, appCatalogId = %s
packageId->get_FullName(optionalPfn.GetAddressOf())
packageIdentifier
PackageNameAndPublisherIdFromFamilyName
packages
packageType
pagingInfo
parametersAsJson
ParentProductId
parentProductId
ParseJSONStringToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonString.Get(), pObj, table)
ParseJSONToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonElement, pObj, table)
ParseSLSJson
PartB_Ms.Qos.OutgoingServiceRequest
PartB_Ms.Telemetry.Error
PathAppendA
PathCchAddExtension
PathCchAppendEx
PathCombineA
PathRemoveFileSpecA
pid != nullptr
ppszProxyList && ppszProxyByPass && pdwAccessType
PreferredSkuId
Preview license response did not have skuId. (CV = %hs)
Preview license response did not have skuId. (CV:%hs)
PreviewImage
previewStore
Price
PrimaryWebAccountId
Process Name
Product
productAddOns
ProductDescription
productId
ProductId
productId
ProductIdCache::AddItem
ProductIdCache::ProductIdFromInAppOfferToken
ProductIdCache::ProductIdFromInAppOfferTokenTable
ProductIdCache::RefreshTableFromService
ProductIdCache::RuntimeClassInitialize
productIds
productIdsWithCommas
ProductKind
productKinds
ProductName
Products
productSkuIds
productStoreId
ProductTitle
ProductType
productTypes
ProductVersion
Prompt required, but not possible, cancel - canSilentlyDownload = %s, install = %s
Properties
protocolStatusCode
Proxy list = %s, Proxy bypass = %s, Proxy access type = %i
PRVA\
pszAuthorizationHeader
pszFullUrl
pszServerName && pszUrl
Public
PublisherId
publisherUserId
Purchase
PurchaseMEM
PurchaseOperation
purchaseStatus
PWyf^
PXOUd!
Q}bql
q}X>N
q0;D$@
-Q2TS
q'be^
qpC@!
quantity
QuantityAvailable:
QueryPerformanceCounter
QueryTrace for %s failed
QueryTraceW
QueueUserWorkItem
R$fA;Z*
r~akow
RaiseException
RaiseFailFastException
ReadFile
realloc
Receipt
ReceiptBase64Encoded
ReceiptHelpers::CachePhoneReceiptForOffline
ReceiptHelpers::DeleteCachedPhoneReceipt
ReceiptHelpers::FetchDesktopReceipt
ReceiptHelpers::FetchPhoneReceipt
ReceiptHelpers::FetchReceipt
ReceiptHelpers::GetCachedPhoneReceipt
ReceiptHelpers::GetFormattedPrice
ReceiptHelpers::GetPackageLocalAppDataPath
ReceiptHelpers::GetPhoneReceiptFilepath
ReceiptHelpers::GetPublisherId
ReceiptHelpers::GetReceiptCacheFileName
ReceiptHelpers::GetReceiptCacheFolder
ReceiptHelpers::LicenseParseReceiptResponse
ReceiptResponse
RecurrencePolicy
RecurrencePrice
Redmond1
refreshConsumablesAsync
RefreshLicenses
RegCloseKey
RegDeleteKeyValueW
RegGetValueW
RegistryHelper::GetStringValue
RegistryHelper::SetQwordValue
RegistryHelper::SetStringValue
RegOpenCurrentUser
RegOpenKeyExW
RegSetKeyValueW
relatedProductId
RelatedProductId
RelatedProducts
relationshipType
RelationshipType
ReleaseLicense()
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
report.wer
ReportConsumableFulfillmentAsync(%s, %s) invoked.
ReportingEvents.log
ReportProductFulfillment(%s) invoked.
Request
Request 0x%08x failed, result %d
Request 0x%08x has machine %s and RID %s
Request Rate and Review Operation failed to get any status due to a purchase app not install error.
Request to [%s] failed with connection error. Retrying %d more times
RequestAppPurchaseAsync(%s) invoked.
requestKind
requestParams.authType == tickets[0].m_providerType
RequestProductPurchaseAsync(%s, %s) invoked.
RequestProductPurchaseByProductIdAndSkuIdAsync(%s, %s) invoked.
RequestProductPurchaseWithDisplayPropertiesAsync(%s, %s) invoked.
RequestProductPurchaseWithResultsAsync(%s) invoked.
RequestPurchase
RequireAuthToken
RequirePrivateStoreOnly
RequiresCapability
RequireValidLicense
ResetEvent
ResolveDelayLoadedAPI
resource
Response
Response buffer overflow
responseSizeBytes
result != nullptr
ResumeWithFlags called for productId = %s, setFlags = %d, resetFlags = %d
RETAIL
RetrieveJsonResponseFromResources
ReturnHr
RevertToSelf
RoActivateInstance
RoGetActivationFactory
RoGetAgileReference
RoGetMatchingRestrictedErrorInfo
RoInitialize
RoOriginateError
RoOriginateErrorW
RoReportFailedDelegate
RoTransformError
RoUninitialize
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcHelpers::GetRpcHandle
RPCRT4.dll
RpcServerInqCallAttributesW
RpcStringBindingComposeW
RpcStringFreeW
Rr_zH
RtlCaptureContext
RtlDllShutdownInProgress
RtlGetDeviceFamilyInfoEnum
RtlLookupFunctionEntry
RtlNtStatusToDosError
RtlPublishWnfStateData
RtlQueryWnfStateData
RtlSubscribeWnfStateChangeNotification
RtlUnsubscribeWnfStateChangeNotification
RtlUpcaseUnicodeChar
RtlVirtualUnwind
S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157
S-1-15-2-778011547-1096124574-1799322564-3972718560-253206704-1472347756-15051174
Sandbox
SCMID
SearchTitles
SearchTitleString
SearchTitleType
SellableBy
SendStoreRequest
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForParentProduct, cv.Get(), nullptr, nullptr, collectionsJsonString.GetAddressOf())
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
Server: %s, URL %s
ServerError
service::%s::%s
serviceTicket
SetEvent
SetFilePointer
SetForegroundWindow
SetLastError
SetRestrictedErrorInfo
SetThreadpoolTimer
SetUnhandledExceptionFilter
SHCreateMemStream
SHTaskPoolAllowThreadReuse
SHTaskPoolQueueTask
SignatureKind: %hs
SizeofResource
SkipCapabilityCheckIfERA
skipCount
SkipForceAuthentication
SkuDescription
SkuDisplayRank
skuId
SkuId
skuId
SkuTitle
SkuType
skuType
Sleep
SleepConditionVariableSRW
SLS failed to initialize correctly, falling back to built in values, this may cause problems.
Software\Microsoft\Windows\CurrentVersion\Store
Software\Microsoft\Windows\CurrentVersion\Store\Configuration
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
Software\Microsoft\Windows\CurrentVersion\Store\CurrentIdentity
Software\Microsoft\Windows\CurrentVersion\Store\MultiVariantConfig
Software\Microsoft\XboxLive
Software\Policies\Microsoft\WindowsStore
Source
spAppContentInfo->GetCatalogId(&productStoreId)
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(&spAppContentInfo))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(spApplicationContentInfo.GetAddressOf()))
spLicenseManager->RefreshLicenses(RefreshPolicy_NetworkStatusOnline)
sprintf_s
Start callback failed
StartDate
status
Status done, remaining installs: %d
Store
Store service returned an unexpected enum: %hs
store.etl
StoreAADAccountId
storeAppInstallation
storeConfiguration
StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
StoreConfigurationServer::GetStoreLogDataAsync
StoreContentModifier
StoreContext.RequestDownloadAndInstallStorePackagesAsync
StoreContextServer::Initialize: packageFullName = %s, productStoreId = %s, isLicensed = %s, isAppContainer = %s
storeContextServer->ConsumeConsumable( _productId.Get(), _quantity, _trackingId, cv.GetHStringReference().Get(), jsonString.GetAddressOf())
storeContextServer->ReleaseStoreLicenseForOptionalPackage(optionalPfn.Get())
StoreEndpointExtensionUrls
StorefrontClient
StorefrontClientErrorTask
StorefrontClientExceptionTask
StorefrontClientInformationTask
StorefrontClientVerboseTask
StorefrontClientWarningTask
StoreId
storeId
storeIds
StoreInfoBuilders::BuildStoreAppInfo
storeLicenseManagement
StoreOperational.etl
storeOptionalPackageInstallManagement
StorePackageUpdateManagerUtils::StorePackageUpdateStatusEquals::operator ()
StorePreview.LoadAddOnProductInfosAsync
StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
StorePurchaseApp
StorePurchaseAppMessage
strchr
strcmp
string
StringFileInfo
StringFromGUID2
StringHelpers::DecodeBase64
StringHelpers::SplitString
StringHelpers::TrimEnds
StringifiedJsonValue::GetStringifiedValue
StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, FALSE)
strncpy_s
strrchr
strtol
Succeeded
succeeded
success
SUVWATAUAVAWH
SUVWATAVAWH
sW/Zl
System
SYSTEM\CurrentControlSet\Control\SystemInformation
SystemManufacturer
SystemProductName
SystemTimeToFileTime
t"@8t$pu
t"D8|$pu
t"D8=f
t"D8d$pu
t"D8l$Pu
t#@8/u
t#D8/u
t#D8}
t$ UWATAVAWH
t$ UWAVH
t$ WATAUAVAWH
t$ WAVAWH
t$ WH
t$(E3
T$(E3
t$(u*I
t$@D;
T$@E3
t$@E3
t$`H;
t$0E3
t$8E3
T$8H!\$8
t$D8}
t$D8e
t$D8m
t$HE3
T$HE3
T$hE3
T$PE3
T$pE3
t$pf;u
T$PH!\$PH
t$Px1H
T$XE3
t$XE3
T$xE3
T$xH!t$x
t(D8e
t)D8e
-T)O1l
t.fE9 t(fA
t.H95
t'@8}
t[I!?L
t^@8=
t{H95
t{H95-
t{H95]
t{H95]d
t{H95}
t{H95}F
t{H95=
t{H95=^
t{H95m
t{H95M
t{H95m#
t{H95Mr
t{H95Ms
t{H95mU
t0L9IHt*I
t1H!]@L
t1I!,$L
t9H9=
tA{4Z>
tAL9}Hu&H
tAL9u0u&H
targetUri
tBL951
TelemetryAssert
TelemetryAssertDiagTrack
TEMPx
TerminateProcess
text/xml
tffD9.t`
tG9^HtBH
tG9oHtBH
tG9ohtBH
Thales TSS ESN:2137-37A0-4AAA1%0#
Thales TSS ESN:2AD4-4B92-FA011%0#
The license for the application is missing information needed to perform Store operations. If you side-loaded the application, uninstall the application and download it from the Store first to get the Store license associated with the application.
There were items in the collection, however iterator is pointing at the end of the collection...
This function is not supported, all calls should now use StoreContextServer::GetAppAndOptionalStorePackageUpdates
This function is not supported, all calls should now use StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadStorePackageUpdates
This function must be called from a UI thread
This request kind (%d) is invalid or not supported on this release. Request Entry: %s
tHL95
timestamp
tJH9=
tKD9~htEH
tKH!]
tlH!2L
tMH!}8L
tMH9-A
tNH!|$@L
tOH!|$0L
totalHits
TotalResultCount
toupper
trackingId
transactionId
Translation
TrialTimeRemaining
trialTimeRemaining
trialUniqueId
Trying to remove non-store package %s
Trying to remove package %s that isn't installed
Trying to remove package %s that isn't related to the calling app
ttfE9 t/fA
twinapi.appcore.dll
txH95
u D9J
u HcA<H
u"H!GHH
u#D9R
u><`@
u4H!}
U8!u83
u8D9R
u8H9]
UATAUAVAWH
UAVAWH
uCD9R
udYyZ
UftrDJ
uJL9mo
UMgrGetConstrainedUserToken
UMgrOpenProcessHandleForAccess
UMgrOpenProcessTokenForQuery
UMgrQueryUserContext
UMgrQueryUserToken
Unable to show consent dialog
Unfulfilled Consumables for %s (CV = %hs):
UnhandledExceptionFilter
Units
UnitType
UniversalStoreInApp
Unknown
UNKWN
UnmanagedConsumable
UnpackHStringIIterable
Uo~9@D
updated
UpdateDownloadLimit
URIBufferMaxSize
UriHelper::GetUri
UriHelper::GetUriWithPath
UriHelper::GetUriWithPathAndParameters
UriHelperInternal::GetUriEx
UriHelperInternal::GetUriString
UriHelperInternal::GetUriWithPathAndParametersEx
UriHelperInternal::InitOnceCallback
UriHelperV7::_FindUriWithIndex
UriHelperV7::_GetRawStringFromOS
UriHelperV7::_GetRawStringFromSLS
UriHelperV7::GetIndexedEntry
UriHelperV7::GetRawString
UrlEscapeW
UseAuthIfAvailable
UseBackgroundTask
UsePromptSettings
User consent required, cancel = %s
User content required, cancel = %s
User content required, cancel = %s, canSilentlyDownload = %s, install = %s
user.auth.xboxlive.com
UserId
UserTokenTypes
USVWATAUAVAWH
USVWATAUAVH
USVWATAVAWH
USVWAUAVAWH
USVWAVAWH
USVWAVH
USVWH
uUH9~ uOI
UuidCreate
UuidFromStringW
UVATAVAWH
UVWATAUAVAW
UVWATAUAVAWH
UVWATAVH
UVWATAWH
UVWAVAWH
UWATAUAVH
UWATAUAWH
UWATAVAWH
UWAUAVAWH
UWAVH
UXD9ePwIH;
UXD9ePwMH;
uXH9^
uXH9_
UY7i*
uz|LAe
V:)NM
v`E8.uFD8
V4oeU
v6.0/beneficiaries/me/keys
v6.0/collections/consume
v6.0/collections/query
v6.0/users/me/keys
v6/products/{productId}?market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=PackageFamilyName&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=ProductSearchApps&market={market}&languages={languages}&addOnParent={productId}&fieldsTemplate=Full{platformDependencyNameParam}
v6/skus?rank=ContentId&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
Valid
VALID
validityType
Value
VarFileInfo
Vc>H-
Vector<HSTRING>::Make(vector.GetAddressOf())
Vector<T*>::Make(vector.GetAddressOf())
vector->Append(image.Get())
vector->Append(text.Get())
Verbose
VerifyCapability
Version
version
Version
VideoPurpose
Videos
VS_VERSION_INFO
VWATAVAWH
VWAUAVAWH
VWAVH
w(D8g8
WaitForCompletion
WaitForMultipleObjects returned %u
WaitForMultipleObjectsEx
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
Waiting for installs to complete
WakeAllConditionVariable
Warning
Washington1
WATAUAVAWH
WATAVH
WAVAWH
wcschr
wcscmp
wcscpy_s
wcscspn
wcsrchr
wcsstr
wcstod
wcstombs
wcstoul
webservices.dll
WEVT_TEMPLATE
wevtapi.dll
Width
WilError_02
win:Error
win:Info
win:Informational
win:Verbose
win:Warning
win32
win8xappx
Windows
Windows Store/1.0
Windows.ApplicationModel.AppService.AppServiceConnection
Windows.ApplicationModel.Core.CoreApplication
Windows.ApplicationModel.Store.CurrentApp
Windows.ApplicationModel.Store.CurrentApp.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentApp.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentApp.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReloadSimulatorAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.dll
Windows.ApplicationModel.Store.Internal.AuthenticationExtension
Windows.ApplicationModel.Store.Internal.AuthenticationExtension.ShowChallengeForUserAsync
Windows.ApplicationModel.Store.Internal.IMessageDialogHelper2.ShowDialogWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetProductReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.StoreCommerce
Windows.ApplicationModel.Store.LicenseInformation
Windows.ApplicationModel.Store.LicenseManagement.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.GetSatisfactionInfosAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.RefreshLicensesAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult
Windows.ApplicationModel.Store.LicenseManagement.RefreshLicensesAsync
Windows.ApplicationModel.Store.ListingInformation
Windows.ApplicationModel.Store.pdb
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions
Windows.ApplicationModel.Store.Preview.StoreConfiguration
Windows.ApplicationModel.Store.Preview.StoreConfiguration.FilterUnsupportedSystemFeaturesAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.GetStoreLogDataAsync
Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo
Windows.ApplicationModel.Store.Preview.StorePreview
Windows.ApplicationModel.Store.Preview.StorePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Preview.StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo
Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAndWebAccountAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAsync
Windows.ApplicationModel.Store.ProductLicense
Windows.ApplicationModel.Store.ProductListing
Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
Windows.ApplicationModel.Store.PurchaseResults
Windows.ApplicationModel.Store.UnfulfilledConsumable
Windows.AppointmentDataProvider
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.AppointmentsProvider.ShowTimeFrame
Windows.AppService
Windows.AppUriHandler
Windows.BackgroundTasks
Windows.BarcodeScannerPreviewProvider
Windows.BarcodeScannerProvider
Windows.CachedFileUpdater
Windows.CameraSettings
Windows.CommandLineLaunch
Windows.ComponentUI
Windows.Contact.Call
Windows.Contact.Map
Windows.Contact.Message
Windows.Contact.Post
Windows.Contact.VideoCall
Windows.ContactDataProvider
Windows.ContactPanel
Windows.ContactPicker
Windows.ContactsProvider.AddContact
Windows.ContactsProvider.ShowContact
Windows.Data.Json.JsonArray
Windows.Data.Json.JsonObject
Windows.Data.Json.JsonValue
Windows.Data.Xml.Dom.XmlDocument
Windows.Device
Windows.DialProtocol
Windows.EmailDataProvider
Windows.File
Windows.FileOpenPicker
Windows.FileSavePicker
Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>
Windows.Foundation.AsyncOperationCompletedHandler`1<String>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Object>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMap`2<String, String>
Windows.Foundation.Collections.IMap`2<String, UInt8>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMapView`2<String, UInt8>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Object>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVectorView`1<Object>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.ValueSet
Windows.Foundation.Diagnostics.AsyncCausalityTracer
Windows.Foundation.IAsyncAction
Windows.Foundation.IAsyncOperation`1<Boolean>
Windows.Foundation.IAsyncOperation`1<String>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.IReference`1<UInt32>
Windows.Foundation.PropertyValue
Windows.Foundation.Uri
Windows.Globalization.NumberFormatting.CurrencyFormatter
Windows.Internal.FilePickerExperience
Windows.Internal.Security.Authentication.Web.TokenBrokerInternal
Windows.Internal.Security.WebAuthentication.AuthenticationManager
Windows.Internal.Shell.ModalExperience.ModalExperienceManager
Windows.Internal.Shell.ModalExperience.ModalExperienceOptions
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.PackageResourceResolver
Windows.Internal.StateRepository.TargetDeviceFamily
Windows.Internal.StateRepository.User
Windows.Launch
windows.lockScreen
windows.LockScreenCall
Windows.LockScreenComponent
Windows.Management.Deployment.PackageManager
Windows.Networking.Connectivity.NetworkInformation
Windows.OopWebView
Windows.PeoplePane
Windows.PersonalAssistant.Launch
Windows.PreInstalledConfigTask
Windows.Print3DWorkflow
Windows.PrintTaskSettings
Windows.PrintWorkflowBackgroundTask
Windows.PrintWorkflowForegroundTask
Windows.Protocol
Windows.RestrictedLaunch
Windows.Search
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Security.Cryptography.CryptographicBuffer
Windows.Services.Store.Internal.GetNextStoreProductOperation
Windows.Services.Store.Internal.IStoreContextServer.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.Internal.StoreContentIdKeyIdItem
Windows.Services.Store.Internal.StoreContentIdKeyIdResponse
Windows.Services.Store.Internal.StoreContextCallerData
Windows.Services.Store.Internal.StoreContextServer
Windows.Services.Store.StoreAcquireLicenseResult
Windows.Services.Store.StoreAppLicense
Windows.Services.Store.StoreAvailability
Windows.Services.Store.StoreAvailability.RequestPurchaseAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreCanAcquireLicenseResult
Windows.Services.Store.StoreCollectionData
Windows.Services.Store.StoreConsumableResult
Windows.Services.Store.StoreContext
Windows.Services.Store.StoreContext.AcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.DownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.FindStoreProductForPackageAsync
Windows.Services.Store.StoreContext.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.GetAppLicenseAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsWithPagingAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetConsumableBalanceRemainingAsync
Windows.Services.Store.StoreContext.GetCustomerCollectionsIdAsync
Windows.Services.Store.StoreContext.GetCustomerPurchaseIdAsync
Windows.Services.Store.StoreContext.GetStoreProductForCurrentAppAsync
Windows.Services.Store.StoreContext.GetStoreProductsAsync
Windows.Services.Store.StoreContext.GetStoreProductsWithOptionsAsync
Windows.Services.Store.StoreContext.GetStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetUserCollectionAsync
Windows.Services.Store.StoreContext.GetUserCollectionWithPagingAsync
Windows.Services.Store.StoreContext.ReportConsumableFulfillmentAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestPurchaseAsync
Windows.Services.Store.StoreContext.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreContext.RequestRateAndReviewAppAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.TrySilentDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.UninstallStorePackageAsync
Windows.Services.Store.StoreContext.UninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreImage
Windows.Services.Store.StoreLicense
Windows.Services.Store.StorePackageInstallOptions
Windows.Services.Store.StorePackageLicense
Windows.Services.Store.StorePackageUpdate
Windows.Services.Store.StorePackageUpdateResult
Windows.Services.Store.StorePrice
Windows.Services.Store.StoreProduct
Windows.Services.Store.StoreProduct.GetIsAnySkuInstalledAsync
Windows.Services.Store.StoreProduct.RequestPurchaseAsync
Windows.Services.Store.StoreProduct.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreProductOptions
Windows.Services.Store.StoreProductPagedQueryResult
Windows.Services.Store.StoreProductPagedQueryResult.GetNextAsync
Windows.Services.Store.StoreProductQueryResult
Windows.Services.Store.StoreProductResult
Windows.Services.Store.StorePurchaseProperties
Windows.Services.Store.StorePurchaseResult
Windows.Services.Store.StoreQueueItem
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
Windows.Services.Store.StoreQueueItemCompletedEventArgs
Windows.Services.Store.StoreQueueItemStatus
Windows.Services.Store.StoreRateAndReviewResult
Windows.Services.Store.StoreRequestHelper
Windows.Services.Store.StoreRequestHelper.SendRequestAsync
Windows.Services.Store.StoreSendRequestResult
Windows.Services.Store.StoreSku
Windows.Services.Store.StoreSku.GetIsInstalledAsync
Windows.Services.Store.StoreSku.RequestPurchaseAsync
Windows.Services.Store.StoreSku.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreSubscriptionInfo
Windows.Services.Store.StoreUninstallStorePackageResult
Windows.Services.Store.StoreVideo
Windows.ShareTarget
Windows.StartupTask
Windows.Storage.Streams.DataReader
Windows.Storage.Streams.RandomAccessStreamReference
Windows.System.Internal.UserManager
Windows.System.Launcher
Windows.System.Profile.AnalyticsInfo
Windows.System.UserProfile.GlobalizationPreferences
Windows.UI.Core.CoreWindow
Windows.UI.Popups.MessageDialog
Windows.UI.Popups.UICommand
Windows.UpdateTask
Windows.UserDataAccountsProvider
Windows.UserDataTaskDataProvider
Windows.VoiceCommand
Windows.Web.Http.Filters.HttpBaseProtocolFilter
Windows.Web.Http.HttpClient
Windows.Web.Http.HttpMethod
Windows.Web.Http.HttpRequestMessage
Windows.Web.Http.HttpStringContent
Windows.WebAccountProvider
Windows.Xbox.ApplicationModel.State.Internal.StateHelperCache
Windows.Xbox.System.Internal.Deployment.AvailablePackageProvider
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<bool>,struct Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::ListingInformation *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::ListingInformation *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAcquireLicenseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreConsumableResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreConsumableResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductPagedQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductPagedQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StorePurchaseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StorePurchaseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreRateAndReviewResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreRateAndReviewResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreSendRequestResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreSendRequestResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreUninstallStorePackageResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreUninstallStorePackageResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<enum Windows::ApplicationModel::Store::FulfillmentResult>,struct Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::ApplicationModel::Store::FulfillmentResult>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,0>::DoWorkStub
-Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::CProductLicenseMap::First
Windows::ApplicationModel::Store::CProductLicenseMap::get_Size
Windows::ApplicationModel::Store::CProductLicenseMap::GetView
Windows::ApplicationModel::Store::CProductLicenseMap::HasKey
Windows::ApplicationModel::Store::CProductLicenseMap::Initialize
Windows::ApplicationModel::Store::CProductLicenseMap::Lookup
Windows::ApplicationModel::Store::CProductLicenseMap::Split
Windows::ApplicationModel::Store::CurrentAppFactory::get_AppId
Windows::ApplicationModel::Store::CurrentAppFactory::get_LicenseInformation
Windows::ApplicationModel::Store::CurrentAppFactory::get_LinkUri
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppWindowHandle
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetProductReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetRuntimeClassName
Windows::ApplicationModel::Store::CurrentAppFactory::GetStoreCommerce
Windows::ApplicationModel::Store::CurrentAppFactory::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::Initialize
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByKeywordsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByProductIdsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportProductFulfillment
Windows::ApplicationModel::Store::CurrentAppFactory::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::_CreateUnfulfilledConsumable
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::DoWork
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetResults
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands::<lambda_52d5cbc7dd5db017869aace1b0f03a2b>::operator ()
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CheckDialogResults
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommand
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommandWithInt32Id
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::get_ContextString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetAppName
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetText
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::LoadFormattedString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialog
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialogWithResultsAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppCatalogId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetExclusiveLockForProduct
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLicenseInformation
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLinkUri
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetProductReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::Initialize
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::InitializeIdsFromLicense
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfos
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadListingInformationAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentSync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::LicenseInformationServer::add_LicenseChanged
Windows::ApplicationModel::Store::LicenseInformationServer::CheckForChanges
Windows::ApplicationModel::Store::LicenseInformationServer::CreateInstance
Windows::ApplicationModel::Store::LicenseInformationServer::DumpLicensesToDebugger
Windows::ApplicationModel::Store::LicenseInformationServer::get_ExpirationDate
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsActive
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsTrial
Windows::ApplicationModel::Store::LicenseInformationServer::get_ProductLicenses
Windows::ApplicationModel::Store::LicenseInformationServer::GetProductId
Windows::ApplicationModel::Store::LicenseInformationServer::Initialize
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshConsumables
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshInternalState
Windows::ApplicationModel::Store::LicenseInformationServer::remove_LicenseChanged
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_IsSatisfied
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByDevice
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByInstallMedia
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByOpenLicense
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByPass
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedBySignedInUser
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByTrial
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_ExtendedError
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_LicenseSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_SkuId
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync::<lambda_1abf1b6361d60f9d16cc0e231359674a>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetALM
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync::<lambda_9f0d0545930ea7a992594259d6b39bc6>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync::<lambda_4626c2dff80b867a838e2b3bbb3b2bf6>::operator ()
Windows::ApplicationModel::Store::ListingInformationServer::get_AgeRating
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrencyCode
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrentMarket
Windows::ApplicationModel::Store::ListingInformationServer::get_Description
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedPrice
Windows::ApplicationModel::Store::ListingInformationServer::get_IsOnSale
Windows::ApplicationModel::Store::ListingInformationServer::get_Name
Windows::ApplicationModel::Store::ListingInformationServer::get_ProductListings
Windows::ApplicationModel::Store::ListingInformationServer::get_SaleEndDate
Windows::ApplicationModel::Store::ListingInformationServer::Initialize
Windows::ApplicationModel::Store::LoadListingOperationServer::DoWork
Windows::ApplicationModel::Store::LoadListingOperationServer::GetResults
Windows::ApplicationModel::Store::LoadListingOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::DoWork
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::GetResults
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::AskWuWhichHardwareIsAvailable
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::BuildKnownFeatureAndGuidArrays
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedFeaturesInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync::<lambda_61fe1ae4f39c9a72455a955c17e46960>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_HardwareManufacturerInfo
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetHardwareManufacturerInfoInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync::<lambda_aea4b148270f8ed2715626922d19305b>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccount
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccountForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToDesktopSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToStartSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToTaskbarSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktop
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktopForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::put_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PutPurchasePromptingPolicyInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnly
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnlyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::StoreConfigurationServer
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::GetStoreCommerce
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductType
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_SkuInfoList
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResultsServer::get_ProductPurchaseStatus
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CurrencyCode
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CustomDeveloperData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ExtendedData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_FormattedListPrice
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuType
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAndWebAccountAsync
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync
Windows::ApplicationModel::Store::ProductLicenseServer::get_ExpirationDate
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsActive
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsConsumable
Windows::ApplicationModel::Store::ProductLicenseServer::get_ProductId
Windows::ApplicationModel::Store::ProductLicenseServer::Initialize
Windows::ApplicationModel::Store::ProductLicenseServer::InitializeInvalid
Windows::ApplicationModel::Store::ProductListingServer::get_CurrencyCode
Windows::ApplicationModel::Store::ProductListingServer::get_Description
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedPrice
Windows::ApplicationModel::Store::ProductListingServer::get_ImageUri
Windows::ApplicationModel::Store::ProductListingServer::get_IsOnSale
Windows::ApplicationModel::Store::ProductListingServer::get_Keywords
Windows::ApplicationModel::Store::ProductListingServer::get_Name
Windows::ApplicationModel::Store::ProductListingServer::get_ProductId
Windows::ApplicationModel::Store::ProductListingServer::get_ProductType
Windows::ApplicationModel::Store::ProductListingServer::get_SaleEndDate
Windows::ApplicationModel::Store::ProductListingServer::get_Tag
Windows::ApplicationModel::Store::ProductListingServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::ActivateInstance
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::CreateProductPurchaseDisplayProperties
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Name
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Name
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::PurchaseResultsServer::get_OfferId
Windows::ApplicationModel::Store::PurchaseResultsServer::get_ReceiptXml
Windows::ApplicationModel::Store::PurchaseResultsServer::get_Status
Windows::ApplicationModel::Store::PurchaseResultsServer::get_TransactionId
Windows::ApplicationModel::Store::PurchaseResultsServer::Initialize
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::DoWork
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::GetResults
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_OfferId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_ProductId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_TransactionId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::Initialize
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::AsyncOperationWithProgressBase<struct Windows::Foundation::IAsyncOperationWithProgress<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationProgressHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,0>::DoWorkStub
Windows::Services::Store::BackgroundTaskOperation::ConvertJsonObjectToPropertySet
Windows::Services::Store::BackgroundTaskOperation::ConvertPropertySetToJsonObject
Windows::Services::Store::BackgroundTaskOperation::DoWork
Windows::Services::Store::BackgroundTaskOperation::GetResults
Windows::Services::Store::BackgroundTaskOperation::RuntimeClassInitialize
Windows::Services::Store::BulkHydrateOperation::DoWork
Windows::Services::Store::BulkHydrateOperation::GetResults
Windows::Services::Store::BulkHydrateOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseOperation::RuntimeClassInitialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_AttachAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearEventHandler
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_Initialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshAllStatusesAndOverallState
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshStatus
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::DoWork
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::GetResults
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::RuntimeClassInitialize
Windows::Services::Store::FindStoreProductForPackageOperation::DoWork
Windows::Services::Store::FindStoreProductForPackageOperation::GetResults
Windows::Services::Store::FindStoreProductForPackageOperation::RuntimeClassInitialize
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::DoWork
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::GetResults
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::BeginWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetConsumableBalanceRemainingOperation::DoWork
Windows::Services::Store::GetConsumableBalanceRemainingOperation::GetResults
Windows::Services::Store::GetConsumableBalanceRemainingOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerCollectionsIdOperation::DoWork
Windows::Services::Store::GetCustomerCollectionsIdOperation::GetResults
Windows::Services::Store::GetCustomerCollectionsIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerPurchaseIdOperation::DoWork
Windows::Services::Store::GetCustomerPurchaseIdOperation::GetResults
Windows::Services::Store::GetCustomerPurchaseIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetIsAnySkuInstalledOperation::DoWork
Windows::Services::Store::GetIsAnySkuInstalledOperation::GetResults
Windows::Services::Store::GetIsAnySkuInstalledOperation::RuntimeClassInitialize
Windows::Services::Store::GetOfflineLicensesOperation::DoWork
Windows::Services::Store::GetOfflineLicensesOperation::GetResults
Windows::Services::Store::GetOfflineLicensesOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreProductOperation::DoWork
Windows::Services::Store::GetStoreProductOperation::GetResults
Windows::Services::Store::GetStoreProductOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionOperation::DoWork
Windows::Services::Store::GetUserCollectionOperation::GetResults
Windows::Services::Store::GetUserCollectionOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionPagedOperation::DoWork
Windows::Services::Store::GetUserCollectionPagedOperation::GetResults
Windows::Services::Store::GetUserCollectionPagedOperation::RuntimeClassInitialize
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::GetNextAsync
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::RuntimeClassInitialize
Windows::Services::Store::Internal::GetNextUserCollection::GetNextAsync
Windows::Services::Store::Internal::GetNextUserCollection::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ContentIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_KeyIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ProductId
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::get_Items
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContextServer::_ForceRefreshLicensesProc
Windows::Services::Store::Internal::StoreContextServer::_GetAppInstallManager
Windows::Services::Store::Internal::StoreContextServer::_GetStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::_LicenseChanged
Windows::Services::Store::Internal::StoreContextServer::_LoadLicenseJson
Windows::Services::Store::Internal::StoreContextServer::_MakeDefaultLicenseResponse
Windows::Services::Store::Internal::StoreContextServer::_ParseLicenseInstance
Windows::Services::Store::Internal::StoreContextServer::_RequestPurchase
Windows::Services::Store::Internal::StoreContextServer::_RetrieveHWNDFromCallerData
Windows::Services::Store::Internal::StoreContextServer::AcquireStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::BackgroundPurchaseDialogTask
Windows::Services::Store::Internal::StoreContextServer::CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::CaptureStoreContextCallerData
Windows::Services::Store::Internal::StoreContextServer::ConsumeConsumable
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackages
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::FocusOnWindow
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::GetAssociatedStoreProducts
Windows::Services::Store::Internal::StoreContextServer::GetConsumableBalanceRemaining
Windows::Services::Store::Internal::StoreContextServer::GetContentIdKeyIdsForProductIds
Windows::Services::Store::Internal::StoreContextServer::GetCustomerCollectionsId
Windows::Services::Store::Internal::StoreContextServer::GetCustomerPurchaseId
Windows::Services::Store::Internal::StoreContextServer::GetLinkUri
Windows::Services::Store::Internal::StoreContextServer::GetOfflineLicenses
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForPackage
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForStoreId
Windows::Services::Store::Internal::StoreContextServer::GetProduct
Windows::Services::Store::Internal::StoreContextServer::GetProductForPackage
Windows::Services::Store::Internal::StoreContextServer::GetProducts
Windows::Services::Store::Internal::StoreContextServer::GetProductsByKinds
Windows::Services::Store::Internal::StoreContextServer::GetProductsWithOptions
Windows::Services::Store::Internal::StoreContextServer::GetUserCollection
Windows::Services::Store::Internal::StoreContextServer::Initialize
Windows::Services::Store::Internal::StoreContextServer::IsStoreProductInstalled
Windows::Services::Store::Internal::StoreContextServer::ReleaseStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequest
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequestWithUris
Windows::Services::Store::Internal::StoreContextServer::SetInstallOrderForAssociatedStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::UninstallStorePackage
Windows::Services::Store::Internal::StoreContextServer::UserConsentedToUninstall
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::AddOptionalPackageToWatch
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::Initialize
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::OnEventCallback
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::RemoveOptionalPackageToWatch
Windows::Services::Store::JsonParser::ParseArrayOfOne
Windows::Services::Store::JsonParser::ParseArrayToVector
Windows::Services::Store::JsonParser::ParseArrayToVectorOfHSTRING
Windows::Services::Store::JsonParser::ParseBoolean
Windows::Services::Store::JsonParser::ParseComPtr
Windows::Services::Store::JsonParser::ParseDate
Windows::Services::Store::JsonParser::ParseDouble
Windows::Services::Store::JsonParser::ParseInteger
Windows::Services::Store::JsonParser::ParseJSONStringToObject
Windows::Services::Store::JsonParser::ParseJSONToObject
Windows::Services::Store::JsonParser::ParseString
Windows::Services::Store::JsonParser::ParseTimeSpan
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonRequest
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::put_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::RuntimeClassInitialize
Windows::Services::Store::PurchaseEventArgsRedstone::SetSize
Windows::Services::Store::PurchaseOperation::_BuildModalExperienceOptions
Windows::Services::Store::PurchaseOperation::_FillTheRequestWithRequiredParameters
Windows::Services::Store::PurchaseOperation::_FirePurchaseTelemetry
Windows::Services::Store::PurchaseOperation::_OnModalExperienceEvent
Windows::Services::Store::PurchaseOperation::_Purchase
Windows::Services::Store::PurchaseOperation::DoWork
Windows::Services::Store::PurchaseOperation::GetResults
Windows::Services::Store::PurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::ReportConsumableOperation::DoWork
Windows::Services::Store::ReportConsumableOperation::GetResults
Windows::Services::Store::ReportConsumableOperation::RuntimeClassInitialize
Windows::Services::Store::RequestPurchaseOperation::DoWork
Windows::Services::Store::RequestPurchaseOperation::GetResults
Windows::Services::Store::RequestPurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::RequestStoreRateAndReviewOperation::DoWork
Windows::Services::Store::RequestStoreRateAndReviewOperation::GetResults
Windows::Services::Store::RequestStoreRateAndReviewOperation::RuntimeClassInitialize
Windows::Services::Store::StoreAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreAcquireLicenseResult::get_StorePackageLicense
Windows::Services::Store::StoreAppLicense::get_AddOnLicenses
Windows::Services::Store::StoreAppLicense::get_ExpirationDate
Windows::Services::Store::StoreAppLicense::get_IsActive
Windows::Services::Store::StoreAppLicense::get_IsDiscLicense
Windows::Services::Store::StoreAppLicense::get_IsTrial
Windows::Services::Store::StoreAppLicense::get_IsTrialOwnedByThisUser
Windows::Services::Store::StoreAppLicense::get_SkuStoreId
Windows::Services::Store::StoreAppLicense::get_TrialTimeRemaining
Windows::Services::Store::StoreAppLicense::get_TrialUniqueId
Windows::Services::Store::StoreAppLicense::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::get_AvailabilityId
Windows::Services::Store::StoreAvailability::get_EndDate
Windows::Services::Store::StoreAvailability::get_Price
Windows::Services::Store::StoreAvailability::get_StoreId
Windows::Services::Store::StoreAvailability::RequestPurchaseAsync
Windows::Services::Store::StoreAvailability::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreAvailability::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::set_ProductIdSkuId
Windows::Services::Store::StoreCanAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreCanAcquireLicenseResult::get_LicensableSku
Windows::Services::Store::StoreCanAcquireLicenseResult::get_Status
Windows::Services::Store::StoreCanAcquireLicenseResult::RuntimeClassInitialize
Windows::Services::Store::StoreCollectionData::get_AcquiredDate
Windows::Services::Store::StoreCollectionData::get_CampaignId
Windows::Services::Store::StoreCollectionData::get_DeveloperOfferId
Windows::Services::Store::StoreCollectionData::get_EndDate
Windows::Services::Store::StoreCollectionData::get_IsTrial
Windows::Services::Store::StoreCollectionData::get_ProductId
Windows::Services::Store::StoreCollectionData::get_SkuId
Windows::Services::Store::StoreCollectionData::get_StartDate
Windows::Services::Store::StoreCollectionData::get_TrialTimeRemaining
Windows::Services::Store::StoreCollectionData::RuntimeClassInitialize
Windows::Services::Store::StoreConsumableResult::get_BalanceRemaining
Windows::Services::Store::StoreConsumableResult::get_ExtendedError
Windows::Services::Store::StoreConsumableResult::get_Status
Windows::Services::Store::StoreConsumableResult::get_TrackingId
Windows::Services::Store::StoreContext::_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::AssociateWithStoreContext
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CreateStoreContextServer
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_User
Windows::Services::Store::StoreContext::get_User() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppLicenseAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppWindowHandle
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetPackageFamilyNameFromPackage
Windows::Services::Store::StoreContext::GetStoreContextServer
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync([%s, %s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionAsync
Windows::Services::Store::StoreContext::GetUserCollectionAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged(%llu) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync(%s, %u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseAsync
Windows::Services::Store::StoreContext::RequestPurchaseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RuntimeClassInitialize
Windows::Services::Store::StoreContext::SendStoreRequestAsync
Windows::Services::Store::StoreContext::SendStoreRequestAsync(%u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsyncHelper
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetDefault
Windows::Services::Store::StoreContextFactory::GetDefault() invoked. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetForUser
Windows::Services::Store::StoreContextFactory::GetForUser() invoked. (CV:%hs)
Windows::Services::Store::StoreImage::get_Caption
Windows::Services::Store::StoreImage::get_Height
Windows::Services::Store::StoreImage::get_ImagePurposeTag
Windows::Services::Store::StoreImage::get_Uri
Windows::Services::Store::StoreImage::get_Width
Windows::Services::Store::StoreImage::RuntimeClassInitialize
Windows::Services::Store::StoreLicense::get_ExpirationDate
Windows::Services::Store::StoreLicense::get_InAppOfferToken
Windows::Services::Store::StoreLicense::get_IsActive
Windows::Services::Store::StoreLicense::get_SkuStoreId
Windows::Services::Store::StoreLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageInstallOptions::get_AllowForcedAppRestart
Windows::Services::Store::StorePackageLicense::~StorePackageLicense
Windows::Services::Store::StorePackageLicense::add_LicenseLost
Windows::Services::Store::StorePackageLicense::Close
Windows::Services::Store::StorePackageLicense::get_IsValid
Windows::Services::Store::StorePackageLicense::get_Package
Windows::Services::Store::StorePackageLicense::ReleaseLicense
Windows::Services::Store::StorePackageLicense::remove_LicenseLost
Windows::Services::Store::StorePackageLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageLicenseLostCallback::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdate::get_Mandatory
Windows::Services::Store::StorePackageUpdate::get_Package
Windows::Services::Store::StorePackageUpdate::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdateResult::get_OverallState
Windows::Services::Store::StorePackageUpdateResult::get_StorePackageUpdateStatuses
Windows::Services::Store::StorePackageUpdateResult::get_StoreQueueItems
Windows::Services::Store::StorePackageUpdateResult::RuntimeClassInitialize
Windows::Services::Store::StorePrice::get_CurrencyCode
Windows::Services::Store::StorePrice::get_FormattedBasePrice
Windows::Services::Store::StorePrice::get_FormattedPrice
Windows::Services::Store::StorePrice::get_FormattedRecurrencePrice
Windows::Services::Store::StorePrice::get_IsOnSale
Windows::Services::Store::StorePrice::get_SaleEndDate
Windows::Services::Store::StorePrice::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::_SortSkus
Windows::Services::Store::StoreProduct::get_Description
Windows::Services::Store::StoreProduct::get_HasDigitalDownload
Windows::Services::Store::StoreProduct::get_Images
Windows::Services::Store::StoreProduct::get_InAppOfferToken
Windows::Services::Store::StoreProduct::get_IsInUserCollection
Windows::Services::Store::StoreProduct::get_Keywords
Windows::Services::Store::StoreProduct::get_Language
Windows::Services::Store::StoreProduct::get_LinkUri
Windows::Services::Store::StoreProduct::get_PackageFamilyName
Windows::Services::Store::StoreProduct::get_Price
Windows::Services::Store::StoreProduct::get_ProductKind
Windows::Services::Store::StoreProduct::get_Skus
Windows::Services::Store::StoreProduct::get_StoreId
Windows::Services::Store::StoreProduct::get_Title
Windows::Services::Store::StoreProduct::get_Videos
Windows::Services::Store::StoreProduct::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreProduct::RequestPurchaseAsync
Windows::Services::Store::StoreProduct::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreProduct::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::SetStoreContext
Windows::Services::Store::StoreProductOptions::RuntimeClassInitialize
Windows::Services::Store::StoreProductPagedQueryResult::BuildMap
Windows::Services::Store::StoreProductPagedQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductPagedQueryResult::get_HasMoreResults
Windows::Services::Store::StoreProductPagedQueryResult::get_Products
Windows::Services::Store::StoreProductPagedQueryResult::GetNextAsync
Windows::Services::Store::StoreProductPagedQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductQueryResult::get_Products
Windows::Services::Store::StoreProductQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductResult::get_ExtendedError
Windows::Services::Store::StoreProductResult::get_Product
Windows::Services::Store::StorePurchaseProperties::get_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::get_Name
Windows::Services::Store::StorePurchaseProperties::put_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::put_Name
Windows::Services::Store::StorePurchaseProperties::RuntimeClassInitialize
Windows::Services::Store::StorePurchasePropertiesFactory::ActivateInstance
Windows::Services::Store::StorePurchasePropertiesFactory::Create
Windows::Services::Store::StorePurchaseResult::get_ExtendedError
Windows::Services::Store::StorePurchaseResult::get_Status
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemCompleted
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemStatusChanged
Windows::Services::Store::StoreQueueItem::add_Completed
Windows::Services::Store::StoreQueueItem::add_StatusChanged
Windows::Services::Store::StoreQueueItem::CancelInstallAsync
Windows::Services::Store::StoreQueueItem::CancelInstallAsync::<lambda_e04d39271efd0ff51362e390029ea2be>::operator ()
Windows::Services::Store::StoreQueueItem::get_InstallKind
Windows::Services::Store::StoreQueueItem::get_IsDownloaded
Windows::Services::Store::StoreQueueItem::get_IsMandatory
Windows::Services::Store::StoreQueueItem::get_PackageFamilyName
Windows::Services::Store::StoreQueueItem::get_ProductId
Windows::Services::Store::StoreQueueItem::GetCurrentStatus
Windows::Services::Store::StoreQueueItem::PauseInstallAsync
Windows::Services::Store::StoreQueueItem::PauseInstallAsync::<lambda_74674ccfc30bb022cdd79df653d359aa>::operator ()
Windows::Services::Store::StoreQueueItem::remove_Completed
Windows::Services::Store::StoreQueueItem::remove_StatusChanged
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync::<lambda_bcd701e7470b94758bd89ff50bb69c95>::operator ()
Windows::Services::Store::StoreQueueItem::RuntimeClassInitialize
Windows::Services::Store::StoreQueueItemCompletedEventArgs::get_Status
Windows::Services::Store::StoreQueueItemStatus::get_ExtendedError
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallExtendedState
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallState
Windows::Services::Store::StoreQueueItemStatus::get_UpdateStatus
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedError
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedJsonData
Windows::Services::Store::StoreRateAndReviewResult::get_Status
Windows::Services::Store::StoreRateAndReviewResult::get_WasUpdated
Windows::Services::Store::StoreRateAndReviewResult::RuntimeClassInitialize
Windows::Services::Store::StoreRequestHelperFactory::SendRequestAsync
Windows::Services::Store::StoreRequestOperation::DoWork
Windows::Services::Store::StoreRequestOperation::GetResults
Windows::Services::Store::StoreRequestOperation::RuntimeClassInitialize
Windows::Services::Store::StoreSendRequestResult::get_ExtendedError
Windows::Services::Store::StoreSendRequestResult::get_HttpStatusCode
Windows::Services::Store::StoreSendRequestResult::get_Response
Windows::Services::Store::StoreSendRequestResult::RuntimeClassInitialize
Windows::Services::Store::StoreSku::_SortAvailabilities
Windows::Services::Store::StoreSku::get_Availabilities
Windows::Services::Store::StoreSku::get_BundledSkus
Windows::Services::Store::StoreSku::get_CollectionData
Windows::Services::Store::StoreSku::get_CustomDeveloperData
Windows::Services::Store::StoreSku::get_Description
Windows::Services::Store::StoreSku::get_FulfillmentType
Windows::Services::Store::StoreSku::get_Images
Windows::Services::Store::StoreSku::get_IsInUserCollection
Windows::Services::Store::StoreSku::get_IsSubscription
Windows::Services::Store::StoreSku::get_IsTrial
Windows::Services::Store::StoreSku::get_Language
Windows::Services::Store::StoreSku::get_Price
Windows::Services::Store::StoreSku::get_SkuId
Windows::Services::Store::StoreSku::get_StoreId
Windows::Services::Store::StoreSku::get_SubscriptionInfo
Windows::Services::Store::StoreSku::get_Title
Windows::Services::Store::StoreSku::get_Videos
Windows::Services::Store::StoreSku::GetIsInstalledAsync
Windows::Services::Store::StoreSku::RequestPurchaseAsync
Windows::Services::Store::StoreSku::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreSku::RuntimeClassInitialize
Windows::Services::Store::StoreSku::set_ProductId
Windows::Services::Store::StoreSku::SetStoreContext
Windows::Services::Store::StoreSubscriptionInfo::_ConvertDuration
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::get_HasTrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::RuntimeClassInitialize
Windows::Services::Store::StoreUninstallStorePackageResult::get_ExtendedError
Windows::Services::Store::StoreUninstallStorePackageResult::get_Status
Windows::Services::Store::StoreVideo::get_Caption
Windows::Services::Store::StoreVideo::get_Height
Windows::Services::Store::StoreVideo::get_PreviewImage
Windows::Services::Store::StoreVideo::get_Uri
Windows::Services::Store::StoreVideo::get_VideoPurposeTag
Windows::Services::Store::StoreVideo::get_Width
Windows::Services::Store::StoreVideo::RuntimeClassInitialize
Windows::Services::Store::UninstallStorePackageOperation::DoWork
Windows::Services::Store::UninstallStorePackageOperation::GetResults
Windows::Services::Store::UninstallStorePackageOperation::RuntimeClassInitialize
Windows-ApplicationModel-Store-SDK
WindowsCompareStringOrdinal
WindowsConcatString
WindowsCreateString
WindowsCreateStringReference
WindowsDeleteString
WindowsDeleteStringBuffer
WindowsDuplicateString
WindowsGetStringLen
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsPreallocateStringBuffer
WindowsPromoteStringBuffer
WindowsStoreSDK
WindowsStringHasEmbeddedNull
WindowsSubstring
WindowsSubstringWithSpecifiedLength
WindowsTrimStringEnd
WindowsTrimStringStart
WindowsUpdate
windowTitle
WINHTTP.dll
WinHttpAddRequestHeaders
WinHttpAddRequestHeaders(%s) failed
WinHttpCloseHandle
WinHttpConnect
WinHttpConnect failed for %s:%d
WinHttpCrackUrl
WinHttpCrackUrl failed
WinHttpGetDefaultProxyConfiguration
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpOpen
WinHttpOpen failed
WinHttpOpenRequest
WinHttpOpenRequest failed
WinHttpQueryHeaders
WinHttpQueryHeaders failed, status code = %i
WinHttpReadData
WinHttpReadData completion failed
WinHttpReadData failed
WinHttpReceiveResponse
WinHttpReceiveResponse failed
WinHttpSendRequest
WinHttpSetOption
WinHttpSetOption CONTEXT_VALUE failed
WinHttpSetOption failed
WinHttpSetOption WINHTTP_OPTION_REDIRECT_POLICY failed
WinHttpSetOption(WINHTTP_ENABLE_SSL_REVOCATION failed
WinHttpSetOption(WINHTTP_OPTION_AUTOLOGON_POLICY) failed
WinHttpSetStatusCallback
WinHttpSetStatusCallback failed
WinHttpSetTimeouts
WinHttpSetTimeouts failed
WinStore
winstore
WinStoreAuth::_SendTokenRequestAndGetTickets
WinStoreAuth::AuthenticationInternal::CaptureGoldenAccountTicket
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountTicket
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromAppToRealIdInternal
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromRealIdToAppInternal
WinStoreAuth::AuthenticationInternal::CreateAuthenticationManager
WinStoreAuth::AuthenticationInternal::CreateGoldenAccountTokenRequest
WinStoreAuth::AuthenticationInternal::CreateLegacyTicketRequest
WinStoreAuth::AuthenticationInternal::CreateTokenBroker
WinStoreAuth::AuthenticationInternal::CreateTokenBrokerInternal
WinStoreAuth::AuthenticationInternal::CreateTokenRequestHelper
WinStoreAuth::AuthenticationInternal::ExtractAccountId
WinStoreAuth::AuthenticationInternal::ExtractProviderType
WinStoreAuth::AuthenticationInternal::ExtractTicket
WinStoreAuth::AuthenticationInternal::ExtractTicketFromTokenResponse
WinStoreAuth::AuthenticationInternal::ExtractTicketsFromTokenResult
WinStoreAuth::AuthenticationInternal::FetchStoreAccountIdFromRegistry
WinStoreAuth::AuthenticationInternal::FetchXboxLiveAccountId
WinStoreAuth::AuthenticationInternal::FindAccount
WinStoreAuth::AuthenticationInternal::FindCachedStorePrimaryAccount
WinStoreAuth::AuthenticationInternal::GetAccountProvider
WinStoreAuth::AuthenticationInternal::GetAllAccountTickets
WinStoreAuth::AuthenticationInternal::GetAllTokenBrokerAccounts
WinStoreAuth::AuthenticationInternal::GetAllXTokens
WinStoreAuth::AuthenticationInternal::GetCurrentIUser
WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicketForUri
WinStoreAuth::AuthenticationInternal::GetTicketForAccount
WinStoreAuth::AuthenticationInternal::GetXToken
WinStoreAuth::AuthenticationInternal::ManagePropertiesFromTokenResponse
WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar
WinStoreAuth::ConvertWebAccountIdFromAppToRealIdForUser
WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser
WinStoreAuth::GetStorePrimaryAccountIdForUser
WinStoreAuth::SetProxyBlanket
WinstoreAuth_SendTokenRequestAndGetTickets_Failure
WinstoreAuth_SLSFailure
WinstoreAuth_UserAuthRequired
WLID1.0=
wp8xappx
WriteFile
WSCollector::CollectStoreLog
WsCreateError
WsCreateHeap
WsCreateReader
WSErrorUtils::ConvertInternalErrorCodeToExternal
WsFindAttribute
WsFreeError
WsFreeHeap
WsFreeReader
WsGetReaderPosition
WsMoveReader
WsReadBytes
WsReadChars
WsReadEndAttribute
WsReadStartAttribute
WsReadStartElement
WsReadToStartElement
WsReadXmlBufferFromBytes
WsSetInputToBuffer
WThz[|
www.microsoft.com
WZ-_$`
x ATAUAVH
x ATAVAWH
x AUAVAWH
x AUAVI
x AV3
x AVH
x AWH
x UATAUAVAWH
x UAVAWH
X:XLz
x;HcE
x^D9}@|GH
x^D9u8|GH
X~{TR
x=(%b 
x=D9e
x1;|$P|
x1D9e
x1D9m
xA_A^_^[]
XA_A^_^[]
xA_A^A]A\_^][
XboxLiveAuthenticationDomain
XboxUserId
xD8\$0u
xdD8t$pu
xfd%s
xFD9}pv@H
xfD9u0u
xG8\$0u
xH8\$0u
xJ}u"H
xJ}u#H
xkB7p
xKD8d$qtDH
xPD8d$ptIH
Xtoken
xW8\$0u
X-Windows-Store-Debugging-Id
X-Windows-Store-Debugging-Id:%s
X-WP-ANID
x-xbl-contract-version:2
xyD8m@t
xyD9u0u
y0;D$`
Y7#f>
YjsCq2
Ylp)d_
z.9Wv
zs*^1:
zWindows::Services::Store::StoreContextLicenseChangedCallback::RuntimeClassInitialize
ZyAC%Z
