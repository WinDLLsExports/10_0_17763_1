-------               OurIsr %x
------  registers wrap around physical memory
------  status wraps around physical memory
------- %x/%x <- values should be the same
 A^_^
 A_A^_
 A_A^A\
 A_A^A]A\_
------- address of extension is %x
------- AddressSpace is %d
------- already in the device list
------- and system buffer is %x
------- BusNumber is %d
------- BusType is %d
------- completion code for %x
------- CurrentWaitIrp: %x
 for port %wZ
------- for port %wZ
------- Interrupt Mode is %d
------- Interrupt Status is %x
------- Interrupt status overlaps regular registers
------- invocation of startmask
------- IsrWaitMask: %x
 Microsoft Corporation. All rights reserved.
 Operating System
------- PortAddress is %x
------- previous serial device
------- previous serial device registers
------- previous serial status register
------- register address overlaps with
------- Register address overlaps with
------- Same multiport - different interrupts
------- status address overlaps with
 v+Rich
 Windows
!This program cannot be run in DOS mode.
$?tO<
$`<`t
$`<`u
%x irp was already marked as cancelled
%x occurred prior to the wait - starting the
%x was the first irp processed by this
%x will become the current wait irp
(t$0H
*PNP0501
*PNP0502
.00cfg
.data
.data$brc
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.text
.text$mn
.text$mn$00
.text$mn$21
.xdata
@A^_^
@USVWATAUAVAWH
\$ UVWATAUAVAWH
\Device\Serial
__C_specific_handler
`INIT
`PAGESER
|$ UATAUAVAWH
+D$,;
>SerialAddToMulti(%X)
>SerialCommError(%X)
>SerialCompleteImmediate(%X)
>SerialCompleteRead(%X)
>SerialCompleteWait(%X)
>SerialCompleteWrite(%X)
>SerialCompleteXoff(%X)
>SerialDisableInterfaces(%X, %s)
>SerialFindInitController(%X, %X)
>SerialFlush(%X, %X)
>SerialInitMultiPort(%X, %X, %X)
>SerialIntervalReadTimeout(%X)
>SerialKillPendingIrps(%X)
>SerialRead(%X, %X)
>SerialReadTimeout(%X)
>SerialReleaseResources(%X)
>SerialRemoveDevObj(%X)
>SerialSingleToMulti(%X)
>SerialStartImmediate(%X)
>SerialStartRead(%X)
>SerialStartTimerLowerRTS(%X)
>SerialStartWrite(%X)
>SerialTimeoutImmediate(%X)
>SerialTimeoutXoff(%X)
>SerialUnstallIrps(%X)
>SerialWrite(%X, %X)
>SerialWriteTimeout(%X)
040904B0
0A^_^
0A_A^_
0A_A^_^]
0A_A^A]A\_^]
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
3D$$A
9|$prXH
9Chu'L
9Clu2
A_A^A\_]
A_A^A]A\]
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
About to connect to interrupt for port %wZ
Another driver on the system, which did not report its resources, has already claimed the interrupt used by %2.
Attempting to init %wZ
B.reloc
B.rsrc
Becoming sharer: %08X %08X %08X
bGFIDS
BreakOnEntry
Canceling wait for irp %x
Clearing DTR for %x
Clearing rts block of reception for %x
Clearing Rts for %x
ClockRate
Close open count bad for: 0x%x
Close prologue failed for: %x
CompanyName
Comparing it to %wZ
Complete Irp: %X
Completing wait for irp %x
COMX@
COMXA
COMXH
COMXM
Configuration error for %wZ
Connected interrupt %08X
Could not get the user reported interrupt for %2 from the HAL.
Could not map memory for device registers for %wZ
Could not map memory for interrupt status for %wZ
Could not report device %2 to IO subsystem due to a resource conflict.
Could not report the discovered legacy device %2 to the IO subsystem.
Could not translate the user reported I/O port for %2.
Could not translate the user reported Interrupt Status Register for %2.
Couldn't connect to interrupt for %wZ
Couldn't create the device map entry
Couldn't create the symbolic link
Couldn't delete value entry %wZ
Couldn't register class association
Couldn't set class association
Count: %x  Addr: 0x%x
D$ E3
d$ E3
D8Ewt
D8iDtW
D8k4u
D8kLt
D9C`uJ
D9k4u
D9mHL
D9t$p
DebugLevel
Deleting Link %wZ
disabled port %wZ as requested in configuration
DisablePort
Disabling %2 as requested by the configuration data.
Dispatch entry for: %x
DoesPortExist test failed for %wZ
DosDevices
DosName is %wZ
DPC's drained: %x
Draining DPC's: %x
E8gDt
EnablePowerManagement
Enter SerialAddDevice with PPdo 0x%x
en-US
Error in config record for %wZ
Error writing to the registry.
ExAcquireFastMutex
ExAllocatePoolWithQuotaTag
ExAllocatePoolWithTag
ExFreePoolWithTag
ExReleaseFastMutex
extension: %x of port %wZ
FALSE
fD9,Bu
fD9lE
ffffff
fffffff
Fifo's detected at port address: %x
FileDescription
FileVersion
for device %x
for port %wZ
ForceFifoEnable
Globally sharing interrupt for device %x
H D9`
H.data
H.idata
h.rdata
H;C`|
H96u,H
HAL.dll
HPAGESRP0
I!B H
Identifier
In SerialUndoExternalNaming for
Indexed
Initializing for configuration record of %wZ
InternalName
Interrupt
Interrupt           %x
InterruptMode       %x
InterruptShareable  %x
IoAcquireCancelSpinLock
IoAllocateErrorLogEntry
IoAttachDeviceToDeviceStack
IoCancelIrp
IoConnectInterrupt
IoConnectInterrupt Args:
IoCreateDevice
IoCreateSymbolicLink
IoDeleteDevice
IoDeleteSymbolicLink
IoDetachDevice
IoDisconnectInterrupt
IofCallDriver
IofCompleteRequest
IoGetConfigurationInformation
IoInvalidateDeviceState
IoOpenDeviceRegistryKey
IoQueryDeviceDescription
IoRegisterDeviceInterface
IoReleaseCancelSpinLock
IoSetDeviceInterfaceState
IoWMIRegistrationControl
IoWriteErrorLogEntry
Irql                %x
KdComPortInUse
KeAcquireSpinLockRaiseToDpc
KeCancelTimer
KeClearEvent
KeDelayExecutionThread
KeInitializeDpc
KeInitializeEvent
KeInitializeSpinLock
KeInitializeTimer
KeInsertQueueDpc
KeLowerIrql
KeReleaseSpinLock
KeRemoveQueueDpc
Kernel debugger is using port at address %X
KeSetEvent
KeSetTimer
KeSynchronizeExecution
KeWaitForSingleObject
KfRaiseIrql
L$ E3
L$ UVWATAUAVAWH
L$$A#
l$(E3
L$`H3
L$0A9
L$0A9M
L$0E3
L$8H9
L9g8u
LegalCopyright
LogFifo
MaskInverted
Matched to %x
Microsoft
Microsoft Corporation
MmGetPhysicalAddress
MmGetSystemRoutineAddress
MmLockPagableDataSection
MmLockPagableSectionByHandle
MmMapIoSpaceEx
MmQuerySystemSize
MmUnlockPagableImageSection
MmUnmapIoSpace
MultiportDevice
N`I;Nx|
No memory could be allocated in which to place new data for %2.
No Parameters subkey was found for user defined data.  This is odd, and it also means no user configuration can be found.
Not enough resources were available for the driver.
ntoskrnl.exe
oD9k8
old ext %X
On parameter %2 which indicates a multiport card, must have a port index specified greater than 0.
On parameter %2 which indicates a multiport card, the port index for the multiport card is too large.
OriginalFilename
OurIsr              %x
OurIsrContext       %x
pA_A^_^]
pA_A^A]A\_^]
PAGESER
PAGESRP0
Parameter %2 data is unretrievable from the registry.
PDevExt: %x
pDevExt: Interrupt %x
Perhaps another mask irp was found in the queue
PermitShare
PoCallDriver
PoRequestPowerIrp
PortAddress
PortIndex
PortName
PoSetPowerState
PoStartNextPowerIrp
Processing DTR flow for %x
Processing RTS flow
ProcessorAffinity   %x
ProductName
ProductVersion
Read name %wZ
Release - disconnecting interrupt %X
removing dtr block of reception for %x
Removing dtr block of reception for %x
Removing DTR block on reception for %x
Removing rts block of reception for %x
resource pointer is %x
RtlAppendUnicodeStringToString
RtlAppendUnicodeToString
RtlDeleteRegistryValue
RtlInitUnicodeString
RtlIntegerToUnicodeString
RtlIsStateSeparationEnabled
RtlQueryRegistryValues
RtlQueryRegistryValuesEx
RtlWriteRegistryValue
RxFIFO
SERIAL - %x is a SETMASK irp
Serial Device Driver
serial.pdb
serial.sys
SERIALCOMM
SerialIoResourcesIndex
SerialRelinquishPowerPolicy
SerialSkipExternalNaming
Set mask location of %x, in irp %x, with system buffer of %x
SetPowerD0 has IRP %x
Setting DTR block on reception for %x
Setting DTR for %x
Setting rts block of reception for %x
Setting Rts for %x
Share System Interrupt
Sharing I/O port for device %x
Sharing interrupt for device %x
Some firmware configuration information was incomplete.
Specific user configuration data is unretrievable.
Starting or queuing set mask irp %x
Starting or queuing wait mask irp%x
STARTMASK - CurrentMaskIrp: %x
StringFileInfo
SVWATAUAVAWH
t$ UWATAVAWH
t$ WH
T$(E3
t$H9A
t2H9Q
ta;T$(
The baud clock rate configuration is not supported on device %2.
The bus specified for %2 does not support the specified method of interrupt.
The bus type for %2 is not available on this computer.
The bus type for %2 is not recognizable.
The control registers for %2 overlaps the %3 status register.
The control registers for %2 overlaps with the %3 control registers.
The device is assumed not to be a serial port and will be deleted.
The hardware locations for %2 could not be translated to something the memory management system could understand.
The hardware resources for %2 are already in use by another device.
The isr owns the irp %x, mask location is %x
The isr still owns the irp %x, mask location is %x
The kernel debugger is already using %2.
The serial driver detected a hardware failure on device %2 and will disable this device.
The status port for %2 is way too high in physical memory.
The status port for %2 overlaps the control registers for the device.
The status register for %2 overlaps the %3 control registers.
The status register for %2 overlaps with the %3 status register.
The user specified port for %2 is way too high in physical memory.
There is a serial mouse using the same interrupt as %2.  Therefore, %2 will not be started.
There was a serial mouse found on %2.  Therefore, %2 will be assigned to the mouse.
TL16C550C Auto Flow Control
TOGGLE Clearing rts block of reception for %x
TR resource pointer is %x
Translation
Two ports, %2 and %3, on a single multiport card can't have two different interrupts.
TxFIFO
tY;L$(
UartRemovalDetect
UATAUAVAWH
Unable to create the device map entry for %2.
Unable to create the symbolic link for %2.
Unable to delete the device map entry for %2.
Unstalling Irp 0x%x with 0x%x
User configuration data for parameter %2 overriding firmware configuration data.
User configuration for parameter %2 must have %3.
UVWATAUAVAWH
UVWAVAWH
VarFileInfo
Vector              %x
VS_VERSION_INFO
VWAVH
WaitIrp is invalid
WATAUAVAWH
WAVAWH
While validating that %2 was really a serial port, a fifo was detected. The fifo will be used.
While validating that %2 was really a serial port, the baud rate register could not be set consistantly.
While validating that %2 was really a serial port, the contents of the divisor latch register was identical to the interrupt enable and the receive registers.
While validating that %2 was really a serial port, the interrupt enable register contained enabled bits in a must be zero bitfield.
While validating that %2 was really a serial port, the interrupt id register contained enabled bits in a must be zero bitfield.
While validating that %2 was really a serial port, the modem control register contained enabled bits in a must be zero bitfield.
WmiCompleteRequest
WMILIB.SYS
WmiSystemControl
x ATAVAWH
x AVH
XA_A^A]A\_^[]
ZwClose
ZwQueryValueKey
