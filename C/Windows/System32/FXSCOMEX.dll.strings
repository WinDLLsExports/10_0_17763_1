                val ThreadingModel = s 'Apartment'
            {
            }
            ForceRemove 'Programmable'
            InprocServer32 = s '%MODULE%'
            ProgID = s 'FaxComEx.FaxAccount.1'
            ProgID = s 'FaxComEx.FaxAccountFolders.1'
            ProgID = s 'FaxComEx.FaxAccountIncomingArchive.1'
            ProgID = s 'FaxComEx.FaxAccountIncomingQueue.1'
            ProgID = s 'FaxComEx.FaxAccountOutgoingArchive.1'
            ProgID = s 'FaxComEx.FaxAccountOutgoingQueue.1'
            ProgID = s 'FaxComEx.FaxAccounts.1'
            ProgID = s 'FaxComEx.FaxAccountSet.1'
            ProgID = s 'FaxComEx.FaxConfiguration.1'
            ProgID = s 'FaxComEx.FaxSecurity2.1'
            'TypeLib' = s '{2BF34C1A-8CAC-419F-8547-32FDF6505DB8}'
            VersionIndependentProgID = s 'FaxComEx.FaxAccount'
            VersionIndependentProgID = s 'FaxComEx.FaxAccountFolders'
            VersionIndependentProgID = s 'FaxComEx.FaxAccountIncomingArchive'
            VersionIndependentProgID = s 'FaxComEx.FaxAccountIncomingQueue'
            VersionIndependentProgID = s 'FaxComEx.FaxAccountOutgoingArchive'
            VersionIndependentProgID = s 'FaxComEx.FaxAccountOutgoingQueue'
            VersionIndependentProgID = s 'FaxComEx.FaxAccounts'
            VersionIndependentProgID = s 'FaxComEx.FaxAccountSet'
            VersionIndependentProgID = s 'FaxComEx.FaxConfiguration'
            VersionIndependentProgID = s 'FaxComEx.FaxSecurity2'
        {
        }
        CLSID = s '{14B33DB5-4C40-4ECF-9EF8-A360CBE809ED}'
        CLSID = s '{5857326F-E7B3-41A7-9C19-A91B463E2D56}'
        CLSID = s '{735C1248-EC89-4C30-A127-656E92E3C4EA}'
        CLSID = s '{851E7AF5-433A-4739-A2DF-AD245C2CB98E}'
        CLSID = s '{85398F49-C034-4A3F-821C-DB7D685E8129}'
        CLSID = s '{9BCF6094-B4DA-45F4-B8D6-DDEB2186652C}'
        CLSID = s '{A7E0647F-4524-4464-A56D-B9FE666F715E}'
        CLSID = s '{DA1F94AA-EE2C-47C0-8F4F-2A217075B76E}'
        CLSID = s '{FBC23C4B-79E0-4291-BC56-C12E253BBF3A}'
        CLSID = s '{FEECEEFB-C149-48BA-BAB8-B791E101F62F}'
        CurVer = s 'FaxComEx.FaxAccount.1'
        CurVer = s 'FaxComEx.FaxAccountFolders.1'
        CurVer = s 'FaxComEx.FaxAccountIncomingArchive.1'
        CurVer = s 'FaxComEx.FaxAccountIncomingQueue.1'
        CurVer = s 'FaxComEx.FaxAccountOutgoingArchive.1'
        CurVer = s 'FaxComEx.FaxAccountOutgoingQueue.1'
        CurVer = s 'FaxComEx.FaxAccounts.1'
        CurVer = s 'FaxComEx.FaxAccountSet.1'
        CurVer = s 'FaxComEx.FaxConfiguration.1'
        CurVer = s 'FaxComEx.FaxSecurity2.1'
        ForceRemove {14B33DB5-4C40-4ECF-9EF8-A360CBE809ED} = s 'FaxAccountIncomingArchive Class'
        ForceRemove {5857326F-E7B3-41A7-9C19-A91B463E2D56} = s 'FaxConfiguration Class'
        ForceRemove {735C1248-EC89-4C30-A127-656E92E3C4EA} = s 'FaxSecurity2 Class'
        ForceRemove {851E7AF5-433A-4739-A2DF-AD245C2CB98E} = s 'FaxAccountOutgoingArchive Class'
        ForceRemove {85398F49-C034-4A3F-821C-DB7D685E8129} = s 'FaxAccountFolders Class'
        ForceRemove {9BCF6094-B4DA-45F4-B8D6-DDEB2186652C} = s 'FaxAccountIncomingQueue Class'
        ForceRemove {A7E0647F-4524-4464-A56D-B9FE666F715E} = s 'FaxAccount Class'
        ForceRemove {DA1F94AA-EE2C-47C0-8F4F-2A217075B76E} = s 'FaxAccounts Class'
        ForceRemove {FBC23C4B-79E0-4291-BC56-C12E253BBF3A} = s 'FaxAccountSet Class'
        ForceRemove {FEECEEFB-C149-48BA-BAB8-B791E101F62F} = s 'FaxAccountOutgoingQueue Class'
    {
    }
    FaxComEx.FaxAccount = s 'FaxAccount Class'
    FaxComEx.FaxAccount.1 = s 'FaxAccount Class'
    FaxComEx.FaxAccountFolders = s 'FaxAccountFolders Class'
    FaxComEx.FaxAccountFolders.1 = s 'FaxAccountFolders Class'
    FaxComEx.FaxAccountIncomingArchive = s 'FaxAccountIncomingArchive Class'
    FaxComEx.FaxAccountIncomingArchive.1 = s 'FaxAccountIncomingArchive Class'
    FaxComEx.FaxAccountIncomingQueue = s 'FaxAccountIncomingQueue Class'
    FaxComEx.FaxAccountIncomingQueue.1 = s 'FaxAccountIncomingQueue Class'
    FaxComEx.FaxAccountOutgoingArchive = s 'FaxAccountOutgoingArchive Class'
    FaxComEx.FaxAccountOutgoingArchive.1 = s 'FaxAccountOutgoingArchive Class'
    FaxComEx.FaxAccountOutgoingQueue = s 'FaxAccountOutgoingQueue Class'
    FaxComEx.FaxAccountOutgoingQueue.1 = s 'FaxAccountOutgoingQueue Class'
    FaxComEx.FaxAccounts = s 'FaxAccounts Class'
    FaxComEx.FaxAccounts.1 = s 'FaxAccounts Class'
    FaxComEx.FaxAccountSet = s 'FaxAccountSet Class'
    FaxComEx.FaxAccountSet.1 = s 'FaxAccountSet Class'
    FaxComEx.FaxConfiguration = s 'FaxConfiguration Class'
    FaxComEx.FaxConfiguration.1 = s 'FaxConfiguration Class'
    FaxComEx.FaxSecurity2 = s 'FaxSecurity2 Class'
    FaxComEx.FaxSecurity2.1 = s 'FaxSecurity2 Class'
    NoRemove CLSID
 A^_^
 A_A^_
 A_A^A\
 DescriptionW
 H3E H3E
 lCallIdW
 Microsoft Corporation. All rights reserved.
 Operating System
 t%D8y
 Windows
!4OnNewCallWWW
!D9{hH
!m_pRegMethods ( = vMethods.parray )
!m_Recipients
!pDate
!pFaxServer
!pSafeArray ( = varFrom.parray )
!pTapiConnection
!pvBodies
!pvProperty
!SizeQuotaWarning
!This program cannot be run in DOS mode.
"UseDeviceTSIDWWW
#pbDebugW
$FbstrTiffPath@
$HRemoveByCountryAndAreaWW
$ListenToServerEvents
$pbstrNoteWWWl 
$plCountryCodeWWW
$sActivityLoggingW
$SaveDefaultSenderWWW@
$ZpFaxIncomingMessageWT
%I64x
%IFaxAccountFoldersWW
&^OutgoingQueueBlocked
&IFaxDocumentl 
&jConnectedSubmitWl 
&ScheduledTimeWWW
(!lParam)
(!m_pReceiptsConfig || SizeOfStruct != sizeof(FAX_RECEIPTS_CONFIG))
(!pConfig || SizeOfStruct != sizeof(FAX_ACTIVITY_LOGGING_CONFIG))
(*it)->get_AccountName(&bstrAccountName)
(*it)->get_AreaCode(&lAreaCode)
(*it)->get_CountryCode(&lCountryCode)
(*it)->get_DeviceName(&bstrDeviceName)
(*it)->get_GUID(&bstrGUID)
(*it)->get_Id(&lDeviceID)
(*it)->get_Name(&bstrName)
(*it)->get_UniqueName(&bstrName)
(*it)->get_UniqueName(&bstrUniqueName)
(*ppInstanceVar)->QueryInterface(ppObject)
(*ppObject)->Init(pServerInner)
(`GetGroupsWWW
(1pbstrFunctionNameWWW
(AllowedReceipts is wrong)
(faxHandle == NULL)
(lIndex > m_coll.size() or lIndex < 1)
(lPriority < 1)
(ScheduleTime
(t$ H
(t$@H
(t$PH
(The Device Id does not found in the Collection !!)
(vMethods.vt != VT_ARRAY | VT_BSTR)
(vProperty.vt != VT_ARRAY | VT_BYTE)
)CvMethodsd
)D$@L
)fsatNTLM\
)IFaxAccounts
)m=2R
)t$ H
)t$@H
)t$PH
)u Je
*,pbUseForInboundRoutingWWd
,LogIncomingW
,ppFoldersWWW
,Security2WWW
,SMTPServerWW
.?AVbad_alloc@std@@
.?AVCAtlException@ATL@@
.?AVexception@@
.?AVlength_error@std@@
.?AVlogic_error@std@@
.?AVout_of_range@std@@
.00cfg
.AnswerCallWW
.CRT$XCA
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.data
.data$brc
.data$r$brc
.edata
.fdrmMANUAL_ANSWERWWWX
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$T$brc
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata
.xdata$x
/#RetriesW
/fD;e
::FaxGetArchiveConfiguration()
::FaxSetArchiveConfiguration()
::SafeArrayAccessData()
::SafeArrayAccessData(m_psaDeviceIDs, &pdwElement)
::SafeArrayAccessData(m_psaMethods, &pbstrElement)
::SafeArrayAccessData(pSafeArray, &pbElement)
::SafeArrayAccessData(psaGUIDs, &pbstrElement)
::SafeArrayCreate()
::SafeArrayCreateVector(VT_BSTR, 0, dwCount)
::SafeArrayCreateVector(VT_I4, 0, dwCount)
::SafeArrayCreateVector(VT_UI1, 0, dwLength)
::SafeArrayUnaccessData(m_psaDeviceIDs)
::SafeArrayUnaccessData(m_psaMethods)
::SafeArrayUnaccessData(pArray)
::SafeArrayUnaccessData(psa)
::SafeArrayUnaccessData(pSafeArray)
::SafeArrayUnaccessData(psaGUIDs)
::SysAllocString()
::SysAllocString(bstrFrom)
::SysAllocString(pMethods[i])
::SysAllocString(pMethods[i].Guid)
::SysStringLen(bstrFaxNumber) < 1
:o2WX
;8t7H;
;l$pv
;NbIncomingQueueBlockedWWW
??0exception@@QEAA@AEBQEBD@Z
??0exception@@QEAA@AEBQEBDH@Z
??0exception@@QEAA@AEBV0@@Z
??0exception@@QEAA@XZ
??1exception@@UEAA@XZ
??1type_info@@UEAA@XZ
?{uSH
?=u$L
?IFaxAccountOutgoingQueuep
?OutboundEventsLevelW
?terminate@@YAXXZ
?what@exception@@UEBAPEBDXZ
@.data
@.reloc
@.rsrc
@8~8t
@8y(t
@A]A\_
@A]A\_^]
@A^_]
@A^_^
@A^A]_
@A__]
@A__^
@A_A\_
@A_A^_
@A_A^_^]
@A_A^A\
@A_A^A]^]
@A_A^A]_^[]
@A_A^A]A\_
@SVWATAUAVAW
@SVWH
@SWATAUAVAWH
@SWATAUAWH
@USVWATAUAVAWH
@USVWAUAVAWH
@USVWAVAWH
@USVWAVH
[}SMTPPort
[Y71|
\$ A;
\$ E3
\$ UH
\$ UVWATAUAVAW
\$ UVWAVAWH
\$0E3
\$0fD
\FAX_DEVICE_RECEIVE_MODE_ENUM
\pFaxOutgoingArchiveWd
\SubmitWW
]IdWW
]MMajorVersion
]wpFaxOutboundRoutingGroupsWWW0
^9pFaxServerWW
^FaxOutboundRoutingRuleWW$,
^fjesRECEIVINGWWW
^ReceiveModeW
^-RegisterInboundRoutingExtensionW
_.OnDevicesConfigChangeWWW
__C_specific_handler
__CxxFrameHandler3
__dllonexit
_amsg_exit
_callnewh
_CxxThrowException
_DPoweredOffWW
_errno
_fjesLINE_UNAVAILABLE
_i64tow
_IFaxAccountNotifyWW
_IFaxServerNotify InterfaceWWW
_IFaxServerNotify2WW|
_initterm
_lock
_onexit
_purecall
_resetstkoflw
_stscanf()
_tcstok(bstrAllString, DELIMITER))
_unlock
_vsnwprintf
_wcsicmp
_XcptFilter
`.rdata
`A^_^
`A__^
`A_A^A]A\_^[
`OProviderUniqueNameWW
`pdateOriginalScheduledTimeWW@
`plDeviceIdWW4
`rSizeHigh
{ ATAVAWH
{ UAVAWH
{0B5E5BD1-B8A9-47A0-A323-EF4A293BA06A}
{2E037B27-CF8A-4abd-B1E0-5704943BEA6F}
{FAX_COVERPAGE_TYPE_ENUMW4!
{fjtROUTINGWW(
{qpbIncomingFaxesArePublic|
|$ ATH
|$ AVH
|$ E3
|$ UAUAVH
|8pdateTransmissionStartWW@
|fIncomingFaxesArePublicWW
}bstrServerNameWWd
}PausedWW
}pbstrCallerIdWWW(
~AddAccountWW
~fjesBUSY
~fjesDIALINGW
~plPriorityWW
~TitleWWW
+4pFaxOutgoingQueueWWW`
+FaxAccountOutgoingArchiveWWW
+GSendEnabledW
+StatusWW
<All devices>
<casted>pTmpJob->Init(pJobInfo, m_pIFaxServerInner)
<casted>pTmpMessage->Init(pFaxMessage, m_pIFaxServerInner)
<ppFaxSecurity2WW
<SetOrder
<UseDeviceWWW
=bI=b
=fpsSERVER_ERRORW
=IRemoveAccountWWW
=L9o<
=rpbstrArchiveFolderWW
> pbstrCoverPageWWl 
>id[G
>Note
0%jfsetNONE
0.hfjtSENDW
0/=fptLOWWW
0]%fjesINITIALIZING
0|=fjsCOMPLETED4
00nfgsEMPTYh
040904B0
0A\_^
0A^^[
0A^_^
0A^A\_
0A__^
0A_A\_^[
0A_A^_
0A_A^A\^[
0A_A^A\_^
0A_A^A]A\_
0A_A^A]A\_^[
0A_A^A]A\_^]
0DescriptorWW
0DgfrtNONEW
0j:lDEFAULT_PREFETCH_SIZEWW
0K{fptNORMALWWW
0pbWasReAssignedW
0ppFaxConfigurationWWD
0T_fllNONEW
0V$far2QUERY_ARCHIVESWW,
0vCountWWW
0-wfcptNONE4!
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
1IEra
1IFaxSecurity2WWW,
1mSMTPUser
2pbstrBillingCodel
2plLowQuotaWaterMarkW
2VpbstrTapiProviderNameWWW,
-306937736
3FaxInboundRoutingMethodsP-
3RSecurity
41k2M
4fdrmNO_ANSWERWWW
4fjesCALL_DELAYED
4IFaxIncomingMessage2
4splInitErrorCodeW,
5BillingCodeW
5fsetQUEUE_STATEW
5IFaxReceiptOptionsWW
5OnOutgoingArchiveConfigChangeWWW
5u3dR'
6#bSending
6pbstrAccountName
6pCoverPageTypeWW
6RingingNowWW
6SubmissionId
7,pbstrRecipientsW
7fD;>u
7IFaxOutboundRoutingGroupsWWW
7IFaxOutboundRoutingRules
7pbstrSubject@
'7pbstrTitleWWl
8,^FAX_JOB_EXTENDED_STATUS_ENUM
8?BIFaxIncomingJobs(
8^jFaxInboundRoutingExtensionWW
8}KIFaxOutgoingJobW@
8=FFaxActivityLoggingWW
811FAX_ACCESS_RIGHTS_ENUMWW
83LFAX_RECEIPT_TYPE_ENUMWWW
8A^_^[
8A_A^A\_^[
8a~IFaxServer2W
8apFaxOutboundRoutingGroup
8bLFAX_SERVER_EVENTS_TYPE_ENUMW
8CdFaxDevicesWW
8FpFAX_SERVER_APIVERSION_ENUMWWP
8O9FAX_ACCOUNT_EVENTS_TYPE_ENUM
8pFaxFoldersWH
8SizeLowW
8tLFaxOutgoingQueueT$
8yiFaxLoggingOptionsWWW
9} v.H
9} vHH
9A98u6A9x
9bstrMessageIdWWW
9ClIncomingMessagesWWW
9FaxIncomingJobsW<(
9T$`A
A^_^[]
A^A\]
A^A]]
A^A]_
A^A]_^]
A^A]A\_^
A_A\]
A_A]A\_[
A_A^]
A_A^_
A_A^_^[]
A_A^_^]
A_A^A\
A_A^A\_]
A_A^A\_^
A_A^A]
A_A^A]_]
A_A^A]_^
A_A^A]_^[]
A_A^A]A\]
A_A^A]A\^
A_A^A]A\_
A_A^A]A\_[
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
a2t$#
Access denied.
Account Is Not Found
Account with given Name/Index is not found.
AcquireSRWLockExclusive
Activity
Activity log database files pathWW%
Activity logging configuration changeW
Activity logging configuration objectW(
Add a deviceWW
Add a groupWWW
Add a recipientWWW
Add a rule+
Address of the receipt
Adds a fax account
Adds or removes routing method
ADVAPI32.dll
advapi32.dll
AgeLimit
AIFaxIncomingMessageIteratorW
All Devices Group
Allowed receipt types, a bit-wise combination of FAX_RECEIPT_TYPE valuesWW
AllowedReceiptsW
An incoming job was added to the fax server's incoming queueWW@
An incoming job was removed from the fax server's incoming queueWW
An incoming job's status was changedWW<
An incoming message was added to the fax server's incoming archiveF
An incoming message was addedW
An incoming message was removed from the fax server's incoming archiveB
An incoming message was removedWWWC
An outgoing job was added to the fax account's outgoing queueWA
An outgoing job was added to the fax server's outgoing queueWW@
An outgoing job was removed from the fax account's outgoing queueW
An outgoing job was removed from the fax server's outgoing queueWW$
An outgoing job's status was changedWWB
An outgoing message was added to the fax account's outgoing archiveWWWG
An outgoing message was added to the fax server's outgoing archiveF
An outgoing message was removed from the fax account's outgoing archiveWWW
An outgoing message was removed from the fax server's outgoing archive
Answer the callWWW
API-MS-Win-Core-LocalRegistry-L1-1-0.dll
APIVersionWW
APPID
AppID
ArchiveAgeLimitW
ArchiveFolderWWW
ArchiveSizeHighW
Are incoming faxes viewable by everyoneWWW
Are personal cover pages allowedWW&
Area codeW
AreaCode
Argument cannot be empty.
Argument is out of its legal range.
arppFaxReceiptOptionsW$
Array of device IDs exposed by the providerWWW"
Array of methods exposed by extensionW0
Array of routing methodsWW
At least one recipient must exist.
ATAVAWH
AtEOFWWW
ATL$__a
ATL$__z
ATL:%p
atlthunk.dll
AtlThunk_AllocateData
AtlThunk_DataToCode
AtlThunk_FreeData
AtlThunk_InitData
AttachFaxToReceiptWW
AUAVAWH
aULogOutgoingW
Authentication type used by server
AuthenticationTypeWW
AutoCreateAccountOnConnectWW
Available operations, a bit-wise combination of FAX_JOB_OPERATIONS valuesW%
AvailableOperationsW
B7OnIncomingJobAddedWW
bArchiveSizeLowWW
BfstSPECIFIC_TIME
BiOnOutboundRoutingGroupsConfigChangeW
BlockedW
BodiesWW
bOutgoingQueuePaused
bPoweredOffW
Branding
bReceivingWW
bRinging
bstrExtensionNameWWW
bstrExtensionUniqueNameWd
bstrFaxNumberWWW
bstrFaxServerNameWWW
bstrFriendlyName
bstrGROUPNAME_ALLDEVICES
bstrGroupNameWWW<
bstrImageNameWWW
bstrJobIdWWW
bstrRecipientNameWWWl 
bstrUniqueNameWWd
BUnregisterInboundRoutingExtensionWWW
buplInformationTypeWWWd
bUseX
C(D9g0u
Call handleWWW'
Called Station IDW#
Caller IDW
CallHandleWW
calloc
CallWindowProcW
Cancel the incoming jobWWW!
Cancel the outbound jobWWW
CancelWW
CCom<IFaxSender>::CopyTo()
CComBSTR& operator=()
CComBSTR::operator =()
CComBSTR::operator=
CComBSTR::operator=()
CComBSTR::Operator=(lpcwstrArchiveLocation)
CComObject<CFaxAccount>::CreateInstance(&pClass)
CComObject<CFaxAccounts>::CreateInstance(&pClass)
CComObject<CFaxDevice>::CreateInstance(&pClass)
CComObject<CFaxDeviceIds>::CreateInstance(&pClass)
CComObject<CFaxDeviceProvider>::CreateInstance(&pClass)
CComObject<CFaxDeviceProviders>::CreateInstance(&pClass)
CComObject<CFaxDevices>::CreateInstance(&pClass)
CComObject<CFaxInboundRoutingExtension>::CreateInstance(&pClass)
CComObject<CFaxInboundRoutingExtensions>::CreateInstance(&pClass)
CComObject<CFaxInboundRoutingMethod>::CreateInstance(&pClass)
CComObject<CFaxInboundRoutingMethods>::CreateInstance(&pClass)
CComObject<CFaxIncomingJob>::CreateInstance()
CComObject<CFaxIncomingJobs>::CreateInstance()
CComObject<CFaxIncomingMessage>::CreateInstance()
CComObject<CFaxIncomingMessageIterator>::CreateInstance()
CComObject<CFaxOutboundRoutingGroup>::CreateInstance(&pClass)
CComObject<CFaxOutboundRoutingGroups>::CreateInstance(&pClass)
CComObject<CFaxOutboundRoutingRule>::CreateInstance(&pClass)
CComObject<CFaxOutboundRoutingRules>::CreateInstance(&pClass)
CComObject<CFaxOutgoingJob>::CreateInstance()
CComObject<CFaxOutgoingJobs>::CreateInstance()
CComObject<CFaxOutgoingMessage>::CreateInstance()
CComObject<CFaxOutgoingMessageIterator>::CreateInstance()
CComObject<CFaxRecipient>::CreateInstance(&m_pRecipient)
CComObject<CFaxRecipient>::CreateInstance()
CComObject<CFaxRecipient>::QueryInterface()
CComObject<CFaxRecipients>::CreateInstance()
CComObject<CFaxSender>::CreateInstance(&m_pSender)
CComObject<CFaxSender>::QueryInterface()
CComPtr::CopyTo
CComQIPtr<IFaxServerInner> pIFaxServerInner(pFaxServer)
CFaxFoldersWW
CFaxInitInnerAddRef::Init
CFaxJobStatus::Init() got unknown/unsupported Job Type : %ld
CFaxRecipient::Create()
CFaxRecipients::Create
cfgsALL_DEV_NOT_VALIDh
CGetDeviceProvidersWW
CharNextW
CityWW
ClassName::Create(&pObjectTmp)
CloseHandle
CLSID
CLSID = s '{0213F3E0-6791-4D77-A271-04D2357C50D6}'
CLSID = s '{0F3F9F91-C838-415E-A4F3-3E828CA445E0}'
CLSID = s '{10C4DDDE-ABF0-43DF-964F-7F3AC21A4C7B}'
CLSID = s '{17CF1AA3-F5EB-484A-9C9A-4440A5BAABFC}'
CLSID = s '{189A48ED-623C-4C0D-80F2-D66C7B9EFEC2}'
CLSID = s '{1932FCF7-9D43-4D5A-89FF-03861B321736}'
CLSID = s '{1BF9EEA6-ECE0-4785-A18B-DE56E9EEF96A}'
CLSID = s '{1D7DFB51-7207-4436-A0D9-24E32EE56988}'
CLSID = s '{25FCB76A-B750-4B82-9266-FBBBAE8922BA}'
CLSID = s '{265D84D0-1850-4360-B7C8-758BBB5F0B96}'
CLSID = s '{43C28403-E04F-474D-990C-B94669148F59}'
CLSID = s '{4B9FD75C-0194-4B72-9CE5-02A8205AC7D4}'
CLSID = s '{5589E28E-23CB-4919-8808-E6101846E80D}'
CLSID = s '{59E3A5B2-D676-484B-A6DE-720BFA89B5AF}'
CLSID = s '{6088E1D8-3FC8-45C2-87B1-909A29607EA9}'
CLSID = s '{6549EEBF-08D1-475A-828B-3BF105952FA0}'
CLSID = s '{69131717-F3F1-40E3-809D-A6CBF7BD85E5}'
CLSID = s '{6982487B-227B-4C96-A61C-248348B05AB6}'
CLSID = s '{71BB429C-0EF9-4915-BEC5-A5D897A3E924}'
CLSID = s '{7421169E-8C43-4B0D-BB16-645C8FA40357}'
CLSID = s '{7BF222F4-BE8D-442f-841D-6132742423BB}'
CLSID = s '{8426C56A-35A1-4C6F-AF93-FC952422E2C2}'
CLSID = s '{8A3224D0-D30B-49DE-9813-CB385790FBBB}'
CLSID = s '{91B4A378-4AD8-4AEF-A4DC-97D96E939A3A}'
CLSID = s '{92BF2A6C-37BE-43FA-A37D-CB0E5F753B35}'
CLSID = s '{A1BB8A43-8866-4FB7-A15D-6266C875A5CC}'
CLSID = s '{A6850930-A0F6-4A6F-95B7-DB2EBF3D02E3}'
CLSID = s '{C35211D7-5776-48CB-AF44-C31BE3B2CFE5}'
CLSID = s '{C47311EC-AE32-41B8-AE4B-3EAE0629D0C9}'
CLSID = s '{C81B385E-B869-4AFD-86C0-616498ED9BE2}'
CLSID = s '{CCBEA1A5-E2B4-4B57-9421-B04B6289464B}'
CLSID = s '{CDA8ACB0-8CF5-4F6C-9BA2-5931D40C8CAE}'
CLSID = s '{CDC539EA-7277-460E-8DE0-48A0A5760D1F}'
CLSID = s '{CFEF5D0E-E84D-462E-AABB-87D31EB04FEF}'
CLSID = s '{D385BECA-E624-4473-BFAA-9F4000831F54}'
CLSID = s '{E80248ED-AD65-4218-8108-991924D4E7ED}'
CLSID = s '{EA9BDF53-10A9-4D4F-A067-63C8F84F01B0}'
CLSID = s '{EB8FE768-875A-4F5F-82C5-03F23AAC1BD7}'
CLSID = s '{F0A0294E-3BBD-48B8-8F13-8C591A55BDBC}'
CLSIDFromString
CoCreateInstance
Code of the job's extended statusW
Collection of fax accounts
Collection of incoming jobsWWW
Collection of outgoing jobsWWW
Collection of recipientsWW
CollectionType::Create()
CompanyName
CompanyW
Component Categories
Configuration of the outbound routing groupsWW"
Configuration of the outbound routing rulesWWW)
ConfigurationWWW
Connect to server, submit the fax document, disconnect7
Connect to the fax serverW
ConnectedSubmit2
Connection to fax server failed.
ConnectW
Contents of cover page note fieldW
Contents of cover page subject fieldWW!
Copy the job's TIFF imageW
Copy TIFF image to the local fileW
Copy Tiff image to the local fileW#
CopySid
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
Country codeWW
CountryCodeW
CountryW
Cover page file pathWW$
Cover Page Type is out of range
Cover page's subject field
CoverPageType != fcptNONE but m_bstrCoverPage is empty.
CoverPageTypeWWW
CoverPageWWW
cPHighQuotaWaterMarkWW
CreateAndInit() failed
CreateWindowExW
CReceiptOptionsWW
cSMethodsW
Current messageWWW
Current queue status of the job, a bit-wise combination of FAX_JOB_STATUS valuesWW
Current queue status of the jobWWW!
-CurrentAccountWW
CurrentPageW
CurVer = s 'FaxComEx.FaxActivity.1'
CurVer = s 'FaxComEx.FaxActivityLogging.1'
CurVer = s 'FaxComEx.FaxDevice.1'
CurVer = s 'FaxComEx.FaxDeviceIds.1'
CurVer = s 'FaxComEx.FaxDeviceProvider.1'
CurVer = s 'FaxComEx.FaxDeviceProviders.1'
CurVer = s 'FaxComEx.FaxDevices.1'
CurVer = s 'FaxComEx.FaxDocument.1'
CurVer = s 'FaxComEx.FaxEventLogging.1'
CurVer = s 'FaxComEx.FaxFolders.1'
CurVer = s 'FaxComEx.FaxInboundRouting.1'
CurVer = s 'FaxComEx.FaxInboundRoutingExtension.1'
CurVer = s 'FaxComEx.FaxInboundRoutingExtensions.1'
CurVer = s 'FaxComEx.FaxInboundRoutingMethod.1'
CurVer = s 'FaxComEx.FaxInboundRoutingMethods.1'
CurVer = s 'FaxComEx.FaxIncomingArchive.1'
CurVer = s 'FaxComEx.FaxIncomingJob.1'
CurVer = s 'FaxComEx.FaxIncomingJobs.1'
CurVer = s 'FaxComEx.FaxIncomingMessage.1'
CurVer = s 'FaxComEx.FaxIncomingMessageIterator.1'
CurVer = s 'FaxComEx.FaxIncomingQueue.1'
CurVer = s 'FaxComEx.FaxJobStatus.1'
CurVer = s 'FaxComEx.FaxLoggingOptions.1'
CurVer = s 'FaxComEx.FaxOutboundRouting.1'
CurVer = s 'FaxComEx.FaxOutboundRoutingGroup.1'
CurVer = s 'FaxComEx.FaxOutboundRoutingGroups.1'
CurVer = s 'FaxComEx.FaxOutboundRoutingRule.1'
CurVer = s 'FaxComEx.FaxOutboundRoutingRules.1'
CurVer = s 'FaxComEx.FaxOutgoingArchive.1'
CurVer = s 'FaxComEx.FaxOutgoingJob.1'
CurVer = s 'FaxComEx.FaxOutgoingJobs.1'
CurVer = s 'FaxComEx.FaxOutgoingMessage.1'
CurVer = s 'FaxComEx.FaxOutgoingMessageIterator.1'
CurVer = s 'FaxComEx.FaxOutgoingQueue.1'
CurVer = s 'FaxComEx.FaxPersonalProfile.1'
CurVer = s 'FaxComEx.FaxReceiptOptions.1'
CurVer = s 'FaxComEx.FaxRecipients.1'
CurVer = s 'FaxComEx.FaxSecurity.1'
CurVer = s 'FaxComEx.FaxServer.1'
cWn7y
D!|$ A
D$ E3
D$$9G
D$(9G
D$(E3
D$,9G
D$@f;
D$`E3
D$`Lc
D$0E3
D$0H+
D$HE3
D$pD;
D$pE3
D$xH9D$pt
D;|$H
D;AHu
D;t$@
D?pFaxIncomingJobs
D9{4t;
D9{4u
D9g$u
DatabasePath
DD`fE;
DebugLevel
DebugWWW
DecodePointer
Default prefetch size for message iteratorsWWW,
DefWindowProcW
Delete
Delete the message from the archiveWWW
DeleteCriticalSection
Delimiter character for separating recipients on incoming messageW
deque<T> too long
Description of the deviceW 
Destination device
DestroyWindow
Detail level of event logs for general (other) eventsW"
Detail level of event logs for inbound fax eventsW2
Detail level of event logs for initialization eventsWW1
Detail level of event logs for outbound fax events5
Device ID is out of the Range
Device ID of device that transmits the job$
Device ID that transmits the jobWW
Device Is Not Found
Device nameWWW
Device Provider Is Not Found
Device providerWWW
Device status changeWW
Device with given ID is not found.
Device with given Name/Index is not found.
DeviceId
DeviceIdsWWW
DeviceNameWW
DeviceProvider with given GUID is not found.
Device's Called Station ID 
Devices configuration changeWW,
Device's Transmitting Station IDWW
DIFaxOutboundRoutingW
DIFaxRecipientsWW
DisableThreadLibraryCalls
Disconnect from the fax server&
Disconnect()
DiscountRateStartWWW
DllCanUnloadNow
DllGetClassObject
DllRegisterServer
DllUnregisterServer
DocumentName
Document's friendly nameWW
Does the server auto-create fax account on connect'
Does the server generate a brandWW
Does the server log incoming fax activityW)
Does the server log outgoing fax activityW 
DOutgoingArchiveW
dwSizeOfStruct is invalid
e A_A^A]A\]
E H9K@t'H
E OutgoingQueueAgeLimitWWW
e!bstrAccountNameW
E(=csm
E8=csm
Eh=csm
EH=csm
EIncomingQueueBlocked
EmailWWW
Empty Group Name
EncodePointer
End of archive markerW(
End of the discount rate periodWWW5
EnterCriticalSection
Event logging configuration change#
Event logging configuration object
EventLogging
Events the fax account is listening to%
Events the fax Server is listening toW
EventTypesWWd
EX=csm
Ex=csm
Extended status descriptionWWWI
ExtendedStatusCodeWW
ExtendedStatusWW
Extension with given name is not found.
ExtensionFriendlyNameWWW
ExtensionImageNameWW
Extension's friendly nameW,
Extension's unique nameWWW,
f;D$@
F>-V|.
f6p5?
f9,~u
f9;t_D
f9<Au
f94Bu
fA9,Bu
fA9,Iu
fA9,Su
fA9tM
fAddedToReceiveFolderWWW
faetFXSSVC_ENDEDD
faetIN_ARCHIVEWW
faetIN_QUEUE
faetNONE
far2MANAGE_ARCHIVESW,
far2MANAGE_CONFIGWWW,
far2MANAGE_OUT_JOBSW,
far2MANAGE_RECEIVE_FOLDERWWW|
far2QUERY_CONFIG,
far2QUERY_OUT_JOBSWW,
far2SUBMIT_HIGHW,
far2SUBMIT_LOWWW,
far2SUBMIT_NORMALWWW,
farMANAGE_CONFIG
farMANAGE_JOBSWW
farMANAGE_OUT_ARCHIVEWWW$
farQUERY_CONFIGW
farQUERY_IN_ARCHIVEW
farQUERY_JOBSWWW
farQUERY_OUT_ARCHIVE
farSUBMIT_HIGHWW
farSUBMIT_LOWWWW
farSUBMIT_NORMAL
FAX ACCOUNT
FAX ACCOUNT FOLDERS
FAX ACCOUNT SET
FAX ACCOUNTS
FAX ACTIVITY
FAX ACTIVITY LOGGING
FAX ARCHIVE INNER
FAX CONFIGURATION
FAX DEVICE
FAX DEVICE IDS
FAX DEVICE PROVIDERS
FAX DEVICES
FAX EVENT LOGGING
FAX FOLDERS
FAX INBOUND ROUTING
FAX INBOUND ROUTING EXTENSION
FAX INBOUND ROUTING METHOD
FAX INBOUND ROUTING METHODS
FAX JOB INNER
FAX LOGGING OPTIONS
FAX MESSAGE INNER
FAX MESSAGE ITERATOR INNER
FAX OUTBOUND ROUTING
FAX OUTBOUND ROUTING GROUPS
FAX OUTBOUND ROUTING RULE
FAX OUTBOUND ROUTING RULES
FAX QUEUE INNER
FAX RECEIPT OPTIONS
FAX SECURITY INNER
FAX SERVER
Fax server configurationWW
Fax server must be connected.
FAX_GROUP_STATUS_ENUMWWWh
FAX_JOB_OPERATIONS_ENUMW
FAX_JOB_STATUS_ENUMW4
FAX_JOB_TYPE_ENUMWWW
FAX_LOG_LEVEL_ENUMWW
FAX_PRIORITY_TYPE_ENUMWW
FAX_PROVIDER_STATUS_ENUM
FAX_ROUTING_RULE_CODE_ENUMWWd2
FAX_RULE_STATUS_ENUM
FAX_SCHEDULE_TYPE_ENUMWW
FAX_SMTP_AUTHENTICATION_TYPE_ENUMWWW
FaxAccessCheckEx
FaxAccessCheckEx/2(hFaxHandle, ..)
FaxAccessCheckEx2
FaxAccount ClassWW
FaxAccount for the current connectionW
FaxAccountFolders ClassWWW
FaxAccountFoldersWWWp0
FaxAccountIncomingArchive ClassWWW
FaxAccountIncomingArchiveWWW
FaxAccountIncomingQueue ClassW
FaxAccountIncomingQueueW
FaxAccountOutgoingArchive ClassWWW
FaxAccountOutgoingQueue ClassW
FaxAccountOutgoingQueueW81
FaxAccounts ClassW
FaxAccountSet ClassWWW
FaxAccountSetWWW
FaxAccountsW
FaxAccountWW
FaxActivity ClassW
FaxActivityLogging ClassWW
FaxAddOutboundGroup(faxHandle, bstrName)
FaxAddOutboundGroupW
FaxAddOutboundRule(faxHandle, lAreaCode, lCountryCode, lDeviceId, bstrGroupName, (!bUseDeviceRule))
FaxAddOutboundRuleW
FaxAnswerCall
FaxAnswerCall(faxHandle, lCallId, m_lID)
FaxClose
FaxClose()
FaxClose(hPort)
FaxClose(portHandle)
FaxComEx.FaxActivity = s 'FaxActivity Class'
FaxComEx.FaxActivity.1 = s 'FaxActivity Class'
FaxComEx.FaxActivityLogging = s 'FaxActivityLogging Class'
FaxComEx.FaxActivityLogging.1 = s 'FaxActivityLogging Class'
FaxComEx.FaxDevice = s 'FaxDevice Class'
FaxComEx.FaxDevice.1 = s 'FaxDevice Class'
FaxComEx.FaxDeviceIds = s 'FaxDeviceIds Class'
FaxComEx.FaxDeviceIds.1 = s 'FaxDeviceIds Class'
FaxComEx.FaxDeviceProvider = s 'FaxDeviceProvider Class'
FaxComEx.FaxDeviceProvider.1 = s 'FaxDeviceProvider Class'
FaxComEx.FaxDeviceProviders = s 'FaxDeviceProviders Class'
FaxComEx.FaxDeviceProviders.1 = s 'FaxDeviceProviders Class'
FaxComEx.FaxDevices = s 'FaxDevices Class'
FaxComEx.FaxDevices.1 = s 'FaxDevices Class'
FaxComEx.FaxDocument = s 'FaxDocument Class'
FaxComEx.FaxDocument.1 = s 'FaxDocument Class'
FaxComEx.FaxEventLogging = s 'FaxEventLogging Class'
FaxComEx.FaxEventLogging.1 = s 'FaxEventLogging Class'
FaxComEx.FaxFolders = s 'FaxFolders Class'
FaxComEx.FaxFolders.1 = s 'FaxFolders Class'
FaxComEx.FaxInboundRouting = s 'FaxInboundRouting Class'
FaxComEx.FaxInboundRouting.1 = s 'FaxInboundRouting Class'
FaxComEx.FaxInboundRoutingExtension = s 'FaxInboundRoutingExtension Class'
FaxComEx.FaxInboundRoutingExtension.1 = s 'FaxInboundRoutingExtension Class'
FaxComEx.FaxInboundRoutingExtensions = s 'FaxInboundRoutingExtensions Class'
FaxComEx.FaxInboundRoutingExtensions.1 = s 'FaxInboundRoutingExtensions Class'
FaxComEx.FaxInboundRoutingMethod = s 'FaxInboundRoutingMethod Class'
FaxComEx.FaxInboundRoutingMethod.1 = s 'FaxInboundRoutingMethod Class'
FaxComEx.FaxInboundRoutingMethods = s 'FaxInboundRoutingMethods Class'
FaxComEx.FaxInboundRoutingMethods.1 = s 'FaxInboundRoutingMethods Class'
FaxComEx.FaxIncomingArchive = s 'FaxIncomingArchive Class'
FaxComEx.FaxIncomingArchive.1 = s 'FaxIncomingArchive Class'
FaxComEx.FaxIncomingJob = s 'FaxIncomingJob Class'
FaxComEx.FaxIncomingJob.1 = s 'FaxIncomingJob Class'
FaxComEx.FaxIncomingJobs = s 'FaxIncomingJobs Class'
FaxComEx.FaxIncomingJobs.1 = s 'FaxIncomingJobs Class'
FaxComEx.FaxIncomingMessage = s 'FaxIncomingMessage Class'
FaxComEx.FaxIncomingMessage.1 = s 'FaxIncomingMessage Class'
FaxComEx.FaxIncomingMessageIterator = s 'FaxIncomingMessageIterator Class'
FaxComEx.FaxIncomingMessageIterator.1 = s 'FaxIncomingMessageIterator Class'
FaxComEx.FaxIncomingQueue = s 'FaxIncomingQueue Class'
FaxComEx.FaxIncomingQueue.1 = s 'FaxIncomingQueue Class'
FaxComEx.FaxJobStatus = s 'FaxJobStatus Class'
FaxComEx.FaxJobStatus.1 = s 'FaxJobStatus Class'
FaxComEx.FaxLoggingOptions = s 'FaxLoggingOptions Class'
FaxComEx.FaxLoggingOptions.1 = s 'FaxLoggingOptions Class'
FaxComEx.FaxOutboundRouting = s 'FaxOutboundRouting Class'
FaxComEx.FaxOutboundRouting.1 = s 'FaxOutboundRouting Class'
FaxComEx.FaxOutboundRoutingGroup = s 'FaxOutboundRoutingGroup Class'
FaxComEx.FaxOutboundRoutingGroup.1 = s 'FaxOutboundRoutingGroup Class'
FaxComEx.FaxOutboundRoutingGroups = s 'FaxOutboundRoutingGroups Class'
FaxComEx.FaxOutboundRoutingGroups.1 = s 'FaxOutboundRoutingGroups Class'
FaxComEx.FaxOutboundRoutingRule = s 'FaxOutboundRoutingRule Class'
FaxComEx.FaxOutboundRoutingRule.1 = s 'FaxOutboundRoutingRule Class'
FaxComEx.FaxOutboundRoutingRules = s 'FaxOutboundRoutingRules Class'
FaxComEx.FaxOutboundRoutingRules.1 = s 'FaxOutboundRoutingRules Class'
FaxComEx.FaxOutgoingArchive = s 'FaxOutgoingArchive Class'
FaxComEx.FaxOutgoingArchive.1 = s 'FaxOutgoingArchive Class'
FaxComEx.FaxOutgoingJob = s 'FaxOutgoingJob Class'
FaxComEx.FaxOutgoingJob.1 = s 'FaxOutgoingJob Class'
FaxComEx.FaxOutgoingJobs = s 'FaxOutgoingJobs Class'
FaxComEx.FaxOutgoingJobs.1 = s 'FaxOutgoingJobs Class'
FaxComEx.FaxOutgoingMessage = s 'FaxOutgoingMessage Class'
FaxComEx.FaxOutgoingMessage.1 = s 'FaxOutgoingMessage Class'
FaxComEx.FaxOutgoingMessageIterator = s 'FaxOutgoingMessageIterator Class'
FaxComEx.FaxOutgoingMessageIterator.1 = s 'FaxOutgoingMessageIterator Class'
FaxComEx.FaxOutgoingQueue = s 'FaxOutgoingQueue Class'
FaxComEx.FaxOutgoingQueue.1 = s 'FaxOutgoingQueue Class'
FaxComEx.FaxPersonalProfile = s 'FaxPersonalProfile Class'
FaxComEx.FaxPersonalProfile.1 = s 'FaxPersonalProfile Class'
FaxComEx.FaxReceiptOptions = s 'FaxReceiptOptions Class'
FaxComEx.FaxReceiptOptions.1 = s 'FaxReceiptOptions Class'
FaxComEx.FaxRecipients = s 'FaxRecipients Class'
FaxComEx.FaxRecipients.1 = s 'FaxRecipients Class'
FaxComEx.FaxSecurity = s 'FaxSecurity Class'
FaxComEx.FaxSecurity.1 = s 'FaxSecurity Class'
FaxComEx.FaxServer = s 'FaxServer Class'
FaxComEx.FaxServer.1 = s 'FaxServer Class'
FAXCOMEXLibW
FaxConfiguration Class
FaxConfigurationD/
FaxConnectFaxServer()
FaxConnectFaxServerW
FaxConstants
FaxCreateAccount
FaxCreateAccount(hFaxHandle, 0, &accountInfo)
FaxDeleteAccount
FaxDeleteAccount()
FaxDeleteAccount(hFaxHandle, bstrAccountName)
FaxDevice ClassWWW
FaxDeviceIds Class
FaxDeviceIds\+
FaxDeviceProvider ClassWWW
FaxDeviceProviders ClassWW
FaxDeviceProvidersWW
FaxDevices ClassWW
FaxDeviceWWWh)
FaxDocument ClassW
FaxDocument must have either cover page or body.
FaxEnableRoutingMethod(faxHandle, bstrMethodGUID, VARIANT_BOOL2bool(bUse))
FaxEnableRoutingMethodW
FaxEndMessagesEnum
FaxEndMessagesEnum(hEnum)
FaxEnumAccounts
FaxEnumAccounts(faxHandle, dwInfoLevel, ...)
FaxEnumerateProviders(faxHandle, &pDeviceProviders, &dwNum
FaxEnumerateProvidersW
FaxEnumGlobalRoutingInfo(faxHandle, &pMethods, &dwNum)
FaxEnumGlobalRoutingInfo(hFaxHandle, &pMethods, &dwNumMethods)
FaxEnumGlobalRoutingInfoW
FaxEnumJobsEx2
FaxEnumJobsExW
FaxEnumMessages()
FaxEnumMessagesEx
FaxEnumMessagesW
FaxEnumOutboundGroups(faxHandle, &pGroups, &dwNum)
FaxEnumOutboundGroupsW
FaxEnumOutboundRules(faxHandle, &pRules, &dwNum)
FaxEnumOutboundRulesW
FaxEnumPortsEx(faxHandle, &pDevices, &dwNum)
FaxEnumPortsEx(hFaxHandle, &pDevices, &dwNumDevices)
FaxEnumPortsExW
FaxEnumRoutingExtensions(faxHandle, &pIRExtensions, &dwNum
FaxEnumRoutingExtensionsW
FaxEnumRoutingMethods(portHandle, &pMethods, &dwNum)
FaxEnumRoutingMethodsW
FaxEventLogging ClassW
FaxEventLoggingW0*
FaxFolders ClassWW
FaxFreeBuffer
FaxFreeSenderInformation
FaxFreeSenderInformation()
FaxGetAccountInfo
FaxGetAccountInfo(hFaxHandle, bstrAccountName, ...)
FaxGetActivityLoggingConfiguration()
FaxGetActivityLoggingConfigurationW
FaxGetArchiveConfigurationW
FaxGetExtensionData(faxHandle, m_lID, bstrGUID, &pData, &dwSize)
FaxGetExtensionDataW
FaxGetGeneralConfiguration
FaxGetGeneralConfiguration(hFaxHandle, 0, &pFaxConfig)
FaxGetJobEx2
FaxGetJobExW
FaxGetLoggingCategories(hFaxHandle, &pLogCategory, &dwNum)
FaxGetLoggingCategoriesW
FaxGetMessageEx
FaxGetMessageTiff(hFaxHandle, m_FaxMsg.dwlMessageId, FolderType, bstrTiffPath)
FaxGetMessageTiff(hFaxHandle, m_pJobInfo->dwlMessageId, FAX_MESSAGE_FOLDER_QUEUE, bstrTiffPath)
FaxGetMessageTiffW
FaxGetMessageW
FaxGetOutboxConfiguration
FaxGetPortEx(faxHandle, m_lId, &pDevice)
FaxGetPortExW
FaxGetQueueStates
FaxGetReceiptConfiguration(hFaxHandle, &pReceiptsConfig)
FaxGetReceiptsConfigurationW
FaxGetRecipientInfo()
FaxGetRecipientInfoW
FaxGetReportedServerAPIVersion
FaxGetReportedServerAPIVersion()
FaxGetReportedServerAPIVersion(h_tmpFaxHandle, &dwServerAPIVersion))
FaxGetReportedServerAPIVersion(m_faxHandle, &m_APIVersion))
FaxGetSecurityEx
FaxGetSecurityEx/2(hFaxHandle, ...)
FaxGetSecurityEx2
FaxGetSenderInfo()
FaxGetSenderInformation
FaxGetSenderInformation()
FaxGetSenderInfoW
FaxGetServerActivity
FaxGetServerActivity(hFaxHandle, &ServerActivity)
FaxGetVersion
FaxGetVersion(m_faxHandle, &m_Version))
faxHandle == NULL
FaxInboundRouting ClassWWW
FaxInboundRoutingExtension ClassWW
FaxInboundRoutingExtensions ClassW 
FaxInboundRoutingExtensionsW
FaxInboundRoutingMethod ClassW
FaxInboundRoutingMethods Class
FaxInboundRoutingMethodW
FaxIncomingArchive ClassWW
FaxIncomingArchiveWW(#
FaxIncomingJob ClassWW
FaxIncomingJobs ClassW
FaxIncomingJobWW
FaxIncomingMessage ClassWW
FaxIncomingMessageIterator ClassWW
FaxIncomingMessageIteratorWW
FaxIncomingMessageWW
FaxIncomingQueue
FaxIncomingQueue Class
FaxJobStatus
FaxJobStatus Class
FaxLoggingOptions ClassWWW
FaxNumberWWW
FaxOpenPort
FaxOpenPort(faxHandle, m_lID, PORT_OPEN_QUERY, &hPort)
FaxOpenPort(faxHandle, m_lID, PORT_OPEN_QUERY, &portHandle)
FaxOutboundRouting ClassWW
FaxOutboundRoutingGroup ClassW
FaxOutboundRoutingGroups
FaxOutboundRoutingGroups Class
FaxOutboundRoutingGroupW
FaxOutboundRoutingRule ClassWW!
FaxOutboundRoutingRules ClassW
FaxOutboundRoutingRulesW
FaxOutboundRoutingWW
FaxOutgoingArchive ClassWW
FaxOutgoingArchiveWW
FaxOutgoingJob ClassWW
FaxOutgoingJobs ClassW
FaxOutgoingJobsW
FaxOutgoingMessage ClassWW
FaxOutgoingMessageIterator ClassWW
FaxOutgoingMessageIteratorWW
FaxOutgoingQueue Class 
FaxReAssignMessage
FaxReAssignMessage(hFaxHandle, ...)
FaxReceiptOptions ClassWWW
FaxReceiptOptionsWWW@
FaxRecipient Class
FaxRecipient|.
FaxRecipients ClassWWW
FaxRegisterForServerEvents
FaxRegisterForServerEventsEx
FaxRegisterRoutingExtension(m_faxHandle, bstrExtensionName, ...)
FaxRegisterRoutingExtensionW
FaxRegisterServiceProviderEx(m_faxHandle, bstrUniqueName, ...)
FaxRegisterServiceProviderExW
FaxRemoveMessage
FaxRemoveMessage(hFaxHandle, m_FaxMsg.dwlMessageId, FolderType)
FaxRemoveOutboundGroup(faxHandle, bstrName)
FaxRemoveOutboundGroupW
FaxRemoveOutboundRule
FaxRemoveOutboundRule(faxHandle, lAreaCode, lCountryCode)
FaxSecurity ClassW
FaxSecurity2 Class+
FaxSecurityW
FaxSendDocumentEx()
FaxSendDocumentEx2
FaxSender ClassWWW
FaxSenderWWW`"
FaxServer ClassWWW
faxServer.Connect()
faxServer.Disconnect())
FaxSetActivityLoggingConfiguration()
FaxSetActivityLoggingConfigurationW
FaxSetArchiveConfigurationW
FaxSetDeviceOrderInGroup(faxHandle, m_bstrGroupName, lDeviceId, lNewOrder)
FaxSetDeviceOrderInGroupW
FaxSetExtensionData(faxHandle, m_lID, bstrGUID, &pData, dwLength)
FaxSetExtensionDataW
FaxSetGeneralConfiguration
FaxSetGeneralConfiguration(hFaxHandle,0,&faxConfig)
FaxSetGlobalRoutingInfo(faxHandle, &Data)
FaxSetGlobalRoutingInfoW
FaxSetJob(hFaxHandle, m_JobStatus.GtJobId(), cmdToPerform, &fje)
FaxSetJobW
FaxSetLoggingCategories(hFaxHandle, faxCategories, dwNum)
FaxSetLoggingCategoriesW
FaxSetMessage
FaxSetMessage(hFaxHandle, m_dwlMsgId, ...)
FaxSetOutboundGroup(faxHandle, &groupData)
FaxSetOutboundGroupW
FaxSetOutboundRule(faxHandle, &ruleData)
FaxSetOutboundRuleW
FaxSetOutboxConfiguration
FaxSetPortEx(faxHandle, m_lID, &Data)
FaxSetPortExW
FaxSetQueue
FaxSetReceiptConfiguration(hFaxHandle, &ReceiptsConfig)
FaxSetReceiptsConfigurationW
FaxSetSecurity
FaxSetSecurity/Ex2(hFaxHandle, dwSecInfo, ..)
FaxSetSecurityEx2
FaxSetSenderInformation
FaxSetSenderInformation()
FaxStartMessagesEnum
FaxStartMessagesEnumEx
FaxUnregisterForServerEvents
FaxUnregisterForServerEvents(m_hEvent)
FaxUnregisterRoutingExtension(m_faxHandle, bstrExtensionUniqueName)
FaxUnregisterRoutingExtensionW
FaxUnregisterServiceProviderEx(m_faxHandle, bstrUniqueName)
FaxUnregisterServiceProviderExW
Fbad allocation
fcptLOCALWWW4!
fcptSERVERWWl 
fD; t
fD;8ugH
fD9$Gu
fD9$Su
fD9{l
fD9{tt
fD9<Au
fD9<Xu
fD9DDPt&A
fdrmAUTO_ANSWERW
fE9$Iu
fE9$Ku
ffbOutgoingQueueBlockedWWW
fgsALL_DEV_VALIDh
fgsSOME_DEV_NOT_VALIDWWW
FIFaxIncomingArchiveW
FileDescription
FileTimeToLocalFileTime
FileTimeToSystemTime
FileType
FileVersion
FillSubmissionInfo(fsAPI_VERSION_2)
FindResourceExW
Fire_On <...> ConfigChange(this)
Fire_On In/Out Job/Message Added(this, ..)
Fire_On In/Out Job/Message Added(this, bstrJobId)
Fire_On In/Out Job/Message Removed(this, bstrJobId)
Fire_On In/Out Job/Message Removed(this,..)
Fire_On In/Out JobChanged(this, ..)
Fire_On In/Out JobChanged(this, bstrJobId)
Fire_OnDeviceStatusChange(this, dwDeviceId, ...)
Fire_OnNewCall(this, ...)
Fire_OnQueueStatusChange(this, ...)
Fire_OnServerActivityChange(this, ...)
Fire_OnServerShutDown(...)
Fire_OnServerShutDown(this)
fjesANSWERED
-fjesBAD_ADDRESSW
fjesCALL_ABORTED
fjesCALL_BLACKLISTED
fjesCALL_COMPLETEDWW
fjesDISCONNECTED
fjesFATAL_ERRORW
fjesHANDLEDW
fjesNO_ANSWERWWW
fjesNO_DIAL_TONE
fjesNONE
fjesPARTIALLY_RECEIVEDWW
fjesPROPRIETARYW@
fjoDELETEWWW
fjoPAUSE
fjoRECIPIENT_INFOWWW
fjoRESUMEWWW
fjoSENDER_INFOWW@
fjoVIEWW
'fjsCANCELEDW4
fjsCANCELING4
fjsFAILEDWWW4
fjsINPROGRESSWWW4
fjsNOLINEWWW4
fjsPAUSEDWWW4
fjsPENDINGWW4
fjsRETRIES_EXCEEDEDW4
fjsROUTINGWW
fjtRECEIVEWW
fllMAXWW
fllMEDWW
fllMINWW
FlushInstructionCache
Folders belonging to the accountWW=
FoldersW
For fsatNTLM/fsatBASIC authentication types, please supply the User property. The Password property is optional.
ForceRemove
ForceRemove {0213F3E0-6791-4D77-A271-04D2357C50D6} = s 'FaxOutboundRoutingGroup Class'
ForceRemove {0F3F9F91-C838-415E-A4F3-3E828CA445E0} = s 'FaxDocument Class'
ForceRemove {10C4DDDE-ABF0-43DF-964F-7F3AC21A4C7B} = s 'FaxSecurity Class'
ForceRemove {17CF1AA3-F5EB-484A-9C9A-4440A5BAABFC} = s 'FaxDeviceProvider Class'
ForceRemove {189A48ED-623C-4C0D-80F2-D66C7B9EFEC2} = s 'FaxInboundRoutingExtensions Class'
ForceRemove {1932FCF7-9D43-4D5A-89FF-03861B321736} = s 'FaxIncomingMessage Class'
ForceRemove {1BF9EEA6-ECE0-4785-A18B-DE56E9EEF96A} = s 'FaxLoggingOptions Class'
ForceRemove {1D7DFB51-7207-4436-A0D9-24E32EE56988} = s 'FaxInboundRoutingExtension Class'
ForceRemove {25FCB76A-B750-4B82-9266-FBBBAE8922BA} = s 'FaxInboundRoutingMethods Class'
ForceRemove {265D84D0-1850-4360-B7C8-758BBB5F0B96} = s 'FaxPersonalProfile Class'
ForceRemove {43C28403-E04F-474D-990C-B94669148F59} = s 'FaxOutgoingArchive Class'
ForceRemove {4B9FD75C-0194-4B72-9CE5-02A8205AC7D4} = s 'FaxInboundRoutingMethod Class'
ForceRemove {5589E28E-23CB-4919-8808-E6101846E80D} = s 'FaxDevices Class'
ForceRemove {59E3A5B2-D676-484B-A6DE-720BFA89B5AF} = s 'FaxDevice Class'
ForceRemove {6088E1D8-3FC8-45C2-87B1-909A29607EA9} = s 'FaxIncomingMessageIterator Class'
ForceRemove {6549EEBF-08D1-475A-828B-3BF105952FA0} = s 'FaxOutboundRoutingRule Class'
ForceRemove {69131717-F3F1-40E3-809D-A6CBF7BD85E5} = s 'FaxIncomingQueue Class'
ForceRemove {6982487B-227B-4C96-A61C-248348B05AB6} = s 'FaxReceiptOptions Class'
ForceRemove {71BB429C-0EF9-4915-BEC5-A5D897A3E924} = s 'FaxOutgoingJob Class'
ForceRemove {7421169E-8C43-4B0D-BB16-645C8FA40357} = s 'FaxOutgoingQueue Class'
ForceRemove {7BF222F4-BE8D-442f-841D-6132742423BB} = s 'FaxJobStatus Class'
ForceRemove {8426C56A-35A1-4C6F-AF93-FC952422E2C2} = s 'FaxIncomingArchive Class'
ForceRemove {8A3224D0-D30B-49DE-9813-CB385790FBBB} = s 'FaxOutgoingMessageIterator Class'
ForceRemove {91B4A378-4AD8-4AEF-A4DC-97D96E939A3A} = s 'FaxOutgoingMessage Class'
ForceRemove {92BF2A6C-37BE-43FA-A37D-CB0E5F753B35} = s 'FaxOutgoingJobs Class'
ForceRemove {A1BB8A43-8866-4FB7-A15D-6266C875A5CC} = s 'FaxIncomingJobs Class'
ForceRemove {A6850930-A0F6-4A6F-95B7-DB2EBF3D02E3} = s 'FaxEventLogging Class'
ForceRemove {C35211D7-5776-48CB-AF44-C31BE3B2CFE5} = s 'FaxFolders Class'
ForceRemove {C47311EC-AE32-41B8-AE4B-3EAE0629D0C9} = s 'FaxIncomingJob Class'
ForceRemove {C81B385E-B869-4AFD-86C0-616498ED9BE2} = s 'FaxOutboundRouting Class'
ForceRemove {CCBEA1A5-E2B4-4B57-9421-B04B6289464B} = s 'FaxOutboundRoutingGroups Class'
ForceRemove {CDA8ACB0-8CF5-4F6C-9BA2-5931D40C8CAE} = s 'FaxServer Class'
ForceRemove {CDC539EA-7277-460E-8DE0-48A0A5760D1F} = s 'FaxDeviceIds Class'
ForceRemove {CFEF5D0E-E84D-462E-AABB-87D31EB04FEF} = s 'FaxActivity Class'
ForceRemove {D385BECA-E624-4473-BFAA-9F4000831F54} = s 'FaxOutboundRoutingRules Class'
ForceRemove {E80248ED-AD65-4218-8108-991924D4E7ED} = s 'FaxInboundRouting Class'
ForceRemove {EA9BDF53-10A9-4D4F-A067-63C8F84F01B0} = s 'FaxRecipients Class'
ForceRemove {EB8FE768-875A-4F5F-82C5-03F23AAC1BD7} = s 'FaxDeviceProviders Class'
ForceRemove {F0A0294E-3BBD-48B8-8F13-8C591A55BDBC} = s 'FaxActivityLogging Class'
ForceRemove 'Programmable'
fpsBAD_GUIDW
fpsBAD_VERSIONWW
fpsCANT_INIT,
fpsSUCCESSWW
FreeLibrary
fRemovedFromReceiveFolderWWWX
Friendly name of the extension exposing this methodWWW0
FriendlyName
-frsALL_GROUP_DEV_NOT_VALIDWW
frsBAD_DEVICEWWW
frsEMPTY_GROUPWW
frsSOME_GROUP_DEV_NOT_VALIDW
frtMSGBOXWWW@
fsAPI_VERSION_0WP
fsAPI_VERSION_1WP
fsAPI_VERSION_2WP
fsAPI_VERSION_3Wd
fsatANONYMOUSWWW
fsatBASICWWW
fsetACTIVITY
fsetCONFIGWW
fsetDEVICE_STATUSWWW
fsetFXSSVC_ENDED
fsetIN_QUEUE
fsetINCOMING_CALLWWWd
fsetOUT_ARCHIVEW
fsetOUT_QUEUEWWW
fstDISCOUNT_PERIODWWl 
fstNOWWW
Full path and file name of the extension DLLWW
Full path and file name of the provider DLLWWW
Full path to the fax document body fileWWW
Full paths to the fax document body filesW
FunctionName
FvMinorVersion
FXSAPI.dll
FXSCOMEX.DLL
FxsComEx.dll
FXSCOMEX.pdb
G4H9^0t
Get a rule by criteria
Get an archived message by its IDW
Get archived message by its ID
Get device by its IDWW'
Get fax account by nameWWW
Get incoming job by ID
Get outgoing job by ID"
Get the device level extention propertyWWW'
get_FaxAccountSet(&pFaxAccountSet) failed
GetAccount(bstrAccountName, ppFaxAccount)
GetAccount(NULL, &m_pICurrentAccount) failed
GetAccountsW
GetAccountWW
GetBstrFromDwordlong(dwlJobId, &bstrJobId)
GetClassInfoExW
GetConnectionHandleFromIFaxServer()
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetDate
GetDevicesWW
GetExtensionProperty
GetExtensionsWWW
GetFaxHandle(&hFaxHandle)
GetJobWW
GetLastError
GetLengthSid
GetMessageWW
GetModuleFileNameW
GetModuleHandleW
GetProcAddress
GetProcessHeap
GetRules
GetSecurityDescriptorContrl(m_pbSD, ...)
GetSecurityDescriptorControl
GetSecurityDescriptorLength
GetSystemTimeAsFileTime
GetTickCount
GetTokenInformation
GetTraceEnableFlags
GetTraceEnableLevel
GetTraceLoggerHandle
GetWindowLongPtrW
GFaxActivityWx
GOutgoingQueueWWW
GplMinorBuild,
Granted rights, a bit-wise combination of FAX_ACCESS_RIGHTS values
Granted rights, a bit-wise combination%
GrantedRightsWWW
Group Is Not Found
Group name
GroupBroadcastReceiptsWW
GroupNameWWW
GrpbstrImageNameWW,
GUID of the method
H USWH
H!C(H
H!T$8H
H;^ tfH
H;^ u
H;_ u
H;C t
H;F u
H9\$@u3
H9^(t
H9^8toH
H9_ s
H9_@t6H9^8t
H9_`t
H9_Ht*H9
H9_Xt
H9C(u
H9Q r H
H9S(u
hA^_^[
HA_A^A]A\_^
Hardware
Has Cover page
HasCoverPage
HcL$@H;
HeapAlloc
HeapFree
hFaxHandle == NULL
hFaxHandle==NULL
High quota water markW
HIncomingMessages
HKEY_CLASSES_ROOT
HKEY_CURRENT_CONFIG
HKEY_CURRENT_USER
HKEY_DYN_DATA
HKEY_LOCAL_MACHINE
HKEY_PERFORMANCE_DATA
HKEY_USERS
HomePhoneWWW
How long the failed fax job is kept on the serverW#
How long the failed fax message is kept on the serverW 
How long the fax message is kept on the server(
How long the fax message is kept on the Server.
hpFaxDeviceIdsWWW
-hpFaxOutboundRoutingRuleW0
I,pdateTransmissionEnd@
i,RetryDelayWW
I+I H
I4pdateScheduledTimeWW@
If ScheduleType property is set to fstSPECIFIC_TIME, then ScheduleTime property must be set.
IFaxAccount interfaceW
IFaxAccountFolders interfaceWW"
IFaxAccountIncomingArchive interfaceWW$
IFaxAccountIncomingArchiveWW8
IFaxAccountIncomingQueue
IFaxAccountIncomingQueue interface$
IFaxAccountNotify InterfaceWWW
IFaxAccountNotifyWWW
IFaxAccountOutgoingArchive interfaceWW 
IFaxAccountOutgoingArchiveWW
IFaxAccountOutgoingQueue interface
IFaxAccounts interface
IFaxAccountSet interfaceWW
IFaxAccountSetWWd
IFaxActivity
IFaxActivity interface
IFaxActivityLogging interfaceW)
IFaxActivityLoggingWt
IFaxConfiguration interfaceWWW 
IFaxConfigurationWWW
IFaxDevice interfaceWW
IFaxDeviceIds interfaceWWW
IFaxDeviceIdsWWW
IFaxDeviceProvider interfaceWW
IFaxDeviceProviders interfaceW
IFaxDeviceProvidersW
IFaxDeviceProviderWW,
IFaxDevices interfaceW
IFaxDevicesWX
IFaxDeviceWWX
IFaxDocument interface'
IFaxDocument2 interfaceWWW
IFaxDocument2WWWl 
IFaxEventLogging
IFaxEventLogging interface4
IFaxFolders interfaceW
IFaxFoldersWx
IFaxInboundRouting interfaceWW&
IFaxInboundRoutingExtension interfaceW
IFaxInboundRoutingExtensions
IFaxInboundRoutingExtensions interface%
IFaxInboundRoutingExtensionW
IFaxInboundRoutingMethod
IFaxInboundRoutingMethod interface
IFaxInboundRoutingMethods interfaceWWW"
IFaxInboundRoutingWW
IFaxIncomingArchive interfaceW)
IFaxIncomingJob interfaceW(
IFaxIncomingJobs interface
IFaxIncomingJobW(
IFaxIncomingMessage interfaceW,
IFaxIncomingMessage2 interface
IFaxIncomingMessageIterator interfaceW
IFaxIncomingMessageW
IFaxIncomingQueue interfaceWWW
IFaxIncomingQueueWWW
IFaxJobStatus interfaceWWW*
IFaxJobStatusWWW
IFaxLoggingOptions interfaceWW
IFaxLoggingOptionsWW
IFaxOutboundRouting interfaceW#
IFaxOutboundRoutingGroup interface
IFaxOutboundRoutingGrouph
IFaxOutboundRoutingGroups interfaceWWW"
IFaxOutboundRoutingRule interfaceW
IFaxOutboundRoutingRules interface!
IFaxOutboundRoutingRuleW
IFaxOutgoingArchive interfaceW%
IFaxOutgoingArchiveW
IFaxOutgoingJob interfaceW
IFaxOutgoingJob2
IFaxOutgoingJob2 interface 
IFaxOutgoingJobs interface
IFaxOutgoingJobs@
IFaxOutgoingMessage interfaceW4
IFaxOutgoingMessage2
IFaxOutgoingMessage2 interface
IFaxOutgoingMessageIterator interfaceW
IFaxOutgoingMessageIteratorW
IFaxOutgoingMessageW
IFaxOutgoingQueue interfaceWWW
IFaxReceiptOptions interfaceWW"
IFaxRecipient interfaceWWW
IFaxRecipients interfaceWW
IFaxRecipientWWW@
IFaxSecurity interface
IFaxSecurity$
IFaxSecurity2 interfaceWWW&
IFaxSender interfaceWW
IFaxSenderWWl
IFaxServer interfaceWW
IFaxServer2 interfaceW
IFaxServerNotify2 InterfaceWWW=
IFaxServerNotify2WWW
IFaxServerNotifyd
ifrsVALID
Image name of the extension exposing this methodWW
ImageNameWWW
Inbound Routing Extension Is Not Found
INBOUND ROUTING EXTENSIONS COLLECTION
InboundEventsLevelWW
InboundRoutingWW
Incoming archive configuration changeW
Incoming archiveWW
Incoming callW
Incoming queue
IncomingArchiveW
IncomingQueueWWW
Incompatible call to put_Bodies.hr=0x%x
Incompatible call to put_body. hr=0x%x
Incompatible call to Submit.
Incompatible call to Submit2.
Index should be either number or string.
Indicates how long the fax message is kept on the serverWW2
InformationTypeW
InitErrorCodeWWW
InitEventsLevelW
InitializeCriticalSection
InprocServer32 = s '%MODULE%'
Integer overflow.
Interface
InterlockedPopEntrySList
InterlockedPushEntrySList
Internal function name3
InternalName
Invalid argument
Invalid argument.
Invalid m_pConfig
Invalid message/job ID.
Invalid pAccountInfo
Invalid parameter passed to C runtime function.
Invalid pFaxArchiveConfig
Invalid pFaxConfig
Invalid pFaxMessage
Invalid pJobInfo
Invalid pPersonalProfile
invalid string position
ipbstrStreetAddressWWl
Is device provider built in debug environmentW
Is device Transmitting Station ID used
Is extension built in debug environmentWWW/
Is fax server built in debug environmentWW
Is message reassigned?
Is queue blocked for incoming faxesWWW2
Is queue blocked for outgoing faxesWWW"
Is queue blockedWW
Is queue paused for outgoing faxes1
Is server, local, or no cover page usedWWW
Is size quota warning onWW
Is the device is enabled to sendWW
Is the device is turned offWWW
Is the device receiving nowWWW
Is the device ringing nowW
Is the device sending nowW
Is the queue blockedWW
Is the queue pausedWWW 
Is the size quota warning on or offWWW8
iScheduleType
IsDeviceVirtual
IsValidGUID(bstrGUID)
IsValidSecurityDescriptor
IsValidSecurityDescriptor(m_pbSD)
IsValidSid
IsWindow
it->get_Id(&dwlMsgid)
ItemByCountryAndArea
ItemById
Iterator on the archived messagesW
j)LoadDefaultSenderWWWl
jH9t$Hu
jLOnQueuesStatusChange
Job Not Found
Job typeWW
JobType::Create(&pNewJobObject)
JobType::Create()
JobTypeW
jpbstrSubmissionIdWWW
jpbUseDeviceWW
jXTspNameW
K H+K
KApFaxOutgoingMessageIteratorW
KERNEL32.dll
KppFaxSecurityWWWd
L!MoveNext
l$ VWATAUAVH
l$ WH
L$@H3
L$`E3
L$0E3
L$0H;
L$0H3
L$8H3
L$hH3
L$PE3
L$PH3
L$pH3
L$XE3
L4PrefetchSize
L9{8u
L9{Pt
L9|$xulL
L9c@t
L9c0t#L9g
L9c8t
L9g t
L9M t
L9o@t
L9o`t
L9oHt
L9oPt
L9oXt
L9q(t
L9q8t
L9s t
L9s(t
L9s@tfL9w0t
L9s`trL9w`t
L9s0t0L9wPt
L9s8t$L9w t
L9shtZL9w8t
L9sPt~L9wpt
L9sXtNL9
L9w(t
L9w@t
L9wht
L9wXtGL9s
L9Y t
lAreaCodeWWW0
Last error code at load or initializationW+
LcA<E3
lCountryCode
lcplMajorBuild,
lDeviceIdWWW
LeaveCriticalSection
LegalCopyright
Level is out of range
lFSPIVersiond
lIndex < 1 || lIndex > m_coll.size()
lIndex > m_coll.size()
lIndexWW
lInformationType contains bad bits.
lInformationType does not contain good bits.
ListenToAccountEventsWWW
ListenToServerEvents(fsetNONE)
lNewOrderWWW
Load and initialization status of the extensionWWW%
Load default senderWWW
LoadCursorW
LoadLibraryExA
LoadLibraryExW
LoadResource
LoadStringW
Location of the archive folder on the serverWW
Location of the archive on the serverW#
Location of the outgoing archive on the server#
LoggingOptionsWW
LookupAccountSidW
lOutgoingMessagesWWW
Low quota water markWW.
LowQuotaWaterMarkWWW
lPrefetchSize < 1
lPrefetchSizeWWW
lQueuedMessagesW
lRings<0
lRoutingMessages
lstrcmpiW
m_coll.erase()
m_coll.erase(it)
m_coll.erase(it)/insert(it, lDeviceId)
m_coll.insert(it, lDeviceId)
m_coll.push_back()
m_coll.push_back(lDeviceId)
m_coll.push_back(pDeviceIds[i])
m_coll.push_back(pNewJobObject.Detach())
m_coll.push_back(pObject)
m_FaxHandle == NULL
m_JobStatus.Init
m_pAccount->ProcessMessage()
m_pNotifyWindow->Create(NULL, ...)
m_pNotifyWindow->Create(NULL, rcRect)
m_pRecipient->PutRecipientProfile(pPersonalProfile)
m_pRegMethods->rgsabound[0].lLbound != 0
m_pSender->PutSenderProfile(pPersonalProfile)
m_pServer->ProcessMessage()
m_Recipient.GetRecipientProfile(pSenderProfile)
m_Recipient.PutRecipientProfile(pSenderProfile)
m_Recipients->get_Item(i, &pCurrRecipient)
m_ScheduleType==fstSPECIFIC_TIME but m_ScheduleTime==0
m_Sender.GetSenderProfile(&SenderPersonalProfile)
m_Version.dwSizeOfStruct != sizeof(FAX_VERSION)
MajorBuildWW
malloc
MbstrName<
MemAlloc() failed, size=%d
MemAlloc(dwLength)
MemAlloc(sizeof(DWORD) * groupData.dwNumDevices)
MemAlloc(sizeof(DWORDLONG) * lNum
MemAlloc(sizeof(FAX_COVERPAGE_INFO_EX)
MemAlloc(sizeof(FAX_PERSONAL_PROFILE) * lNum)
MemAlloc(sizeof(ulNum)
memcmp
memcpy
memcpy_s
memmove_s
memset
MessageClass::Create(&pMsg)
MessageW
Method Is Not Found
Method with given GUID is not found.
Methods data should be passed in a one-dimensional zero-based array of strings.
MH9]@s
Microsoft
Microsoft Corporation
Microsoft Fax Server Extended COM Client Interface
Microsoft Fax Service Extended COM Type LibraryWWW
MinorBuildWW
Mismatch client and server versions
Module
Module_Raw
Move to the first message in the archiveWW'
Move to the first messageW
Move to the next message in the archiveWWW!
Move to the next messageWW!
MpbSendingNowX
MsgType::Create()
msvcrt.dll
MultiByteToWideChar
MyFaxEnumJobEx2(hFaxHandle, dwJobTypes,...)
MyFaxEnumMessagesEx()
MyFaxGetJobEx2(hFaxHandle, dwlJobId, ...)
MyFaxGetJobEx2(hFaxHandle, m_dwlMessageId, ...)
MyFaxGetMessageEx()
MyFaxGetMessageEx(hFaxHandle, m_dwlMsgId, ...)
MyFaxRegisterForServerEventsEx(...)
MyFaxStartMessagesEnumEx()
n#pFaxIncomingArchiveW
n`GetMethodsWW
N0I!~(
n2bstrMethodGUIDWW
Name of the device that received the messageWW 
Name of the device transmitting the messageWWW
Name of the fax accountWWW
Name of the group which contains all devicesWWA
Name of the groupW
Name of the SMTP serverWWW
new CAccountNotifyWindow(this)
new CComContainedObject2<ClassName>(pServerInner)
new CComObject<CFaxJobStatus>
new CComObject<CFaxServer>
new CNotifyWindow(this)
new failed.
NFaxOutgoingMessageWWt'
nFaxServerWWW 
nIFaxInboundRoutingMethodsWWW
NMoveFirstWWWT
No Document Body and CoverPageType == fcptNONE
No more messages.
NoRemove
NoRemove CLSID
Not enough memory to complete the operation.
nSenderFaxNumberW
NULL argument ppbData or pcbData
Number of failed routing retriesWW!
Number of failed transmission retriesW3
Number of incoming messagesWWW"
Number of outgoing messagesWWW
Number of queued messagesW%
Number of retriesW
Number of rings before the device answersW
Number of routed incoming messages
O*!pu
O[pbstrEmailWWl
ObstrGUID
ofarMANAGE_IN_ARCHIVE
OfficeLocationWW
OfficePhoneW
ole32.dll
OLEAUT32.dll
OnActivityLoggingConfigChangeWWW
OnDeviceStatusChange
OnGeneralServerConfigChanged
OnIncomingArchiveConfigChangeWWW
OnIncomingJobRemoved
OnIncomingMessageAddedWW
OnIncomingMessageRemoved
OnOutgoingJobAddedWW
OnOutgoingJobChanged
OnOutgoingJobRemoved
OnOutgoingMessageAddedWW
OnOutgoingMessageRemoved
OnOutgoingQueueConfigChangeW
OnReceiptOptionsChangeWW
OnServerActivityChangeWW
OnServerShutDown
OpenProcessToken
OpenThreadToken
Operation failed.
Ordered collection of all the registered methodsWW(
Ordered collection of device IDsWW
OriginalFilename
OriginalScheduledTimeWWW
Outbound routing groups configuration changeWW+
Outbound routing rules configuration changeWWW
OutboundRoutingW
Outgoing archive configuration changeW%
Outgoing archiveWW
Outgoing job by ID
Outgoing queue
Outgoing queue configuration changeWWW%
OutgoingMessages
OutgoingQueuePausedW
OutputDebugStringA
OutputDebugStringW
owUseRoutingMethod
p AWH
pA^_^
pA^A]_^]
PA__]
PA_A^_^]
PA_A^A]A\_^]
Page currently in transmisionW 
PagesWWW
pAllowedReceipts\
parray in SafeArray is empty.
Pause the outbound job
PauseWWW@
pAvailableOperations@
pbAllowPersonalCoverPagesWWWx
pbAutoCreateAccountOnConnect
pbBlockedWWWx
pbBrandingWW
pbEOFWWWT
pbGroupBroadcastReceipts@
pbHasCoverPageWW
pbIncomingBlockedWWW
pbLogIncomingWWWt
pbLogOutgoingWWWt
pbOutgoingBlockedWWW
pbOutgoingPaused
pbPausedx
pbPoweredOffX
pbReceivingNowWWX
pbRingingNowX
pbSendEnabledWWW
pbSizeQuotaWarningWW
pbstrArchiveLocation
pbstrBodyWWW
pbstrCityWWWl
pbstrCompanyl
pbstrCountryl
pbstrCSIDWWWX
pbstrDepartmentWl
pbstrDescriptionX
pbstrDeviceNameWX
pbstrDocumentNameWWW@
pbstrExtendedStatusW
pbstrExtensionImageNameW
pbstrFriendlyNameWWW,
pbstrGroupNameWW
pbstrGUIDWWW
pbstrIdW@
pbstrNameWWW
pbstrOfficeLocationWl
pbstrOfficePhonel
pbstrProviderUniqueNameWX
pbstrReceiptAddressWl 
pbstrRoutingInformationW
pbstrSenderFaxNumber
pbstrSenderNameW
pbstrServerNameW
pbstrSMTPPasswordWWW\
pbstrSMTPServerW\
pbstrSMTPUserWWW\
pbstrStateWWl
pbstrTSIDWWWX
pbstrUniqueNameW,
pbstrZipCodel
pbUseArchive
pbUseDeviceTSIDWx
pbUseGroupingWWWl 
pClass->Init(&pDeviceProviders[i], pDevices)
pClass->Init(&pDevices[i], pServerInner)
pClass->Init(&pIRExtensions[i], pMethods, dwNumMethods)
pClass->Init(&pMethods[i], pServerInner)
pClass->Init(pAccountInfo, dwInfoLevel, ...)
pClass->Init(pInfo, m_pIFaxServerInner)
pClass->Init(pInfo->lpdwDevices, pInfo->dwNumDevices, m_bstrName, pServer)
pClass->QueryInterface(&m_pDeviceIds)
pClass->QueryInterface(&pObject)
pClass->QueryInterface(ppAccounts)
pClass->QueryInterface(ppDeviceProviders)
pClass->QueryInterface(ppDevices)
pClass->QueryInterface(ppFaxAccount)
pClass->QueryInterface(ppGroups)
pClass->QueryInterface(ppIRExtensions)
pClass->QueryInterface(ppMethods)
pClass->QueryInterface(ppRules)
pColl->clear()
pCurrRecipient->get_FaxNumber(&bstrFaxNumber)
pCurrRecipient->get_Name(&bstrName)
pdateDiscountRateEndx
pdateDiscountRateStartWWx
pdateScheduleTimeWWWl 
pdateSubmissionTimeW
pEventTypesWP
pExtendedStatusCodeW@
PFAX_ACCESS_RIGHTS_ENUM_2,
pFaxAccountW
pFaxActivityLoggingWd
pFaxDeviceProviderWW
pFaxDeviceWW
pFaxEventLoggingt
pFaxInboundRoutingExtensionsL
pFaxInboundRoutingExtensionW 
pFaxInboundRoutingMethod 
pFaxInboundRoutingMethodsWWWd
pFaxIncomingJobW
pFaxIncomingMessageIteratorW
pFaxIncomingQueueWWW
pFaxOutboundRoutingRulesd
pFaxOutgoingJobsx
pFaxOutgoingJobWx
pFaxOutgoingMessageW
pFaxRecipientsWWW
PfjesNOT_FAX_CALL
pfpsCANT_LOAD
'pGeneralEventLevelWWH
pIFaxServerInner->GetHandle(pHandle)
pInboundEventLevelWW
pInitEventLevelW
pJobStatusClass->Init(pJobStatus)
pJobStatusClass->QueryInterface(..)
pJobStatusClass->QueryInterface(pFaxJobStatus)
pJobStatusWW
pJobType
plAgeLimitWWx
plArchiveAgeLimitWWW
plAreaCodeWW
plCallHandle4!
plCountWd
plCurrentPageWWW@
Please supply cover page file name.
plErrorBodyFileW
plHighQuotaWaterMark
plIdX
plIncomingMessagesWW
plMajorVersionWW,
plMinorVersionWW,
plOutgoingMessagesWW
plOutgoingQueueAgeLimitW
plPagesW@
plQueuedMessagesd
plRetriesWWWx
plRetryDelayx
plRingsBeforeAnswerWX
plRoutingMessagesWWW
plSizeLowWWW
plSizeWW@
pMsg->Init()
pNewJobObject->Init()
pNewRecipient->put_FaxNumber(bstrFaxNumber)
pNewRecipient->put_Name(bstrName)
pObjectInit->Init(pServerInner)
pOutboundEventLevelW
ppCurrentAccount
ppFaxAccountSetW
ppFaxAccountsWWW
ppFaxActivityWWW<
ppFaxDeviceProviders
ppFaxDeviceWd
ppFaxInboundRoutingW
ppFaxLoggingOptionsW
ppFaxOutboundRouting\
ppFaxRecipientsWl 
ppFaxRecipientWW@
ppFaxSenderW
pPriorityWWWl
ppTapiConnectionl 
ppUnkWWW,
pReceiptType
PrefetchSize property cannot be less then 1.
pRegisteredEventsWWW|
Priority
Priority is out of the Range
Priority of the faxWWW
Priority of the method0
ProductName
ProductVersion
ProgID = s 'FaxComEx.FaxActivity.1'
ProgID = s 'FaxComEx.FaxActivityLogging.1'
ProgID = s 'FaxComEx.FaxDevice.1'
ProgID = s 'FaxComEx.FaxDeviceIds.1'
ProgID = s 'FaxComEx.FaxDeviceProvider.1'
ProgID = s 'FaxComEx.FaxDeviceProviders.1'
ProgID = s 'FaxComEx.FaxDevices.1'
ProgID = s 'FaxComEx.FaxDocument.1'
ProgID = s 'FaxComEx.FaxEventLogging.1'
ProgID = s 'FaxComEx.FaxFolders.1'
ProgID = s 'FaxComEx.FaxInboundRouting.1'
ProgID = s 'FaxComEx.FaxInboundRoutingExtension.1'
ProgID = s 'FaxComEx.FaxInboundRoutingExtensions.1'
ProgID = s 'FaxComEx.FaxInboundRoutingMethod.1'
ProgID = s 'FaxComEx.FaxInboundRoutingMethods.1'
ProgID = s 'FaxComEx.FaxIncomingArchive.1'
ProgID = s 'FaxComEx.FaxIncomingJob.1'
ProgID = s 'FaxComEx.FaxIncomingJobs.1'
ProgID = s 'FaxComEx.FaxIncomingMessage.1'
ProgID = s 'FaxComEx.FaxIncomingMessageIterator.1'
ProgID = s 'FaxComEx.FaxIncomingQueue.1'
ProgID = s 'FaxComEx.FaxJobStatus.1'
ProgID = s 'FaxComEx.FaxLoggingOptions.1'
ProgID = s 'FaxComEx.FaxOutboundRouting.1'
ProgID = s 'FaxComEx.FaxOutboundRoutingGroup.1'
ProgID = s 'FaxComEx.FaxOutboundRoutingGroups.1'
ProgID = s 'FaxComEx.FaxOutboundRoutingRule.1'
ProgID = s 'FaxComEx.FaxOutboundRoutingRules.1'
ProgID = s 'FaxComEx.FaxOutgoingArchive.1'
ProgID = s 'FaxComEx.FaxOutgoingJob.1'
ProgID = s 'FaxComEx.FaxOutgoingJobs.1'
ProgID = s 'FaxComEx.FaxOutgoingMessage.1'
ProgID = s 'FaxComEx.FaxOutgoingMessageIterator.1'
ProgID = s 'FaxComEx.FaxOutgoingQueue.1'
ProgID = s 'FaxComEx.FaxPersonalProfile.1'
ProgID = s 'FaxComEx.FaxReceiptOptions.1'
ProgID = s 'FaxComEx.FaxRecipients.1'
ProgID = s 'FaxComEx.FaxSecurity.1'
ProgID = s 'FaxComEx.FaxServer.1'
ProgIDFromCLSID
Provider's friendly nameWW+
pSafeArray->rgsabound[0].lLbound != 0
pScheduleTypeWWW
PSenderWW
pStatusW,
pTmpJobCollection->Init(m_pJobCollection, m_pIFaxServerInner)
pTypeWWW\
pVarFrom->vt not VT_UI1 or VT_UI1 | VT_ARRAY
pvDescriptor
pvDeviceIdsW
pvFaxOutgoingJobIDsWl 
pvMethodsWWW
q5'>xF
qfjsRETRYINGW4
qoGetJobsW
qpbstrExtensionFriendlyNameWW
QRoutingInformationWW
QueryInterface()
QueryPerformanceCounter
Queue is blocked. Cannot submit.
QueuedMessagesWW
Queues status changeWW
qvGeneralEventsLevelWW
QZplSMTPPortWW\
rAddW
RaiseException
RDepartmentWW
RDisconnectWW
Read flag on the messageWW
realloc
ReAssign
Reassigns the messageW
Receipt options change%
Receipt Type is out of range. It may be one of the values allowed by the Server.
ReceiptOptions = SMTP_... + Server/Sender is empty
ReceiptOptions = SMTP_NTLM/BASIC + User/Password is empty
ReceiptTypeW
ReceiveMode > fdrmMANUAL_ANSWER
ReceivingNow
Recipient information objectWW
Recipients count is zero
Recipient's fax number
Recipient's nameWW
RecipientsWW
RecipientWWW
Refresh the object
RefreshWX
RegCloseKey
RegCreateKeyExW
RegDeleteKeyExW
RegDeleteKeyW
RegDeleteValueW
RegEnumKeyExW
Register device providerWW
Register inbound routing extension$
RegisterClassExW
RegisterDeviceProviderWW
Registered inbound routing extensions collectionWW#
RegisteredEvents
RegisterTraceGuidsW
RegisterWindowMessageW
REGISTRY
RegOpenKeyExW
RegQueryInfoKeyW
RegQueryValueExW
RegSetValueExW
Release()
ReleaseSRWLockExclusive
Remove a deviceWWW
Remove a group,
Remove a recipient
Remove a rule by criteriaW
Remove a ruleW
Remove the Default Rule
Remove(1)
Removes a fax account by nameW&
RemoveWW
Restart the outbound jobWW
RestartW@
Resume the outbound jobWWW
Retry delayWWW!
Return server level extention property#
RfpsCANT_LINK
RingsBeforeAnswerWWW
Routing informationWWW
RoutingMessagesW
rpbReadWW
RPSubjectW
RpvUsedRoutingMethodsX
rResumeWW@
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
s I9>u9H
SafeArrayCopy(m_psaDeviceIDs, &psaResult)
SafeArrayCopy(m_psaMethods, &psaResult)
SafeArrayCreateVector(VT_BSTR, 0, dwCount)
SafeArrayDestroy(m_psaDeviceIDs)
SafeArrayDestroy(m_psaMethods)
SafeArrayGetDim(m_pRegMethods) != 1
SafeArrayGetDim(pArray) != 1
SafeArrayGetDim(pSafeArray) != 1
SafeArrayGetElement(m_pRegMethods, ...)
Save default senderWWW
Save the objectWWW'
SaveX
Schedule Type is out of range
SECURITY
Security configuration changeW"
Security Descriptor is not Self-Relative
Security descriptor should be in the self-relative mode.
Security descriptorWWWB
Security Information TypeW!
Sender information objectW
SenderNameWW
Sender's billing codeW
Sender's cityW
Sender's companyWW
Sender's country or region
Sender's departmentWWW
Sender's e-mail addressWWW
Sender's fax numberWWW
Sender's home phoneWWW
Sender's nameW
Sender's office locationWW
Sender's office phoneW
Sender's state
Sender's street addressWWW
Sender's title
Sender's zip codeW
SendingNowWW
Server activity change
Server and Sender properties are mandatory.
Server shut downWW
Server's general configuration changeW
Set bit-wise combination of events the fax account listens toW&
Set bit-wise combination of events the fax server listens toWW
Set how long the fax message is kept on the server%
Set of recipient names
Set order of the deviceWWW 
Set server level extention propertyWWW<
Set the address of the receipt
Set the device level extention propertyWWW
SetDate
SetExtensionProperty
SetLastError
SetUnhandledExceptionFilter
SetWindowLongPtrW
sFaxDocumentW
sFaxInboundRoutingWWWL
sfrrcANY_CODE
Size in bytes of the message's TIFF fileWW
Size in bytes of TIFF file4
Size of prefetch bufferWWW
Size of the prefetch bufferWWW
SizeofResource
Sleep
SleepConditionVariableSRW
smServerNameWW
SMTP passwordWG
SMTP port numberWW
SMTP sender e-mail address
SMTP user nameH
SMTPPassword
SMTPSenderWW
Software
Software\Microsoft\Fax\Client
sOnIncomingJobChanged
Start of the discount rate periodW
StateWWW
Status
Status of the device providerW)
Status of the groupWWW
stdole2.tlbWWW
StoreRecipientIdsInVariant()
StreetAddressWWW
string too long
StringCchCopyW(strWhereToPut, .., bstrTmp) failed
StringDup
StringFileInfo
Submission Id for the Fax document)
SubmissionTimeWW
Submit the fax document on the already connected serverWWW&
Submit(faxServer,...)
Submit2W
Such Rule is not found
Such Rule is not found anymore
SVATAVAWH
SVAVH
SVWATAUAVAWH
SVWATAVAWH
SVWATAWH
SVWAVH
swprintf_s
swscanf
SysAllocString()
SYSTEM
SystemTime2LocalDate(OriginalScheduledTime)
SystemTime2LocalDate(SubmissionTime)
SystemTime2LocalDate(TransmissionEndTime)
SystemTime2LocalDate(TransmissionStartTime)
SystemTimeToFileTime
SystemTimeToVariantTime
t$ UATAUAVAWH
t$ UWATAVAWH
t$ UWAUAVAWH
t$ UWAVH
t$ UWAWH
t$ WATAUAVAWH
t$ WATAWH
t$ WAUAVH
t$ WH
t$(E3
T$(fD
T$@f;
T$`H!\$`H
t)H9^@t
t)L9q0t
t^H+Y 3
T_ppFaxDevices 
t+H9^
t<L9wxt
t8H9^
t8H9^ t
tAOnEventLoggingConfigChangeWW
Tapi connectionWWW6
TapiConnection and/or CallHandle + more than ONE Recipients.
TapiConnectionWW
TapiProviderName
tbH+Y 3
TerminateProcess
TfjesTRANSMITTING
tg>,5
t-H9^ t
The "<All Devices>" outbound routing group is read-only.
The collection of all available devicesWWW
The collection of device providers
The current messageWWW
The desired Job is NOT Incoming
The desired Job is NOT Outgoing
The document nameW
The fax folders object
The fax server activity status objectW
The fax server API version does not support the requested operation.
The fax server cannot access the specified file or folder.
The fax server cannot complete the operation because it is not supported for this version of Windows.
The fax server cannot complete the operation because the number of active fax devices allowed for this version of Windows was exceeded.
The fax server cannot find the job or message by its ID.
The fax server cannot remove an outbound routing group because it is in use by one or more outbound routing rules.
The fax server cannot set an archive folder to a non-NTFS partition.
The fax server cannot use the same folder for both the inbox and the sent-items archives.
The fax server does not support the requested receipt type.
The fax server encountered an outbound routing group with bad configuration.
The fax server failed to allocate memory.
The fax server failed to locate an outbound routing group by name.
The fax server failed to locate an outbound routing rule by country code and area code.
The FaxAccountSet configuration object
The high 32-bit value of the archive sizeW%
The inbound routing configuration objectWW
The job is in transmission. Transmission end time is not available yet.
The limit on the number of recipients for a single fax broadcast was reached.
The logging options configuration objectWW1
The low 32-bit value of the archive sizeWW)
The major part of extension's build number*
The major part of extension's version numberWW,
The major part of the device provider's build numberWW4
The major part of the device provider's version number6
The major part of the fax server's build numberWWW/
The major part of the fax server's version numberW1
The minor part of extension's build number'
The minor part of extension's version numberWW*
The minor part of the device provider's build numberWW-
The minor part of the device provider's version number4
The minor part of the fax server's build numberWWW(
The minor part of the fax server's version numberW/
The name of the fax server
The name of the method
The outbound routing configuration objectW
The receipt options configuration objectWW
The receive mode of the device)
The security configuration objectW
The time the fax job finished its transmission
The time the fax job is scheduled to be transmittedWWW-
The time the fax job started its transmissionW.
The transmission time is not available because either the Job transmission has not started or it has failed.
The value for the specified property is not available with the Fax Server.
TIFaxOutgoingQueueWWWx
Time the job was originally scheduled to be transmittedWWW
Time the job was submitted
Time to send the faxWW
Total number of pagesW
tpH9_PujH
TpReceiveModeX
TraceMessage
Translation
Transmission end timeW
Transmission start timeWWW
TransmissionEndW
TransmissionStartWWW
Transmitting Station IDWWW
TSID is too long
TSP name used by the providerW6
tufE9xl
Type is out of the Range
Type of receiptWWW
Type of the receiptWWW'
TYPELIB
TypeLib
TypeLib = s '{2BF34C1A-8CAC-419F-8547-32FDF6505DB8}'
'TypeLib' = s '{2BF34C1A-8CAC-419F-8547-32FDF6505DB8}'
u HcA<H
u"L9|$`u4H
U*bstrCallerId
u,D9J
U7CallerId
UATAUAVAWH
UATAVH
UATAWH
UAVAWH
uCopyTiff
UDiscountRateEndW
UFaxDeviceProviderWWW
UGpbstrHomePhoneWWl
uHf9C
uhH9B
UIFaxAccountWD
uIFaxServerWWd
UnhandledExceptionFilter
Unique device IDWW
Unique ID the submission process created for the JobWW
Unique ID the submission process created for the jobWW+
Unique job IDW7
Unique message IDWP
Unique name of the providerWWW
UniqueNameWW
Unknown Error
Unregister device provider"
Unregister inbound routing extensionWW%
UnregisterClassA
UnregisterTraceGuids
uO9T$`vIL
UpvPropertyWWX
uReceiptAddressWW
UseArchiveWW
UsedRoutingMethodsWW
UseForInboundRouting
USER32.dll
Uses single device or groupWWW
USVWATAUAVAWH
UVAUAVAWH
UVWATAUAVAWH
UVWATAUH
UVWAUAVH
UVWAVAWH
UWATAVAWH
UWAUAVAWH
UWAVH
UWAWH
uwHc^
V"OnSecurityConfigChangeWW
v]`2I
val ThreadingModel = s 'Apartment'
var.ChangeType(VT_BSTR, &vIndex)
vArchiveLocationW
VarFileInfo
VariantTimeToSystemTime
VATAUAVAWI
VDAllowPersonalCoverPagesW
vector<T> too long
vepbUseDeviceW
Version = s '1.0'
Version of the fax server APIW<
VersionIndependentProgID = s 'FaxComEx.FaxActivity'
VersionIndependentProgID = s 'FaxComEx.FaxActivityLogging'
VersionIndependentProgID = s 'FaxComEx.FaxDevice'
VersionIndependentProgID = s 'FaxComEx.FaxDeviceIds'
VersionIndependentProgID = s 'FaxComEx.FaxDeviceProvider'
VersionIndependentProgID = s 'FaxComEx.FaxDeviceProviders'
VersionIndependentProgID = s 'FaxComEx.FaxDevices'
VersionIndependentProgID = s 'FaxComEx.FaxDocument'
VersionIndependentProgID = s 'FaxComEx.FaxEventLogging'
VersionIndependentProgID = s 'FaxComEx.FaxFolders'
VersionIndependentProgID = s 'FaxComEx.FaxInboundRouting'
VersionIndependentProgID = s 'FaxComEx.FaxInboundRoutingExtension'
VersionIndependentProgID = s 'FaxComEx.FaxInboundRoutingExtensions'
VersionIndependentProgID = s 'FaxComEx.FaxInboundRoutingMethod'
VersionIndependentProgID = s 'FaxComEx.FaxInboundRoutingMethods'
VersionIndependentProgID = s 'FaxComEx.FaxIncomingArchive'
VersionIndependentProgID = s 'FaxComEx.FaxIncomingJob'
VersionIndependentProgID = s 'FaxComEx.FaxIncomingJobs'
VersionIndependentProgID = s 'FaxComEx.FaxIncomingMessage'
VersionIndependentProgID = s 'FaxComEx.FaxIncomingMessageIterator'
VersionIndependentProgID = s 'FaxComEx.FaxIncomingQueue'
VersionIndependentProgID = s 'FaxComEx.FaxJobStatus'
VersionIndependentProgID = s 'FaxComEx.FaxLoggingOptions'
VersionIndependentProgID = s 'FaxComEx.FaxOutboundRouting'
VersionIndependentProgID = s 'FaxComEx.FaxOutboundRoutingGroup'
VersionIndependentProgID = s 'FaxComEx.FaxOutboundRoutingGroups'
VersionIndependentProgID = s 'FaxComEx.FaxOutboundRoutingRule'
VersionIndependentProgID = s 'FaxComEx.FaxOutboundRoutingRules'
VersionIndependentProgID = s 'FaxComEx.FaxOutgoingArchive'
VersionIndependentProgID = s 'FaxComEx.FaxOutgoingJob'
VersionIndependentProgID = s 'FaxComEx.FaxOutgoingJobs'
VersionIndependentProgID = s 'FaxComEx.FaxOutgoingMessage'
VersionIndependentProgID = s 'FaxComEx.FaxOutgoingMessageIterator'
VersionIndependentProgID = s 'FaxComEx.FaxOutgoingQueue'
VersionIndependentProgID = s 'FaxComEx.FaxPersonalProfile'
VersionIndependentProgID = s 'FaxComEx.FaxReceiptOptions'
VersionIndependentProgID = s 'FaxComEx.FaxRecipients'
VersionIndependentProgID = s 'FaxComEx.FaxSecurity'
VersionIndependentProgID = s 'FaxComEx.FaxServer'
VfjoRESTARTWW
vfptHIGHW
VfrtMAILW
vfsetIN_ARCHIVEWW
vIndexWW
viOnOutboundRoutingRulesConfigChangeWW
VirtualAlloc
VirtualFree
VOplSizeHighWWT
vpAPIVersionW
vPropertyWWWX
VS_VERSION_INFO
vT~:r
VWATAUAVAWH
VWATAVAWH
VWATH
VWAUAVAWH
VWAVH
VWAWH
WakeAllConditionVariable
WATAUAVAWH
WATAUAWH
WATAUH
WATAVH
WAUAVH
WAVAWH
wcharREASSIGN_RECIPIENTS_DELIMITERWW/
wcscpy_s
wcsncpy_s
wcstok
We have reached the End of the Array
WfaetOUT_ARCHIVEW
When TapiConnection or CallHandle properties are specified, these properties identify the fax number of the recipient. In this case, only one recipient is allowed, and the recipient's fax number is not used for sending a document, but only for tracking the fax message.
When to send the faxWW
Whether faxes should be archivedWW%
Whether received faxes should be archivedW,
Whether sent faxes should be archived ?WWW.
Whether sent faxes should be archivedW'
Whether to attach a fax to the receipt"
Whether to group broadcast receiptsWWW
Whether to group the broadcast receiptsWWW
Whether to use the IFaxReceiptOptions settings for MS routing extensionWWW(
wpbAttachFaxW
x ATAVAWH
x AUAVAWH
x AUH
x AVH
x AWH
x#H9t$Ht#H
xA_A]A\_
XA_A^A]A\_^
xA_NewEnum
xDeleteWWT
xFaxOutgoingJobWWH&
XpGrantedRightsWW$
xplPrefetchSizeWWT
Y u0H
Y(u0H
Y@H9;u%L
Y0u0H
Y8u0H
YbpbstrSMTPSenderW\
yfaetOUT_QUEUEWWW
Yl0I.
You cannot remove the default rule.
Z%VOv
z)pbstrDatabasePathWWWH
Z9AccountNameW
zE9no
ZFaxSecurity2d2
ZGetMessagesW
ZipCodeW
zItem
zLUnregisterDeviceProvider
zpbstrFaxNumberWWl
zWasReAssignedWWW
