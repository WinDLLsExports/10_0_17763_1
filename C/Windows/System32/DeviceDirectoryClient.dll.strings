 A_A^_
 A_A^A\
 A_A^A]A\_
 H3E H3E
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!This program cannot be run in DOS mode.
%1.2f GHz
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%d)\%hs!%p: 
%ld MHz
%s %lu %s
%s %s %s
%s: ALPC message id=%x required continuation unexpectedly.Cancelling it.
%s: Error receiving message from PO %x
%s: Unable to cancel ALPC message id=%x
%s: Unexpected ALPC message type - %x
%u.%u.%u.%u
(_^][
(caller: %p) 
)H!>eH
.?AV_com_error@@
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVexception@std@@
.?AVResultException@wil@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.xdata
.xdata$x
;|$8r
?_Xlength_error@std@@YAXPEBD@Z
@.data
@.didat
@.reloc
@8,1u
@87t6!t$(A
@8n@t!H
@A^_^
@A_A^A\_^
@A_A^A]A\_^[
@SUVWATAUAVAWH
@SVWATAUAVAWH
@SVWATAVAWH
@SVWH
@USVWATAUAVAWH
@USVWATAVAWH
@USVWAVAWH
@USWH
@VWAV
[%hs(%hs)]
[%hs]
\$ UH
\$ UVWAVAWH
\$ VWAVH
\$H;\$D
\$HD9d$D
\Microsoft\Windows\DeviceDirectoryClient
\PdcPort
__C_specific_handler
__CxxFrameHandler3
__std_terminate
_CxxThrowException
_initterm
_initterm_e
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vswprintf
_o___stdio_common_vswscanf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__register_onexit_function
_o__seh_filter_dll
_o__wcsdup
_o_free
_o_malloc
_o_wcscpy_s
` UAVAWH
`.rdata
`@8-\q
{ AVH
|$ AVH
|$ E3
|$ UH
|$0A_A^
|$PH+
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers>%s</Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>%s %s %s</Data></ComHandler></Actions></Task>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers><TimeTrigger><Repetition><Interval>PT%luM</Interval></Repetition><StartBoundary>%.4u-%.2u-%.2uT%.2u:%.2u:%.2u</StartBoundary></TimeTrigger>%s</Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>%s %lu %s</Data></ComHandler></Actions></Task>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers><TimeTrigger><Repetition><Interval>PT%luM</Interval></Repetition><StartBoundary>%.4u-%.2u-%.2uT%.2u:%.2u:%.2u</StartBoundary></TimeTrigger>%s</Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>%s %s %s</Data></ComHandler></Actions></Task>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"><RegistrationInfo><SecurityDescriptor>D:P(A;;FA;;;SY)(A;;FRFX;;;BA)</SecurityDescriptor></RegistrationInfo><Principals><Principal id="System"><UserId>S-1-5-18</UserId><RunLevel>LeastPrivilege</RunLevel></Principal></Principals><Triggers><TimeTrigger><StartBoundary>%.4u-%.2u-%.2uT%.2u:%.2u:%.2u</StartBoundary></TimeTrigger></Triggers><Settings><MultipleInstancesPolicy>Parallel</MultipleInstancesPolicy><DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries><StopIfGoingOnBatteries>false</StopIfGoingOnBatteries><AllowHardTerminate>false</AllowHardTerminate><StartWhenAvailable>true</StartWhenAvailable><RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable><AllowStartOnDemand>true</AllowStartOnDemand><Enabled>true</Enabled><Hidden>true</Hidden><RunOnlyIfIdle>false</RunOnlyIfIdle><DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession><UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine><WakeToRun>false</WakeToRun><ExecutionTimeLimit>PT0S</ExecutionTimeLimit><Priority>10</Priority><RestartOnFailure><Interval>PT12H</Interval><Count>14</Count></RestartOnFailure></Settings><Actions Context="System"><ComHandler><ClassId>{AE31B729-D5FD-401E-AF42-784074835AFE}</ClassId><Data>-RegisterDevice -Periodic</Data></ComHandler></Actions></Task>
<toast activationType="protocol" launch="%1"><visual><binding template="ToastGeneric"><text id="1">%2</text><text id="2">%3</text></binding></visual></toast>
<WnfStateChangeTrigger><StateName>7510bca323028b41</StateName><Data>01</Data><DataOffset>0</DataOffset></WnfStateChangeTrigger>
>PDA2t
040904B0
0A^_^
0A_A^_
0A_A^A]A\^
0A_A^A]A\_
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
7bf7f519-2c1b-439d-b296-0878bd5c4991
8\$<t
8\$Nu
9\$@u
9\$Ht
9|$@uGH;
9D$|t
9D$pu*L
9D$puhH
9D$tt
9D$xt
9PDA2
9PDA2L
9PDA2t
9t$8t6A
A^A]A\_]
A_A^]
A_A^_
A_A^_^[]
A_A^_^]
A_A^A\_]
A_A^A\_^
A_A^A\_^[]
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_^[]
A_A^A]A\_^]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
-AccountChange
AccurateFixResult
AccurateLocationSync
AcquireSRWLockExclusive
AcquireSRWLockShared
ActivationCount
ActivationDuration
ActivationHandle
ActivationsUpCounter
AdminsCount
AllowWindowsEntitlementReactivation
AlpcGetMessageAttribute
AlpcInitializeMessageAttribute
AnotherInstanceRunning
AntiTheftIsDeviceCapable
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-libraryloader-l1-2-1.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-psapi-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-sysinfo-l1-2-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-power-base-l1-1-0.dll
api-ms-win-shcore-registry-l1-1-0.dll
api-ms-win-shcore-sysinfo-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
api-ms-win-stateseparation-helpers-l1-1-0.dll
ApiSetQueryApiSetPresence
AppInstallRule
AppInstallRuleControlledByPolicy
AppsAndBrowserHealth
AppsAndBrowserStatus
AppsSmartScreen
AppsSmartScreenControlledByPolicy
AuditMode
AuthD
AvProviderHealth
AvProviderName
AvProviderRtpStatus
AvProviderSignatureStatus
AvProviderStatus
bad allocation
bad array new length
BillingMobileOperatorId
BitLockerKeyId
BitLockerVolumeState
Block
BrowserSmartScreen
BrowserSmartScreenControlledByPolicy
CallbackReason
CallContext:[%hs] 
Capacity
CBR(!!IsOpenStorageTypeSearchPresent())
CBR(!GetComputerNameExW(ComputerNamePhysicalDnsHostname, nullptr, &cchFriendlyName))
CBR(((NTSTATUS)0x00000000L) == ntStatus)
CBR(*pcchChannelUri == 2048)
CBR(*ppAdmins == nullptr)
CBR(*ppAuthorizedCids == nullptr)
CBR(*ppDeviceOwners == nullptr)
CBR(*ppEnumerator == nullptr)
CBR(*ppJsonValue == 0)
CBR(*ppJsonValue == nullptr)
CBR(*ppObj == nullptr)
CBR(*ppStandardUsers == nullptr)
CBR(*ppwszFriendlyName == nullptr)
CBR(*ppwszOsLocale == nullptr)
CBR(*ppwszShortOsVersion == nullptr)
CBR(0 != pszBuffer)
CBR(0L == dwResult)
CBR(authInfo != nullptr)
CBR(b64coder.DecodedLength() == sizeof(CommandPrefix))
CBR(b64coder.DecodedLength() == sizeof(UpdateStatusContext))
CBR(cbBinaryData > 0)
CBR(cbBuffer >= sizeof(CommandPrefix) + 1)
CBR(cbCommandDataWithPrefix <= 4096)
CBR(cbValue >= cbSize)
CBR(cchEncodedData > 0 && cchEncodedData % 4 == 0)
CBR(cchFriendlyName > 0)
CBR(chassisTypesVariant.parray != nullptr)
CBR(chassisTypesVariant.parray->cDims > 0)
CBR(chassisTypesVariant.parray->pvData != nullptr)
CBR(chassisTypesVariant.vt == (VT_ARRAY + VT_I4))
CBR(cObjects >= 1)
CBR(dwCan == 0 || dwCan == 1)
CBR(dwNetworkNumber == 1 || dwNetworkNumber == 2)
CBR(dwProfileId == FMP_PROFILE_ID)
CBR(dwType == ( 1ul ) || cbSize <= 1 || (cbSize & 0x1) != 0)
CBR(eTrigger != MdmRegistrationTrigger_Unknown)
CBR(eTrigger == MdmRegistrationTrigger_Unknown)
CBR(eValueType == JsonValueType_String)
CBR(FileTimeToLocalFileTime(&ftExpiration.ftTime, &ftLocalTime))
CBR(FileTimeToSystemTime(&ftLocalTime, &stStartTime))
CBR(FormatMessageW( 0x00000400 | 0x00000100 | 0x00002000, pszMessageTemplate, 0, 0, (LPWSTR)ppszMessage, 0, (va_list *)vlArgs) != 0)
CBR(GetComputerNameExW(ComputerNamePhysicalDnsHostname, pwszFriendlyName, &cchFriendlyName))
CBR(GetLastError() == 234L)
CBR(GetProductInfo(osVersion.dwMajorVersion, osVersion.dwMinorVersion, osVersion.wServicePackMajor, osVersion.wServicePackMinor, &dwSku))
CBR(GetPwrCapabilities(&spc) != 0)
CBR(GetSystemPreferredUILanguages(0x8, &ulNumLanguages, nullptr, &cchLanguages))
CBR(GetSystemPreferredUILanguages(0x8, &ulNumLanguages, pwszOsLocale, &cchLanguages))
CBR(GetVersionExW((OSVERSIONINFO *)&osVersion))
CBR(GetVolumeNameForVolumeMountPointW(pathName, volumeName, sizeof(*__countof_helper(volumeName))))
CBR(GlobalMemoryStatusEx(&ms))
CBR(hModule != nullptr)
CBR(hMutex != 0)
CBR(hr == HRESULT_FROM_WIN32(122L))
CBR(LoadStringW( GetModuleHandleW(L"DeviceDirectoryClient.dll"), dwResourceId, pwszLoadedString, (sizeof(*RtlpNumberOf(pwszLoadedString)))) != 0)
CBR(LoadStringW( GetModuleHandleW(L"DeviceDirectoryClient.dll"), uiResIdAction, pszActionValue, (sizeof(*RtlpNumberOf(pszActionValue)))) != 0)
CBR(LoadStringW( GetModuleHandleW(L"DeviceDirectoryClient.dll"), uiResIdDescription, pszTitleDescription, (sizeof(*RtlpNumberOf(pszTitleDescription)))) != 0)
CBR(lRet != 2L && lRet != 3L)
CBR(lRet == 0L)
CBR(memcpy_s(pbCommandDataWithPrefix + sizeof(CommandPrefix), cbCommandDataWithPrefix - sizeof(CommandPrefix), pbCommandData, cbCommandData) == 0)
CBR(memcpy_s(pbCommandDataWithPrefix, cbCommandDataWithPrefix, (BYTE *)&prefix, sizeof(CommandPrefix)) == 0)
CBR(ntStatus == ((NTSTATUS)0x00000000L))
CBR(pch + 3 < (pchEncodedData + cchEncodedData))
CBR(pch < pchEncodedData + cchEncodedData)
CBR(pDxDiagProvider != nullptr)
CBR(pFunc != nullptr)
CBR(pFunc(phoneKey, pwszPhoneInfo, phoneInfoSize, pOutputSize))
CBR(pHomeOperatorInfo->cHomeOperator <= 2)
CBR(pObject != nullptr)
CBR(pSystemInfo != nullptr)
CBR(pWebTokenRequestResult.Get() != 0)
CBR(pwszSerialNumber != nullptr)
CBR(responseStatus == WebTokenRequestStatus_Success)
CBR(swscanf_s(wstrConfiguration.c_str(), L"%s %lu %s", pwszSwitch, c_cchSwitch, &dwRetries, pwszEncodedPrefix, c_cchEncodedPrefix) == 3)
CBR(swscanf_s(wstrConfiguration.c_str(), L"%s %s %s", pwszSwitch, c_cchSwitch, pwszEncodedPrefix, c_cchEncodedPrefix, pwszEncodedContext, c_cchEncodedContext) == 3)
CBR(SystemTimeToFileTime(&stSystemTime, &ftTime.ftTime))
CBR(ulNumLanguages > 0 && cchLanguages > 0)
CBR(var.vt == VT_BSTR)
CBR(wcscpy_s(pwszChannelUri, 2048, WindowsGetStringRawBuffer(hstrUri.Get(), nullptr)) == 0)
CBR(wcscpy_s(pwszFriendlyName, cchPhoneName, wszPhoneName) == 0)
CBR(wcsncmp(pwszCommand, SMS_NOTIFICATION_PREFIX, SMS_NOTIFICATION_PREFIX_LENGTH) == 0)
CdmaExists
ChannelUrlExpiration
ChassisType
ChassisTypes
CHR(((HRESULT)0x8000FFFFL))
CHR(((HRESULT)0x8007000EL))
CHR(((HRESULT)0x80070057L))
CHR(_Encode( pbBinaryData, cbBinaryData, pszBuffer, cchEncodedData ))
CHR(_Encode(pbBinaryData, cbBinaryData, 0, cchEncodedData))
CHR(ActivateInstance( HStringReference(RuntimeClass_Windows_Internal_Security_WebAuthentication_AuthenticationManager).Get(), pManager.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pAdmins.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pAuthorizedCids.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pDeviceOwners.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pJsonArray.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), pStandardUsers.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pDeviceHardwareInfo.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pDeviceInfo.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pJsonObject.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pProtectionState.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pUserInfo.GetAddressOf()))
CHR(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(AntiTheftIsDeviceCapable(ANTI_THEFT_SCENARIO_ID::ANTI_THEFT_SCENARIO_ID_DDS_PERIODIC))
CHR(b64coder.Decode(pwszCommand + 4, wcslen(pwszCommand + 4)))
CHR(b64coder.Decode(pwszEncodedContext, wcslen(pwszEncodedContext)))
CHR(b64coder.Decode(pwszEncodedPrefix, wcslen(pwszEncodedPrefix)))
CHR(b64coder.Encode((BYTE *)pContext, sizeof(UpdateStatusContext), wstrEncodedContext))
CHR(b64coder.Encode((BYTE *)pPrefix, sizeof(CommandPrefix), wstrEncodedPrefix))
CHR(BlockOnCompletionAndGetResults(pFindProviderOperation.Get(), pProvider.GetAddressOf()))
CHR(BlockOnCompletionAndGetResults(pOperation.Get(), pIdentity.GetAddressOf()))
CHR(BlockOnCompletionAndGetResults(pTokenRequestOperation.Get(), &pWebTokenRequestResult))
CHR(BlockOnCompletionAndGetResults<IAsyncOperationCompletedHandler<PushNotificationChannel*>>( spChannelOperation.Get(), spChannel.GetAddressOf()))
CHR(BuildToastPayload( uiResIdDescription, uiResIdAction, pcszDescriptionParam, cchDescriptionParam, &pszFormattedToastXMLPayload))
CHR(CoCreateInstance( __uuidof(LocationManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(pLocationManager.GetAddressOf())), IID_PPV_ARGS_Helper(pLocationManager.GetAddressOf())))
CHR(CoCreateInstance( CLSID_DxDiagProvider, nullptr, CLSCTX_INPROC_SERVER, IID_IDxDiagProvider, (LPVOID*) &pDxDiagProvider))
CHR(CoCreateInstance( CLSID_NetworkListManager, 0, (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER), __uuidof(INetworkCostManager), (LPVOID *)pNetworkCostManager.GetAddressOf()))
CHR(CoCreateInstance( CLSID_WbemLocator, nullptr, CLSCTX_INPROC_SERVER, __uuidof(IWbemLocator), (LPVOID*)pWbemLocator.ReleaseAndGetAddressOf()))
CHR(CoCreateInstance(__uuidof(UpdateSession), nullptr, CLSCTX_INPROC_SERVER, __uuidof(IUpdateSession), (void**)&pUpdateSession))
CHR(CoCreateInstance(__uuidof(UpdateSessionOrchestrator), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&pOrchestrator)), IID_PPV_ARGS_Helper(&pOrchestrator)))
CHR(CoCreateInstance(CLSID_SmsSharedSecret, 0, CLSCTX_INPROC_SERVER, IID_ISmsSharedSecret, (LPVOID *)pSmsSharedSecret.GetAddressOf()))
CHR(CoCreateInstance(CLSID_TaskScheduler, 0, CLSCTX_INPROC_SERVER, IID_ITaskService, (PVOID*)&pTaskService))
CHR(CoCreateInstance(rclsid, nullptr, CLSCTX_LOCAL_SERVER, riid, (LPVOID*)pObj.GetAddressOf()))
CHR(CoSetProxyBlanket( pEnumerator.Get(), 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 3, ( ( void * )( INT_PTR )-1 ), EOAC_DEFAULT))
CHR(CoSetProxyBlanket( pObj.Get(), 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 3, nullptr, EOAC_STATIC_CLOAKING))
CHR(CoSetProxyBlanket( pWbemServices.Get(), 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 3, ( ( void * )( INT_PTR )-1 ), EOAC_DEFAULT))
CHR(CreateMobileNetworkPropertiesForCanJsonValue( &canConfiguration, pDeviceInfo, pPhoneNumber, pHomeOperatorInfo, pRilSystemType, pwszBillingOperatorId, ppJsonValue))
CHR(CreateScope(pwszServiceTarget, LIVE_ID_SERVICE_POLICY, strScopeRequested))
CHR(CreateTask( TASK_SCHEDULER_DIRECTORY_NAME, pwszTaskName, pwszTaskXml ))
CHR(CreateTask(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_WNS_CHANNEL_REGISTRATION, pwszTaskXml))
CHR(DdcAccountHelper::EnumerateUsers( pAdmins.GetAddressOf(), pDeviceOwners.GetAddressOf(), pStandardUsers.GetAddressOf(), pConnectedAdmins.GetAddressOf(), &cAdmins, &cDeviceOwners, &cStandardUsers))
CHR(DdcAccountHelper::EnumerateUsers(pAdmins.GetAddressOf(), pDeviceOwners.GetAddressOf(), pStandardUsers.GetAddressOf(), pConnectedAdmins.GetAddressOf()))
CHR(DdcAccountHelper::UsersAuthorizedToSeeLocation(pAuthorizedCids.GetAddressOf()))
CHR(DdcCommandController::DeviceUnlocked(wstrConfiguration, pdcHandle))
CHR(DdcCommandController::HandleCommand(pdcHandle))
CHR(DdcCommandController::HandleLocateCommandRetry(wstrConfiguration, pdcHandle))
CHR(DdcCommandController::HandleSmsCommands())
CHR(DdcCommandController::HandleUpdateStatusRetry(wstrConfiguration, pdcHandle))
CHR(DdcCommandController::HandleWnsCommand())
CHR(DdcCommandController::NotifyClient(WNF_SHEL_DDC_CONNECTED_ACCOUNTS_CHANGED))
CHR(DdcCommandController::UserSessionCommand())
CHR(DdcCommandExecutor::ProcessLocateCommand(&prefix, pdcHandle, 0, dwRetries))
CHR(DdcCommandExecutor::ProcessLocateCommand(&prefix, pdcHandle, fEnableLocation))
CHR(DdcCommandExecutor::ProcessLockCommand(&prefix, pdcHandle, pwszPin, pwszCpn, fRingAfterLock, vCids))
CHR(DdcCommandExecutor::ProcessRingCommand(&prefix, pdcHandle))
CHR(DdcCommandExecutor::ProcessStartFamilySafetyCommand(&prefix))
CHR(DdcCommandExecutor::ProcessWipeCommand(&prefix, pdcHandle))
CHR(DdcCommandExecutor::UpdateStatus(&prefix, &context, pdcHandle, &dwHttpStatus))
CHR(DdcDeviceInfoHelper::FmdDisabledByPolicy(&fIsFmdDisabledByPolicy))
CHR(DdcDeviceInfoHelper::GetDeviceHardwareInfo(pHardwareInfo.GetAddressOf()))
CHR(DdcDeviceInfoHelper::GetDeviceInfo(pDeviceInfo.GetAddressOf(), fLight))
CHR(DdcDeviceInfoHelper::LocationSyncEnabled(&fLocationSyncEnabled))
CHR(DdcDeviceInfoHelper::MasterLocationSwitchOn(&fMasterLocationSwitchOn))
CHR(DdcDrivesHelper::FormatDeviceStorageInfo(pStorageInfo.GetAddressOf()))
CHR(DdcMobileNetworksHelper::GetMobileNetworksProperties(pMobileNetworks.GetAddressOf()))
CHR(DdcMsaHelper::GetDeviceTicket(&wstrTicket))
CHR(DdcProtectionStateHelper::GetProtectionState(pProtectionState.GetAddressOf()))
CHR(DdcRegistrationController::RegisterDevice(this, fFullRefresh, fFreeNetworkOnly, fLight, eTrigger, pdcHandle))
CHR(DdcRegistrationController::RegisterUserDevice(this, fFullRefresh, eTrigger, pdcHandle))
CHR(DdcRegistry::SetByteValue( (( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), REGISTRY_KEY_DEVICEDIRECTORY, REGISTRY_VALUE_LAST_USER_REGISTRATION_TIMESTAMP, (BYTE *)&ftNow, (DWORD)sizeof(FILETIMEEX)))
CHR(DdcRegistry::SetByteValue( (( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), wszMdmSettingsKey, REGISTRY_VALUE_CHANNEL_URL_EXPIRATION, (BYTE *)&ftExpiration, (DWORD)sizeof(FILETIMEEX)))
CHR(DdcStateController::HandleUpgrade())
CHR(DdcStateController::IntegrityCheck())
CHR(DdcToastHelper::PostToastNotification( 603, 604, 0, 0))
CHR(DdcUserInfoHelper::GetUserInfo(pUserInfo.GetAddressOf()))
CHR(DeleteTaskIfExists( TASK_SCHEDULER_DIRECTORY_NAME, pwszTaskName ))
CHR(DeleteTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_WNS_CHANNEL_REGISTRATION))
CHR(DeviceConnected(&fConnected))
CHR(EnumerateUsers(0, ppAdmins, ppDeviceOwners, ppStandardUsers, pcAdmins, pcDeviceOwners, pcStandardUsers))
CHR(EnumerateUsers(1, ppConnectedAdmins, nullptr, nullptr, pcConnectedAdmins, nullptr, nullptr))
CHR(ExecuteWmiQuery(L"select ChassisTypes from Win32_SystemEnclosure", L"ROOT\\CIMV2", pEnumerator.GetAddressOf()))
CHR(FindSmBiosTable(pSmBiosData, 1, (TSmBiosTable**)&pSystemInfo))
CHR(FormatHardwareDisplayInfo(&pJsonValue))
CHR(FormatIndividualHardwareDisplayInfo( pDisplayInfo->m_szDeviceIdentifier, pDisplayInfo->m_szDeviceName, pDisplayInfo->m_szDescription, pDisplayInfo->m_szDisplayMemoryEnglish, pJsonValue.ReleaseAndGetAddressOf()))
CHR(FormatMessageFromStringAlloc( ppszFormattedToastXMLPayload, c_szToastPayloadFormat, c_szTaskUri, pszTitleDescription, pszActionValue))
CHR(FormatNetworkCode(&pHomeOperatorInfo->stHomeOperator[0], 1, pJsonObject.Get()))
CHR(FormatNetworkCode(&pHomeOperatorInfo->stHomeOperator[1], 2, pJsonObject.Get()))
CHR(FormatNetworkCode(0, 1, pJsonObject.Get()))
CHR(FormatNetworkCode(0, 2, pJsonObject.Get()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_Flighting_ClientAttributes).Get(), spCommonTargetingAttributesFactory.GetAddressOf()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Networking_PushNotifications_PushNotificationChannelManager).Get(), spChannelManagerStatics.GetAddressOf()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Security_Authentication_OnlineId_OnlineIdServiceTicketRequest).Get(), pRequestFactory.GetAddressOf()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), pWebdAuthenticator.GetAddressOf()))
CHR(GetActivationFactory( HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebTokenRequest).Get(), pWebTokenRequestFactory.GetAddressOf()))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), pJsonObjectStatics.GetAddressOf()))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValueStatics.GetAddressOf()))
CHR(GetAppAndBrowserValues(pProtectionState.Get()))
CHR(GetAssessmentFieldNames(eAssessment, &pwszJsonHealth, &pwszJsonStatus))
CHR(GetAssessmentValues(eAssessments[i], pHealthAdvisorShield.Get(), pProtectionState))
CHR(GetAvProviderValues(&pProducts->pList[i], pJsonValue.ReleaseAndGetAddressOf()))
CHR(GetDefenderValues(pProtectionState.Get()))
CHR(GetDeviceInfoHeavy(pDeviceInfo.Get()))
CHR(GetDeviceInfoLight(pDeviceInfo.Get()))
CHR(GetDisplayInfoValues(pDxDiagRoot.Get(), vDisplayInfo))
CHR(GetDrivesInfo(vVolumeInfo))
CHR(GetHealthAdvisorValues(pProtectionState.Get()))
CHR(GetMdmCommonSettingValuesPersistedLocation(wszMdmSettingsKey, &cchMdmSettingsKey))
CHR(GetNetworkProtectionValues(pProtectionState.Get()))
CHR(GetProcessorInformation(pdwNumProcessors, pwstrProcessorName, pwstrProcessorSpeed))
CHR(GetProtectionPillarFieldNames(ePillar, &pwszJsonHealth, &pwszJsonStatus))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_AppAndBrowserProtection, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_Defender, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_HealthAdvisor, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_NetworkProtection, pProtectionState.Get()))
CHR(GetProtectionPillarStatus(pDashboard.Get(), Pillars_ThreatProtection, pProtectionState.Get()))
CHR(GetSimCount(&eSimCount))
CHR(GetSmBiosData(&pSmBiosData))
CHR(GetSmBiosString(pSystemInfo, pSystemInfo->SerialNumber, &pwszSerialNumber))
CHR(GetStringValue(pObject.Get(), L"szDescription", pDisplayInfo->m_szDescription, sizeof(pDisplayInfo->m_szDescription)/sizeof(TCHAR)))
CHR(GetStringValue(pObject.Get(), L"szDeviceIdentifier", pDisplayInfo->m_szDeviceIdentifier, sizeof(pDisplayInfo->m_szDeviceIdentifier)/sizeof(TCHAR)))
CHR(GetStringValue(pObject.Get(), L"szDisplayMemoryEnglish", pDisplayInfo->m_szDisplayMemoryEnglish, sizeof(pDisplayInfo->m_szDisplayMemoryEnglish)/sizeof(TCHAR)))
CHR(GetStringValue(pObject.Get(), L"szManufacturer", pDisplayInfo->m_szDeviceName, sizeof(pDisplayInfo->m_szDeviceName)/sizeof(TCHAR)))
CHR(GetSystemMemory(&ullRam))
CHR(GetSystemOrDefaultWpnPlatform(&spWpnPlatform))
CHR(GetSystemType(pwstrSystemType))
CHR(GetThreatProtectionValues(pProtectionState.Get()))
CHR(GetTriggerArgument(wstrConfiguration, eTrigger))
CHR(HandleCommandData( dwProfileId, dwRequestId, dwTimestamp, pbCommandData, cbCommandData, MdmCommandChannelType_SMS, ftUtc))
CHR(HandleCommandData( dwProfileId, dwRequestId, dwTimestamp, pbCommandData, cbCommandData, MdmCommandChannelType_WNS, ftUtc))
CHR(hr)
CHR(HRESULT_FROM_WIN32(1317L))
CHR(HRESULT_FROM_WIN32(2L))
CHR(HRESULT_FROM_WIN32(GetLastError()))
CHR(HRESULT_FROM_WIN32(GetPersistedRegistryLocationW( wszMdmCommonPersistedKeyId, wszMdmCommonSettingsKey, pwszPath, *pcchPath, pcchPath)))
CHR(IsFreeNetwork(&fFreeNetwork))
CHR(IsTooSoonForUserRegistration(&fTooSoonForRegistration))
CHR(m_pTaskService->GetFolder(bszTaskFolder, pTaskFolder.GetAddressOf()))
CHR(MdmConnectedAccountsChanged(MdmDeviceContext_Desktop, pAdmins.Get(), pDeviceOwners.Get(), pStandardUsers.Get(), pConnectedAdmins.Get(), &fConnectedAccountsChanged))
CHR(MdmEnumerateUsers(&vAdmins, &vDeviceOwners, &vStandardUsers, fConnectedOnly))
CHR(MdmGetServiceTarget(&pwszServiceTarget))
CHR(MdmIsRegisteredWithService(MdmDeviceContext_Desktop, &fRegistered))
CHR(MdmParseCommandData(bCommand, cbCommand, &cmdType))
CHR(MdmParseLocateCommand(bCommand, cbCommand, &fEnableLocation))
CHR(MdmParseLockCommand(bCommand, cbCommand, &pwszPin, &pwszCpn, &fRingAfterLock, vCids))
CHR(MdmProtectionStateChanged(MdmDeviceContext_Desktop, pProtectionState.Get(), &fProtectionStateChanged))
CHR(MdmRegisterDevice(&dwHttpStatus, wstrTicket.c_str(), &parameters))
CHR(MdmRegisterUserDevice( &dwHttpStatus, wstrTicket.c_str(), eTrigger, nullptr, pUserInfo.Get() ))
CHR(MdmSetFindMyDevice(fEnable))
CHR(MdmShouldRegisterDevice(&fShouldRegister, &parameters))
CHR(MdmUpdateStatus( pdwHttpStatus, wstrTicket.c_str(), dwRequestId, eStatus, eCommandSource, dwRetries, dwErrorCode, ftReceivedTime, pftWorkStarted, pftWorkFinished, pfLocation, pAuthorizedCids, pAdmins, pDeviceOwners, pStandardUsers, pConnectedAdmins, pfMasterLocationSwitchOn, pfLocationSyncEnabled, pfMasterLocationEnabledByClient, pfLocationSyncEnabledByClient, ppwszBuffer))
CHR(MdmUsersAuthorizedToSeeLocation(&vAuthorizedCids))
CHR(NotifyClient(PARSED_COMMAND_WNF_STATE, pbCommandDataWithPrefix, cbCommandDataWithPrefix))
CHR(OpenStorageTypeSearch(&phContext))
CHR(pAdmins.As(&pAdminsAsValue))
CHR(pAdmins.As(&pAdminsAsVector))
CHR(pAdminsAsVector->Append(pCID.Get()))
CHR(pAuthorizedCids.As(&pAuthorizedCidsAsValue))
CHR(pAuthorizedCids.As(&pAuthorizedCidsAsVector))
CHR(pAuthorizedCidsAsVector->Append(pCID.Get()))
CHR(pCommandHandler->GetDeviceUnlockedTrigger(pwszTrigger, &cchTrigger))
CHR(pCommandHandler->LoadResource(MdmResource_DefaultLockMessage, &dwResourceId))
CHR(pCommandHandler->LoadResource(MdmResource_DefaultLockMessageWithCpn, &dwResourceId))
CHR(pCommandHandler->LoadResource(MdmResource_LockScreenTitle, &dwResourceId))
CHR(pContainer->EnumChildContainerNames(nItem, wszContainer, 256))
CHR(pContainer->GetChildContainer(wszContainer, &pObject))
CHR(pContainer->GetNumberOfChildContainers(&nInstanceCount))
CHR(pdcActivationWrapper.ActivateClient(L"RegisterDevice"))
CHR(pdcActivationWrapper.ActivateClient(L"RegisterUserDevice"))
CHR(pDeviceHardwareInfo.As(&pDeviceHardwareInfoAsValue))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_DISPLAY_CARDS).Get(), pJsonValue.Get()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_NUM_PROCESSORS).Get(), pJsonValue.Get()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_PROCESSOR_NAME).Get(), pJsonValue.Get()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_PROCESSOR_SPEED).Get(), pJsonValue.Get()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_RANDOM_ACCESS_MEMORY).Get(), pJsonValue.Get()))
CHR(pDeviceHardwareInfo->SetNamedValue(HStringReference(JSON_SYSTEM_TYPE).Get(), pJsonValue.Get()))
CHR(pDeviceInfo.As(&pDeviceInfoAsValue))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_CHASSIS_TYPE).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_COMMON_TARGETING_ATTRIBUTES).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_DEVICE_BATTERY_CAPABLE).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_FRIENDLY_NAME).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_LAST_MAJOR_UPDATE_TIMESTAMP).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_LAST_UPDATE_TIME).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_LOCATION_COLLECTION_OPT_IN).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_MASTER_LOCATION_SWITCH_IN).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OEM_MANUFACTURER).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OEM_MODEL_NAME).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OEM_SERIAL_NUMBER).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_ONECORE_DEVICE_FAMILY).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_ONECORE_DEVICE_FORM).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_EDITION).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_GENUINE_STATE).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_LOCALE).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_REACTIVATION_POLICY_STATE).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_OS_SKU).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_POWER_PLATFORM).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_RELEASE_SHORT_NAME).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_RESET_PROTECTION_CAPABLE).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_SHORT_OS_VERSION).Get(), pJsonValue.Get()))
CHR(pDeviceInfo->SetNamedValue(HStringReference(JSON_UPDATES_AVAILABLE).Get(), pJsonValue.Get()))
CHR(pDeviceOwners.As(&pDeviceOwnersAsValue))
CHR(pDeviceOwners.As(&pDeviceOwnersAsVector))
CHR(pDeviceOwnersAsVector->Append(pCID.Get()))
CHR(pDxDiagProvider->GetRootContainer( &pDxDiagRoot ))
CHR(pDxDiagProvider->Initialize( &dxDiagInitParam ))
CHR(pDxDiagRoot->GetChildContainer( L"DxDiag_DisplayDevices", &pContainer))
CHR(pEnclosureInfo->Get(L"ChassisTypes", 0, &chassisTypesRawVariant, 0, 0))
CHR(pEnumerator->Next(5000, 1, pEnclosureInfo.GetAddressOf(), &cObjects))
CHR(pFunc(pAppId, pGenuineState, pUIOptions))
CHR(pIdentity->get_Tickets(&pTickets))
CHR(pJsonArray.As(&pJsonArrayAsValue))
CHR(pJsonArray.As(&pJsonArrayAsVector))
CHR(pJsonArrayAsVector->Append(pJsonValue.Get()))
CHR(pJsonObject.As(&pJsonObjectAsValue))
CHR(pJsonObject->GetNamedValue(HStringReference(JSON_LOCK_MESSAGE).Get(), pJsonValue.GetAddressOf()))
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_MCC : JSON_HOME_OPERATOR_MCC_2).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_MNC : JSON_HOME_OPERATOR_MNC_2).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_NID : JSON_HOME_OPERATOR_NID_2).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(dwNetworkNumber == 1 ? JSON_HOME_OPERATOR_SID : JSON_HOME_OPERATOR_SID_2).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_HEALTH).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_NAME).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_RTP_STATUS).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_SIGNATURE_STATUS).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_AV_PROVIDER_STATUS).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_BILLING_OPERATOR_ID).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_CDMA_EXISTS).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_DESCRIPTION).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_ID).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_MEMORY).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_DISPLAY_NAME).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_GSM_EXISTS).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_ICCID).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_IMEI).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_MEID).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_PHONE_NUMBER).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_SIM_SLOT_NUMBER).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_BL_CAPABLE).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_BL_KEYID).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_BL_STATE).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_DEVICE_INSTANCE).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_DEVICE_NAME).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_DRIVE_INFO).Get(), pJsonArrayAsValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_FREE_SPACE).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_ID).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_TOTAL_SPACE).Get(), pJsonValue.Get()))
CHR(pJsonObject->SetNamedValue(HStringReference(JSON_STORAGE_TYPE).Get(), pJsonValue.Get()))
CHR(pJsonObjectStatics->Parse(HStringReference(pwszResponse).Get(), pJsonObject.GetAddressOf()))
CHR(pJsonValue->get_ValueType(&eValueType))
CHR(pJsonValue->GetString(hstrMessage.GetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue(!!(this->BitLockerCapable), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)(*pRilSystemType & RIL_SYSTEMTYPE_3GPP), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)(*pRilSystemType & RIL_SYSTEMTYPE_CDMA), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfDeviceBatteryCapable, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfLocationCollectionOptIn, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfMasterLocationSwitchOn, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfResetProtectionCapable, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateBooleanValue((boolean)*pfUpdatesAvailable, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue((DWORD)*peOsGenuineState, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(*pdwOsSku, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(*piChassisType, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(*piOsReactivationPolicyState, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(dwNumProcessors, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(dwOneCoreDeviceFamily, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(dwOneCoreDeviceForm, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(ePowerPlatformRole, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pAssessmentStatus[i].uiStatusCode, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pCanConfiguration->dwSlotAffinity, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwMCC, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwMNC, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwNID, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(pRilNetworkCode->dwSID, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(static_cast<double>(this->BitLockerState), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(this->DeviceInstance, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateNumberValue(this->Store, pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(browser.get()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(iter.c_str()).Get(), pCID.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pDeviceInfo->wszSerialNumber3gpp).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pDeviceInfo->wszSerialNumber3gpp2).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pocGuidBlKeyId).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pocGuidStorageId).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pPhoneNumber->wszNumber).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(ppwszStatus[i]).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppInstallRule).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppInstallRuleControlledByPolicy).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppsSmartScreen).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAppsSmartScreenControlledByPolicy).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszAssessmentHealth).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszBillingOperatorId).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszBrowserSmartScreen).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszBrowserSmartScreenControlledByPolicy).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszCommonTargetingAttributes).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderCloudBasedProtectionOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderCloudBasedProtectionStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderRtpEnabled).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderRtpOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderRunning).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderSampleSubmissionEnabled).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszDefenderSampleSubmissionOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszFolderGuardEnabled).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszFolderGuardOrigin).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszFriendlyName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszHealth).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszHealthAsString).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszLastMajorUpdateTime).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOemManufacturer).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOemModelName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOemSerialNumber).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOs).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOsEdition).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszOsLocale).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszProcessorName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszProcessorSpeed).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszProviderName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszRandomAccessMemory).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszReleaseShortName).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszRtpStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszShortOsVersion).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszSignatureStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszStatus).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszStatusAsString).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszSystemType).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszThirdPartyAvActive).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(pwszTimestamp).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(this->Name).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(to_wstring(this->FreeSpace).c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(to_wstring(this->TotalSize).c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrDeviceDescription.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrDeviceId.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrDeviceName.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wstrMemory.c_str()).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pJsonValueStatics->CreateStringValue(HStringReference(wszIccid).Get(), pJsonValue.ReleaseAndGetAddressOf()))
CHR(pLocationManager->get_LocationMasterSwitch(&fMasterLocationSwitchOn))
CHR(pLocationManager->put_LocationMasterSwitch(fEnable))
CHR(pManager->AuthenticateUserHostAsync(pRequest.Get(), pOperation.GetAddressOf()))
CHR(pManager->put_ApplicationId(g_ApplicationId))
CHR(pNetworkCostManager->GetCost(&dwCost, 0))
CHR(pObject->GetPropW( wstrName, &var ))
CHR(pOrchestrator->CreateUpdateSession(UpdateSessionTypeOTAOS, __uuidof(**(&pSession)), IID_PPV_ARGS_Helper(&pSession)))
CHR(pProtectionState.As(&pProtectionStateAsValue))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APP_INSTALL_RULE).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APP_INSTALL_RULE_CONTROLLED_BY_POLICY).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APPS_SMART_SCREEN_).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_APPS_SMART_SCREEN_CONTROLLED_BY_POLICY).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_BROWSER_SMART_SCREEN_).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_BROWSER_SMART_SCREEN_CONTROLLED_BY_POLICY).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_CLOUD_BASED_PROTECTION_ORIGIN).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_CLOUD_BASED_PROTECTION_STATUS).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_FOLDER_GUARD_ENABLED).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_FOLDER_GUARD_ORIGIN).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_RTP_ENABLED).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_RTP_ORIGIN).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_RUNNING).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_SAMPLE_SUBMISSION_ENABLED).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_DEFENDER_SAMPLE_SUBMISSION_ORIGIN).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_THIRD_PARTY_AV_ACTIVE).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(JSON_THREAT_PROTECTION_AV_PROVIDERS).Get(), pJsonArrayAsValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(ppwszJsonFields[i]).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(pwszJsonHealth).Get(), pJsonValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(pwszJsonStatus).Get(), pJsonArrayAsValue.Get()))
CHR(pProtectionState->SetNamedValue(HStringReference(pwszJsonStatus).Get(), pJsonValue.Get()))
CHR(pProvider.As(&pProvider2))
CHR(pProvider2->get_Authority(providerAuthority.GetAddressOf()))
CHR(pRegisteredTask->put_Enabled(fEnabled ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0)))
CHR(pRegisteredTask->Run(vtEmpty, 0))
CHR(pRequestFactory->CreateOnlineIdServiceTicketRequest( HStringReference(pwszServiceTarget).Get(), HStringReference(LIVE_ID_SERVICE_POLICY).Get(), pRequest.GetAddressOf()))
CHR(ProcessRegisterDevice(wstrConfiguration, pdcHandle))
CHR(ProcessRegisterPhone(wstrConfiguration, pdcHandle))
CHR(ProcessRegisterUserDevice(wstrConfiguration, pdcHandle))
CHR(ProcessStateChange())
CHR(pSearchResult->get_Updates(&pUpdates))
CHR(pSession->get_LastUpdateCheckTime(&ftLastUpdateCheckTime))
CHR(pSmsSharedSecret->GetSecretCurrentId(&dwCurrentSecretId))
CHR(pSmsSharedSecret->GetSecretUpdatingId(&dwUpdatingSecretId))
CHR(pSmsSharedSecret->GetSharedSecret(dwCurrentSecretId, 0, &cbCurrentSecretSize))
CHR(pSmsSharedSecret->GetSharedSecret(dwCurrentSecretId, pbCurrentSecret, &cbCurrentSecretSize))
CHR(pSmsSharedSecret->GetSharedSecret(dwUpdatingSecretId, 0, &cbUpdatingSecretSize))
CHR(pSmsSharedSecret->GetSharedSecret(dwUpdatingSecretId, pbUpdatingSecret, &cbUpdatingSecretSize))
CHR(pSmsSharedSecret->GetSmsCommands(&pwszCommands, &cCommands))
CHR(pSmsSharedSecret->SetUpdatingSecretAsCurrentSecret())
CHR(pStandardUsers.As(&pStandardUsersAsValue))
CHR(pStandardUsers.As(&pStandardUsersAsVector))
CHR(pStandardUsersAsVector->Append(pCID.Get()))
CHR(pTaskFolder->RegisterTask( bszTaskName, bszTaskXml, TASK_CREATE_OR_UPDATE, vtEmpty, vtEmpty, TASK_LOGON_SERVICE_ACCOUNT, vtEmpty, pCreatedTask.GetAddressOf() ))
CHR(pTaskService->Connect(vtEmpty, vtEmpty, vtEmpty, vtEmpty))
CHR(pTaskStateHandler->ProcessStateChange())
CHR(pTicket->get_Value(hstrTicket.GetAddressOf()))
CHR(pTickets->GetAt(0, &pTicket))
CHR(pTokenRequestResponse->get_Token(ustrToken.GetAddressOf()))
CHR(pTokenRequestResponses->GetAt(0, &pTokenRequestResponse))
CHR(pUpdates->get_Count(&lCountOfUpdates))
CHR(pUpdateSearcher->put_Online(((VARIANT_BOOL)0)))
CHR(pUpdateSearcher->Search(SelectionFilter.get(), &pSearchResult))
CHR(pUpdateSession->CreateUpdateSearcher(&pUpdateSearcher))
CHR(pUserInfo.As(&pUserInfoAsValue))
CHR(pUserInfo->SetNamedValue(HStringReference(JSON_DEFAULT_BROWSER).Get(), pJsonValue.Get()))
CHR(pVolInfo->Format(pJsonValue.ReleaseAndGetAddressOf()))
CHR(pWbemLocator->ConnectServer( _bstr_t(wstrServer.c_str()), nullptr, nullptr, 0, 0, nullptr, nullptr, pWbemServices.ReleaseAndGetAddressOf()))
CHR(pWbemServices->ExecQuery( _bstr_t(L"WQL"), _bstr_t(wstrQuery.c_str()), WBEM_FLAG_RETURN_IMMEDIATELY | WBEM_FLAG_FORWARD_ONLY, nullptr, pEnumerator.ReleaseAndGetAddressOf()))
CHR(pWebdAuthenticator->FindAccountProviderAsync( HStringReference(DEFAULT_PROVIDER_ID).Get(), pFindProviderOperation.GetAddressOf()))
CHR(pWebdAuthenticator->GetTokenSilentlyAsync(tokenRequest.Get(), &pTokenRequestOperation))
CHR(pWebTokenRequestFactory->Create( pProvider.Get(), HStringReference(strScopeRequested.c_str()).Get(), HStringReference(strAppId).Get(), tokenRequest.GetAddressOf()))
CHR(pWebTokenRequestResult->get_ResponseData(&pTokenRequestResponses))
CHR(pWebTokenRequestResult->get_ResponseStatus(&responseStatus))
CHR(QueryCommandState(&prefix, &cmdType, &pwszPin, &pwszCpn, &fRingAfterLock, &fEnableLocation, &vCids))
CHR(QueryWnfState(dwCan == 0 ? &WNF_CELL_CONFIGURED_LINES_CAN0 : &WNF_CELL_CONFIGURED_LINES_CAN1, (PVOID)&canConfiguration, &dwSize))
CHR(RegisterApplication())
CHR(RegisterChannel(&ftExpiration, pwszChannelUri, pcchChannelUri))
CHR(RegisterWnsChannel(pftExpiration, pwszChannelUri, pcchChannelUri))
CHR(spAppEndpoint->PostNotification( pszPackageName, pszAppId, 0, WPN_FLAGS_NONE, pszFormattedToastXMLPayload, sc_szSettingsTag, sc_szSettingsGroup, wftExpirationTime, 0, 0, nullptr, nullptr, nullptr, 0, &dwCookie))
CHR(spChannel->get_ExpirationTime(&expiryDateTime))
CHR(spChannel->get_Uri(hstrUri.GetAddressOf()))
CHR(spChannelManagerStatics->CreatePushNotificationChannelForApplicationAsyncWithId( HStringReference(wszAppId).Get(), spChannelOperation.GetAddressOf()))
CHR(spClientAttributes->ToJsonString(hstrJsonAtttributes.GetAddressOf()))
CHR(spCommonTargetingAttributesFactory->GetClientAttributesForApp( HStringReference(CTAC_APP_NAME).Get(), HStringReference(L"5").Get(), spClientAttributes.GetAddressOf()))
CHR(spPlatform.CoCreateInstance( __uuidof(CWindowsPushNotificationPlatform), 0, CLSCTX_LOCAL_SERVER))
CHR(spPlatform->CreateAppEndpoint(&spAppEndpoint))
CHR(spWpnPlatform->CreateAppEndpoint(spAppEndpoint.GetAddressOf()))
CHR(spWpnPlatform->CreateRegistrationEndpoint(spWpnRegistrationEndpoint.GetAddressOf()))
CHR(spWpnRegistrationEndpoint.As(&spWpnRegistrationSystemEndpoint))
CHR(spWpnRegistrationSystemEndpoint->RegisterSystemApplication( wszPfn, wszAppId, CAPABLE_INTERNET | CAPABLE_CLOUD, sizeof(WNS_COMMAND_WNF_STATE), (PBYTE)(&(WNS_COMMAND_WNF_STATE.Data))))
CHR(StringCchPrintfW( pwszShortOsVersion, c_cchShortOsVersion, L"%u.%u.%u.%u", ((UINT16 *)&ullPlatformVersion)[3], ((UINT16 *)&ullPlatformVersion)[2], ((UINT16 *)&ullPlatformVersion)[1], ((UINT16 *)&ullPlatformVersion)[0] ))
CHR(StringCchPrintfW( pwszTaskName, 32, TASK_SCHEDULER_DEVICE_UNLOCKED_FORMAT, pPrefix->dwRequestId))
CHR(StringCchPrintfW( pwszTaskName, 32, TASK_SCHEDULER_LOCATE_COMMAND_RETRY_FORMAT, pPrefix->dwRequestId))
CHR(StringCchPrintfW( pwszTaskName, 32, TASK_SCHEDULER_UPDATE_STATUS_RETRY_FORMAT, pPrefix->dwRequestId))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszDeviceUnlockedXmlFormat, pwszTrigger, DEVICE_DIRECTORY_CLIENT_DEVICE_UNLOCKED_SWITCH, wstrEncodedPrefix.c_str(), wstrEncodedContext.c_str()))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszLocateCommandRetryXmlFormat, COMMAND_RETRY_PERIOD_DEFAULT, now.wYear, now.wMonth, now.wDay, now.wHour, now.wMinute, now.wSecond, fConnected ? L"" : pwszConnectivityBackUpTrigger, DEVICE_DIRECTORY_CLIENT_LOCATE_COMMAND_RETRY_SWITCH, dwRetries + 1, wstrEncodedPrefix.c_str()))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszUpdateStatusRetryXmlFormat, COMMAND_RETRY_PERIOD_DEFAULT, now.wYear, now.wMonth, now.wDay, now.wHour, now.wMinute, now.wSecond, fConnected ? L"" : pwszConnectivityBackUpTrigger, DEVICE_DIRECTORY_CLIENT_UPDATE_STATUS_RETRY_SWITCH, wstrEncodedPrefix.c_str(), wstrEncodedContext.c_str()))
CHR(StringCchPrintfW( pwszTaskXml, 1800, pwszWnsChannelRegistrationFallbackFormat, stStartTime.wYear, stStartTime.wMonth, stStartTime.wDay, stStartTime.wHour, stStartTime.wMinute, stStartTime.wSecond))
CHR(StringCchPrintfW(pwszFormattedString, (sizeof(*RtlpNumberOf(pwszFormattedString))), pwszLoadedString, pwszCpn))
CHR(StringFromCLSID(g_ApplicationId, &strAppId))
CHR(StringFromCLSID(this->BitLockerKeyId, &pocGuidBlKeyId))
CHR(StringFromCLSID(this->StorageId, &pocGuidStorageId))
CHR(taskSchedulerWrapper.DeleteLocateCommandRetrySchedule(&prefix))
CHR(taskSchedulerWrapper.DeleteLocateCommandRetrySchedule(pPrefix))
CHR(taskSchedulerWrapper.DeleteUpdateStatusRetrySchedule(&prefix))
CHR(taskSchedulerWrapper.DeleteUpdateStatusRetrySchedule(pPrefix))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_PHONE_UPGRADE_TASK, 1))
CHR(taskSchedulerWrapper.Initialize())
CHR(taskSchedulerWrapper.RunTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_PHONE_UPGRADE_TASK))
CHR(taskSchedulerWrapper.ScheduleDeviceUnlockedEvent(pPrefix, &updateStatusContext, pCommandHandler.Get()))
CHR(taskSchedulerWrapper.ScheduleLocateCommandRetry(pPrefix, dwRetries))
CHR(taskSchedulerWrapper.ScheduleUpdateStatusRetry(pPrefix, &updateStatusContext))
CHR(taskSchedulerWrapper.ScheduleUpdateStatusRetry(pPrefix, pContext))
CHR(Windows::Foundation::Initialize(RO_INIT_MULTITHREADED))
CL$`H
ClientID
CloseFindStorageSearch
CloseHandle
CloseThreadpool
CloseThreadpoolTimer
CoCreateFreeThreadedMarshaler
CoCreateInstance
combase.dll
CommandChannelType
CommandId
CommandResult
CommandTooOld
CommandType
CommonTargetingAttributes
CompanyName
CompareFileTime
-ConnectedToNetwork
consumers
ContextParsed
CoSetProxyBlanket
CoTaskMemFree
CoWaitForMultipleHandles
CPR(bszTaskFolder)
CPR(bszTaskName)
CPR(bszTaskXml)
CPR(pbBinaryData)
CPR(pbCommandDataWithPrefix)
CPR(pbCurrentSecret)
CPR(pbDecodedMessage)
CPR(pbEndOfTriplets)
CPR(pbUpdatingSecret)
CPR(pCanConfiguration)
CPR(pcchChannelUri)
CPR(pCmdType)
CPR(pCommandHandler)
CPR(pContext)
CPR(pdwHttpStatus)
CPR(pdwSku)
CPR(peSimCount)
CPR(pfAvailable)
CPR(pfCapable)
CPR(pfChannelRenewed)
CPR(pfConnected)
CPR(pfEnableLocation)
CPR(pfFmdDisabledByPolicy)
CPR(pfFreeNetwork)
CPR(pfMasterLocationSwitchOn)
CPR(pfResetProtectionCapable)
CPR(pfRingAfterLock)
CPR(pftExpiration)
CPR(pftLastUpdateCheckedTime)
CPR(pftTime)
CPR(piChassisType)
CPR(pInfo)
CPR(piPolicyState)
CPR(pJsonObject)
CPR(ppAuthorizedCids)
CPR(ppEnumerator)
CPR(ppJsonValue)
CPR(ppObj)
CPR(pPrefix)
CPR(pProtectionState)
CPR(ppszMessage)
CPR(ppwszCpn)
CPR(ppwszFriendlyName)
CPR(ppwszOsLocale)
CPR(ppwszPin)
CPR(ppwszShortOsVersion)
CPR(pszMessageTemplate)
CPR(pUllBytes)
CPR(pvCids)
CPR(pwstrDeviceAge)
CPR(pwstrProcessorName)
CPR(pwstrProcessorSpeed)
CPR(pwstrRandomAccessMemory)
CPR(pwstrSerialNumber)
CPR(pwstrSystemType)
CPR(pwstrToken)
CPR(pwszChannelUri)
CPR(pwszConfiguration)
CPR(pwszFriendlyName)
CPR(pwszOsLocale)
CPR(pwszShortOsVersion)
CPR(pwszTaskName)
CPR(pwszXml)
CreateEventExW
CreateMutexExW
CreateMutexW
CreateSemaphoreExW
CreateThread
CreateThreadpool
CreateThreadpoolTimer
CriticalUpdatesAvailable
CriticalUpdatesLastCheckedTime
CurrentMOID
CurrentSecretId
Cx9D$Pu
D$ E3
D$ fD
D$(E3
D$@E3
D$`H+D$|
D$0!L$(H
D$0$?<
D$0E3
D$0H;
D$8E3
D$8H!D$@H!D$0
D$H9\$@u
D$HE3
D$pE3
d$PE3
D$PE3
D$pfD
D$PH+D$|
D$XH;
D;r(r
D8-rx
D8-Uz
D9|$8
D9|$pL
D99vbA
D9d$pH
D9K(t
D9l$|tFH
DebugBreak
-DebugBreak
Default
DefaultBrowser
DefenderCloudBasedProtectionOrigin
DefenderCloudBasedProtectionStatus
DefenderFolderGuardEnabled
DefenderFolderGuardOrigin
DefenderHealth
DefenderRtpEnabled
DefenderRtpOrigin
DefenderRunning
DefenderSampleSubmissionEnabled
DefenderSampleSubmissionOrigin
DefenderStatus
DelayLoadFailureHook
Description
DeviceBatteryCapable
DeviceDirectoryClient
DeviceDirectoryClient Task
DeviceDirectoryClient.dll
DeviceDirectoryClient.pdb
DeviceLocationEnabled
DeviceOwnersCount
-DeviceUnlocked
DeviceUnlocked%lu
DisableThreadLibraryCalls
DisplayName
DllCanUnloadNow
DllGetClassObject
DllRegisterServer
DllUnregisterServer
DriveLetter
DriveName
du SH
DxDiag_DisplayDevices
E7L9u
EditionID
EnableControlledFolderAccess
EnableMasterLocation
EncryptionCapable
en-US
EtwEventWriteTransfer
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
Exception
Expired
ext-ms-onecore-security-antitheft-l1-1-0
ext-ms-onecore-security-antitheft-l1-1-0.dll
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-storage-sense-l1-1-0
ext-ms-win-storage-sense-l1-1-0.dll
ext-ms-win-storage-sense-l1-2-0
f9,Au
f9,Hu
f9,Ku
f9<Bu
f9<pu
f94Hu
fA;Tn
fA9,Qu
fA9<Bu
fA9Z*v$A
FailFast
fB9<@u
fD9$Gu
fD9$xu
fD9,B
fD9,Fu
fD9,Qu
fD9|G
fD9<Su
fD90w+A
fD94Gu
fD9t]
fE9<tu
fF9$@u
fF9<Bu
fF9<Ou
fF9<Pu
fF9<Ru
FileDescription
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
-FirstTimeSignIn
FirstUpdateStatusHttpResult
FirstUpdateStatusResult
FmdDisabledByPolicy
FormatMessageW
FreeLibrary
FreeLibraryAndExitThread
-FreeNetworkOnly
FriendlyName
-Full
FunctionName
fveapi.dll
FveCloseVolume
FveGetAuthMethodInformation
FveGetStatusW
FveIsVolumeEncryptable
FveOpenVolumeW
GD9d$@uO
GetComputerNameExW
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetLastError
GetLocalTime
GetModuleFileNameA
GetModuleFileNameW
GetModuleHandleExW
GetModuleHandleW
GetPersistedRegistryLocationW
GetProcAddress
GetProcessHeap
GetProductInfo
GetPwrCapabilities
GetStorageDeviceInfo
GetStorageInstanceCount
GetSystemFirmwareTable
GetSystemPreferredUILanguages
GetSystemTimeAsFileTime
GetTickCount64
GetVersionExW
GetVolumeNameForVolumeMountPointW
GlobalMemoryStatusEx
GraphicCardId
GraphicsCardsInfo
GsmExists
H SVWH
H!\$ E3
H!\$ L
H!]gH
H!D$HH
H!E'!E
H!t$ L
H9_Hs<
H93t,A
H98u(H
H9L$htnH
H9L$pH
H9L$xH
H9U u,L
H9y(u
hA__^[
hA_A^A]A\_^][
-HandleCommand
-HandleUpgrade
HARDWARE\DESCRIPTION\System\CentralProcessor\0
HcG0E3
HealthAdvisorHealth
HealthAdvisorStatus
HeapAlloc
HeapFree
HL$xH
HomeOperatorMcc
HomeOperatorMcc2
HomeOperatorMnc
HomeOperatorMnc2
HomeOperatorNid
HomeOperatorNid2
HomeOperatorSid
HomeOperatorSid2
HRESULT
https://account.microsoft.com/devices
https://login.windows.local
HttpStatus
I;6u5
Iccid
Identifier
InitializeSListHead
InitializeSRWLock
InstallDate
InstalledMemory
InstalledRam
-IntegrityCheck
internal\onecoreuapbase\inc\createwpnsystemplatform.h
internal\sdk\inc\wil\resource.h
InternalName
IsDebuggerPresent
IsInstalled=0 and Type='Software' and IsHidden=0 and IsAssigned=1 and CategoryIDs contains 'e6cf1350-c01b-414d-a61f-263d14d133b4'
IsProcessorFeaturePresent
JTk_S/
K SVWH
kernelbase.dll
L$ E3
l$ E3
L$ SUVWH
L$ SVWH
L$@fD
L$@H+
L$@H3
L$`H3
L$0E3
L$0fD
L$0H3
L$8E3
L$DE3
L$PE3
L$PH3
L$pH3
L$PH3
L$pH3
L$XL+
L+c(D
L+s(I
L9!t,A
L9{@u
L9{0t#H
L92t,A
L99t,A
L9l$0t[H
L9o@t
LastAccountRemoved
LastMajorUpdateTime
LastUserRegistrationTimestamp
LegalCopyright
Licensing
-Light
LoadLibraryExW
LoadLibraryW
LoadStringW
Local\C9E8AF12-FA27-4748-EC04-38CA71239739_RegisterDevice
Local\SM0:%d:%d:%hs
LocalFree
-LocateCommandRetry
LocateCommandRetry%lu
LocationCollectionOptIn
LocationSyncEnabled
LockMessage
LockUpdateStatus
LogHr
M H1E
M9(t,A
map/set<T> too long
MasterLocationEnabledByClient
MaxClockSpeed
MBI_SSL
MdmClearAllHashes
MdmCommon.DLL
MdmConnectedAccountsChanged
MdmEnumerateUsers
MdmGetLocation
MdmGetServiceTarget
MdmHandlePushNotification
MdmIsFindMyDeviceEnabled
MdmIsRegisteredWithService
MdmParseCommandData
MdmParseEncryptedRequest
MdmParseLocateCommand
MdmParseLockCommand
MdmProtectionStateChanged
MdmRegisterDevice
MdmRegisterUserDevice
MdmSetFindMyDevice
MdmShouldRegisterDevice
MdmUpdateStatus
MdmUsersAuthorizedToSeeLocation
memcpy
memmove
memset
Microsoft
Microsoft Corporation
Microsoft.Windows.DeviceDirectoryClient
Microsoft.Windows.Kernel.Pdc
MICROSOFT.WINDOWSPHONECCPSERVICE_8WEKYB3D8BBWE
ModuleName
MsaStatus
Msg:[%ws] 
msvcp_win.dll
MultiByteToWideChar
NetworkProtectionDomainNetwork
NetworkProtectionHealth
NetworkProtectionPrivateNetwork
NetworkProtectionPublicNetwork
NetworkProtectionStatus
-NewAccount
NoPrimaryMsa
Normal
NotOnFreeNetwork
NotRunning
NotSupported
ntdll.dll
ntelD
NtPowerInformation
NtQueryWnfStateData
NumProcessors
o\$PH
oD$ f
OemManufacturer
OemModelNameCorrected
OemSerialNumber
oL$0f
OLEAUT32.dll
OneCoreDeviceFamily
OneCoreDeviceForm
onecoreuap\shell\devicedirectory\devicedirectoryclient\dll\devicedirectoryclient.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcaccounthelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcbase64coder.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddccommandcontroller.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddccommandexecutor.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcdeviceinfohelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcdriveshelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcmobilenetworkshelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcmsahelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcprotectionstatehelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcregistrationcontroller.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcregistry.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcstatecontroller.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddctaskschedulerwrapper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddctoasthelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcupdatehelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcuserinfohelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcwnslistener.cpp
OobeCompleteTime
OpenSemaphoreW
OpenStorageTypeSearch
OriginalFilename
OSEdition
OsGenuineState
OSLocale
OsReactivationPolicyState
OsSku
OSType32BitX86
OSType64BitX64
oT$@f
OutOfDate
OutputDebugStringW
p WAVAWH
PA^_^][
pA_A^A]A\_^]
Passive
PDA2H
PDCAH
PdcCallWdog
PdcClientActivated
PdcClientCallWatchdogFired
PdcClientId
PdcpAlpcProcessMessage
PdcPH
PdcpProcessMessageInternal
PDCt3
PDCV2_ClientCallback
PDCV2_Deactivate
Pdcv2ActivationClientActivate
Pdcv2ActivationClientDeactivate
Pdcv2ActivationClientRegister
Pdcv2ActivationClientUnregister
Pdcv2pActivationClientCallback
PdcVersion
-Periodic
phoneinfo.dll
PhoneManufacturer
PhoneManufacturerModelName
PhoneNumber
PillarHealth_Green
PillarHealth_Grey
PillarHealth_Red
PillarHealth_Yellow
PillarStatusFlag_AppAndBrowser_AppRepSmartScreenOff
PillarStatusFlag_AppAndBrowser_EdgeSmartScreenOff
PillarStatusFlag_AppAndBrowser_Healthy
PillarStatusFlag_AppAndBrowser_StoreAppsSmartScreenOff
PillarStatusFlag_AppAndBrowser_Unknown
PillarStatusFlag_Common_Healthy
PillarStatusFlag_Common_ThirdParty_UnknownStatus
PillarStatusFlag_Common_Unknown
PillarStatusFlag_Defender_ActiveThreats
PillarStatusFlag_Defender_AsSigsDue
PillarStatusFlag_Defender_AutoSampleSubmissionDisabled
PillarStatusFlag_Defender_AvSigsDue
PillarStatusFlag_Defender_CloudProtectionDisabled
PillarStatusFlag_Defender_EngineUnavailable
PillarStatusFlag_Defender_FullScanDue
PillarStatusFlag_Defender_FullScanRequired
PillarStatusFlag_Defender_Healthy
PillarStatusFlag_Defender_QuickScanDue
PillarStatusFlag_Defender_RebootRequired
PillarStatusFlag_Defender_RtpDisabled
PillarStatusFlag_Defender_ServiceStopped
PillarStatusFlag_Defender_Unknown
PillarStatusFlag_Defender_WdoRequired
PillarStatusFlag_HealthAdvisor_BatteryBrightnessAlert
PillarStatusFlag_HealthAdvisor_BatterySleepSettingsAlert
PillarStatusFlag_HealthAdvisor_Critical
PillarStatusFlag_HealthAdvisor_Healthy
PillarStatusFlag_HealthAdvisor_PristineShellContentPresent
PillarStatusFlag_HealthAdvisor_StorageDiskspaceLow
PillarStatusFlag_HealthAdvisor_StorageHealthOkWithIssues
PillarStatusFlag_HealthAdvisor_Unknown
PillarStatusFlag_HealthAdvisor_Warning
PillarStatusFlag_Network_3rdP_ActionNeeded
PillarStatusFlag_Network_3rdP_ActionRecommended
PillarStatusFlag_Network_3rdP_Expired
PillarStatusFlag_Network_3rdP_L2L1_ActionNeeded
PillarStatusFlag_Network_3rdP_L2L1_ActionRecommended
PillarStatusFlag_Network_3rdP_L2L1_MultipleActionNeeded
PillarStatusFlag_Network_3rdP_L2L1_MultipleActionRecommended
PillarStatusFlag_Network_3rdP_L2L1_NoAction
PillarStatusFlag_Network_3rdP_NoAction
PillarStatusFlag_Network_3rdP_Off
PillarStatusFlag_Network_3rdP_Snoozed
PillarStatusFlag_Network_DomainFwOff
PillarStatusFlag_Network_Healthy
PillarStatusFlag_Network_MultipleFwOff
PillarStatusFlag_Network_NonSecureState
PillarStatusFlag_Network_PrivateFwOff
PillarStatusFlag_Network_PublicFwOff
PillarStatusFlag_Network_ServiceStopped
PillarStatusFlag_Network_ThirdPartyInstalled
PillarStatusFlag_Network_Unknown
PillarStatusFlag_Threat_3rdP_Expired
PillarStatusFlag_Threat_3rdP_L1_MultipleActionNeeded
PillarStatusFlag_Threat_3rdP_L1_MultipleActionRecommended
PillarStatusFlag_Threat_3rdP_L1_NoAction
PillarStatusFlag_Threat_3rdP_L1_SingleActionNeeded
PillarStatusFlag_Threat_3rdP_L1_SingleActionRecommended
PillarStatusFlag_Threat_3rdP_NoAction
PillarStatusFlag_Threat_3rdP_Off
PillarStatusFlag_Threat_3rdP_ScanNeeded
PillarStatusFlag_Threat_3rdP_ScanNeeded_SettingsRecommended
PillarStatusFlag_Threat_3rdP_ScanNeeded_SettingsUpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanNeeded_UpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanRecommended
PillarStatusFlag_Threat_3rdP_ScanSettingsNeeded
PillarStatusFlag_Threat_3rdP_ScanSettingsNeeded_UpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanSettingsRecommended
PillarStatusFlag_Threat_3rdP_ScanSettingsUpdatesNeeded
PillarStatusFlag_Threat_3rdP_ScanSettingsUpdatesRecommended
PillarStatusFlag_Threat_3rdP_ScanUpdatesNeeded
PillarStatusFlag_Threat_3rdP_ScanUpdatesNeeded_SettingsRecommended
PillarStatusFlag_Threat_3rdP_ScanUpdatesRecommended
PillarStatusFlag_Threat_3rdP_SettingsNeeded
PillarStatusFlag_Threat_3rdP_SettingsNeeded_ScanRecommended
PillarStatusFlag_Threat_3rdP_SettingsNeeded_ScanUpdatesRecommended
PillarStatusFlag_Threat_3rdP_SettingsNeeded_UpdatesRecommended
PillarStatusFlag_Threat_3rdP_SettingsRecommended
PillarStatusFlag_Threat_3rdP_SettingsUpdatesNeeded
PillarStatusFlag_Threat_3rdP_SettingsUpdatesNeeded_ScanRecommended
PillarStatusFlag_Threat_3rdP_SettingsUpdatesRecommended
PillarStatusFlag_Threat_3rdP_Snoozed
PillarStatusFlag_Threat_3rdP_UpdatesNeeded
PillarStatusFlag_Threat_3rdP_UpdatesNeeded_ScanRecommended
PillarStatusFlag_Threat_3rdP_UpdatesNeeded_ScanSettingsRecommended
PillarStatusFlag_Threat_3rdP_UpdatesNeeded_SettingsRecommended
PillarStatusFlag_Threat_3rdP_UpdatesRecommended
Policy
PolicyManager_GetPolicyInt
PowerDeterminePlatformRoleEx
PowerPlatformRole
Preferences
PrefixParsed
ProcessExeName
ProcessId
ProcessorNameString
ProcessorSpeed
ProcessorType
ProductName
ProductVersion
ProfileId
-ProtectionStateChanged
QueryFullProcessImageNameW
QueryPerformanceCounter
QueryPhoneInformation
QuickFixResult
QuickLocationSync
R$fA;Z*
r;Unknown exception
RaiseException
RaiseFailFastException
RegCloseKey
RegCreateKeyExW
RegisterDevice
-RegisterDevice
RegisterDeviceWnsFallback
-RegisterPhone
RegisterPhoneUpgrade
RegisterUserDevice
-RegisterUserDevice
RegOpenKeyExW
RegQueryValueExW
RegSetValueExW
ReleaseId
ReleaseMutex
ReleaseSemaphore
ReleaseShortName
ReleaseSRWLockExclusive
ReleaseSRWLockShared
RenewalUpCounter
RequestId
ResetProtectionCapable
ResolveDelayLoadedAPI
ResumeThread
Retries
ReturnHr
RingUpdateStatus
RoActivateInstance
RoGetActivationFactory
RoInitialize
ROOT\CIMV2
root\cimv2
RoUninitialize
RtlAllocateHeap
RtlCaptureContext
RtlDllShutdownInProgress
RtlFreeHeap
RtlGetDeviceFamilyInfoEnum
RtlInitUnicodeString
RtlIsMultiUsersInSessionSku
RtlLookupFunctionEntry
RtlNtStatusToDosError
RtlPublishWnfStateData
RtlVirtualUnwind
RtlWaitOnAddress
RtlWakeAddressAll
-ScreenOnOff
SecondUpdateStatusHttpResult
SecondUpdateStatusResult
select ChassisTypes from Win32_SystemEnclosure
select MaxClockSpeed from Win32_Processor
SelectStorageVolumeEx
service::
SetEvent
SetLastError
SetThreadpoolTimer
-SettingChange
SetUnhandledExceptionFilter
ShortOSVersion
SHRegGetValueW
SHTaskPoolGetUniqueContext
SHTaskPoolQueueTask
sI9|$@uCL
SideBySidePassive
-SimCardChanged
SimSlotNumber
Sleep
SLIsGenuineLocal
Slwga.dll
-SmsCommand
Snoozed
SOFTWARE\Microsoft\DeviceDirectory
Software\Microsoft\MdmCommon\SettingValues
SOFTWARE\Microsoft\Shell\OOBE
SOFTWARE\Microsoft\Windows NT\CurrentVersion
SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE\Stats
SOFTWARE\Microsoft\WindowsUpdate\Orchestrator\Installation\Target
SOFTWARE\Microsoft\Zune\Settings
sstd::exception: %hs
StandardUsersCount
Status
StorageDrivesInfo
StorageFree
StorageHealthEvalAssessmentHealth
StorageHealthEvalAssessmentStatus
StorageType
string too long
StringFileInfo
StringFromCLSID
SubTask
SUVWAVH
SVWAWH
SYSTEM\CurrentControlSet\Control\SystemInformation
SYSTEM\Platform\DeviceTargetingInfo
SystemManufacturer
SystemProductName
SystemTimeToFileTime
SystemType
szDescription
szDeviceIdentifier
szDisplayMemoryEnglish
szManufacturer
t"D8=s*
t$ E3
t$ UWATAVAWH
t$ WATAUAVAWH
t$ WH
t$@H!t$8L
T$`H+
t$0E3
T$0H+
T$8H!\$8
T$JI+
T$PE3
t$XI;
t@H92t;A
t@H9P
t^@8=P
t{HcL$ HcD$$H
t1I90t,A
t1I91t,A
TaskStopped
TerminateProcess
ThreadId
ThreatProtectionAvProviders
ThreatProtectionHealth
ThreatProtectionStatus
ThreatProtectionThirdPartyAvActive
TicketObtained
TimeoutMs
tKL9j0tEE
TpAllocAlpcCompletion
TpReleaseAlpcCompletion
TpWaitForAlpcCompletion
TraceCommandResult
TraceDeviceUnlockedEventResult
TraceHandleCommandResult
TraceHandleSmsCommandResult
TraceHandleWnsCommandResult
TraceLocateCommandResult
TraceLocateCommandRetryResult
TraceRegisterDeviceResult
TraceRegisterUserDeviceResult
TraceUpdateStatusRetryResult
Translation
Trigger
UATAUAVAWH
UAVAWH
UAVAWI
UMgrQueryDefaultAccountToken
UMgrQueryUserContext
UnhandledExceptionFilter
Unknown
UpdateGroup
UpdateStatus
-UpdateStatusRetry
UpdateStatusRetry%lu
UpdateTag
UpdateTimestamp
UpdatingSecretId
UpToDate
UserDeviceRegistered
-UserSessionCommand
USVWH
UVWATAUAVAWH
UVWAVAWH
UWATAUAVH
UWATAVAWH
UWAVH
VarFileInfo
VATAUAVAWH
vDbgPrintEx
vector<T> too long
VolumeIdentifier
VS_VERSION_INFO
VWATAVAWH
VWAVH
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
WATAUAVAWH
WAVAWH
wcsncmp
WilError_02
Windows
Windows Defender Exploit Guard\Controlled Folder Access
Windows.Data.Json.JsonArray
Windows.Data.Json.JsonObject
Windows.Data.Json.JsonValue
windows.immersivecontrolpanel_cw5n1h2txyewy
windows.immersivecontrolpanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel
Windows.Internal.Flighting.ClientAttributes
Windows.Internal.Security.WebAuthentication.AuthenticationManager
Windows.Networking.PushNotifications.PushNotificationChannelManager
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Security.Authentication.Web.Core.WebTokenRequest
WindowsCompareStringOrdinal
WindowsCreateStringReference
WindowsDeleteString
WindowsGetStringRawBuffer
WipeUpdateStatus
-WnsCommand
wvH9Q
x ATAVAWH
x AVAWI
x AVH
x UAVAWH
X_^[]
XA_A^_^[]
xA_A^A\_^[
y3"K4]
ZwAlpcCancelMessage
ZwAlpcConnectPort
ZwAlpcDisconnectPort
ZwAlpcQueryInformation
ZwAlpcSendWaitReceivePort
ZwClose
