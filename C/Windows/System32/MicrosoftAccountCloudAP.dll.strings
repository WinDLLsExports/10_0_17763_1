 A^_^
 A^_^][
 A__^
 A_A^_
 A_A^A\
 A_A^A\_^][
 A_A^A]A\_
 H3E H3E
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!D$0L
!D$D3
!L$8I
!t$(E3
!This program cannot be run in DOS mode.
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%d)\%hs!%p: 
%I64x
%ls%-d
%ls\%ls
%ls\%ls\%ls
%s\%s
&dd=1
&hash=
(_^][
(A_A^A]A\_^][
(caller: %p) 
.?AVbad_alloc@std@@
.?AVCAtlException@ATL@@
.?AVexception@@
.?AVResultException@wil@@
.00cfg
.CRT$XCA
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.data
.data$brc
.data$r$brc
.DEFAULT\Software\Microsoft\IdentityCRL
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$T$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata
.xdata$x
??0exception@@QEAA@AEBQEBDH@Z
??0exception@@QEAA@AEBV0@@Z
??0exception@@QEAA@XZ
??1exception@@UEAA@XZ
??1type_info@@UEAA@XZ
?terminate@@YAXXZ
?what@exception@@UEBAPEBDXZ
@.data
@.didat
@.reloc
@6666666
@8,1u
@A_A^A\_^
@SUVWATAUAVAWH
@SUVWATAVAWH
@SVWH
@USVWATAUAVAWH
@USVWATAVAWH
@USVWAVAWH
@USVWAVH
@USWH
@VATAUAVAWH
[%hs(%hs)]
[%hs]
\$ E3
\$ UH
\$ UVWAVAWH
\$ VWAVH
\$(E3
\$0E3
\$DL9l$pt
__C_specific_handler
__CxxFrameHandler3
__dllonexit
_amsg_exit
_callnewh
_CxxThrowException
_errno
_initterm
_lock
_mbscmp
_onexit
_purecall
_set_errno
_stricmp
_time64
_unlock
_vscwprintf
_vsnprintf
_vsnprintf_s
_vsnwprintf
_wcsicmp
_wtoi64
_XcptFilter
`.rdata
`A_A^A\_^[]
`A_A^A]A\_^]
{ AVH
{ AWH
|$@H;
|$0A_A^
|$4E2
|$DE2
|$dE2
|$DE2
|$HH!D$XM
|$PM;
|$TE2
|$tE2
|$TE2
}-D9@
+C 9C$w"9K(w
+C(9C,w
+C(9C,w19K0w,
+C09C4w"9K8w
+C89C<w
+K@9KDw
+K09K4w
<$!]@E
=L9o<
040904B0
0A^_^
0A_A^_
0A_A^A]A\_
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
2.5.4.3
3D$0D
6666666[
8A_A^_^][
8D$0u
8T$1u
A^_^[]
A^A\]
A^A]A\_]
A_A^]
A_A^_^]
A_A^A\
A_A^A\_]
A_A^A\_^
A_A^A]_]
A_A^A]A\]
A_A^A]A\^
A_A^A]A\_
A_A^A]A\_[
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/onecoreuap\ds\ext\live\identity\include\transferimp.h
AccountType
AcquireSRWLockExclusive
AcquireTokenFromSvc
AcquireTokenFromSvc failed, hrRequestStatus = 0x%x, hrAuthState = 0x%x
advapi32.dll
AHandleGetUnlockKey
AllocateLocallyUniqueId
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
API-MS-Win-Core-LocalRegistry-L1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-version-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-credentials-l1-1-0.dll
api-ms-win-security-lsalookup-l2-1-0.dll
api-ms-win-security-provider-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-service-management-l1-1-0.dll
api-ms-win-service-winsvc-l1-1-0.dll
AssertFlags
ATAVAWH
Attempting live authentication with cred type = %d
bad allocation
bcrypt.dll
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDecrypt
BCryptDestroyHash
BCryptDestroyKey
BCryptFinishHash
BCryptGenerateSymmetricKey
BCryptGenRandom
BCryptGetProperty
BCryptHashData
BCryptKeyDerivation
BCryptOpenAlgorithmProvider
BCryptSetProperty
Bogus cred type, pLogonCreds->credType = %d
bpSessionKey.GetLength() > 4 * sizeof(DWORD)
BuildCredentialKey
CaH!]
CallContext:[%hs] 
Caller Local Sid = %ls.
calloc
Caught exception in FreeObject(), hr = 0x%x.
CAutoRevertToSelf::Revert
CertRDNValueToStrW
ChainingMode
ChainingModeCBC
Checked LogonSessionData's UserFlags, isWinLogon is true.
ClockTimeSeconds
CloseHandle
CloseServiceHandle
CloudAP_CallAuthPkg
CloudAP_WLIDCAcquireTokensEx
CloudAP_WLIDCAcquireTokensEx_MappedStatus
CloudAPPluginInitialize
CompanyName
Connect
Connected
convertedBytes == requiredBytes
ConvertSidToStringSid failed. (win32 = 0x%0x)
ConvertSidToStringSidW
ConvertSidToStringSidW failed. (win32 = 0x%0x)
CoTaskMemFree
CreateEventExW
CreateEventW
CreateMutexExW
CreateSemaphoreExW
CreateWellKnownSid
CreateWellKnownSid failed. (win32 = 0x%0x)
CredentialKey
CredIsProtected failed. HR=0x%x.
CredIsProtectedW
CredSerializationHelper::DecryptBufferInPlaceForSameLogon
CredSerializationHelper::DeSerializeCredentials
CredSerializationHelper::EncryptBufferForSameLogon
CredSerializationHelper::FreeCredentialBagContent
CredSerializationHelper::GetDATokenParamIndices
CredSerializationHelper::SerializeCredentials
CredSerializationHelper::SerializeNgcKeyNameAndAuthTicket
CredSerializationHelper::UnprotectCredentialString
CredUnprotect failed. HR=0x%x.
CredUnprotectW
credValue == nullptr. Status=0x%x.
CRYPT32.dll
CryptAcquireContextA
CryptBinaryToStringA
CryptDecodeObject
CryptDestroyKey
cryptngc.dll
CryptProtectData
CryptProtectMemory
CryptProtectMemory failed. HR=0x%x.
CryptReleaseContext
CRYPTSP.dll
CryptStringToBinary failed. err = %d.
CryptStringToBinaryW
CryptUnprotectData
CryptUnprotectMemory
CryptUnprotectMemory failed. HR=0x%x.
ct=%I64u&hashalg=%s&%s&nonce=%s
CWLIDCCHelper::Base64Decode
CWLIDCCHelper::ConvertToAnsi
CWLIDCCHelper::ConvertToWide
CWLIDCCHelper::DuplicateString
CWLIDCCHelper::GetDATokenParamsFromCredBag
CWLIDCCHelper::GetSID
CWLIDCCHelper::SetClockReliabilityData
CWLIDCCHelper::SetClockReliabilityDataHelper
CWLIDCCHelper::ValidateCredUICredBag
CXmlHMACSHASig2::CheckSignedInfo
CXmlHMACSHASig2::GetHMACDigest
CXmlHMACSHASig2::VerifySignature
CXmlSig2::ComputeReferenceDigest
CXmlSig2::ComputeSHADigest
D!}0H
D!e@D9apu
D!l$HH
D$ E3
D$ fD
D$(E3
D$@E3
D$@eH
D$@I;
D$`E3
D$0[H
D$0=%
D$0A3
D$0D+
D$0D3
D$0E3
D$0H;
d$4E2
D$8H!t$8H
D$HE3
D$P;x
D$pE3
d$PE3
D$PfD
D$PL+
D;M(ux
D;w4sQ
D1D$0
D1D$0E
D3]tD3D$`D3\$LD
D3EtA
D7F9888F-E3FC-49b0-9EA6-A85B5F392A4F
D97u&
D9d$\t
D9eg|f
D9K(t
D9l$@
D9l$Lv
DebugBreak
DefaultCredSaved
DelayLoadFailureHook
DeleteCriticalSection
DeserializeObject failed. HR=0x%x.
DeserializeObject() completed with hr = 0x%x.
DeserializeOpaqueBlob
dest != nullptr
DeviceIdTpmSignFailure
DeviceSessionKey
DisableThreadLibraryCalls
Disconnect
DisplayName
E(=csm
E8=csm
EgH!]
EH=csm
Eh=csm
Encountered error while waiting on RPC call, hr = %#x
EncryptBufferForSameLogon failed. HR=0x%x.
EnterCriticalSection
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
ew|>&=4_
Ex=csm
EX=csm
Exception
ext-ms-win-ntuser-gui-l1-1-0.dll
ext-ms-win-ntuser-windowstation-l1-1-0.dll
ext-ms-win-rtcore-ntuser-sysparams-l1-1-0.dll
f9,Au
f9,Ku
f9<Bu
f9<Ku
f94xu
fA9z*v.A
Failed to allocate locally unique ID, status = 0x%x
Failed to retrieve the current user's SID string. (hr = 0x%0x)
Failed to retrieve the requested user's SID, hr = 0x%x
Failed to retrieve the SYSTEM user's SID string. (hr = 0x%0x)
FailFast
FamilyID
FamilyNotifications::GetFamilyIDFromSystemStore
FamilyNotifications::GetFlagFromSystemStore
FamilyNotifications::GetUserSid
FamilyNotifications::NotifyIfAccountIsFamilyRelated
FamilyNotifications::SendWNFNotification
fB9<pu
fC9|u
fD9$Au
fD9$Ju
fD9,Au
fD9,Qu
fD9<Au
fD9<Fu
fD9<Zu
fD93t
fD93t@H
fD94Ft
fD98t
fD9t]
fE9$Fu
fE9,Au
fE9<Fu
fE94Au-A
fF9,xu
FileDescription
FileVersion
FindResourceExW
FirstName
Flags
FormatMessageW
FreeObject() in SerializationDefinition.h completed with hr = 0x%x.
GenerateHmacEncapsulateProofOfPossessionTokenPayload
GetAppContainerInfo
GetAuthDataFromPackedCredentials
GetComputerNameW
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetFileVersionInfoExW
GetFileVersionInfoSizeExW
GetLastError
GetLogonCredsFromAuthData
GetModuleFileNameA
GetModuleFileNameW
GetModuleHandleExW
GetModuleHandleW
GetMSAPasswordPolicyFromRegistry
GetMSAPasswordPolicyFromService
GetPoPTokens
GetProcAddress
GetProcessHeap
GetProcessIdOfThread
GetProfileType
GetSecurityDescriptorDacl
GetSecurityDescriptorSacl
GetStoredIdentityProperty failed. (hr = 0x%0x)
GetSystemMetrics
GetSystemStoreEntryFromCID
GetSystemStoreEntryFromCID failed with %d, continuing...
GetSystemTimeAsFileTime
GetThreadDesktop
GetThreadPreferredUILanguages
GetTickCount
GetTickCount64
GetTokenInformation
GetTokenInformation function failed with error %d, isWinLogon is false by default.
GetUserDefaultLocaleName
GetUserObjectInformationW
GetVersionExW
GetVersionGuid :: GUID = {%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}, Timestamp = %I64d
GetVersionTimeStamp
GetVersionTimeStamp :: GUID = {%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}, Timestamp = %I64d
H SUVWAVH
H!\$ H
H!\$8!\$4H
H9\$X
H9_Hs<
hA_A^_^[]
hA_A^A]A\_^][
HandleConnectIdentity
HandleDisconnectIdentity
HandleGenericCallPkg
HandleGetDefaultCredentialComplexity
HandleGetKeys
HandleGetToken
HandleIsConnected
HandlePluginUninitialize
HandleRenewCertificate
HandleUserProfileLoaded
HandleValidateUserInfo
HashDigestLength
HeapAlloc
HeapDestroy
HeapFree
HeapReAlloc
HeapSize
hr = autoRevert.Revert(false)
hr = Base64EncodeA(randomBytes, sizeof(randomBytes), &spEncodedRandom)
hr = Base64EncodeA(spHashValue, hashSize, &spEncodedHash)
hr = CheckDigestedReferences()
hr = CheckSignedInfo()
hr = ComputeSHADigest(xmlRef, strEncodedDigest)
hr = CredSerializationHelper::GetDATokenParamIndices( pCredBag->credType, daTokenIndex, daExpiryTimeIndex, daCreationTimeIndex, sessionKeyIndex, flowTokenIndex, &expectedArrayLength)
hr = CredSerializationHelper::GetDATokenParamIndices( pCredBag->credType, daTokenIndex, daExpiryTimeIndex, daCreationTimeIndex, sessionKeyIndex, flowTokenIndex, nullptr)
hr = CWLIDCCHelper::ConvertToAnsi(&memoryManager, wstrSessionKey, &spSessionKeyBlob)
hr = CWLIDCCHelper::ConvertToWide(&memoryManager, sessionKeyProtected, &spSessionKeyProtectedBlob)
hr = CWLIDCCHelper::GetSID(pExecutionContextLite->GetWinApiFunctions(), pUserName, &spSid)
hr = E_INVALIDARG
hr = E_OUTOFMEMORY
hr = FamilyNotifications::GetFamilyIDFromSystemStore(pExecutionContextLite, spSid, spExistingFamilyID)
hr = FamilyNotifications::GetFlagFromSystemStore(pExecutionContextLite, spSid, familySafetySetting)
hr = FamilyNotifications::GetFlagValue(pExecutionContextLite, spFlags, familySafetySetting)
hr = FamilyNotifications::GetUserSid(pExecutionContextLite, pUserName, spSid)
hr = g_algProvCache.GetAlgorithmProv( m_wstrAlgId, BCRYPT_ALG_HANDLE_HMAC_FLAG, hAlgProv)
hr = g_algProvCache.GetAlgorithmProv( xmlRef.m_wstrAlgIdDigest, 0, hAlgProv)
hr = GetDeviceRegistryPath(pExecutionContextLite, deviceName, deviceRegKeyPath)
hr = GetDeviceRegistryPath(pExecutionContextLite, keyIdentifier, deviceRegKeyPath)
hr = GetDeviceSessionKeyFromStore(pExecutionContextLite, deviceName, sessionKeyProtected)
hr = GetHMACDigest(strComputedSigValue)
hr = GetSessionKeyFunctions(sessionKey.GetSessionKeyType(), pSessionKeyFunctions1)
hr = GetSessionKeyFunctions(sessionKey1Type, pSessionKeyFunctions1)
hr = GetSessionKeyFunctions(sessionKey2Type, pSessionKeyFunctions2)
hr = HRESULT_FROM_WIN32(::BCryptDecrypt( spKey, static_cast<PUCHAR>(const_cast<BYTE*>(pEncryptedBlob)), encryptedBlobSizeBytes, nullptr, static_cast<PUCHAR>(const_cast<BYTE*>(pInitializationVector)), initializationVectorSizeBytes, nullptr, 0, &resultSizeBytes, BCRYPT_BLOCK_PADDING))
hr = HRESULT_FROM_WIN32(::BCryptDecrypt( spKey, static_cast<PUCHAR>(const_cast<BYTE*>(pEncryptedBlob)), encryptedBlobSizeBytes, nullptr, static_cast<PUCHAR>(const_cast<BYTE*>(pInitializationVector)), initializationVectorSizeBytes, spDecryptedBlob, resultSizeBytes, &resultSizeBytes, BCRYPT_BLOCK_PADDING))
hr = HRESULT_FROM_WIN32(::BCryptGenerateSymmetricKey( spAlgorithm, &spKey, nullptr, 0, static_cast<PUCHAR>(const_cast<BYTE*>(pEncryptionKey)), encryptionKeySizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptGenerateSymmetricKey( spDeriveAlg, &spDeriveKey, nullptr, 0, static_cast<PUCHAR>(const_cast<BYTE*>(pSecret)), secretSizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptKeyDerivation( spDeriveKey, &keyDerivationDescription, pDerivedKey, derivedKeySizeBytes, &keySizeBytes, 0))
hr = HRESULT_FROM_WIN32(::BCryptOpenAlgorithmProvider( &spAlgorithm, BCRYPT_AES_ALGORITHM, nullptr, 0))
hr = HRESULT_FROM_WIN32(::BCryptOpenAlgorithmProvider( &spDeriveAlg, BCRYPT_SP800108_CTR_HMAC_ALGORITHM, nullptr, 0))
hr = HRESULT_FROM_WIN32(::BCryptSetProperty( spAlgorithm, BCRYPT_CHAINING_MODE, reinterpret_cast<PUCHAR>(BCRYPT_CHAIN_MODE_CBC), static_cast<ULONG>(sizeof(BCRYPT_CHAIN_MODE_CBC)), 0))
hr = HRESULT_FROM_WIN32(ERROR_NOT_FOUND)
hr = HRESULT_FROM_WIN32(GetLastError())
hr = HRESULT_FROM_WIN32(lastError)
hr = HRESULT_FROM_WIN32(LOCAL_STATUS)
hr = HRESULT_FROM_WIN32(pNgcFunctions->BCryptGenRandom(nullptr, randomBytes, sizeof(randomBytes), BCRYPT_USE_SYSTEM_PREFERRED_RNG))
hr = HRESULT_FROM_WIN32(win32Error)
hr = LiteCryptUtilities::DecryptContent( key.GetBuffer(), key.GetLength(), reinterpret_cast<const BYTE*>(initializationVector.GetString()), initializationVector.GetLength(), reinterpret_cast<const BYTE*>(cipherText.GetString()), cipherText.GetLength(), &spDecryptedBlob, &decryptedBlobSizeBytes)
hr = LiteCryptUtilities::DeriveKeyWithSP800108( sessionKey.GetBuffer(), sessionKey.GetLength(), context.GetBuffer(), context.GetLength(), label.GetString(), derivedKey.GetBufferSetLength(derivedKeySizeBytes), derivedKeySizeBytes)
hr = PassportEncode::Base64Decode( sessionKeyProtected.GetString(), sessionKeyProtected.GetLength(), sessionKeyDecoded)
hr = PassportEncode::Base64Decode(signature, rawSignature)
hr = PassportEncode::Base64Encode(spSignatureBlob, signatureBlobSizeBytes, signature)
hr = pNgcFunctions->NgcDecryptWithSymmetricPopKey( key.GetBuffer(), key.GetLength(), reinterpret_cast<const BYTE*>(label.GetString()), static_cast<DWORD>(label.GetLength()), context.GetBuffer(), context.GetLength(), reinterpret_cast<const BYTE*>(initializationVector.GetString()), initializationVector.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(cipherText.GetString()), cipherText.GetLength() * sizeof(CHAR), &spDecryptedBlob, &decryptedBlobSizeBytes)
hr = pNgcFunctions->NgcImportSymmetricPopKey( &accountInfo, nullptr, NGC_DEVICE_KEY_TRANSPORT_KEY, reinterpret_cast<const BYTE*>(sessionKey.GetString()), sessionKey.GetLength() * sizeof(CHAR), &decryptedSessionKey, &decryptedSessionKeySizeBytes)
hr = pNgcFunctions->NgcSignWithSymmetricPopKey( pSessionKey, sessionKeyLength, reinterpret_cast<const BYTE*>(LiteCryptUtilities::SeedLabel::SecureConversation), static_cast<DWORD>(strlen(LiteCryptUtilities::SeedLabel::SecureConversation) * sizeof(CHAR)), randomBytes, sizeof(randomBytes), reinterpret_cast<PBYTE>(static_cast<CHAR*>(spUnsignedEncapsulatedPayload)), static_cast<DWORD>(unsignedEncapsulatedPayloadSize), &spHashValue, &hashSize)
hr = pNgcFunctions->NgcVerifyWithSymmetricPopKey( key.GetBuffer(), key.GetLength(), reinterpret_cast<const BYTE*>(label.GetString()), static_cast<DWORD>(label.GetLength()), context.GetBuffer(), context.GetLength(), reinterpret_cast<const BYTE*>(message.GetString()), message.GetLength() * sizeof(CHAR), reinterpret_cast<const BYTE*>(rawSignature.GetString()), rawSignature.GetLength() * sizeof(CHAR))
hr = pNtServiceContext->WLIDCGetConfigDWORDValue(WLID_CONFIG_MIN_PASSWORD_CHAR_GROUPS, &providerPasswordCharacterGroups)
hr = pNtServiceContext->WLIDCGetConfigDWORDValue(WLID_CONFIG_MIN_PASSWORD_LENGTH, &providerPasswordLength)
hr = pSessionKeyFunction1->GetDerivedKey( pSessionKeyExecutionContext, logonUserToken, sessionKey1Blob, context, label, derivedKeySizeBytes, pSignatureKey)
hr = pSessionKeyFunction1->SignMessage( pSessionKeyExecutionContext, pSignatureKey, context, label, derivedKeySizeBytes, message, signature)
hr = pSystemStoreLiteFunctions->GetCurrentUserSidString(&spCurrentUserSid)
hr = pSystemStoreLiteFunctions->GetCurrentUserSidString(&spSid)
hr = referenceHash.AddData( (const PBYTE)(xmlRef.m_pcszCanonicalizedText), xmlRef.m_cchLenCanonicalizedText)
hr = referenceHash.GetSize(&dwSize)
hr = referenceHash.GetValue( bpDigest.GetBufferSetLength(dwSize, FALSE), dwSize)
hr = referenceHash.Initialize( hAlgProv, NULL, 0)
hr = registryHelper.ReadDwordFromRegistry(HKEY_USERS, WLID_REG_SYSTEM_USER_IDCRL_PATH, WLID_REG_PROVIDER_DEFAULT_PASSWORD_CHARACTER_GROUPS, &providerPasswordCharacterGroups)
hr = registryHelper.ReadDwordFromRegistry(HKEY_USERS, WLID_REG_SYSTEM_USER_IDCRL_PATH, WLID_REG_PROVIDER_DEFAULT_PASSWORD_LENGTH, &providerPasswordLength)
hr = SafeCopyMemory( plainText.GetBufferSetLength(decryptedBlobSizeBytes), decryptedBlobSizeBytes, spDecryptedBlob, decryptedBlobSizeBytes)
hr = SafeCopyMemory(&sessionKey1SizeBytes, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(&sessionKey1Type, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(&sessionKey2SizeBytes, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(&sessionKey2Type, sizeof(DWORD), pSessionKey, sizeof(DWORD))
hr = SafeCopyMemory(*ppDestinationString, sourceLengthBytes, pSourceString, sourceLengthBytes)
hr = SafeCopyMemory(pBuffer, bufferSize, pData, dataSize)
hr = SerializeCredentials( pContextLite, WLIDCredentialTypeNGCAndAuthTicket, WLIDCredentialAttributeNGCKeyName, pKeyName, static_cast<DWORD>(keyNameSizeChars), WLIDCredentialAttributeNGCAuthTicket, pNgcTicket, static_cast<DWORD>(ngcTicketSizeChars), true, ppEncoded, pEncodedSizeBytes)
hr = sessionKeyManager.SignWithSessionKey( &sessionKeyExecutionContext, hLogonUserToken, SessionKey(pSessionKey, sessionKeyLength, static_cast<SessionKeyTypes::Type>(sessionKeyType)), CBytePtr(randomBytes, ARRAYSIZE(randomBytes), false), CStringA(LiteCryptUtilities::SeedLabel::SecureConversation), PPCRL_NGC_DERIVED_KEY_LENGTH_BYTES, CStringA(spUnsignedEncapsulatedPayload), encodedHash, derivedKeyAlgorithm, needsDeviceDARefresh)
hr = signedInfoHash.AddData( const_cast<PUCHAR>(reinterpret_cast<const UCHAR*>(static_cast<LPCSTR>(m_strC14NSignedInfo))), m_strC14NSignedInfo.GetLength() *sizeof(CHAR))
hr = signedInfoHash.GetSize(&dwSize)
hr = signedInfoHash.GetValue( bpSigValue.GetBufferSetLength(dwSize, FALSE), dwSize)
hr = signedInfoHash.Initialize( hAlgProv, m_pbSecretKey.GetBuffer(), m_pbSecretKey.GetLength())
hr = spBuffer.Allocate(rawPayloadSizeBytes)
hr = SPCallClepKdf( sessionKey.GetBuffer(), sessionKey.GetLength(), const_cast<PBYTE>(reinterpret_cast<const BYTE*>(label.GetString())), label.GetLength(), context.GetBuffer(), context.GetLength(), derivedKey.GetBufferSetLength(derivedKeySizeBytes), derivedKeySizeBytes)
hr = spQualifiedUser.Allocate(qualifiedSize)
hr = StringCchCatA(spBuffer, bufferSizeCharacters, "&"PPCRL_OTC_DOUBLE_DERIVATION)
hr = StringCchCatA(spBuffer, bufferSizeCharacters, "&"PPCRL_OTC_HASH"=")
hr = StringCchCatA(spBuffer, bufferSizeCharacters, spEscapedHash)
hr = StringCchCatA(spBuffer, bufferSizeCharacters, spUnsignedEncapsulatedPayload)
hr = StringCchCopyA(spBuffer, rawPayloadSizeBytes, pPayLoadString)
hr = StringCchLength(pKeyName, STRSAFE_MAX_CCH, &keyNameSizeChars)
hr = StringCchLength(pNgcTicket, STRSAFE_MAX_CCH, &ngcTicketSizeChars)
hr = StringCchLengthA(pEncapsulationTempate, STRSAFE_MAX_CCH, &templateSizeCharacters)
hr = StringCchLengthA(pPayLoadString, STRSAFE_MAX_CCH, &rawPayloadSizeCharacters)
hr = StringCchLengthA(spEscapedHash, STRSAFE_MAX_CCH, &hashSize)
hr = StringCchLengthA(spEscapedRandom, STRSAFE_MAX_CCH, &nonceSizeCharacters)
hr = StringCchLengthW(pUserName, STRSAFE_MAX_LENGTH, &userNameLen)
hr = StringCchPrintf( spQualifiedUser, MAX_PATH, L"%ls\\%ls", machineName, pUserName )
hr = StringCchPrintfExA( spUnsignedEncapsulatedPayload, bufferSizeCharacters, nullptr, &remainingSizeCharacters, STRSAFE_FILL_BEHIND_NULL, pEncapsulationTempate, currentTime, SHA256_ALGORITHM, pPayLoadString, static_cast<LPCSTR>(spEscapedRandom))
hr = UnPackSessionKeys( sessionKey, sessionKey1Blob, &pSessionKeyFunction1, sessionKey2Blob, &pSessionKeyFunction2)
hr = UrlEscapeStringA(encodedHash, &spEscapedHash)
hr = UrlEscapeStringA(spEncodedHash, &spEscapedHash)
hr = UrlEscapeStringA(spEncodedRandom, &spEscapedRandom)
hr = UrlEscapeW(spInputWideCharBuffer, spEscapedWideCharBuffer, &escapedWideCharBufferLength, URL_ESCAPE_PERCENT|URL_ESCAPE_ASCII_URI_COMPONENT|URL_ESCAPE_AS_UTF8|URL_ESCAPE_SEGMENT_ONLY )
hr = xmlSig.GetHMACDigest(signature)
hr = xmlSig.VerifySignature()
hr=0x%X
hr=E_OUTOFMEMORY
hrAccountType
HRESULT_FROM_WIN32(hr = pWinApiLite->GetLastError())
Ht$pL
http://Passport.NET/tb
http://www.w3.org/2001/04/xmldsig-more#hmac-sha256
hUserToken == nullptr, isWinLogon is false by default
I_RpcBindingInqLocalClientPID
ImpersonateLoggedOnUser
ImpersonateLoggedOnUser failed, error = 0x%x
InitializeCriticalSection
internal\onecoreuapds\inc\idcrl\SerializationDefinition.h
internal\sdk\inc\wil\Resource.h
InternalName
InternetPresenceAtLogon
Invalid bufferSize %d. HR=0x%x.
Invalid credType = %lu, Status=0x%x.
Invalid dataSize %d. HR=0x%x.
Invalid GUID passed to GetVersionTimeStamp. GUID = {%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}
Invalid padding %d. HR=0x%x.
IsDebuggerPresent
IsInternetPresent
IsValidSid
IsWinLogon
K SVWH
kernelbase.dll
Keywords
L$ !\$(D
L$ E3
l$ E3
L$ SUVWAVAWH
L$ SUVWH
L$ SWH
L$ UH
L$ VWAVH
L$@E3
L$@fD
L$@H+
L$@L;
L$`E3
l$`E3
L$`E3
L$`H3
L$`I;
l$0E3
L$0fD
L$8E3
L$HE3
L$hE3
L$HE3
l$HE3
L$HE3
L$hE3
L$HE3
L$hH3
L$PE3
L$pE3
L$PE3
L$pE3
L$PE3
L$pE3
l$pE3
L$pE3
L$PH3
L$xA3
L$XE3
L$xE3
L$XE3
L$xE3
L$XE3
l$xfD
L$XH+
L$XH3
L9{@u
L9{0t#H
L9o@t
LastName
LatestDPAPIKeyVersion
LcA<E3
LcmwE;
LeaveCriticalSection
LegalCopyright
lengthWCharRequired != 0
LiteCryptUtilities::Base64EncodeA
LiteCryptUtilities::DecryptContent
LiteCryptUtilities::DeriveKeyWithSP800108
LiteCryptUtilities::GetCurrentTimeInSeconds
LiteCryptUtilities::HmacEncapsulateString
LiteCryptUtilities::UrlEscapeStringA
LiveConvertIdentityToSid
liveIdService
LiveMapHResultToNtStatus
LoadImageW
LoadLibraryExW
LoadResource
Local Sid = %ls.
Local Sid = %ls. Profile loaded = %d
Local\SM0:%d:%d:%hs
LocalAlloc
LocalAlloc failed. (win32 = 0x%0x)
LocalConnected
LocalFree
LockResource
LogHr
login.live.com
LogonIdentity
LogonUserExExW
LookupAccountNameW
LsaCallAuthenticationPackage
LsaConnectUntrusted
LsaDeregisterLogonProcess
LsaGetLogonSessionData
LsaLookupAuthenticationPackage
LsaRegisterLogonProcess
M!&E!e
m`A!]
malloc
MemberName
memcmp
memcpy
memcpy_s
memmove_s
memset
MesBufferHandleReset
MesDecodeBufferHandleCreate
MesEncodeFixedBufferHandleCreate
MesHandleFree
Microsoft
Microsoft Corporation
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft_WindowsLive:SerializedMaterial:
MicrosoftAccount
MicrosoftAccount Cloud AP Plugin
MicrosoftAccount:target=SSO_POP_Device
MicrosoftAccount:target=SSO_POP_User:user=
MicrosoftAccountCloudAP.dll
MicrosoftAccountCloudAP.pdb
MSAClientTraceLoggingProvider
Msg:[%ws] 
msvcrt.dll
MultiByteToWideChar
ncalrpc
Ndr64AsyncClientCall
NdrMesTypeAlignSize3
NdrMesTypeDecode3
NdrMesTypeEncode3
NdrMesTypeFree3
NgcCreateContainer
NgcCreateUserIdKey
NgcCreateUserIdKeyEx
NgcDecryptWithSymmetricPopKey
NgcDeleteContainer
NgcDeleteContainerEx
NgcDeleteUserIdKey
NgcDeleteUserIdKey failed, hr=0x%x.
NgcEnumContainers
NgcEnumUserIdKeys
NgcEnumUserIdKeys failed, hr=0x%x.
NgcFreeEnumState
NgcGetKeyAttestationForUserIdKey
NgcGetLogonDecryptionKeyName
NgcGetSymmetricPopKeyTransportKey
NgcGetSymmetricPopKeyTransportKeyName
NgcGetUserIdKeyPublicKey
NgcImportSymmetricPopKey
NgcPackAuthBuffer
NgcRenewKeyAttestation
NgcSignWithSymmetricPopKey
NgcSignWithUserIdKey
NgcSignWithUserIdKeyEx
NgcSignWithUserIdKeySilent
NgcUnpackCredData
NgcVerifyWithSymmetricPopKey
ntdll.dll
NtQueryInformationToken
NtQuerySystemInformation
NtQueryWnfStateData
o\$PH
ObfuscatedSessionKeyFunctions::GetDerivedKey
ObfuscatedSessionKeyFunctions::GetDeviceRegistryPath
ObfuscatedSessionKeyFunctions::GetDeviceSessionKeyFromStore
ObfuscatedSessionKeyFunctions::PersistSessionKey
ObfuscatedSessionKeyFunctions::RetrieveSessionKey
oD$ f
oL$0f
onecoreuap\ds\ext\live\identity\cloudapplugin\logon.cpp
onecoreuap\ds\ext\live\identity\cloudapplugin\msacloudap.cpp
onecoreuap\ds\ext\live\identity\cloudapplugin\utils.cpp
onecoreuap\ds\ext\live\identity\include\serializationdefinition.h
onecoreuap\ds\ext\live\identity\lib\familynotifications\familynotifications.cpp
onecoreuap\ds\ext\live\identity\lib\rpcclient\wlidclient.cpp
onecoreuap\ds\ext\live\identity\lib\serialization\credserializationhelper.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\obfuscatedsessionkeyfunctions.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\sessionkeymanager.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\symmetricsessionkeyfunctions.cpp
onecoreuap\ds\ext\live\identity\lib\sessionkeymanager\tpmsessionkeyfunctions.cpp
onecoreuap\ds\ext\live\identity\lib\systemstorelite\systemstorelite.cpp
onecoreuap\ds\ext\live\identity\lib\utilitieslite\litecryptutilities.cpp
onecoreuap\ds\ext\live\identity\lib\utilitieslite\registryhelper.cpp
onecoreuap\ds\ext\live\identity\lib\utilitieslite\wlidcchelper.cpp
onecoreuap\ds\ext\live\identity\passport\lib\xmlsig\xmlsig2.cpp
OpenProccessToken failed. (win32 = 0x%0x)
OpenProcessToken
OpenProcessToken failed. (win32 = 0x%0x)
OpenSCManagerW
OpenSemaphoreW
OpenServiceW
OpenThread
OpenThreadToken
OpenThreadToken failed. (win32 = 0x%0x)
OriginalFilename
oT$@f
OutputDebugStringW
p WAVAWH
PA^_^[]
PA_A^_^]
pA_A^A]A\_^]
pCredBag->arrCredentials[i].value.length > 0
Persisted
PopulateUserInfo
production
ProductName
ProductVersion
ProviderPasswordCharacterGroups
ProviderPasswordLength
ps:password
Query for CID failed with %d, continuing...
Query for DPAPI Key version failed with %d, continuing...
QueryPerformanceCounter
QueryServiceStatus
R$fA;z*
RaiseException
RaiseFailFastException
RegCloseKey
RegCreateKeyExW
RegDeleteKeyExW
RegDeleteKeyW
RegDeleteTreeW
RegDeleteValueW
RegEnumKey failed. (win32 = 0x%0x)
RegEnumKeyExW
RegEnumValueW
RegGetValue failed. (win32 = 0x%0x)
RegGetValueW
RegistryHelper::GetRootKey
RegistryHelper::ReadValueFromRegistry
RegistryHelper::WriteBufferToRegistry
RegOpenCurrentUser
RegOpenCurrentUser() failed. (0x%0x)
RegOpenKeyEx failed. (win32 = 0x%0x)
RegOpenKeyExW
RegQueryInfoKeyW
RegQueryValueExW
RegSetKeyValue() failed. (0x%0x)
RegSetValueExW
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
requiredBytes != 0
ResolveDelayLoadedAPI
ReturnHr
RevertToSelf
RPC Async complete call failed, hr = %#x
RPC AsyncInitializeHandle failed, hr = %#x
RPC call failed, hr = %#x
RPC call threw an exception code, hr = %#x
RPC call timed out, hr = %#x
RPC call was cancelled, hr = %#x
RPC error=%d.
RPC failed to create new event, hr = %#x
RpcAsyncCancelCall
RpcAsyncCompleteCall
RpcAsyncInitializeHandle
RpcBindingFree
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcExceptionCode hr = 0x%x.
RPCRT4.dll
RpcSsDestroyClientContext
RpcStringBindingComposeW
RpcStringFreeW
RSDSl
RtlCapabilityCheck
RtlCaptureContext
RtlDllShutdownInProgress
RtlFreeUnicodeString
RtlInitializeSid
RtlInitUnicodeString
RtlLengthRequiredSid
RtlLookupFunctionEntry
RtlPublishWnfStateData
RtlSubAuthoritySid
RtlUpcaseUnicodeString
RtlVirtualUnwind
s@9K(w;
Security=impersonation dynamic false
Sending WNF notification because a Family ID value is present.
Sending WNF notification because the Family Safety bit is 1.
SerializeObject() completed with hr = 0x%x.
SerializeOpaqueBlob
Service status: dwCheckPoint=0x%x, dwControlsAccepted=0x%x, dwCurrentState=0x%x, dwServiceSpecificExitCode=0x%x, dwServiceType=0x%x, dwWaitHint=0x%x, dwWin32ExitCode=0x%x.
ServiceEnvironment
ServicesActive
Session key signing failed with error: %x. Continuing with single session key
sessionKey.GetLength() > 0
sessionKey.IsEmpty() == false
sessionKey1SizeBytes < (bpSessionKey.GetLength() - (4 * sizeof(DWORD)))
sessionKey2SizeBytes == (bpSessionKey.GetLength() - (4 * sizeof(DWORD)) - sessionKey1SizeBytes)
SessionKeyManager::SignWithSessionKey
SessionKeyManager::UnPackSessionKeys
sessionkeyValue == nullptr. Status=0x%x.
SetLastError
SetNamedSecurityInfoW
SetThreadToken
SetUnhandledExceptionFilter
SHA256
SID missing from LiveID key. (win32 = 0x%0x)
SizeofResource
Sleep
SleepConditionVariableSRW
Software\Microsoft\IdentityCRL
Software\Microsoft\IdentityCRL\ClockData
Software\Microsoft\IdentityCRL\DeviceIdentities
Software\Microsoft\IdentityCRL\StoredIdentities
Software\Microsoft\IdentityCRL\Trace
SP800_108_CTR_HMAC
spAuthData == nullptr, Status=0x%x.
SspiCli.dll
status = LsaGetLogonSessionData(&logonId, &pLogonSessionData)
status=0x%x
statusUserToken
StringCbLengthW failed. (hr = 0x%0x)
StringCchCopyW failed. (hr = 0x%0x)
StringCchPrintf failed for full user SID path. (localHr = 0x%0x)
StringCchPrintf failed for user SID path. (hr = 0x%0x)
StringCchPrintf failed with 0x%x, continuing...
StringCchPrintf failed. (hr = 0x%0x)
StringFileInfo
strrchr
SUVWATAUAVAWH
SVWATAUAVAWH
SWATAUAVAWH
SymmetricSessionKeyFunctions::DecryptMessage
SymmetricSessionKeyFunctions::GetDerivedKey
SymmetricSessionKeyFunctions::ImportSessionKey
SymmetricSessionKeyFunctions::SignMessage
SymmetricSessionKeyFunctions::VerifySignature
System store not found.
System store's family ID = %ls
System store's flags = %ls
SystemStore property not found.
SystemStoreLite::GetCurrentUserSidString
SystemStoreLite::GetRegistryStringValue
SystemStoreLite::GetStoredIdentityProperty
SystemStoreLite::GetSystemSidString
SystemStoreLite::IsConnected
SystemStoreLite::IsConnectedSID
t"D8=
t$ AWH
t$ UWATAVAWH
t$ UWAUAVAWH
t$ WATAUAVAWH
t$ WH
t$(E3
T$@E3
T$0A3
T$0H+
t$8E3
T$8H!\$8
t$pL!t$xI
t$XH!t$`H
t&D9~
t)fD93t#L
t^@8=
t{HcL$ HcD$$H
t7fA9(t1I
TerminateProcess
The credential property flags are malformed. flags = %ls, errno = %d, hr = 0x%X
The requested user was previously connected. (hr = 0x%x)
TickCount
tKL9}
tMD9z
tML9}
TpmSessionKeyFunctions::DecryptMessage
TpmSessionKeyFunctions::ImportSessionKey
TpmSessionKeyFunctions::SignMessage
TpmSessionKeyFunctions::VerifySignature
TraceLoggingRegister failed with 0x%x, continuing...
TraceServiceStatus
Translation
Treating family ID non-existence as empty value.
Treating family safety flag non-existence as 0 value.
tTD;mouNM
tVD9j
txM!>D!?L
u HcA<H
u^L9c u3
UATAUAVAWH
UATAVH
UAVAWH
ug9\$4taH
ULongAdd hr = 0x%x.
Unable to open volatile key. (0x%0x)
Unable to query user's PPCRL_CREDPROPERTY_DEFAULTCREDSAVED value with error 0x%x
Unable to query user's SID with error 0x%x
UnChunkProofOfPossessionCacheEntry
Unexpected credBag type. credType=%d.
UnhandledExceptionFilter
UnprotectCredentialString failed. HR=0x%x.
UpdateTokenFromValidationInfo
ur!E@H
UrlEscapeW
urn:liveid:SP800108_CTR_HMAC_SHA256_DOUBLEDERIVED
urn:liveid:SP800-108CTR-HMAC-SHA256
User token missing for connected account.
USERENV.dll
UserTokenMissingForConnectedAccount
USVWATAUAVAWH
USVWAVH
USVWH
UuidCreate
UuidFromStringW
UVWATAUAVAWH
UVWAVAWH
UWATAUAVH
UWATAVAWH
UWAVH
UWAWH
ValidateCachedLogonInfo
ValidateCredUICredBag is failing due to unexpected bag type. credType = %d.
ValidateOpaqueInfo
ValidateSerializedProtocolBuffer
VarFileInfo
VerQueryValueW
VS_VERSION_INFO
vswprintf_s
VUUUUUUUI
VWATAVAWH
VWAVH
VWAWH
w19K w,
WaitForMultipleObjectsEx
WaitForSingleObject
WaitForSingleObjectEx
WakeAllConditionVariable
WATAUAVAWH
WAVAWH
wcscmp
wcsstr
wcstol
WideCharToMultiByte
WilError_02
WLIDCAcquireTokens failed, hr=0x%x
WLIDCCreateContext failed with error 0x%x
WLIDCGetKeyLatest failed with error 0x%x
WLIDCGetKeyWithVersion failed with error 0x%x
WLIDCUpdateConnectedIdentity failed with error 0x%x
WLIDCUpdateToken failed with error 0x%x
WlidSvc
WriteBufferToRegistry failed to write current time. (0x%0x)
WriteBufferToRegistry failed to write tick count. (0x%0x)
WriteBufferToRegistry failed with 0x%x, continuing...
WriteBufferToRegistry wrote current time = %I64d
WriteBufferToRegistry wrote tick count = %I64d
WS-SecureConversation
x ATAVAWH
x AVAWM
x AVH
x AWH
x UAVAWH
X UVWAVAWH
x_^[]
xiH;}
xYD9l$xtRI
zu:B8
