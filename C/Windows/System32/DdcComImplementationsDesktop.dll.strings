 A_A^_
 A_A^A]A\_
 H3E H3E
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!]oE3
!This program cannot be run in DOS mode.
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%d)\%hs!%p: 
(_^][
(caller: %p) 
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVexception@std@@
.?AVResultException@wil@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.xdata
.xdata$x
;|$pr
@.data
@.didat
@.reloc
@8,1u
@A^_^
@SUVWATAUAVAWH
@SVWH
@USVWAVH
@USWATAUAVAWH
[%hs(%hs)]
[%hs]
\$ UH
\$ UVWAVAWH
\$ VWAVH
\$@!]w!]
\Microsoft\Windows\DeviceDirectoryClient
^H!\$@H
__C_specific_handler
__CxxFrameHandler3
__std_terminate
_CxxThrowException
_initterm
_initterm_e
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vswprintf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__register_onexit_function
_o__seh_filter_dll
_o_free
_o_malloc
_o_wcscpy_s
`.rdata
|$ AVH
|$(!\$ 
<SessionStateChangeTrigger><StateChange>SessionUnlock</StateChange></SessionStateChangeTrigger><LogonTrigger />
040904B0
10.0.17763.1
10.0.17763.1 (WinBuild.160101.0800)
9|$pvE
A^_^[]
A_A^]
A_A^_^]
A_A^A\_]
A_A^A]_]
A_A^A]A\]
A_A^A]A\_[]
A_A^A]A\_^]
AcquireSRWLockExclusive
AdminsCount
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-memory-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
ApiSetQueryApiSetPresence
AuthD
bad allocation
bad array new length
CallContext:[%hs] 
CBR(*pcchTrigger >= 256)
CBR(0L == dwResult)
CBR(dwResult == 0L)
CBR(fRingAfterLock == 0)
CBR(IsWTSEnumerateSessionsExWPresent() && IsWTSLogoffSessionPresent() && IsWTSFreeMemoryPresent())
CBR(lRet == 0L)
CBR(pUnkOuter == nullptr)
CBR(pwszCpn == nullptr)
CBR(pwszPin == nullptr)
CBR(std::find(vConnectedAdmins.begin(), vConnectedAdmins.end(), vCids.front()) != vConnectedAdmins.end())
CBR(std::find(vConnectedAdminsSids.begin(), vConnectedAdminsSids.end(), vCallerSid.front()) != vConnectedAdminsSids.end())
CBR(vCallerSid.size() == 1)
CBR(vCids.size() == 1)
CBR(wcscpy_s(pwszTrigger, *pcchTrigger, c_pwszTrigger) == 0)
CHR(((HRESULT)0x80004001L))
CHR(((HRESULT)0x80040111L))
CHR(CoCreateInstance(CLSID_TaskScheduler, 0, CLSCTX_INPROC_SERVER, IID_ITaskService, (PVOID*)&pTaskService))
CHR(CreateKey(hKeyRoot, pwszRegistryKey, iter.c_str()))
CHR(DdcAccountHelper::EnumerateUsers(0, nullptr, nullptr, nullptr, &cAdmins, &cDeviceOwners, &cStandardUsers))
CHR(DdcDeviceInfoHelper::FmdDisabledByPolicy(&fFmdDisabledByPolicy))
CHR(DeleteKey(hKeyRoot, pwszRegistryKey))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValueStatics.GetAddressOf()))
CHR(hr)
CHR(hrSidsLock)
CHR(hrSignOut)
CHR(LockDeviceCritical(vCallerSid.front().c_str(), vConnectedAdminsSids))
CHR(m_pTaskService->GetFolder(bszTaskFolder, pTaskFolder.GetAddressOf()))
CHR(MdmEnumerateUsers(&vAdmins, &vDeviceOwners, &vStandardUsers, fConnectedOnly))
CHR(MdmEnumerateUsers(&vConnectedAdmins, nullptr, nullptr, 1))
CHR(MdmEnumerateUsers(&vConnectedAdminsCids, nullptr, nullptr, 1))
CHR(MdmGetSidsByConnectedCids(vCids, vCallerSid))
CHR(MdmGetSidsByConnectedCids(vConnectedAdminsCids, vConnectedAdminsSids))
CHR(pCommandHandler->QueryInterface(riid, ppvObject))
CHR(pCommandHandlerFactory->QueryInterface(riid, ppv))
CHR(pRegisteredTask->put_Enabled(fEnabled ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0)))
CHR(pTaskService->Connect(vtEmpty, vtEmpty, vtEmpty, vtEmpty))
CHR(pTaskStateHandler->QueryInterface(riid, ppvObject))
CHR(pTaskStateHandlerFactory->QueryInterface(riid, ppv))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_ACCOUNT_CHANGE_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_ACCOUNT_CHANGE_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_CONNECTED_TO_NETWORK_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_INTEGRITY_CHECK_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_INTEGRITY_CHECK_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_LOCATION_RIGHTS_CHANGE, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_LOCATION_RIGHTS_CHANGE, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_1_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_24_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_24_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_6_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_USER_DEVICE_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_USER_DEVICE_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_SCREEN_ON_OFF_TASK, 0))
CHR(taskSchedulerWrapper.Initialize())
CloseHandle
CoCreateInstance
CompanyName
CPR(bszTaskFolder)
CPR(bszTaskName)
CPR(pcchTrigger)
CPR(pCommandHandler)
CPR(pCommandHandlerFactory)
CPR(ppv)
CPR(ppvObject)
CPR(pResourceId)
CPR(pTaskStateHandler)
CPR(pTaskStateHandlerFactory)
CPR(pwszMessage)
CPR(pwszTaskName)
CPR(pwszTrigger)
CreateMutexExW
CreateSemaphoreExW
D$ E3
D$ fD
D$@E3
D$0H;
D$8E3
D$8H!t$8H
D$DDtRH
D$HE3
D$pE3
D9K(t
D9t$Ht
DdcComImplementationsDesktop
DdcComImplementationsDesktop.dll
DdcComImplementationsDesktop.pdb
DebugBreak
DisableThreadLibraryCalls
DllCanUnloadNow
DllGetClassObject
DllRegisterServer
DllUnregisterServer
E8H!\$@H
EnableLostMode
EventWriteTransfer
Exception
ext-ms-onecore-security-antitheft-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-session-wtsapi32-l1-1-0
ext-ms-win-session-wtsapi32-l1-1-0.dll
f9,Au
f9,Ku
FailFast
fD9,Qu
fD94Fu
fD9t]
FileDescription
FileVersion
FmdDisabledByPolicy
FormatMessageW
FreeLibrary
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetLastError
GetModuleFileNameA
GetModuleHandleExW
GetModuleHandleW
GetProcAddress
GetProcessHeap
GetSystemInfo
GetSystemTimeAsFileTime
H!\$0D
H!\$0H
H!]0E3
H!]8A
H!]8E3
H9_Hs<
hA_A^A]A\_^][
HeapAlloc
HeapFree
HRESULT
InitializeSListHead
IntegrityCheck
internal\sdk\inc\wil\resource.h
InternalName
IsDebuggerPresent
IsProcessorFeaturePresent
JTk_S/
K SVWH
kernelbase.dll
L$ SUVWH
L$ SVWH
L$(E3
L$@E3
L$@fD
L$@H+
L$@I;
L$0fD
L$8E3
L$XL+
L9{@u
L9{0t#H
L9o@t
LegalCopyright
LoadLibraryExA
Local\SM0:%d:%d:%hs
LogHr
LostModeMessage
M H1E
MdmCommon.DLL
MdmEnumerateUsers
MdmGetSidsByConnectedCids
MdmIsFindMyDeviceEnabled
memcpy
memset
Microsoft
Microsoft Corporation
Microsoft.Windows.DeviceDirectoryClient
Msg:[%ws] 
ntdll.dll
ntelD
o\$PH
oD$ f
oL$0f
OLEAUT32.dll
onecoreuap\shell\devicedirectory\devicedirectoryclient\ddccomimplementationsdesktop\ddccomimplementationsdesktop.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\ddccomimplementationsdesktop\ddccommandhandlerdesktop.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\ddccomimplementationsdesktop\ddctaskstatehandlerdesktop.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcaccounthelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcdeviceinfohelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcregistry.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddctaskschedulerwrapper.cpp
OpenSemaphoreW
OriginalFilename
oT$@f
OutputDebugStringW
p WAVAWH
ProductName
ProductVersion
QueryPerformanceCounter
RaiseException
RaiseFailFastException
RegCloseKey
RegCreateKeyExW
RegDeleteTreeW
RegDeleteValueW
RegisterDeviceAccountChange
RegisterDeviceConnectedToNetwork
RegisterDeviceLocationRightsChange
RegisterDevicePeriodic1
RegisterDevicePeriodic24
RegisterDevicePeriodic6
RegisterDeviceScreenOnOff
RegisterUserDevice
RegOpenKeyExW
RegSetValueExW
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReturnHr
RoGetActivationFactory
RtlCaptureContext
RtlDllShutdownInProgress
RtlLookupFunctionEntry
RtlVirtualUnwind
SetLastError
SetUnhandledExceptionFilter
SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\LostMode
StandardUsersCount
StringFileInfo
SYSTEM\CurrentControlSet\Control\Lsa\LockedDownSIDs
t"D8=
t$ UWATAVAWH
t$ WH
T$@E3
T$0H+
T$8H!\$8
t.HcC<
t^@8=P
t{HcL$ HcD$$H
t4A9~
TerminateProcess
TraceIntegrityCheckResult
Translation
UATAUAVAWH
UnhandledExceptionFilter
Unknown exception
UVWATAUAVAWH
UWAUAVAWH
VarFileInfo
VirtualProtect
VirtualQuery
VS_VERSION_INFO
VWAVH
WaitForSingleObject
WaitForSingleObjectEx
WATAUAVAWH
WilError_02
Windows.Data.Json.JsonValue
WindowsCreateStringReference
WTSEnumerateSessionsExW
WTSFreeMemory
WTSLogoffSession
x AVH
x UAVAWH
