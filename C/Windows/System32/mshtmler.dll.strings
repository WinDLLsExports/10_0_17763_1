 HTML Editing Component's Resource DLL
 Microsoft Corporation. All rights reserved.
!(select.selectedIndex < select.options.length - 1))
!= strMatch.substring(bestChar - 1, bestChar).toLowerCase())
!This program cannot be run in DOS mode.
"(getTextRange(elmSample))");
"getTextRange(elmSample))");
"popup");
"setFont(getTextRange(elmSample))");
"setFontStyle(getTextRange(elmSample))");
"setSelectStateCmd(cmdFontSize, getTextRange(elmSample))");
"txtFontStyle);" +
&& !txtFileName.fImageLoaded)
&& (strMatch.substring(0, g_nMatchLength).toLowerCase()
("None" == globalDoc.selection.type))
(true == range.queryCommandState(checkbox.value)))
.rdata
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.substring(bestChar - 1, bestChar).toLowerCase()
.text.toLowerCase())
.toLowerCase())
@.rsrc
|| (iDirection == -1 && !select.selectedIndex)))
||(txtURL.value == selProtocol.value + "//"))
+ L_ErrorNumber_Text + line + "\n"
+ message;
= "Border thickness must be a number between 0 and 999.";
= "Horizontal spacing must be a number between 0 and 999.";
= "Vertical spacing must be a number between 0 and 999.";
== "txt")
== ctlSelect.options[ctlSelect.selectedIndex]
== g_fOKEnabled)
== g_szLastFound.substring(0, g_nMatchLength).toLowerCase()))
040904B0
11.00.17763.1
11.00.17763.1 (WinBuild.160101.0800)
alert (str);
alert(L_BoderNotNumber_ErrorMessage);
alert(L_HorizontalNotNumber_ErrorMessage);
alert(L_InsideFrameset_ErrorMessage);
alert(L_VerticalNotNumber_ErrorMessage);
arrSelect["txtFontName"] = cmdFontName;
arrSelect["txtFontSize"] = cmdFontSize;
arrSelect["txtFontStyle"] = selFontStyle;
bestChar = 0;
bestChar = index2 + 1;
bestMatch = index;
break;
btnBrowse.onclick = new Function("btnBrowseClick()");
btnCancel.onclick = new Function("btnCancelClick()");
btnCustom.onclick = new Function("btnCustomClick()");
btnOK.disabled = false;
btnOK.disabled = g_fOKEnabled
btnOK.onclick = new Function("btnOKClick()");
callHelp(elm.parentElement);
callHelp(window.event.srcElement);
case 128:
case 129:
case 130:
case 136:
case 161:
case 162:
case 177:
case 178:
case 179:
case 2:
case 204:
case 238:
case 255:
checkbox.checked = (true == range.queryCommandState(checkbox.value));
chkUnderline.onclick = new Function("setCheckStateCmd(chkUnderline," +
cmdFontName.onchange = new Function("syncSelect2(cmdFontName, txtFontName);" +
cmdFontName.selectedIndex = -1;
cmdFontName.selectedIndex = bestMatch;
cmdFontSize.onchange = new Function("syncSelect2(cmdFontSize, txtFontSize);" +
CompanyName
ctlText.value = ctlSelect.options[ctlSelect.selectedIndex].text;
dialogHelper.fonts.item(index);
DIALOGS_ERR.JS
doc.all.tags("IFRAME").length == 0)
document.onhelp = new
document.onhelp = new Function("callHelp(window.event.srcElement)");
document.onmouseup = new Function("mouseClick()");
dupRange = range.duplicate();
dupRange.collapse(true);
dupRange.move( "Character", -1 );
EDLINK.JS
elmImage = globalDoc.all.c2eec6217e1a474eb649bfedd577334a;
elmImage = grngMaster.item(0);
elmImage.align = selAlignment.value;
elmImage.alt = txtAltText.value;
elmImage.border = 0;
elmImage.border = parseInt(txtBorder.value);
elmImage.hspace = 0;
elmImage.hspace = parseInt(txtHorizontal.value);
elmImage.removeAttribute("id");
elmImage.removeAttribute("src");
elmImage.src = "file://" + txtFileName.value;
elmImage.src = txtFileName.value;
elmImage.style.height = txtFileName.intImageHeight;
elmImage.style.width = txtFileName.intImageWidth;
elmImage.vspace = 0;
elmImage.vspace = parseInt(txtVertical.value);
elmLink = findAnchor(rngMaster);
elmOptions = elmSelect.options;
elmOptions);
elmParent = dupRange.parentElement();
elmParent.href = txtURL.value;
elmSelect = arrSelect[elmSource.id];
elmSelect.selectedIndex = findMatch(elmSource.value,
elmSelectedImage = grngMaster.item(0);
elmWorking = elmWorking.parentElement
elmWorking = range.parentElement()
else if ("Bold" == selFontStyle.value)
else if ("Italic" == selFontStyle.value)
else if (queryCommandState(cmdBold))
else if (queryCommandState(cmdItalic))
en-US
execCommand(cmdBold, false);
execCommand(cmdItalic, false);
FileDescription
FileVersion
fillFontSelect(cmdFontName);
fontList.sort(NoCaseCompare);
fontList[index] =
for (; index < optionsList.length; index++)
for (index = 0; index < fontList.length; index++)
for (index = 0; index < len; index++)
for (index = 0; index < optionsList.length; index++)
for (index = 0; index < select.options.length; index++)
for (index2 = bestChar; index2 < strMatch.length; index2++)
FORCHAR.JS
fReturn = true;
function bdyLoad()
function btnBrowseClick()
function btnCancelClick()
function btnCustomClick()
function btnOKClick()
function callHelp(elm)
function fillFontSelect(select)
function findAnchor(range)
function findMatch (strMatch, optionsList)
function getCheckStateCmd(checkbox, range)
function getFontColor()
function getFontStyle()
function getProtocolFromURL(strURL)
function GetSampleString()
function getSelectStateCmd(select, range)
function getTextRange(elm)
function HandleError(message, url, line)
function IsRangeEmpty( range )
function loadBdy()
function mouseClick()
function NoCaseCompare(str1, str2)
function searchText()
function setCheckStateCmd(checkbox, range)
function setFont(range)
function setFontColor(range)
function setFontStyle(range)
function setOKState()
function setSelectStateCmd(select, range)
function synchText()
function syncSelect(ctlSelect, ctlText)
function syncSelect2(ctlSelect, ctlText)
function syncTextFont()
function testTextValue(txtBox)
function TextboxKeyDown(textbox, select, iKeyCode)
function txtDefaultESC()
function updateProtocolSel()
function updateProtocolTxt()
function updateSample()
Function("callHelp(window.event.srcElement)");
Function("setFont(getTextRange(elmSample))");
Function("setSelectStateCmd(cmdFontSize, " +
Function("syncSelect(cmdFontName, txtFontName)");
Function("syncSelect(cmdFontSize, txtFontSize)");
Function("syncSelect(selFontStyle, txtFontStyle)");
fUseExecCommand = false;
g_bSearchList = false;
g_bSearchList = true;
g_fOKEnabled = !g_fOKEnabled;
g_fURLLoaded = true;
g_nLastFoundIndex = 0;
g_nLastFoundIndex = bestMatch;
g_nMatchLegth = bestChar;
g_nMatchLength = 0;
g_nTimeoutID = window.setTimeout("searchText()", 200);
g_szLastFound = "";
g_szLastFound = txtFontName.value;
getCheckStateCmd(chkUnderline, rngCurrent);
getFontColor();
getFontStyle();
getSelectStateCmd(cmdFontName, rngCurrent);
getSelectStateCmd(cmdFontSize, rngCurrent);
globalDoc.execCommand("AutoDetect");
grngMaster = getTextRange(elmImage);
grngMaster = globalDoc.selection.createRange();
grngMaster.collapse(false);
grngMaster.execCommand(cmdDelete);
grngMaster.execCommand(cmdInsertImage, false, idstr);
grngMaster.moveStart("character", -1);
grngMaster.select();
idstr = "\" id=\"c2eec6217e1a474eb649bfedd577334a";
if ( fUseExecCommand )
if ( iRight < 2 && dupRange.htmlText == "" )
if ( IsRangeEmpty( range ) )
if ( result == 0 )
if (!((iDirection == 1 &&
if (!g_fURLLoaded)
if (!testTextValue(txtBorder))
if (!testTextValue(txtHorizontal))
if (!testTextValue(txtVertical))
if (!txtFileName.fImageLoaded)
if ("" != elmSource.value)
if ("" != strFileName)
if ("" != txtBorder.value)
if ("" != txtHorizontal.value)
if ("" != txtVertical.value)
if ("" == getProtocolFromURL(txtFileName.value))
if ("" == txtURL.value)
if ("//" == (txtURL.value.substring(strProtocolTxt.length,
if ("A" == elmWorking.tagName.toUpperCase())
if ("BODY" != elm.tagName)
if ("Bold-Italic" == selFontStyle.value)
if ("Control" == globalDoc.selection.type)
if ("custom" == selColor.value)
if (("Text" == globalDoc.selection.type) ||
if ((("" == txtURL.value) || (txtURL.value == selProtocol.value)
if (0 < strSlashProts.indexOf(strProtocol))
if (0 < strSlashProts.indexOf(strProtocolSel))
if (-1 != cmdFontName.selectedIndex)
if (-1 != ctlSelect.selectedIndex)
if (-1 != selColor.selectedIndex)
if (-1 != select.selectedIndex)
if (1 == rngMaster.length)
if (38 == iKeyCode || 40 ==iKeyCode)
if (bestChar > 0 && index < optionsList.options.length - 2 &&
if (checkbox.checked !=
if (ctlText.value.toLowerCase()
if (doc.parentWindow.frames.length > 0 &&
if (elmImage.src != txtFileName.value)
if (elmParent.tagName.toUpperCase() == "A")
if (elmSelectedImage.src)
if (elmSelectedImage.tagName.toUpperCase() == "IMG")
if (event.keyCode == 27)
if (g_bSearchList)
if (g_fURLLoaded && (txtURL.value == txtURL.href))
if (g_szLastFound.toLowerCase() == txtFontName.value.toLowerCase())
if (globalDoc.selection.type == htmlSelectionControl
if (globalDoc.selection.type == htmlSelectionControl)
if (grngMaster.length == 1)
if (ideo1 != ideo2)
if (isNaN(val) || val < 0 || val > 999)
if (null != elm.helpid)
if (null != elmLink)
if (null != findAnchor(rangeWorking))
if (null != inputHref && "" != inputHref)
if (null != intColor)
if (null != range.queryCommandValue(select.id.substring(3)))
if (parseInt(selColor.value) != parseInt(intColor))
if (queryCommandState(cmdBold) && queryCommandState(cmdItalic))
if (result != 0)
if (rngLink.compareEndPoints("EndToEnd", rngMaster) > 0)
if (rngLink.compareEndPoints("StartToStart", rngMaster) < 0)
if (select.options[index].value ==
if (selProtocol.value != strProtocol)
if (str1.toLowerCase() < str2.toLowerCase())
if (str1.toLowerCase() > str2.toLowerCase())
if (strMatch.length == 0)
if (strMatch.length >= g_szLastFound.length
if (strMatch.substring(0, index2 + 1).toLowerCase() ==
if (strMatch.substring(index2, index2 + 1).toLowerCase() ==
if (TextboxKeyDown(elmSource, elmSelect, window.event.keyCode))
if (TextboxKeyDown(txtFontName, cmdFontName, window.event.keyCode))
if (true != queryCommandState(cmdBold))
if (true != queryCommandState(cmdItalic))
if (true == queryCommandState(cmdBold))
if (true == queryCommandState(cmdItalic))
if (txtBorder.value != "")
if (txtFileName.fImageLoaded)
if (txtFileName.value.length > 2040)
if (txtFontName.value != "")
if (txtHorizontal.value != "")
if (txtVertical.value != "")
if (window.event.button == 2)
if (window.event.srcElement == txtFontName ||
if (window.event.srcElement.id.substring(0,3)
index = 0;
index = g_nLastFoundIndex;
initialRange = range.duplicate();
INSIMAGE.JS
InternalName
Internet Explorer
iRight = dupRange.moveEnd( "Character", 2 );
L_Picture_DIALOG_FileTypes_Text, 8, L_Picture_DIALOG_Title_DialogTitle);
LegalCopyright
Microsoft
Microsoft Corporation
MSHTMLER.DLL
o&UlNH{
OleSelfRegister
optFontName = new Option();
optFontName.text = fontList[index];
optFontName.value = fontList[index];
optionsList.options[index + 1].text
OriginalFilename
parseInt(selColor.customColor));
parseInt(selColor.value));
ProductName
ProductVersion
r.moveToElementText(elm);
range = getTextRange(elmSample);
range.execCommand(checkbox.value, false);
range.execCommand(cmdCreateLink, false, txtURL.value);
range.execCommand(cmdForeColor, false,
range.execCommand(cmdUnlink, false);
range.execCommand(FontNameCommand, false, txtFontName.value);
range.execCommand(select.id.substring(3), false,
range.queryCommandValue(select.id.substring(3)))
range.setEndPoint( "StartToEnd", initialRange );
range.text = GetSampleString();
range.text = txtURL.value;
rangeWorking = range.duplicate();
rangeWorking.collapse(true);
rangeWorking.move("Character");
rangeWorking.moveEnd("character", 1);
result = tempRange.compareEndPoints( "StartToEnd", range );
return 0;
return 1;
return -1;
return bestMatch;
return elmWorking;
return false;
return findAnchor(rangeWorking);
return fReturn;
return ideo1 ? -1 : 1;
return null;
return r;
return strReturn;
return strURL.substring(0, strURL.indexOf(":") + 1);
return true;
return;
rngLink = getTextRange(elmLink);
rngMaster = getTextRange(rngMaster(0));
rngMaster = globalDoc.selection.createRange();
rngMaster.select();
rngMaster.setEndPoint("EndToEnd", rngLink);
rngMaster.setEndPoint("StartToStart", rngLink);
rngSample = getTextRange(elmSample);
rngSample.text = GetSampleString();
selAlignment.value = elmSelectedImage.align;
selColor.customColor = 0;
selColor.customColor = intColor;
selColor.customColor = result;
selColor.onchange = new Function("setFontColor(getTextRange(elmSample))");
selColor.selectedIndex = -1;
selColor.value = "custom";
selColor.value = intColor;
select.options(select.selectedIndex).text;
select.options[index] = optFontName;
select.options[select.selectedIndex].value);
select.selectedIndex = -1;
select.selectedIndex = index;
select.selectedIndex = select.selectedIndex + iDirection;
selFontStyle.onchange = new Function("syncSelect2(selFontStyle," +
selFontStyle.value = "Bold";
selFontStyle.value = "Bold-Italic";
selFontStyle.value = "Italic";
selFontStyle.value = "Regular";
selProtocol.onchange = new Function("updateProtocolTxt()");
selProtocol.value = "";
selProtocol.value = strProtocol;
setCheckStateCmd(chkUnderline, range);
setCheckStateCmd(chkUnderline, rngSample);
setFont(range);
setFont(rngSample);
setFontColor(getTextRange(elmSample));
setFontColor(range);
setFontColor(rngSample);
setFontStyle(range);
setFontStyle(rngSample);
setOKState();
setOKState(false);
setSelectStateCmd(cmdFontSize, range);
setSelectStateCmd(cmdFontSize, rngSample);
strFileName = dialogHelper.openfiledlgex("", "",
StringFileInfo
strOptText = optionsList.options[index].text;
strOptText.substring(0, index2 + 1)
strOptText.substring(index2, index2 + 1)
strProtocol = strProtocol + "//";
strProtocolSel = strProtocolSel + "//";
strProtocolTxt = strProtocolTxt + "//";
strProtocolTxt.length + 2)))
strReturn = "\u4e2d\u6587\u5b57\u578b\u7bc4\u4f8b";
strReturn = "\uac00\ub098\ub2e4\u0041\u0061\u0042\u0062\u0059\u0079\u005a\u007a";
strReturn = "Aa\u00f8\u00f1\u00fd";
strReturn = "Aa\u3042\u3041\u30a2\u30a1\u4e9c\u5b87";
strReturn = "AaBb\u00c1\u00e1\u00d4\u00f4";
strReturn = "AaBb\u011e\u011f\u015e\u015f";
strReturn = "AaBb\u0391\u03b1\u0392\u03b2";
strReturn = "AaBb\u0411\u0431\u0424\u0444";
strReturn = "AaBb\u05e0\u05e1\u05e9\u05ea";
strReturn = "AaBb\u0639\u0645\u0646\u062e\u0631\u0648\u0643\u0645";
strReturn = "Symbol";
strTempURL = txtURL.value.substring(strProtocolTxt.length);
switch (dialogHelper.getCharset(txtFontName.value))
syncSelect2(cmdFontName, txtFontName);
syncSelect2(cmdFontSize, txtFontSize);
syncSelect2(selFontStyle, txtFontStyle);
tempRange = range.duplicate();
textbox.select();
textbox.value =
Translation
txtAltText.onfocus = new Function("txtAltText.select()");
txtAltText.onkeypress = new Function("txtDefaultESC()");
txtAltText.value = elmSelectedImage.alt;
txtBorder.focus();
txtBorder.onfocus = new Function("txtBorder.select()");
txtBorder.onkeypress = new Function("txtDefaultESC()");
txtBorder.value = elmSelectedImage.border;
txtFileName.fImageLoaded = false;
txtFileName.fImageLoaded = true;
txtFileName.focus();
txtFileName.intImageHeight = 0;
txtFileName.intImageHeight = elmSelectedImage.height;
txtFileName.intImageWidth = 0;
txtFileName.intImageWidth = elmSelectedImage.width;
txtFileName.onfocus = new Function("txtFileName.select()");
txtFileName.onkeypress = new Function("txtDefaultESC()");
txtFileName.onpropertychange = new Function("setOKState(true)");
txtFileName.value = elmSelectedImage.src;
txtFileName.value = strFileName;
txtFileName.value = txtFileName.value.substring(0,2040);
txtFontName.focus();
txtFontName.onblur = new
txtFontName.onchange = new
txtFontName.onfocus = new Function("txtFontName.select()");
txtFontName.onkeypress = new Function("txtDefaultESC()");
txtFontName.onkeyup = new Function("syncTextFont()");
txtFontName.select();
txtFontSize.onblur = new
txtFontSize.onchange = new
txtFontSize.onfocus = new Function("txtFontSize.select()");
txtFontSize.onkeypress = new Function("txtDefaultESC()");
txtFontSize.onkeyup = new Function("synchText()");
txtFontStyle.onblur = new
txtFontStyle.onchange = new Function("setFontStyle" +
txtFontStyle.onfocus = new Function("txtFontStyle.select()");
txtFontStyle.onkeypress = new Function("txtDefaultESC()");
txtFontStyle.onkeyup = new Function("synchText()");
txtHorizontal.focus();
txtHorizontal.onfocus = new Function("txtHorizontal.select()");
txtHorizontal.onkeypress = new Function("txtDefaultESC()");
txtHorizontal.value = elmSelectedImage.hspace;
txtURL.focus();
txtURL.href = inputHref;
txtURL.onfocus = new Function("txtURL.select()");
txtURL.onkeypress = new Function("txtDefaultESC()");
txtURL.onpropertychange = new Function("if (event.propertyName == 'value') setOKState();");
txtURL.select();
txtURL.value = inputHref;
txtURL.value = strProtocolSel + strTempURL;
txtVertical.focus();
txtVertical.onfocus = new Function("txtVertical.select()");
txtVertical.onkeypress = new Function("txtDefaultESC()");
txtVertical.value = elmSelectedImage.vspace;
updateProtocolSel();
updateSample();
updateSample(getTextRange(elmSample));
var arrSelect = new Array();
var bestChar = 0;
var bestChar = g_nMatchLength;
var bestMatch = 0;
var bestMatch = g_nLastFoundIndex;
var cmdBold = "Bold";
var cmdCreateLink = "CreateLink";
var cmdDelete = "Delete";
var cmdForeColor = "ForeColor";
var cmdInsertImage = "InsertImage";
var cmdItalic = "Italic";
var cmdUnlink = "Unlink";
var doc = window.dialogArguments;
var dupRange;
var elmImage;
var elmLink;
var elmOptions;
var elmSelect;
var elmSelectedImage;
var elmSource = window.event.srcElement;
var elmWorking;
var fontList = new Array();
var FontNameCommand = "FontName";
var fReturn = false;
var fUseExecCommand = true;
var g_bSearchList = false;
var g_fOKEnabled = false;
var g_fURLLoaded = false;
var g_nLastFoundIndex = 0;
var g_nMatchLength = 0;
var g_nTimeoutID;
var g_szLastFound = "";
var globalDoc = window.dialogArguments;
var grngMaster = globalDoc.selection.createRange();
var htmlKeyAlt = 18;
var htmlSelectionControl = "Control";
var ideo1 = 1 != escape(str1.charAt(0)).length;
var ideo2 = 1 != escape(str2.charAt(0)).length;
var iDirection = (iKeyCode == 38) ? -1 : 1;
var index;
var index2;
var initialRange;
var inputHref = (elmLink.ownerDocument.documentMode >= 9) ? elmLink.getAttribute('href') : elmLink.href;
var intAlignment;
var intColor = range.queryCommandValue(cmdForeColor);
var intDefaultColor = 0;
var iRight;
var L_BoderNotNumber_ErrorMessage
var L_HorizontalNotNumber_ErrorMessage
var L_Picture_DIALOG_FileTypes_Text = "GIF (.gif)|*.gif|JPEG (.jpg, .jpeg, .jpe, .jfif)|*.jpg;*.jpeg;*.jpe;*.jfif|PNG (.png)|*.png|Bitmap (.bmp, .dib)|*.bmp;*.dib|Windows Metafile (.wmf)|*.wmf|ART (.art)|*.art|Icon (.ico)|*.ico|All Picture Files|*.gif;*.jpg;*.jpeg;*.jpe;*.jfif;*.png;*.bmp;*.dib;*.wmf;*.art;*.ico|All Files|*.*|";
var L_Picture_DIALOG_Title_DialogTitle = "Picture";
var L_VerticalNotNumber_ErrorMessage
var len = dialogHelper.fonts.length;
var optFontName;
var optionsList = cmdFontName.options;
var r = elm.parentTextEdit.createTextRange();
var range = globalDoc.selection.createRange();
var range = globalDoc;
var rangeWorking;
var result = dialogHelper.choosecolordlg(selColor.customColor);
var rngCurrent = doc;
var rngLink;
var rngMaster;
var rngSample = getTextRange(elmSample);
var str = L_Dialog_ErrorMessage + "\n\n"
var strFileName;
var strMatch = txtFontName.value;
var strOptText;
var strProtocol = getProtocolFromURL(txtURL.value);
var strProtocol = selProtocol.value;
var strProtocolSel = selProtocol.value;
var strProtocolTxt = getProtocolFromURL(txtURL.value);
var strReturn = "AaBbYyZz";
var strSlashProts = " file:ftp:http:https:";
var strTempURL;
var tempRange;
var val = parseInt(txtBox.value);
VarFileInfo
VS_VERSION_INFO
while (null != elmWorking)
while (rangeWorking.compareEndPoints("EndToEnd", range) < 0)
window.clearTimeout(g_nTimeoutID);
window.close();
window.event.srcElement == cmdFontName)
window.onerror = HandleError
window.showHelp(elm.helpfile, "" + parseInt(elm.helpid),
with (range)
